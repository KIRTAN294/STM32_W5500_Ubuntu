
Socket_Prog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a504  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  0800a6e8  0800a6e8  0000b6e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa8c  0800aa8c  0000c220  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800aa8c  0800aa8c  0000ba8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa94  0800aa94  0000c220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa94  0800aa94  0000ba94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aa98  0800aa98  0000ba98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000220  20000000  0800aa9c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000588  20000220  0800acbc  0000c220  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200007a8  0800acbc  0000c7a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c220  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015721  00000000  00000000  0000c250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e42  00000000  00000000  00021971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a8  00000000  00000000  000247b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000119a  00000000  00000000  00025e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002878f  00000000  00000000  00026ffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001651f  00000000  00000000  0004f789  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001061c5  00000000  00000000  00065ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016be6d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007120  00000000  00000000  0016beb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000093  00000000  00000000  00172fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000220 	.word	0x20000220
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a6cc 	.word	0x0800a6cc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000224 	.word	0x20000224
 800021c:	0800a6cc 	.word	0x0800a6cc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <Unpack_APP_flag_error_bms_can>:
}

#endif // BMS_CAN_USE_CANSTRUCT

uint32_t Unpack_APP_flag_error_bms_can(APP_flag_error_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	71fb      	strb	r3, [r7, #7]
  (void)dlc_;
  _m->APP_flag_undervolt = (_d[0] & (0x01U));
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	b2da      	uxtb	r2, r3
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	701a      	strb	r2, [r3, #0]
  _m->APP_flag_overvolt = (_d[1] & (0x01U));
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	705a      	strb	r2, [r3, #1]
  _m->APP_flag_scd_error = (_d[2] & (0x01U));
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	3302      	adds	r3, #2
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	709a      	strb	r2, [r3, #2]
  _m->APP_flag_highCurrent = (_d[3] & (0x01U));
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	3303      	adds	r3, #3
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	70da      	strb	r2, [r3, #3]
  _m->APP_flag_bat_lowTemp = (_d[4] & (0x01U));
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	3304      	adds	r3, #4
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	711a      	strb	r2, [r3, #4]
  _m->APP_flag_bat_highTemp = (_d[5] & (0x01U));
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	3305      	adds	r3, #5
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	b2da      	uxtb	r2, r3
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	715a      	strb	r2, [r3, #5]
  _m->APP_flag_bms_lowTemp = (_d[6] & (0x01U));
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	3306      	adds	r3, #6
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	719a      	strb	r2, [r3, #6]
  _m->APP_flag_bms_highTemp = (_d[7] & (0x01U));
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	3307      	adds	r3, #7
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	b2da      	uxtb	r2, r3
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	71da      	strb	r2, [r3, #7]
  _m->mon1.frame_cnt++;

  FMon_APP_flag_error_bms_can(&_m->mon1, APP_flag_error_CANID);
#endif // BMS_CAN_USE_DIAG_MONITORS

  return APP_flag_error_CANID;
 8000d24:	f44f 7388 	mov.w	r3, #272	@ 0x110
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3714      	adds	r7, #20
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <Unpack_BMS_Temp_Sensor_Present_bms_can>:
}

#endif // BMS_CAN_USE_CANSTRUCT

uint32_t Unpack_BMS_Temp_Sensor_Present_bms_can(BMS_Temp_Sensor_Present_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	4613      	mov	r3, r2
 8000d40:	71fb      	strb	r3, [r7, #7]
  (void)dlc_;
  _m->BMS_ambient_temp_sensor_present = (_d[0] & (0x01U));
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	701a      	strb	r2, [r3, #0]
  _m->BMS_Fet_temp_sensor_present = (_d[1] & (0x01U));
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	3301      	adds	r3, #1
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	705a      	strb	r2, [r3, #1]
  _m->BMS_ext_adc1_temp_sensor_present = (_d[2] & (0x01U));
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	3302      	adds	r3, #2
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	709a      	strb	r2, [r3, #2]
  _m->BMS_ext_adc2_temp_sensor_present = (_d[3] & (0x01U));
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	3303      	adds	r3, #3
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	70da      	strb	r2, [r3, #3]
  _m->BMS_afe_ts1_temp_sensor_present = (_d[4] & (0x01U));
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	3304      	adds	r3, #4
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	711a      	strb	r2, [r3, #4]
  _m->BMS_afe_ts3_temp_sensor_present = (_d[5] & (0x01U));
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	3305      	adds	r3, #5
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	b2da      	uxtb	r2, r3
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	715a      	strb	r2, [r3, #5]
  _m->BMS_gauge_temp_sensor_present = (_d[6] & (0x01U));
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	3306      	adds	r3, #6
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	b2da      	uxtb	r2, r3
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	719a      	strb	r2, [r3, #6]
  _m->mon1.frame_cnt++;

  FMon_BMS_Temp_Sensor_Present_bms_can(&_m->mon1, BMS_Temp_Sensor_Present_CANID);
#endif // BMS_CAN_USE_DIAG_MONITORS

  return BMS_Temp_Sensor_Present_CANID;
 8000db0:	4b03      	ldr	r3, [pc, #12]	@ (8000dc0 <Unpack_BMS_Temp_Sensor_Present_bms_can+0x8c>)
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3714      	adds	r7, #20
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	001ff110 	.word	0x001ff110

08000dc4 <Unpack_BAT_AFE_Fet_Status_bms_can>:
}

#endif // BMS_CAN_USE_CANSTRUCT

uint32_t Unpack_BAT_AFE_Fet_Status_bms_can(BAT_AFE_Fet_Status_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	71fb      	strb	r3, [r7, #7]
  (void)dlc_;
  _m->BAT_afe_chg = (_d[0] & (0x01U));
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	701a      	strb	r2, [r3, #0]
  _m->BAT_afe_dsg = (_d[1] & (0x01U));
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	3301      	adds	r3, #1
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	705a      	strb	r2, [r3, #1]
  _m->BAT_afe_pchg = (_d[2] & (0x01U));
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	3302      	adds	r3, #2
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	709a      	strb	r2, [r3, #2]
  _m->BAT_afe_pdsg = (_d[3] & (0x01U));
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	3303      	adds	r3, #3
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	70da      	strb	r2, [r3, #3]
  _m->BAT_afe_dchg = (_d[4] & (0x01U));
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	3304      	adds	r3, #4
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	711a      	strb	r2, [r3, #4]
  _m->BAT_afe_ddsg = (_d[5] & (0x01U));
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	3305      	adds	r3, #5
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	715a      	strb	r2, [r3, #5]
  _m->mon1.frame_cnt++;

  FMon_BAT_AFE_Fet_Status_bms_can(&_m->mon1, BAT_AFE_Fet_Status_CANID);
#endif // BMS_CAN_USE_DIAG_MONITORS

  return BAT_AFE_Fet_Status_CANID;
 8000e30:	4b03      	ldr	r3, [pc, #12]	@ (8000e40 <Unpack_BAT_AFE_Fet_Status_bms_can+0x7c>)
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	001ff310 	.word	0x001ff310
 8000e44:	00000000 	.word	0x00000000

08000e48 <Unpack_BAT_BMS_ExtTemp_bms_can>:
}

#endif // BMS_CAN_USE_CANSTRUCT

uint32_t Unpack_BAT_BMS_ExtTemp_bms_can(BAT_BMS_ExtTemp_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	4613      	mov	r3, r2
 8000e54:	71fb      	strb	r3, [r7, #7]
  (void)dlc_;
  _m->BAT_bms_afe_temp1_ro = ((_d[1] & (0xFFU)) << 8) | (_d[0] & (0xFFU));
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	021b      	lsls	r3, r3, #8
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	68ba      	ldr	r2, [r7, #8]
 8000e62:	7812      	ldrb	r2, [r2, #0]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	b29a      	uxth	r2, r3
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	801a      	strh	r2, [r3, #0]
#ifdef BMS_CAN_USE_SIGFLOAT
  _m->BAT_bms_afe_temp1_phys = (sigfloat_t)(BMS_CAN_BAT_bms_afe_temp1_ro_fromS(_m->BAT_bms_afe_temp1_ro));
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	881b      	ldrh	r3, [r3, #0]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fb7f 	bl	8000574 <__aeabi_i2d>
 8000e76:	a32d      	add	r3, pc, #180	@ (adr r3, 8000f2c <Unpack_BAT_BMS_ExtTemp_bms_can+0xe4>)
 8000e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7c:	f7ff fbe4 	bl	8000648 <__aeabi_dmul>
 8000e80:	4602      	mov	r2, r0
 8000e82:	460b      	mov	r3, r1
 8000e84:	4610      	mov	r0, r2
 8000e86:	4619      	mov	r1, r3
 8000e88:	f04f 0200 	mov.w	r2, #0
 8000e8c:	f04f 0300 	mov.w	r3, #0
 8000e90:	f7ff fa24 	bl	80002dc <__adddf3>
 8000e94:	4602      	mov	r2, r0
 8000e96:	460b      	mov	r3, r1
 8000e98:	68f9      	ldr	r1, [r7, #12]
 8000e9a:	e9c1 2302 	strd	r2, r3, [r1, #8]
#endif // BMS_CAN_USE_SIGFLOAT

  _m->BAT_bms_afe_temp2_ro = ((_d[3] & (0xFFU)) << 8) | (_d[2] & (0xFFU));
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	3303      	adds	r3, #3
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	021b      	lsls	r3, r3, #8
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	68ba      	ldr	r2, [r7, #8]
 8000eaa:	3202      	adds	r2, #2
 8000eac:	7812      	ldrb	r2, [r2, #0]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	821a      	strh	r2, [r3, #16]
#ifdef BMS_CAN_USE_SIGFLOAT
  _m->BAT_bms_afe_temp2_phys = (sigfloat_t)(BMS_CAN_BAT_bms_afe_temp2_ro_fromS(_m->BAT_bms_afe_temp2_ro));
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	8a1b      	ldrh	r3, [r3, #16]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff fb5a 	bl	8000574 <__aeabi_i2d>
 8000ec0:	a31a      	add	r3, pc, #104	@ (adr r3, 8000f2c <Unpack_BAT_BMS_ExtTemp_bms_can+0xe4>)
 8000ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec6:	f7ff fbbf 	bl	8000648 <__aeabi_dmul>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	460b      	mov	r3, r1
 8000ece:	4610      	mov	r0, r2
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f04f 0200 	mov.w	r2, #0
 8000ed6:	f04f 0300 	mov.w	r3, #0
 8000eda:	f7ff f9ff 	bl	80002dc <__adddf3>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	68f9      	ldr	r1, [r7, #12]
 8000ee4:	e9c1 2306 	strd	r2, r3, [r1, #24]
#endif // BMS_CAN_USE_SIGFLOAT

  _m->BAT_bms_ext_temp1 = ((_d[5] & (0xFFU)) << 8) | (_d[4] & (0xFFU));
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	3305      	adds	r3, #5
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	021b      	lsls	r3, r3, #8
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	68ba      	ldr	r2, [r7, #8]
 8000ef4:	3204      	adds	r2, #4
 8000ef6:	7812      	ldrb	r2, [r2, #0]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	b21a      	sxth	r2, r3
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	841a      	strh	r2, [r3, #32]
  _m->BAT_bms_ext_temp2 = ((_d[7] & (0xFFU)) << 8) | (_d[6] & (0xFFU));
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	3307      	adds	r3, #7
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	021b      	lsls	r3, r3, #8
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	68ba      	ldr	r2, [r7, #8]
 8000f0e:	3206      	adds	r2, #6
 8000f10:	7812      	ldrb	r2, [r2, #0]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	b21a      	sxth	r2, r3
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	845a      	strh	r2, [r3, #34]	@ 0x22
  _m->mon1.frame_cnt++;

  FMon_BAT_BMS_ExtTemp_bms_can(&_m->mon1, BAT_BMS_ExtTemp_CANID);
#endif // BMS_CAN_USE_DIAG_MONITORS

  return BAT_BMS_ExtTemp_CANID;
 8000f1c:	4b02      	ldr	r3, [pc, #8]	@ (8000f28 <Unpack_BAT_BMS_ExtTemp_bms_can+0xe0>)
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	001ff611 	.word	0x001ff611
 8000f2c:	47ae147b 	.word	0x47ae147b
 8000f30:	3f847ae1 	.word	0x3f847ae1
 8000f34:	00000000 	.word	0x00000000

08000f38 <Unpack_BAT_BMS_IntTemp_bms_can>:
}

#endif // BMS_CAN_USE_CANSTRUCT

uint32_t Unpack_BAT_BMS_IntTemp_bms_can(BAT_BMS_IntTemp_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	4613      	mov	r3, r2
 8000f44:	71fb      	strb	r3, [r7, #7]
  (void)dlc_;
  _m->BAT_bms_ambient_temp_ro = ((_d[1] & (0xFFU)) << 8) | (_d[0] & (0xFFU));
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	021b      	lsls	r3, r3, #8
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	68ba      	ldr	r2, [r7, #8]
 8000f52:	7812      	ldrb	r2, [r2, #0]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	b21a      	sxth	r2, r3
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	801a      	strh	r2, [r3, #0]
#ifdef BMS_CAN_USE_SIGFLOAT
  _m->BAT_bms_ambient_temp_phys = (sigfloat_t)(BMS_CAN_BAT_bms_ambient_temp_ro_fromS(_m->BAT_bms_ambient_temp_ro));
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fb05 	bl	8000574 <__aeabi_i2d>
 8000f6a:	a322      	add	r3, pc, #136	@ (adr r3, 8000ff4 <Unpack_BAT_BMS_IntTemp_bms_can+0xbc>)
 8000f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f70:	f7ff fb6a 	bl	8000648 <__aeabi_dmul>
 8000f74:	4602      	mov	r2, r0
 8000f76:	460b      	mov	r3, r1
 8000f78:	4610      	mov	r0, r2
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	f04f 0200 	mov.w	r2, #0
 8000f80:	f04f 0300 	mov.w	r3, #0
 8000f84:	f7ff f9aa 	bl	80002dc <__adddf3>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	68f9      	ldr	r1, [r7, #12]
 8000f8e:	e9c1 2302 	strd	r2, r3, [r1, #8]
#endif // BMS_CAN_USE_SIGFLOAT

  _m->BAT_bms_fets_temp_ro = ((_d[3] & (0xFFU)) << 8) | (_d[2] & (0xFFU));
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	3303      	adds	r3, #3
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	021b      	lsls	r3, r3, #8
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	68ba      	ldr	r2, [r7, #8]
 8000f9e:	3202      	adds	r2, #2
 8000fa0:	7812      	ldrb	r2, [r2, #0]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	b21a      	sxth	r2, r3
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	821a      	strh	r2, [r3, #16]
#ifdef BMS_CAN_USE_SIGFLOAT
  _m->BAT_bms_fets_temp_phys = (sigfloat_t)(BMS_CAN_BAT_bms_fets_temp_ro_fromS(_m->BAT_bms_fets_temp_ro));
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fade 	bl	8000574 <__aeabi_i2d>
 8000fb8:	a30e      	add	r3, pc, #56	@ (adr r3, 8000ff4 <Unpack_BAT_BMS_IntTemp_bms_can+0xbc>)
 8000fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fbe:	f7ff fb43 	bl	8000648 <__aeabi_dmul>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	4610      	mov	r0, r2
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	f04f 0300 	mov.w	r3, #0
 8000fd2:	f7ff f983 	bl	80002dc <__adddf3>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	68f9      	ldr	r1, [r7, #12]
 8000fdc:	e9c1 2306 	strd	r2, r3, [r1, #24]
  _m->mon1.frame_cnt++;

  FMon_BAT_BMS_IntTemp_bms_can(&_m->mon1, BAT_BMS_IntTemp_CANID);
#endif // BMS_CAN_USE_DIAG_MONITORS

  return BAT_BMS_IntTemp_CANID;
 8000fe0:	4b03      	ldr	r3, [pc, #12]	@ (8000ff0 <Unpack_BAT_BMS_IntTemp_bms_can+0xb8>)
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	f3af 8000 	nop.w
 8000ff0:	001ff612 	.word	0x001ff612
 8000ff4:	47ae147b 	.word	0x47ae147b
 8000ff8:	3f847ae1 	.word	0x3f847ae1

08000ffc <Unpack_BAT_BMS_Charger_Load_Status_bms_can>:
}

#endif // BMS_CAN_USE_CANSTRUCT

uint32_t Unpack_BAT_BMS_Charger_Load_Status_bms_can(BAT_BMS_Charger_Load_Status_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	4613      	mov	r3, r2
 8001008:	71fb      	strb	r3, [r7, #7]
  (void)dlc_;
  _m->APP_bms_load_detect = (_d[0] & (0x01U));
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	b2da      	uxtb	r2, r3
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	701a      	strb	r2, [r3, #0]
  _m->APP_bms_charger_detect = (_d[1] & (0x01U));
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	3301      	adds	r3, #1
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	b2da      	uxtb	r2, r3
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	705a      	strb	r2, [r3, #1]
  _m->mon1.frame_cnt++;

  FMon_BAT_BMS_Charger_Load_Status_bms_can(&_m->mon1, BAT_BMS_Charger_Load_Status_CANID);
#endif // BMS_CAN_USE_DIAG_MONITORS

  return BAT_BMS_Charger_Load_Status_CANID;
 8001028:	4b03      	ldr	r3, [pc, #12]	@ (8001038 <Unpack_BAT_BMS_Charger_Load_Status_bms_can+0x3c>)
}
 800102a:	4618      	mov	r0, r3
 800102c:	3714      	adds	r7, #20
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	001ff615 	.word	0x001ff615
 800103c:	00000000 	.word	0x00000000

08001040 <Unpack_BAT_GAUGE_OvrVIEW_bms_can>:
}

#endif // BMS_CAN_USE_CANSTRUCT

uint32_t Unpack_BAT_GAUGE_OvrVIEW_bms_can(BAT_GAUGE_OvrVIEW_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	4613      	mov	r3, r2
 800104c:	71fb      	strb	r3, [r7, #7]
  (void)dlc_;
  _m->BAT_gauge_SoC = (_d[0] & (0xFFU));
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	781a      	ldrb	r2, [r3, #0]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	701a      	strb	r2, [r3, #0]
  _m->BAT_gaige_SoH = (_d[1] & (0xFFU));
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	3301      	adds	r3, #1
 800105a:	781a      	ldrb	r2, [r3, #0]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	705a      	strb	r2, [r3, #1]
  _m->BAT_gauge_cycleCount = ((_d[3] & (0xFFU)) << 8) | (_d[2] & (0xFFU));
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	3303      	adds	r3, #3
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	021b      	lsls	r3, r3, #8
 8001068:	b29b      	uxth	r3, r3
 800106a:	68ba      	ldr	r2, [r7, #8]
 800106c:	3202      	adds	r2, #2
 800106e:	7812      	ldrb	r2, [r2, #0]
 8001070:	4313      	orrs	r3, r2
 8001072:	b29a      	uxth	r2, r3
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	805a      	strh	r2, [r3, #2]
  _m->BAT_gauge_remainingCap_ro = ((_d[5] & (0xFFU)) << 8) | (_d[4] & (0xFFU));
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	3305      	adds	r3, #5
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	021b      	lsls	r3, r3, #8
 8001080:	b29b      	uxth	r3, r3
 8001082:	68ba      	ldr	r2, [r7, #8]
 8001084:	3204      	adds	r2, #4
 8001086:	7812      	ldrb	r2, [r2, #0]
 8001088:	4313      	orrs	r3, r2
 800108a:	b29a      	uxth	r2, r3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	809a      	strh	r2, [r3, #4]
#ifdef BMS_CAN_USE_SIGFLOAT
  _m->BAT_gauge_remainingCap_phys = (sigfloat_t)(BMS_CAN_BAT_gauge_remainingCap_ro_fromS(_m->BAT_gauge_remainingCap_ro));
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	889b      	ldrh	r3, [r3, #4]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fa6d 	bl	8000574 <__aeabi_i2d>
 800109a:	a30e      	add	r3, pc, #56	@ (adr r3, 80010d4 <Unpack_BAT_GAUGE_OvrVIEW_bms_can+0x94>)
 800109c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a0:	f7ff fad2 	bl	8000648 <__aeabi_dmul>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	4610      	mov	r0, r2
 80010aa:	4619      	mov	r1, r3
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	f04f 0300 	mov.w	r3, #0
 80010b4:	f7ff f912 	bl	80002dc <__adddf3>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	68f9      	ldr	r1, [r7, #12]
 80010be:	e9c1 2302 	strd	r2, r3, [r1, #8]
  _m->mon1.frame_cnt++;

  FMon_BAT_GAUGE_OvrVIEW_bms_can(&_m->mon1, BAT_GAUGE_OvrVIEW_CANID);
#endif // BMS_CAN_USE_DIAG_MONITORS

  return BAT_GAUGE_OvrVIEW_CANID;
 80010c2:	4b03      	ldr	r3, [pc, #12]	@ (80010d0 <Unpack_BAT_GAUGE_OvrVIEW_bms_can+0x90>)
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	f3af 8000 	nop.w
 80010d0:	001ff810 	.word	0x001ff810
 80010d4:	d2f1a9fc 	.word	0xd2f1a9fc
 80010d8:	3f50624d 	.word	0x3f50624d
 80010dc:	00000000 	.word	0x00000000

080010e0 <Unpack_BAT_GAUGE_ViT_bms_can>:
}

#endif // BMS_CAN_USE_CANSTRUCT

uint32_t Unpack_BAT_GAUGE_ViT_bms_can(BAT_GAUGE_ViT_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	4613      	mov	r3, r2
 80010ec:	71fb      	strb	r3, [r7, #7]
  (void)dlc_;
  _m->BAT_gauge_vPack_ro = ((_d[1] & (0xFFU)) << 8) | (_d[0] & (0xFFU));
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	3301      	adds	r3, #1
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	021b      	lsls	r3, r3, #8
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	68ba      	ldr	r2, [r7, #8]
 80010fa:	7812      	ldrb	r2, [r2, #0]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	b29a      	uxth	r2, r3
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	801a      	strh	r2, [r3, #0]
#ifdef BMS_CAN_USE_SIGFLOAT
  _m->BAT_gauge_vPack_phys = (sigfloat_t)(BMS_CAN_BAT_gauge_vPack_ro_fromS(_m->BAT_gauge_vPack_ro));
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	881b      	ldrh	r3, [r3, #0]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fa33 	bl	8000574 <__aeabi_i2d>
 800110e:	a333      	add	r3, pc, #204	@ (adr r3, 80011dc <Unpack_BAT_GAUGE_ViT_bms_can+0xfc>)
 8001110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001114:	f7ff fa98 	bl	8000648 <__aeabi_dmul>
 8001118:	4602      	mov	r2, r0
 800111a:	460b      	mov	r3, r1
 800111c:	4610      	mov	r0, r2
 800111e:	4619      	mov	r1, r3
 8001120:	f04f 0200 	mov.w	r2, #0
 8001124:	f04f 0300 	mov.w	r3, #0
 8001128:	f7ff f8d8 	bl	80002dc <__adddf3>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	68f9      	ldr	r1, [r7, #12]
 8001132:	e9c1 2302 	strd	r2, r3, [r1, #8]
#endif // BMS_CAN_USE_SIGFLOAT

  _m->BAT_gauge_iPack_ro = ((_d[3] & (0xFFU)) << 8) | (_d[2] & (0xFFU));
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	3303      	adds	r3, #3
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	021b      	lsls	r3, r3, #8
 800113e:	b29b      	uxth	r3, r3
 8001140:	68ba      	ldr	r2, [r7, #8]
 8001142:	3202      	adds	r2, #2
 8001144:	7812      	ldrb	r2, [r2, #0]
 8001146:	4313      	orrs	r3, r2
 8001148:	b29b      	uxth	r3, r3
 800114a:	b21a      	sxth	r2, r3
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	821a      	strh	r2, [r3, #16]
#ifdef BMS_CAN_USE_SIGFLOAT
  _m->BAT_gauge_iPack_phys = (sigfloat_t)(BMS_CAN_BAT_gauge_iPack_ro_fromS(_m->BAT_gauge_iPack_ro));
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff fa0c 	bl	8000574 <__aeabi_i2d>
 800115c:	a321      	add	r3, pc, #132	@ (adr r3, 80011e4 <Unpack_BAT_GAUGE_ViT_bms_can+0x104>)
 800115e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001162:	f7ff fa71 	bl	8000648 <__aeabi_dmul>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	4610      	mov	r0, r2
 800116c:	4619      	mov	r1, r3
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	f04f 0300 	mov.w	r3, #0
 8001176:	f7ff f8b1 	bl	80002dc <__adddf3>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	68f9      	ldr	r1, [r7, #12]
 8001180:	e9c1 2306 	strd	r2, r3, [r1, #24]
#endif // BMS_CAN_USE_SIGFLOAT

  _m->BAT_gauge_tPack_ro = ((_d[5] & (0xFFU)) << 8) | (_d[4] & (0xFFU));
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	3305      	adds	r3, #5
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	021b      	lsls	r3, r3, #8
 800118c:	b29b      	uxth	r3, r3
 800118e:	68ba      	ldr	r2, [r7, #8]
 8001190:	3204      	adds	r2, #4
 8001192:	7812      	ldrb	r2, [r2, #0]
 8001194:	4313      	orrs	r3, r2
 8001196:	b29a      	uxth	r2, r3
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	841a      	strh	r2, [r3, #32]
#ifdef BMS_CAN_USE_SIGFLOAT
  _m->BAT_gauge_tPack_phys = (sigfloat_t)(BMS_CAN_BAT_gauge_tPack_ro_fromS(_m->BAT_gauge_tPack_ro));
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	8c1b      	ldrh	r3, [r3, #32]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff f9e7 	bl	8000574 <__aeabi_i2d>
 80011a6:	a30f      	add	r3, pc, #60	@ (adr r3, 80011e4 <Unpack_BAT_GAUGE_ViT_bms_can+0x104>)
 80011a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ac:	f7ff fa4c 	bl	8000648 <__aeabi_dmul>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4610      	mov	r0, r2
 80011b6:	4619      	mov	r1, r3
 80011b8:	f04f 0200 	mov.w	r2, #0
 80011bc:	f04f 0300 	mov.w	r3, #0
 80011c0:	f7ff f88c 	bl	80002dc <__adddf3>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	68f9      	ldr	r1, [r7, #12]
 80011ca:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
  _m->mon1.frame_cnt++;

  FMon_BAT_GAUGE_ViT_bms_can(&_m->mon1, BAT_GAUGE_ViT_CANID);
#endif // BMS_CAN_USE_DIAG_MONITORS

  return BAT_GAUGE_ViT_CANID;
 80011ce:	4b02      	ldr	r3, [pc, #8]	@ (80011d8 <Unpack_BAT_GAUGE_ViT_bms_can+0xf8>)
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	001ff820 	.word	0x001ff820
 80011dc:	d2f1a9fc 	.word	0xd2f1a9fc
 80011e0:	3f50624d 	.word	0x3f50624d
 80011e4:	47ae147b 	.word	0x47ae147b
 80011e8:	3f847ae1 	.word	0x3f847ae1

080011ec <bytesToFloat>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float bytesToFloat(uint8_t *bytes) {
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]

    float value;
    memcpy(&value, bytes, sizeof(float));
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	60fb      	str	r3, [r7, #12]
    return value;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	ee07 3a90 	vmov	s15, r3
}
 8001200:	eeb0 0a67 	vmov.f32	s0, s15
 8001204:	3714      	adds	r7, #20
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
	...

08001210 <W5500_Init>:
void W5500_WriteByte(uint8_t byte);
void W5500_ReadBuff(uint8_t *buff , uint16_t len);
void W5500_WriteBuff(uint8_t *buff ,uint16_t len);


void W5500_Init(){
 8001210:	b590      	push	{r4, r7, lr}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0


	HAL_GPIO_WritePin(RST_PIN_GPIO_Port,RST_PIN_Pin,GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	2140      	movs	r1, #64	@ 0x40
 800121a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800121e:	f003 fd9b 	bl	8004d58 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001222:	2001      	movs	r0, #1
 8001224:	f002 faa0 	bl	8003768 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PIN_GPIO_Port,RST_PIN_Pin,GPIO_PIN_SET);
 8001228:	2201      	movs	r2, #1
 800122a:	2140      	movs	r1, #64	@ 0x40
 800122c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001230:	f003 fd92 	bl	8004d58 <HAL_GPIO_WritePin>

    reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 8001234:	4910      	ldr	r1, [pc, #64]	@ (8001278 <W5500_Init+0x68>)
 8001236:	4811      	ldr	r0, [pc, #68]	@ (800127c <W5500_Init+0x6c>)
 8001238:	f002 f866 	bl	8003308 <reg_wizchip_cs_cbfunc>
    reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 800123c:	4910      	ldr	r1, [pc, #64]	@ (8001280 <W5500_Init+0x70>)
 800123e:	4811      	ldr	r0, [pc, #68]	@ (8001284 <W5500_Init+0x74>)
 8001240:	f002 f888 	bl	8003354 <reg_wizchip_spi_cbfunc>
    reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 8001244:	4910      	ldr	r1, [pc, #64]	@ (8001288 <W5500_Init+0x78>)
 8001246:	4811      	ldr	r0, [pc, #68]	@ (800128c <W5500_Init+0x7c>)
 8001248:	f002 f8b0 	bl	80033ac <reg_wizchip_spiburst_cbfunc>

    uint8_t memsize[2][8] = {{2,2,2,2,2,2,2,2}, {2,2,2,2,2,2,2,2}};
 800124c:	4b10      	ldr	r3, [pc, #64]	@ (8001290 <W5500_Init+0x80>)
 800124e:	463c      	mov	r4, r7
 8001250:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001252:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if(wizchip_init(memsize[0], memsize[1]) < 0)
 8001256:	463b      	mov	r3, r7
 8001258:	f103 0208 	add.w	r2, r3, #8
 800125c:	463b      	mov	r3, r7
 800125e:	4611      	mov	r1, r2
 8001260:	4618      	mov	r0, r3
 8001262:	f002 f91b 	bl	800349c <wizchip_init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	da01      	bge.n	8001270 <W5500_Init+0x60>
    {
    	Error_Handler();
 800126c:	f000 fe46 	bl	8001efc <Error_Handler>
    }

}
 8001270:	bf00      	nop
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	bd90      	pop	{r4, r7, pc}
 8001278:	080012ad 	.word	0x080012ad
 800127c:	08001295 	.word	0x08001295
 8001280:	080012e9 	.word	0x080012e9
 8001284:	080012c5 	.word	0x080012c5
 8001288:	0800134d 	.word	0x0800134d
 800128c:	0800130d 	.word	0x0800130d
 8001290:	0800a6e8 	.word	0x0800a6e8

08001294 <W5500_Select>:
void W5500_Select(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PIN_GPIO_Port,CS_PIN_Pin,GPIO_PIN_RESET);
 8001298:	2200      	movs	r2, #0
 800129a:	2102      	movs	r1, #2
 800129c:	4802      	ldr	r0, [pc, #8]	@ (80012a8 <W5500_Select+0x14>)
 800129e:	f003 fd5b 	bl	8004d58 <HAL_GPIO_WritePin>
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	48000400 	.word	0x48000400

080012ac <W5500_Unselect>:

void W5500_Unselect(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_SET);
 80012b0:	2201      	movs	r2, #1
 80012b2:	2102      	movs	r1, #2
 80012b4:	4802      	ldr	r0, [pc, #8]	@ (80012c0 <W5500_Unselect+0x14>)
 80012b6:	f003 fd4f 	bl	8004d58 <HAL_GPIO_WritePin>
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	48000400 	.word	0x48000400

080012c4 <W5500_ReadByte>:

uint8_t W5500_ReadByte(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
    uint8_t byte;
    HAL_SPI_Receive(&hspi2, &byte, 1, HAL_MAX_DELAY);
 80012ca:	1df9      	adds	r1, r7, #7
 80012cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012d0:	2201      	movs	r2, #1
 80012d2:	4804      	ldr	r0, [pc, #16]	@ (80012e4 <W5500_ReadByte+0x20>)
 80012d4:	f004 ff8b 	bl	80061ee <HAL_SPI_Receive>
    return byte;
 80012d8:	79fb      	ldrb	r3, [r7, #7]
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	200002a0 	.word	0x200002a0

080012e8 <W5500_WriteByte>:
void W5500_WriteByte(uint8_t byte)

{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi2, &byte, 1, HAL_MAX_DELAY);
 80012f2:	1df9      	adds	r1, r7, #7
 80012f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012f8:	2201      	movs	r2, #1
 80012fa:	4803      	ldr	r0, [pc, #12]	@ (8001308 <W5500_WriteByte+0x20>)
 80012fc:	f004 fe01 	bl	8005f02 <HAL_SPI_Transmit>
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	200002a0 	.word	0x200002a0

0800130c <W5500_ReadBuff>:

void W5500_ReadBuff(uint8_t* buff, uint16_t len)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	807b      	strh	r3, [r7, #2]
	 spiRxComplete = 0;
 8001318:	4b0a      	ldr	r3, [pc, #40]	@ (8001344 <W5500_ReadBuff+0x38>)
 800131a:	2200      	movs	r2, #0
 800131c:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Receive_DMA(&hspi2, buff, len);
 800131e:	887b      	ldrh	r3, [r7, #2]
 8001320:	461a      	mov	r2, r3
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	4808      	ldr	r0, [pc, #32]	@ (8001348 <W5500_ReadBuff+0x3c>)
 8001326:	f005 fba7 	bl	8006a78 <HAL_SPI_Receive_DMA>
    while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 800132a:	bf00      	nop
 800132c:	4806      	ldr	r0, [pc, #24]	@ (8001348 <W5500_ReadBuff+0x3c>)
 800132e:	f005 fe7b 	bl	8007028 <HAL_SPI_GetState>
 8001332:	4603      	mov	r3, r0
 8001334:	2b01      	cmp	r3, #1
 8001336:	d1f9      	bne.n	800132c <W5500_ReadBuff+0x20>

}
 8001338:	bf00      	nop
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000007 	.word	0x20000007
 8001348:	200002a0 	.word	0x200002a0

0800134c <W5500_WriteBuff>:
void W5500_WriteBuff(uint8_t* buff, uint16_t len)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	807b      	strh	r3, [r7, #2]
	 spiTxComplete = 0;
 8001358:	4b0a      	ldr	r3, [pc, #40]	@ (8001384 <W5500_WriteBuff+0x38>)
 800135a:	2200      	movs	r2, #0
 800135c:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit_DMA(&hspi2, buff, len);
 800135e:	887b      	ldrh	r3, [r7, #2]
 8001360:	461a      	mov	r2, r3
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	4808      	ldr	r0, [pc, #32]	@ (8001388 <W5500_WriteBuff+0x3c>)
 8001366:	f005 fa99 	bl	800689c <HAL_SPI_Transmit_DMA>
    while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 800136a:	bf00      	nop
 800136c:	4806      	ldr	r0, [pc, #24]	@ (8001388 <W5500_WriteBuff+0x3c>)
 800136e:	f005 fe5b 	bl	8007028 <HAL_SPI_GetState>
 8001372:	4603      	mov	r3, r0
 8001374:	2b01      	cmp	r3, #1
 8001376:	d1f9      	bne.n	800136c <W5500_WriteBuff+0x20>

}
 8001378:	bf00      	nop
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000006 	.word	0x20000006
 8001388:	200002a0 	.word	0x200002a0

0800138c <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
    if(hspi->Instance == SPI2)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a05      	ldr	r2, [pc, #20]	@ (80013b0 <HAL_SPI_TxCpltCallback+0x24>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d102      	bne.n	80013a4 <HAL_SPI_TxCpltCallback+0x18>
    {
    	 spiTxComplete = 1;
 800139e:	4b05      	ldr	r3, [pc, #20]	@ (80013b4 <HAL_SPI_TxCpltCallback+0x28>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	701a      	strb	r2, [r3, #0]
    }
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	40003800 	.word	0x40003800
 80013b4:	20000006 	.word	0x20000006

080013b8 <HAL_SPI_RxCpltCallback>:
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
    if(hspi->Instance == SPI2)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a05      	ldr	r2, [pc, #20]	@ (80013dc <HAL_SPI_RxCpltCallback+0x24>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d102      	bne.n	80013d0 <HAL_SPI_RxCpltCallback+0x18>
    {
    	 spiRxComplete = 1;
 80013ca:	4b05      	ldr	r3, [pc, #20]	@ (80013e0 <HAL_SPI_RxCpltCallback+0x28>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	701a      	strb	r2, [r3, #0]
    }
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	40003800 	.word	0x40003800
 80013e0:	20000007 	.word	0x20000007
 80013e4:	00000000 	.word	0x00000000

080013e8 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 80013e8:	b5b0      	push	{r4, r5, r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]

	if(HAL_FDCAN_GetRxMessage(hfdcan,FDCAN_RX_FIFO0,&RxHeader,RxData)== HAL_OK){
 80013f2:	4b8b      	ldr	r3, [pc, #556]	@ (8001620 <HAL_FDCAN_RxFifo0Callback+0x238>)
 80013f4:	4a8b      	ldr	r2, [pc, #556]	@ (8001624 <HAL_FDCAN_RxFifo0Callback+0x23c>)
 80013f6:	2140      	movs	r1, #64	@ 0x40
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f002 ff35 	bl	8004268 <HAL_FDCAN_GetRxMessage>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	f040 819f 	bne.w	8001744 <HAL_FDCAN_RxFifo0Callback+0x35c>

		switch(RxHeader.Identifier){
 8001406:	4b87      	ldr	r3, [pc, #540]	@ (8001624 <HAL_FDCAN_RxFifo0Callback+0x23c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a87      	ldr	r2, [pc, #540]	@ (8001628 <HAL_FDCAN_RxFifo0Callback+0x240>)
 800140c:	4293      	cmp	r3, r2
 800140e:	f000 80ab 	beq.w	8001568 <HAL_FDCAN_RxFifo0Callback+0x180>
 8001412:	4a85      	ldr	r2, [pc, #532]	@ (8001628 <HAL_FDCAN_RxFifo0Callback+0x240>)
 8001414:	4293      	cmp	r3, r2
 8001416:	f200 8165 	bhi.w	80016e4 <HAL_FDCAN_RxFifo0Callback+0x2fc>
 800141a:	4a84      	ldr	r2, [pc, #528]	@ (800162c <HAL_FDCAN_RxFifo0Callback+0x244>)
 800141c:	4293      	cmp	r3, r2
 800141e:	f000 8094 	beq.w	800154a <HAL_FDCAN_RxFifo0Callback+0x162>
 8001422:	4a82      	ldr	r2, [pc, #520]	@ (800162c <HAL_FDCAN_RxFifo0Callback+0x244>)
 8001424:	4293      	cmp	r3, r2
 8001426:	f200 815d 	bhi.w	80016e4 <HAL_FDCAN_RxFifo0Callback+0x2fc>
 800142a:	4a81      	ldr	r2, [pc, #516]	@ (8001630 <HAL_FDCAN_RxFifo0Callback+0x248>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d06e      	beq.n	800150e <HAL_FDCAN_RxFifo0Callback+0x126>
 8001430:	4a7f      	ldr	r2, [pc, #508]	@ (8001630 <HAL_FDCAN_RxFifo0Callback+0x248>)
 8001432:	4293      	cmp	r3, r2
 8001434:	f200 8156 	bhi.w	80016e4 <HAL_FDCAN_RxFifo0Callback+0x2fc>
 8001438:	4a7e      	ldr	r2, [pc, #504]	@ (8001634 <HAL_FDCAN_RxFifo0Callback+0x24c>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d03a      	beq.n	80014b4 <HAL_FDCAN_RxFifo0Callback+0xcc>
 800143e:	4a7d      	ldr	r2, [pc, #500]	@ (8001634 <HAL_FDCAN_RxFifo0Callback+0x24c>)
 8001440:	4293      	cmp	r3, r2
 8001442:	f200 814f 	bhi.w	80016e4 <HAL_FDCAN_RxFifo0Callback+0x2fc>
 8001446:	4a7c      	ldr	r2, [pc, #496]	@ (8001638 <HAL_FDCAN_RxFifo0Callback+0x250>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d042      	beq.n	80014d2 <HAL_FDCAN_RxFifo0Callback+0xea>
 800144c:	4a7a      	ldr	r2, [pc, #488]	@ (8001638 <HAL_FDCAN_RxFifo0Callback+0x250>)
 800144e:	4293      	cmp	r3, r2
 8001450:	f200 8148 	bhi.w	80016e4 <HAL_FDCAN_RxFifo0Callback+0x2fc>
 8001454:	4a79      	ldr	r2, [pc, #484]	@ (800163c <HAL_FDCAN_RxFifo0Callback+0x254>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d04a      	beq.n	80014f0 <HAL_FDCAN_RxFifo0Callback+0x108>
 800145a:	4a78      	ldr	r2, [pc, #480]	@ (800163c <HAL_FDCAN_RxFifo0Callback+0x254>)
 800145c:	4293      	cmp	r3, r2
 800145e:	f200 8141 	bhi.w	80016e4 <HAL_FDCAN_RxFifo0Callback+0x2fc>
 8001462:	4a77      	ldr	r2, [pc, #476]	@ (8001640 <HAL_FDCAN_RxFifo0Callback+0x258>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d061      	beq.n	800152c <HAL_FDCAN_RxFifo0Callback+0x144>
 8001468:	4a75      	ldr	r2, [pc, #468]	@ (8001640 <HAL_FDCAN_RxFifo0Callback+0x258>)
 800146a:	4293      	cmp	r3, r2
 800146c:	f200 813a 	bhi.w	80016e4 <HAL_FDCAN_RxFifo0Callback+0x2fc>
 8001470:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 8001474:	d00f      	beq.n	8001496 <HAL_FDCAN_RxFifo0Callback+0xae>
 8001476:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 800147a:	f200 8133 	bhi.w	80016e4 <HAL_FDCAN_RxFifo0Callback+0x2fc>
 800147e:	2b13      	cmp	r3, #19
 8001480:	f000 80f8 	beq.w	8001674 <HAL_FDCAN_RxFifo0Callback+0x28c>
 8001484:	2b13      	cmp	r3, #19
 8001486:	f200 812d 	bhi.w	80016e4 <HAL_FDCAN_RxFifo0Callback+0x2fc>
 800148a:	2b11      	cmp	r3, #17
 800148c:	d07b      	beq.n	8001586 <HAL_FDCAN_RxFifo0Callback+0x19e>
 800148e:	2b12      	cmp	r3, #18
 8001490:	f000 8095 	beq.w	80015be <HAL_FDCAN_RxFifo0Callback+0x1d6>
 8001494:	e126      	b.n	80016e4 <HAL_FDCAN_RxFifo0Callback+0x2fc>

        case 0x110:
            Unpack_APP_flag_error_bms_can(&master_data.status, RxData, RxHeader.DataLength);
 8001496:	4b63      	ldr	r3, [pc, #396]	@ (8001624 <HAL_FDCAN_RxFifo0Callback+0x23c>)
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	b2db      	uxtb	r3, r3
 800149c:	461a      	mov	r2, r3
 800149e:	4960      	ldr	r1, [pc, #384]	@ (8001620 <HAL_FDCAN_RxFifo0Callback+0x238>)
 80014a0:	4868      	ldr	r0, [pc, #416]	@ (8001644 <HAL_FDCAN_RxFifo0Callback+0x25c>)
 80014a2:	f7ff fbf9 	bl	8000c98 <Unpack_APP_flag_error_bms_can>
            count_BMS++;
 80014a6:	4b68      	ldr	r3, [pc, #416]	@ (8001648 <HAL_FDCAN_RxFifo0Callback+0x260>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	3301      	adds	r3, #1
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	4b66      	ldr	r3, [pc, #408]	@ (8001648 <HAL_FDCAN_RxFifo0Callback+0x260>)
 80014b0:	701a      	strb	r2, [r3, #0]
            break;
 80014b2:	e117      	b.n	80016e4 <HAL_FDCAN_RxFifo0Callback+0x2fc>

        case BAT_BMS_IntTemp_CANID:
            Unpack_BAT_BMS_IntTemp_bms_can(&master_data.status1, RxData, RxHeader.DataLength);
 80014b4:	4b5b      	ldr	r3, [pc, #364]	@ (8001624 <HAL_FDCAN_RxFifo0Callback+0x23c>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	461a      	mov	r2, r3
 80014bc:	4958      	ldr	r1, [pc, #352]	@ (8001620 <HAL_FDCAN_RxFifo0Callback+0x238>)
 80014be:	4863      	ldr	r0, [pc, #396]	@ (800164c <HAL_FDCAN_RxFifo0Callback+0x264>)
 80014c0:	f7ff fd3a 	bl	8000f38 <Unpack_BAT_BMS_IntTemp_bms_can>
            count_BMS++;
 80014c4:	4b60      	ldr	r3, [pc, #384]	@ (8001648 <HAL_FDCAN_RxFifo0Callback+0x260>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	3301      	adds	r3, #1
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	4b5e      	ldr	r3, [pc, #376]	@ (8001648 <HAL_FDCAN_RxFifo0Callback+0x260>)
 80014ce:	701a      	strb	r2, [r3, #0]
            break;
 80014d0:	e108      	b.n	80016e4 <HAL_FDCAN_RxFifo0Callback+0x2fc>

        case BAT_BMS_ExtTemp_CANID:
            Unpack_BAT_BMS_ExtTemp_bms_can(&master_data.status2, RxData, RxHeader.DataLength);
 80014d2:	4b54      	ldr	r3, [pc, #336]	@ (8001624 <HAL_FDCAN_RxFifo0Callback+0x23c>)
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	461a      	mov	r2, r3
 80014da:	4951      	ldr	r1, [pc, #324]	@ (8001620 <HAL_FDCAN_RxFifo0Callback+0x238>)
 80014dc:	485c      	ldr	r0, [pc, #368]	@ (8001650 <HAL_FDCAN_RxFifo0Callback+0x268>)
 80014de:	f7ff fcb3 	bl	8000e48 <Unpack_BAT_BMS_ExtTemp_bms_can>
            count_BMS++;
 80014e2:	4b59      	ldr	r3, [pc, #356]	@ (8001648 <HAL_FDCAN_RxFifo0Callback+0x260>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	3301      	adds	r3, #1
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	4b57      	ldr	r3, [pc, #348]	@ (8001648 <HAL_FDCAN_RxFifo0Callback+0x260>)
 80014ec:	701a      	strb	r2, [r3, #0]
            break;
 80014ee:	e0f9      	b.n	80016e4 <HAL_FDCAN_RxFifo0Callback+0x2fc>

        case 0x1FF310:
            Unpack_BAT_AFE_Fet_Status_bms_can(&master_data.status3, RxData, RxHeader.DataLength);
 80014f0:	4b4c      	ldr	r3, [pc, #304]	@ (8001624 <HAL_FDCAN_RxFifo0Callback+0x23c>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	461a      	mov	r2, r3
 80014f8:	4949      	ldr	r1, [pc, #292]	@ (8001620 <HAL_FDCAN_RxFifo0Callback+0x238>)
 80014fa:	4856      	ldr	r0, [pc, #344]	@ (8001654 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80014fc:	f7ff fc62 	bl	8000dc4 <Unpack_BAT_AFE_Fet_Status_bms_can>
            count_BMS++;
 8001500:	4b51      	ldr	r3, [pc, #324]	@ (8001648 <HAL_FDCAN_RxFifo0Callback+0x260>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	3301      	adds	r3, #1
 8001506:	b2da      	uxtb	r2, r3
 8001508:	4b4f      	ldr	r3, [pc, #316]	@ (8001648 <HAL_FDCAN_RxFifo0Callback+0x260>)
 800150a:	701a      	strb	r2, [r3, #0]
            break;
 800150c:	e0ea      	b.n	80016e4 <HAL_FDCAN_RxFifo0Callback+0x2fc>

        case 0x1FF615:
            Unpack_BAT_BMS_Charger_Load_Status_bms_can(&master_data.status4, RxData, RxHeader.DataLength);
 800150e:	4b45      	ldr	r3, [pc, #276]	@ (8001624 <HAL_FDCAN_RxFifo0Callback+0x23c>)
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	b2db      	uxtb	r3, r3
 8001514:	461a      	mov	r2, r3
 8001516:	4942      	ldr	r1, [pc, #264]	@ (8001620 <HAL_FDCAN_RxFifo0Callback+0x238>)
 8001518:	484f      	ldr	r0, [pc, #316]	@ (8001658 <HAL_FDCAN_RxFifo0Callback+0x270>)
 800151a:	f7ff fd6f 	bl	8000ffc <Unpack_BAT_BMS_Charger_Load_Status_bms_can>
            count_BMS++;
 800151e:	4b4a      	ldr	r3, [pc, #296]	@ (8001648 <HAL_FDCAN_RxFifo0Callback+0x260>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	3301      	adds	r3, #1
 8001524:	b2da      	uxtb	r2, r3
 8001526:	4b48      	ldr	r3, [pc, #288]	@ (8001648 <HAL_FDCAN_RxFifo0Callback+0x260>)
 8001528:	701a      	strb	r2, [r3, #0]
            break;
 800152a:	e0db      	b.n	80016e4 <HAL_FDCAN_RxFifo0Callback+0x2fc>

        case 0x1FF110:
            Unpack_BMS_Temp_Sensor_Present_bms_can(&master_data.status5, RxData, RxHeader.DataLength);
 800152c:	4b3d      	ldr	r3, [pc, #244]	@ (8001624 <HAL_FDCAN_RxFifo0Callback+0x23c>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	b2db      	uxtb	r3, r3
 8001532:	461a      	mov	r2, r3
 8001534:	493a      	ldr	r1, [pc, #232]	@ (8001620 <HAL_FDCAN_RxFifo0Callback+0x238>)
 8001536:	4849      	ldr	r0, [pc, #292]	@ (800165c <HAL_FDCAN_RxFifo0Callback+0x274>)
 8001538:	f7ff fbfc 	bl	8000d34 <Unpack_BMS_Temp_Sensor_Present_bms_can>
            count_BMS++;
 800153c:	4b42      	ldr	r3, [pc, #264]	@ (8001648 <HAL_FDCAN_RxFifo0Callback+0x260>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	3301      	adds	r3, #1
 8001542:	b2da      	uxtb	r2, r3
 8001544:	4b40      	ldr	r3, [pc, #256]	@ (8001648 <HAL_FDCAN_RxFifo0Callback+0x260>)
 8001546:	701a      	strb	r2, [r3, #0]
            break;
 8001548:	e0cc      	b.n	80016e4 <HAL_FDCAN_RxFifo0Callback+0x2fc>

        case 0x1FF810:
            Unpack_BAT_GAUGE_OvrVIEW_bms_can(&master_data.status6, RxData, RxHeader.DataLength);
 800154a:	4b36      	ldr	r3, [pc, #216]	@ (8001624 <HAL_FDCAN_RxFifo0Callback+0x23c>)
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	461a      	mov	r2, r3
 8001552:	4933      	ldr	r1, [pc, #204]	@ (8001620 <HAL_FDCAN_RxFifo0Callback+0x238>)
 8001554:	4842      	ldr	r0, [pc, #264]	@ (8001660 <HAL_FDCAN_RxFifo0Callback+0x278>)
 8001556:	f7ff fd73 	bl	8001040 <Unpack_BAT_GAUGE_OvrVIEW_bms_can>
            count_BMS++;
 800155a:	4b3b      	ldr	r3, [pc, #236]	@ (8001648 <HAL_FDCAN_RxFifo0Callback+0x260>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	3301      	adds	r3, #1
 8001560:	b2da      	uxtb	r2, r3
 8001562:	4b39      	ldr	r3, [pc, #228]	@ (8001648 <HAL_FDCAN_RxFifo0Callback+0x260>)
 8001564:	701a      	strb	r2, [r3, #0]
            break;
 8001566:	e0bd      	b.n	80016e4 <HAL_FDCAN_RxFifo0Callback+0x2fc>

        case 0x1FF820:
            Unpack_BAT_GAUGE_ViT_bms_can(&master_data.status7, RxData, RxHeader.DataLength);
 8001568:	4b2e      	ldr	r3, [pc, #184]	@ (8001624 <HAL_FDCAN_RxFifo0Callback+0x23c>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	b2db      	uxtb	r3, r3
 800156e:	461a      	mov	r2, r3
 8001570:	492b      	ldr	r1, [pc, #172]	@ (8001620 <HAL_FDCAN_RxFifo0Callback+0x238>)
 8001572:	483c      	ldr	r0, [pc, #240]	@ (8001664 <HAL_FDCAN_RxFifo0Callback+0x27c>)
 8001574:	f7ff fdb4 	bl	80010e0 <Unpack_BAT_GAUGE_ViT_bms_can>
            count_BMS++;
 8001578:	4b33      	ldr	r3, [pc, #204]	@ (8001648 <HAL_FDCAN_RxFifo0Callback+0x260>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	3301      	adds	r3, #1
 800157e:	b2da      	uxtb	r2, r3
 8001580:	4b31      	ldr	r3, [pc, #196]	@ (8001648 <HAL_FDCAN_RxFifo0Callback+0x260>)
 8001582:	701a      	strb	r2, [r3, #0]
            break;
 8001584:	e0ae      	b.n	80016e4 <HAL_FDCAN_RxFifo0Callback+0x2fc>
//             angles.timestamp = HAL_GetTick();
//             count_IMU++;
//             break;

		case 0x11:
		    angles.roll = bytesToFloat(&RxData[4]);
 8001586:	4838      	ldr	r0, [pc, #224]	@ (8001668 <HAL_FDCAN_RxFifo0Callback+0x280>)
 8001588:	f7ff fe30 	bl	80011ec <bytesToFloat>
 800158c:	eef0 7a40 	vmov.f32	s15, s0
 8001590:	4b36      	ldr	r3, [pc, #216]	@ (800166c <HAL_FDCAN_RxFifo0Callback+0x284>)
 8001592:	edc3 7a00 	vstr	s15, [r3]
		    angles.pitch = bytesToFloat(&RxData[0]);
 8001596:	4822      	ldr	r0, [pc, #136]	@ (8001620 <HAL_FDCAN_RxFifo0Callback+0x238>)
 8001598:	f7ff fe28 	bl	80011ec <bytesToFloat>
 800159c:	eef0 7a40 	vmov.f32	s15, s0
 80015a0:	4b32      	ldr	r3, [pc, #200]	@ (800166c <HAL_FDCAN_RxFifo0Callback+0x284>)
 80015a2:	edc3 7a01 	vstr	s15, [r3, #4]
		    angles.timestamp = HAL_GetTick();
 80015a6:	f002 f8d3 	bl	8003750 <HAL_GetTick>
 80015aa:	4603      	mov	r3, r0
 80015ac:	4a2f      	ldr	r2, [pc, #188]	@ (800166c <HAL_FDCAN_RxFifo0Callback+0x284>)
 80015ae:	6193      	str	r3, [r2, #24]
		    count_IMU++;
 80015b0:	4b2f      	ldr	r3, [pc, #188]	@ (8001670 <HAL_FDCAN_RxFifo0Callback+0x288>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	3301      	adds	r3, #1
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001670 <HAL_FDCAN_RxFifo0Callback+0x288>)
 80015ba:	701a      	strb	r2, [r3, #0]
            break;
 80015bc:	e092      	b.n	80016e4 <HAL_FDCAN_RxFifo0Callback+0x2fc>

	    case 0x12:
		    angles.yaw = bytesToFloat(&RxData[0]);
 80015be:	4818      	ldr	r0, [pc, #96]	@ (8001620 <HAL_FDCAN_RxFifo0Callback+0x238>)
 80015c0:	f7ff fe14 	bl	80011ec <bytesToFloat>
 80015c4:	eef0 7a40 	vmov.f32	s15, s0
 80015c8:	4b28      	ldr	r3, [pc, #160]	@ (800166c <HAL_FDCAN_RxFifo0Callback+0x284>)
 80015ca:	edc3 7a02 	vstr	s15, [r3, #8]
		    float ACCY= bytesToFloat(&RxData[4]);
 80015ce:	4826      	ldr	r0, [pc, #152]	@ (8001668 <HAL_FDCAN_RxFifo0Callback+0x280>)
 80015d0:	f7ff fe0c 	bl	80011ec <bytesToFloat>
 80015d4:	ed87 0a03 	vstr	s0, [r7, #12]
		    angles.accy = ACCY * (-9.81);
 80015d8:	68f8      	ldr	r0, [r7, #12]
 80015da:	f7fe ffdd 	bl	8000598 <__aeabi_f2d>
 80015de:	a30e      	add	r3, pc, #56	@ (adr r3, 8001618 <HAL_FDCAN_RxFifo0Callback+0x230>)
 80015e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e4:	f7ff f830 	bl	8000648 <__aeabi_dmul>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	4610      	mov	r0, r2
 80015ee:	4619      	mov	r1, r3
 80015f0:	f7ff fb02 	bl	8000bf8 <__aeabi_d2f>
 80015f4:	4603      	mov	r3, r0
 80015f6:	4a1d      	ldr	r2, [pc, #116]	@ (800166c <HAL_FDCAN_RxFifo0Callback+0x284>)
 80015f8:	6113      	str	r3, [r2, #16]
		    angles.timestamp = HAL_GetTick();
 80015fa:	f002 f8a9 	bl	8003750 <HAL_GetTick>
 80015fe:	4603      	mov	r3, r0
 8001600:	4a1a      	ldr	r2, [pc, #104]	@ (800166c <HAL_FDCAN_RxFifo0Callback+0x284>)
 8001602:	6193      	str	r3, [r2, #24]
		    count_IMU++;
 8001604:	4b1a      	ldr	r3, [pc, #104]	@ (8001670 <HAL_FDCAN_RxFifo0Callback+0x288>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	3301      	adds	r3, #1
 800160a:	b2da      	uxtb	r2, r3
 800160c:	4b18      	ldr	r3, [pc, #96]	@ (8001670 <HAL_FDCAN_RxFifo0Callback+0x288>)
 800160e:	701a      	strb	r2, [r3, #0]
		    break;
 8001610:	e068      	b.n	80016e4 <HAL_FDCAN_RxFifo0Callback+0x2fc>
 8001612:	bf00      	nop
 8001614:	f3af 8000 	nop.w
 8001618:	51eb851f 	.word	0x51eb851f
 800161c:	c0239eb8 	.word	0xc0239eb8
 8001620:	20000410 	.word	0x20000410
 8001624:	20000444 	.word	0x20000444
 8001628:	001ff820 	.word	0x001ff820
 800162c:	001ff810 	.word	0x001ff810
 8001630:	001ff615 	.word	0x001ff615
 8001634:	001ff612 	.word	0x001ff612
 8001638:	001ff611 	.word	0x001ff611
 800163c:	001ff310 	.word	0x001ff310
 8001640:	001ff110 	.word	0x001ff110
 8001644:	20000480 	.word	0x20000480
 8001648:	20000442 	.word	0x20000442
 800164c:	20000488 	.word	0x20000488
 8001650:	200004a8 	.word	0x200004a8
 8001654:	200004d0 	.word	0x200004d0
 8001658:	200004d6 	.word	0x200004d6
 800165c:	200004d8 	.word	0x200004d8
 8001660:	200004e0 	.word	0x200004e0
 8001664:	200004f0 	.word	0x200004f0
 8001668:	20000414 	.word	0x20000414
 800166c:	200005c0 	.word	0x200005c0
 8001670:	20000443 	.word	0x20000443

		case 0x13:
		    float ACCX=bytesToFloat(&RxData[0]);
 8001674:	4838      	ldr	r0, [pc, #224]	@ (8001758 <HAL_FDCAN_RxFifo0Callback+0x370>)
 8001676:	f7ff fdb9 	bl	80011ec <bytesToFloat>
 800167a:	ed87 0a05 	vstr	s0, [r7, #20]
		    angles.accx = ACCX * 9.81;
 800167e:	6978      	ldr	r0, [r7, #20]
 8001680:	f7fe ff8a 	bl	8000598 <__aeabi_f2d>
 8001684:	a332      	add	r3, pc, #200	@ (adr r3, 8001750 <HAL_FDCAN_RxFifo0Callback+0x368>)
 8001686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168a:	f7fe ffdd 	bl	8000648 <__aeabi_dmul>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	4610      	mov	r0, r2
 8001694:	4619      	mov	r1, r3
 8001696:	f7ff faaf 	bl	8000bf8 <__aeabi_d2f>
 800169a:	4603      	mov	r3, r0
 800169c:	4a2f      	ldr	r2, [pc, #188]	@ (800175c <HAL_FDCAN_RxFifo0Callback+0x374>)
 800169e:	60d3      	str	r3, [r2, #12]
		    float ACCZ=bytesToFloat(&RxData[4]);
 80016a0:	482f      	ldr	r0, [pc, #188]	@ (8001760 <HAL_FDCAN_RxFifo0Callback+0x378>)
 80016a2:	f7ff fda3 	bl	80011ec <bytesToFloat>
 80016a6:	ed87 0a04 	vstr	s0, [r7, #16]
		    angles.accz = ACCZ * 9.81;
 80016aa:	6938      	ldr	r0, [r7, #16]
 80016ac:	f7fe ff74 	bl	8000598 <__aeabi_f2d>
 80016b0:	a327      	add	r3, pc, #156	@ (adr r3, 8001750 <HAL_FDCAN_RxFifo0Callback+0x368>)
 80016b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b6:	f7fe ffc7 	bl	8000648 <__aeabi_dmul>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4610      	mov	r0, r2
 80016c0:	4619      	mov	r1, r3
 80016c2:	f7ff fa99 	bl	8000bf8 <__aeabi_d2f>
 80016c6:	4603      	mov	r3, r0
 80016c8:	4a24      	ldr	r2, [pc, #144]	@ (800175c <HAL_FDCAN_RxFifo0Callback+0x374>)
 80016ca:	6153      	str	r3, [r2, #20]
		    angles.timestamp = HAL_GetTick();
 80016cc:	f002 f840 	bl	8003750 <HAL_GetTick>
 80016d0:	4603      	mov	r3, r0
 80016d2:	4a22      	ldr	r2, [pc, #136]	@ (800175c <HAL_FDCAN_RxFifo0Callback+0x374>)
 80016d4:	6193      	str	r3, [r2, #24]
		    count_IMU++;
 80016d6:	4b23      	ldr	r3, [pc, #140]	@ (8001764 <HAL_FDCAN_RxFifo0Callback+0x37c>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	3301      	adds	r3, #1
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	4b21      	ldr	r3, [pc, #132]	@ (8001764 <HAL_FDCAN_RxFifo0Callback+0x37c>)
 80016e0:	701a      	strb	r2, [r3, #0]
		    break;
 80016e2:	bf00      	nop
		}

	    if (count_BMS >= 8)
 80016e4:	4b20      	ldr	r3, [pc, #128]	@ (8001768 <HAL_FDCAN_RxFifo0Callback+0x380>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b07      	cmp	r3, #7
 80016ea:	d912      	bls.n	8001712 <HAL_FDCAN_RxFifo0Callback+0x32a>
	    {
	        memcpy(Buffer, &master_data, TOTAL_BUFFER_SIZE);
 80016ec:	4a1f      	ldr	r2, [pc, #124]	@ (800176c <HAL_FDCAN_RxFifo0Callback+0x384>)
 80016ee:	4b20      	ldr	r3, [pc, #128]	@ (8001770 <HAL_FDCAN_RxFifo0Callback+0x388>)
 80016f0:	4610      	mov	r0, r2
 80016f2:	4619      	mov	r1, r3
 80016f4:	23a0      	movs	r3, #160	@ 0xa0
 80016f6:	461a      	mov	r2, r3
 80016f8:	f007 f941 	bl	800897e <memcpy>
	        Nextmessage = true;
 80016fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001774 <HAL_FDCAN_RxFifo0Callback+0x38c>)
 80016fe:	2201      	movs	r2, #1
 8001700:	701a      	strb	r2, [r3, #0]
	        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8001702:	2102      	movs	r1, #2
 8001704:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001708:	f003 fb3e 	bl	8004d88 <HAL_GPIO_TogglePin>
	        count_BMS = 0;
 800170c:	4b16      	ldr	r3, [pc, #88]	@ (8001768 <HAL_FDCAN_RxFifo0Callback+0x380>)
 800170e:	2200      	movs	r2, #0
 8001710:	701a      	strb	r2, [r3, #0]
	    }
        if (count_IMU >= 3){
 8001712:	4b14      	ldr	r3, [pc, #80]	@ (8001764 <HAL_FDCAN_RxFifo0Callback+0x37c>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	2b02      	cmp	r3, #2
 8001718:	d914      	bls.n	8001744 <HAL_FDCAN_RxFifo0Callback+0x35c>

            last_angles = angles;
 800171a:	4a17      	ldr	r2, [pc, #92]	@ (8001778 <HAL_FDCAN_RxFifo0Callback+0x390>)
 800171c:	4b0f      	ldr	r3, [pc, #60]	@ (800175c <HAL_FDCAN_RxFifo0Callback+0x374>)
 800171e:	4614      	mov	r4, r2
 8001720:	461d      	mov	r5, r3
 8001722:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001724:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001726:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800172a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		    Newmessage = true;
 800172e:	4b13      	ldr	r3, [pc, #76]	@ (800177c <HAL_FDCAN_RxFifo0Callback+0x394>)
 8001730:	2201      	movs	r2, #1
 8001732:	701a      	strb	r2, [r3, #0]
	        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001734:	2120      	movs	r1, #32
 8001736:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800173a:	f003 fb25 	bl	8004d88 <HAL_GPIO_TogglePin>
		    count_IMU = 0;
 800173e:	4b09      	ldr	r3, [pc, #36]	@ (8001764 <HAL_FDCAN_RxFifo0Callback+0x37c>)
 8001740:	2200      	movs	r2, #0
 8001742:	701a      	strb	r2, [r3, #0]
	   }
	}
}
 8001744:	bf00      	nop
 8001746:	3718      	adds	r7, #24
 8001748:	46bd      	mov	sp, r7
 800174a:	bdb0      	pop	{r4, r5, r7, pc}
 800174c:	f3af 8000 	nop.w
 8001750:	51eb851f 	.word	0x51eb851f
 8001754:	40239eb8 	.word	0x40239eb8
 8001758:	20000410 	.word	0x20000410
 800175c:	200005c0 	.word	0x200005c0
 8001760:	20000414 	.word	0x20000414
 8001764:	20000443 	.word	0x20000443
 8001768:	20000442 	.word	0x20000442
 800176c:	20000520 	.word	0x20000520
 8001770:	20000480 	.word	0x20000480
 8001774:	2000046d 	.word	0x2000046d
 8001778:	200005dc 	.word	0x200005dc
 800177c:	2000046c 	.word	0x2000046c

08001780 <sendbmsdata>:
void sendbmsdata(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
    if (Nextmessage && getSn_SR(TCP_SOCKET) == SOCK_ESTABLISHED)
 8001786:	4b12      	ldr	r3, [pc, #72]	@ (80017d0 <sendbmsdata+0x50>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d01b      	beq.n	80017c6 <sendbmsdata+0x46>
 800178e:	f44f 7042 	mov.w	r0, #776	@ 0x308
 8001792:	f001 fab5 	bl	8002d00 <WIZCHIP_READ>
 8001796:	4603      	mov	r3, r0
 8001798:	2b17      	cmp	r3, #23
 800179a:	d114      	bne.n	80017c6 <sendbmsdata+0x46>
    {
        int32_t sent = send(TCP_SOCKET, Buffer, TOTAL_BUFFER_SIZE);
 800179c:	22a0      	movs	r2, #160	@ 0xa0
 800179e:	490d      	ldr	r1, [pc, #52]	@ (80017d4 <sendbmsdata+0x54>)
 80017a0:	2000      	movs	r0, #0
 80017a2:	f000 fe85 	bl	80024b0 <send>
 80017a6:	6078      	str	r0, [r7, #4]

        if (sent == TOTAL_BUFFER_SIZE)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2ba0      	cmp	r3, #160	@ 0xa0
 80017ac:	d108      	bne.n	80017c0 <sendbmsdata+0x40>
        {
            HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80017ae:	2101      	movs	r1, #1
 80017b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017b4:	f003 fae8 	bl	8004d88 <HAL_GPIO_TogglePin>
            Nextmessage = false;
 80017b8:	4b05      	ldr	r3, [pc, #20]	@ (80017d0 <sendbmsdata+0x50>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	701a      	strb	r2, [r3, #0]
        else
        {
            disconnect(TCP_SOCKET);
        }
    }
}
 80017be:	e002      	b.n	80017c6 <sendbmsdata+0x46>
            disconnect(TCP_SOCKET);
 80017c0:	2000      	movs	r0, #0
 80017c2:	f000 fdff 	bl	80023c4 <disconnect>
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	2000046d 	.word	0x2000046d
 80017d4:	20000520 	.word	0x20000520

080017d8 <sendimudata>:
void sendimudata() {
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0

	uint32_t now = __HAL_TIM_GET_COUNTER(&htim2);
 80017de:	4b36      	ldr	r3, [pc, #216]	@ (80018b8 <sendimudata+0xe0>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e4:	60fb      	str	r3, [r7, #12]
    if (Newmessage) {
 80017e6:	4b35      	ldr	r3, [pc, #212]	@ (80018bc <sendimudata+0xe4>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d05f      	beq.n	80018ae <sendimudata+0xd6>

        if (buffer_index < MAX_MESSAGES) {
 80017ee:	4b34      	ldr	r3, [pc, #208]	@ (80018c0 <sendimudata+0xe8>)
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d113      	bne.n	800181e <sendimudata+0x46>
            memcpy(&txBuffer[buffer_index], (void*)&last_angles, sizeof(EulerAngles));
 80017f6:	4b32      	ldr	r3, [pc, #200]	@ (80018c0 <sendimudata+0xe8>)
 80017f8:	881b      	ldrh	r3, [r3, #0]
 80017fa:	461a      	mov	r2, r3
 80017fc:	4613      	mov	r3, r2
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	1a9b      	subs	r3, r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4a2f      	ldr	r2, [pc, #188]	@ (80018c4 <sendimudata+0xec>)
 8001806:	4413      	add	r3, r2
 8001808:	221c      	movs	r2, #28
 800180a:	492f      	ldr	r1, [pc, #188]	@ (80018c8 <sendimudata+0xf0>)
 800180c:	4618      	mov	r0, r3
 800180e:	f007 f8b6 	bl	800897e <memcpy>
            buffer_index++;
 8001812:	4b2b      	ldr	r3, [pc, #172]	@ (80018c0 <sendimudata+0xe8>)
 8001814:	881b      	ldrh	r3, [r3, #0]
 8001816:	3301      	adds	r3, #1
 8001818:	b29a      	uxth	r2, r3
 800181a:	4b29      	ldr	r3, [pc, #164]	@ (80018c0 <sendimudata+0xe8>)
 800181c:	801a      	strh	r2, [r3, #0]
        }

        if (buffer_index >= MAX_MESSAGES) {
 800181e:	4b28      	ldr	r3, [pc, #160]	@ (80018c0 <sendimudata+0xe8>)
 8001820:	881b      	ldrh	r3, [r3, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d040      	beq.n	80018a8 <sendimudata+0xd0>
            total_size = buffer_index * sizeof(EulerAngles);
 8001826:	4b26      	ldr	r3, [pc, #152]	@ (80018c0 <sendimudata+0xe8>)
 8001828:	881b      	ldrh	r3, [r3, #0]
 800182a:	461a      	mov	r2, r3
 800182c:	4613      	mov	r3, r2
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	1a9b      	subs	r3, r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	461a      	mov	r2, r3
 8001836:	4b25      	ldr	r3, [pc, #148]	@ (80018cc <sendimudata+0xf4>)
 8001838:	601a      	str	r2, [r3, #0]
            memcpy(large_buffer, txBuffer, total_size);
 800183a:	4b24      	ldr	r3, [pc, #144]	@ (80018cc <sendimudata+0xf4>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	461a      	mov	r2, r3
 8001840:	4920      	ldr	r1, [pc, #128]	@ (80018c4 <sendimudata+0xec>)
 8001842:	4823      	ldr	r0, [pc, #140]	@ (80018d0 <sendimudata+0xf8>)
 8001844:	f007 f89b 	bl	800897e <memcpy>

        if (now - last_imu_time >= 1 && getSn_SR(TCP_SOCKET) == SOCK_ESTABLISHED) {
 8001848:	4b22      	ldr	r3, [pc, #136]	@ (80018d4 <sendimudata+0xfc>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	68fa      	ldr	r2, [r7, #12]
 800184e:	429a      	cmp	r2, r3
 8001850:	d027      	beq.n	80018a2 <sendimudata+0xca>
 8001852:	f44f 7042 	mov.w	r0, #776	@ 0x308
 8001856:	f001 fa53 	bl	8002d00 <WIZCHIP_READ>
 800185a:	4603      	mov	r3, r0
 800185c:	2b17      	cmp	r3, #23
 800185e:	d120      	bne.n	80018a2 <sendimudata+0xca>
            int32_t sent = send(TCP_SOCKET, large_buffer, total_size);
 8001860:	4b1a      	ldr	r3, [pc, #104]	@ (80018cc <sendimudata+0xf4>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	b29b      	uxth	r3, r3
 8001866:	461a      	mov	r2, r3
 8001868:	4919      	ldr	r1, [pc, #100]	@ (80018d0 <sendimudata+0xf8>)
 800186a:	2000      	movs	r0, #0
 800186c:	f000 fe20 	bl	80024b0 <send>
 8001870:	60b8      	str	r0, [r7, #8]

        if (sent > 0) {
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	2b00      	cmp	r3, #0
 8001876:	dd14      	ble.n	80018a2 <sendimudata+0xca>
           	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8001878:	2101      	movs	r1, #1
 800187a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800187e:	f003 fa83 	bl	8004d88 <HAL_GPIO_TogglePin>
           	last_imu_time = now;
 8001882:	4a14      	ldr	r2, [pc, #80]	@ (80018d4 <sendimudata+0xfc>)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6013      	str	r3, [r2, #0]
           	uint16_t rec = getSn_RX_RSR(TCP_SOCKET);
 8001888:	2000      	movs	r0, #0
 800188a:	f001 fbdc 	bl	8003046 <getSn_RX_RSR>
 800188e:	4603      	mov	r3, r0
 8001890:	80fb      	strh	r3, [r7, #6]
        if(rec >=2){
 8001892:	88fb      	ldrh	r3, [r7, #6]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d904      	bls.n	80018a2 <sendimudata+0xca>
           	recv(TCP_SOCKET,accept,sizeof(accept));
 8001898:	2228      	movs	r2, #40	@ 0x28
 800189a:	490f      	ldr	r1, [pc, #60]	@ (80018d8 <sendimudata+0x100>)
 800189c:	2000      	movs	r0, #0
 800189e:	f000 feff 	bl	80026a0 <recv>
           	}
           }
         }
            buffer_index = 0;
 80018a2:	4b07      	ldr	r3, [pc, #28]	@ (80018c0 <sendimudata+0xe8>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	801a      	strh	r2, [r3, #0]
        }
            Newmessage = false;
 80018a8:	4b04      	ldr	r3, [pc, #16]	@ (80018bc <sendimudata+0xe4>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	701a      	strb	r2, [r3, #0]
    }

}
 80018ae:	bf00      	nop
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	200003c4 	.word	0x200003c4
 80018bc:	2000046c 	.word	0x2000046c
 80018c0:	20000440 	.word	0x20000440
 80018c4:	200005f8 	.word	0x200005f8
 80018c8:	200005dc 	.word	0x200005dc
 80018cc:	20000470 	.word	0x20000470
 80018d0:	20000614 	.word	0x20000614
 80018d4:	20000474 	.word	0x20000474
 80018d8:	20000418 	.word	0x20000418

080018dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018e2:	f001 fed0 	bl	8003686 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018e6:	f000 f8f3 	bl	8001ad0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018ea:	f000 fa99 	bl	8001e20 <MX_GPIO_Init>
  MX_DMA_Init();
 80018ee:	f000 fa65 	bl	8001dbc <MX_DMA_Init>
  MX_FDCAN1_Init();
 80018f2:	f000 f939 	bl	8001b68 <MX_FDCAN1_Init>
  MX_SPI2_Init();
 80018f6:	f000 f9d5 	bl	8001ca4 <MX_SPI2_Init>
  MX_TIM2_Init();
 80018fa:	f000 fa11 	bl	8001d20 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80018fe:	486b      	ldr	r0, [pc, #428]	@ (8001aac <main+0x1d0>)
 8001900:	f005 feee 	bl	80076e0 <HAL_TIM_Base_Start_IT>
  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK){
 8001904:	486a      	ldr	r0, [pc, #424]	@ (8001ab0 <main+0x1d4>)
 8001906:	f002 fc87 	bl	8004218 <HAL_FDCAN_Start>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <main+0x38>

	  Error_Handler();
 8001910:	f000 faf4 	bl	8001efc <Error_Handler>

  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8001914:	2200      	movs	r2, #0
 8001916:	2101      	movs	r1, #1
 8001918:	4865      	ldr	r0, [pc, #404]	@ (8001ab0 <main+0x1d4>)
 800191a:	f002 fdad 	bl	8004478 <HAL_FDCAN_ActivateNotification>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <main+0x4c>
         Error_Handler();
 8001924:	f000 faea 	bl	8001efc <Error_Handler>
     }

 W5500_Init();
 8001928:	f7ff fc72 	bl	8001210 <W5500_Init>
 wizchip_setnetinfo(&netInfo);
 800192c:	4861      	ldr	r0, [pc, #388]	@ (8001ab4 <main+0x1d8>)
 800192e:	f001 fe41 	bl	80035b4 <wizchip_setnetinfo>

#ifdef  Client
 uint8_t SOCKET = socket(TCP_SOCKET,Sn_MR_TCP,LOCAL_PORT,0);
 8001932:	2300      	movs	r3, #0
 8001934:	f241 52b3 	movw	r2, #5555	@ 0x15b3
 8001938:	2101      	movs	r1, #1
 800193a:	2000      	movs	r0, #0
 800193c:	f000 fae4 	bl	8001f08 <socket>
 8001940:	4603      	mov	r3, r0
 8001942:	73fb      	strb	r3, [r7, #15]
 if(SOCKET == TCP_SOCKET){
 8001944:	7bfb      	ldrb	r3, [r7, #15]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d11b      	bne.n	8001982 <main+0xa6>

	  int mode = getSn_MR(TCP_SOCKET);
 800194a:	2008      	movs	r0, #8
 800194c:	f001 f9d8 	bl	8002d00 <WIZCHIP_READ>
 8001950:	4603      	mov	r3, r0
 8001952:	60bb      	str	r3, [r7, #8]
	  mode |= Sn_MR_ND;
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	f043 0320 	orr.w	r3, r3, #32
 800195a:	60bb      	str	r3, [r7, #8]
	  setSn_MR(TCP_SOCKET, mode);
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	b2db      	uxtb	r3, r3
 8001960:	4619      	mov	r1, r3
 8001962:	2008      	movs	r0, #8
 8001964:	f001 fa18 	bl	8002d98 <WIZCHIP_WRITE>
	  connect(TCP_SOCKET, S_ADDR, S_PORT);
 8001968:	4b53      	ldr	r3, [pc, #332]	@ (8001ab8 <main+0x1dc>)
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	461a      	mov	r2, r3
 800196e:	4953      	ldr	r1, [pc, #332]	@ (8001abc <main+0x1e0>)
 8001970:	2000      	movs	r0, #0
 8001972:	f000 fc4b 	bl	800220c <connect>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0,GPIO_PIN_SET);
 8001976:	2201      	movs	r2, #1
 8001978:	2101      	movs	r1, #1
 800197a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800197e:	f003 f9eb 	bl	8004d58 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
#ifdef Client

	  switch (getSn_SR(TCP_SOCKET)) {
 8001982:	f44f 7042 	mov.w	r0, #776	@ 0x308
 8001986:	f001 f9bb 	bl	8002d00 <WIZCHIP_READ>
 800198a:	4603      	mov	r3, r0
 800198c:	2b1c      	cmp	r3, #28
 800198e:	d05d      	beq.n	8001a4c <main+0x170>
 8001990:	2b1c      	cmp	r3, #28
 8001992:	dc77      	bgt.n	8001a84 <main+0x1a8>
 8001994:	2b00      	cmp	r3, #0
 8001996:	d05d      	beq.n	8001a54 <main+0x178>
 8001998:	2b17      	cmp	r3, #23
 800199a:	d173      	bne.n	8001a84 <main+0x1a8>
	          case SOCK_ESTABLISHED:
	              if (getSn_IR(TCP_SOCKET) & Sn_IR_CON) {
 800199c:	f44f 7002 	mov.w	r0, #520	@ 0x208
 80019a0:	f001 f9ae 	bl	8002d00 <WIZCHIP_READ>
 80019a4:	4603      	mov	r3, r0
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d00a      	beq.n	80019c4 <main+0xe8>
	                  setSn_IR(TCP_SOCKET, Sn_IR_CON);
 80019ae:	2101      	movs	r1, #1
 80019b0:	f44f 7002 	mov.w	r0, #520	@ 0x208
 80019b4:	f001 f9f0 	bl	8002d98 <WIZCHIP_WRITE>
	                  Newmessage1 = false;
 80019b8:	4b41      	ldr	r3, [pc, #260]	@ (8001ac0 <main+0x1e4>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	701a      	strb	r2, [r3, #0]
	                  Nextmessage1 = false;
 80019be:	4b41      	ldr	r3, [pc, #260]	@ (8001ac4 <main+0x1e8>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	701a      	strb	r2, [r3, #0]
	              }

	              uint16_t rxSize = getSn_RX_RSR(TCP_SOCKET);
 80019c4:	2000      	movs	r0, #0
 80019c6:	f001 fb3e 	bl	8003046 <getSn_RX_RSR>
 80019ca:	4603      	mov	r3, r0
 80019cc:	80fb      	strh	r3, [r7, #6]
	              if (rxSize >= sizeof(Commandtype)) {
 80019ce:	88fb      	ldrh	r3, [r7, #6]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d027      	beq.n	8001a24 <main+0x148>
	                  int32_t received = recv(TCP_SOCKET, &received_cmd, sizeof(received_cmd));
 80019d4:	2201      	movs	r2, #1
 80019d6:	493c      	ldr	r1, [pc, #240]	@ (8001ac8 <main+0x1ec>)
 80019d8:	2000      	movs	r0, #0
 80019da:	f000 fe61 	bl	80026a0 <recv>
 80019de:	6038      	str	r0, [r7, #0]
	                  if (received == sizeof(received_cmd)) {
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d11e      	bne.n	8001a24 <main+0x148>

	                      if (received_cmd == Send_IMU_Data) {
 80019e6:	4b38      	ldr	r3, [pc, #224]	@ (8001ac8 <main+0x1ec>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d10b      	bne.n	8001a06 <main+0x12a>
	                          Newmessage1 = true;
 80019ee:	4b34      	ldr	r3, [pc, #208]	@ (8001ac0 <main+0x1e4>)
 80019f0:	2201      	movs	r2, #1
 80019f2:	701a      	strb	r2, [r3, #0]
	                          Nextmessage1 = false;
 80019f4:	4b33      	ldr	r3, [pc, #204]	@ (8001ac4 <main+0x1e8>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	701a      	strb	r2, [r3, #0]
	                          HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80019fa:	2101      	movs	r1, #1
 80019fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a00:	f003 f9c2 	bl	8004d88 <HAL_GPIO_TogglePin>
 8001a04:	e00e      	b.n	8001a24 <main+0x148>
	                      } else if (received_cmd == Send_BMS_Data) {
 8001a06:	4b30      	ldr	r3, [pc, #192]	@ (8001ac8 <main+0x1ec>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d10a      	bne.n	8001a24 <main+0x148>
	                          Newmessage1 = false;
 8001a0e:	4b2c      	ldr	r3, [pc, #176]	@ (8001ac0 <main+0x1e4>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]
	                          Nextmessage1 = true;
 8001a14:	4b2b      	ldr	r3, [pc, #172]	@ (8001ac4 <main+0x1e8>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	701a      	strb	r2, [r3, #0]
	                          HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a20:	f003 f9b2 	bl	8004d88 <HAL_GPIO_TogglePin>
	                      }
	                  }
	              }
	              if (Newmessage1 && getSn_SR(TCP_SOCKET) == SOCK_ESTABLISHED){
 8001a24:	4b26      	ldr	r3, [pc, #152]	@ (8001ac0 <main+0x1e4>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d008      	beq.n	8001a3e <main+0x162>
 8001a2c:	f44f 7042 	mov.w	r0, #776	@ 0x308
 8001a30:	f001 f966 	bl	8002d00 <WIZCHIP_READ>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b17      	cmp	r3, #23
 8001a38:	d101      	bne.n	8001a3e <main+0x162>
	                  sendimudata();
 8001a3a:	f7ff fecd 	bl	80017d8 <sendimudata>
	              }
	              if (Nextmessage1) {
 8001a3e:	4b21      	ldr	r3, [pc, #132]	@ (8001ac4 <main+0x1e8>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d01b      	beq.n	8001a7e <main+0x1a2>
	                  sendbmsdata();
 8001a46:	f7ff fe9b 	bl	8001780 <sendbmsdata>
	              }
	              break;
 8001a4a:	e018      	b.n	8001a7e <main+0x1a2>

	          case SOCK_CLOSE_WAIT:
	              disconnect(TCP_SOCKET);
 8001a4c:	2000      	movs	r0, #0
 8001a4e:	f000 fcb9 	bl	80023c4 <disconnect>

	              break;
 8001a52:	e017      	b.n	8001a84 <main+0x1a8>

	          case SOCK_CLOSED:
	              if (socket(TCP_SOCKET, Sn_MR_TCP, LOCAL_PORT, 0) == TCP_SOCKET) {
 8001a54:	2300      	movs	r3, #0
 8001a56:	f241 52b3 	movw	r2, #5555	@ 0x15b3
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	f000 fa53 	bl	8001f08 <socket>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d10c      	bne.n	8001a82 <main+0x1a6>
	                  connect(TCP_SOCKET, S_ADDR, S_PORT);
 8001a68:	4b13      	ldr	r3, [pc, #76]	@ (8001ab8 <main+0x1dc>)
 8001a6a:	881b      	ldrh	r3, [r3, #0]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	4913      	ldr	r1, [pc, #76]	@ (8001abc <main+0x1e0>)
 8001a70:	2000      	movs	r0, #0
 8001a72:	f000 fbcb 	bl	800220c <connect>
	                  total_size = 0;
 8001a76:	4b15      	ldr	r3, [pc, #84]	@ (8001acc <main+0x1f0>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]

	              }
	              break;
 8001a7c:	e001      	b.n	8001a82 <main+0x1a6>
	              break;
 8001a7e:	bf00      	nop
 8001a80:	e000      	b.n	8001a84 <main+0x1a8>
	              break;
 8001a82:	bf00      	nop
	           }
	      if (getSn_IR(TCP_SOCKET) & Sn_IR_TIMEOUT) {
 8001a84:	f44f 7002 	mov.w	r0, #520	@ 0x208
 8001a88:	f001 f93a 	bl	8002d00 <WIZCHIP_READ>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f43f af75 	beq.w	8001982 <main+0xa6>
	          setSn_IR(TCP_SOCKET, Sn_IR_TIMEOUT);
 8001a98:	2108      	movs	r1, #8
 8001a9a:	f44f 7002 	mov.w	r0, #520	@ 0x208
 8001a9e:	f001 f97b 	bl	8002d98 <WIZCHIP_WRITE>
	          disconnect(TCP_SOCKET);
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	f000 fc8e 	bl	80023c4 <disconnect>
	  switch (getSn_SR(TCP_SOCKET)) {
 8001aa8:	e76b      	b.n	8001982 <main+0xa6>
 8001aaa:	bf00      	nop
 8001aac:	200003c4 	.word	0x200003c4
 8001ab0:	2000023c 	.word	0x2000023c
 8001ab4:	20000008 	.word	0x20000008
 8001ab8:	20000004 	.word	0x20000004
 8001abc:	20000000 	.word	0x20000000
 8001ac0:	2000046e 	.word	0x2000046e
 8001ac4:	2000046f 	.word	0x2000046f
 8001ac8:	20000478 	.word	0x20000478
 8001acc:	20000470 	.word	0x20000470

08001ad0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b094      	sub	sp, #80	@ 0x50
 8001ad4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ad6:	f107 0318 	add.w	r3, r7, #24
 8001ada:	2238      	movs	r2, #56	@ 0x38
 8001adc:	2100      	movs	r1, #0
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f006 fecd 	bl	800887e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ae4:	1d3b      	adds	r3, r7, #4
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	605a      	str	r2, [r3, #4]
 8001aec:	609a      	str	r2, [r3, #8]
 8001aee:	60da      	str	r2, [r3, #12]
 8001af0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001af2:	2000      	movs	r0, #0
 8001af4:	f003 f962 	bl	8004dbc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001af8:	2302      	movs	r3, #2
 8001afa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001afc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b00:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b02:	2340      	movs	r3, #64	@ 0x40
 8001b04:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b06:	2302      	movs	r3, #2
 8001b08:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001b12:	2314      	movs	r3, #20
 8001b14:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b16:	2302      	movs	r3, #2
 8001b18:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001b1a:	2304      	movs	r3, #4
 8001b1c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b22:	f107 0318 	add.w	r3, r7, #24
 8001b26:	4618      	mov	r0, r3
 8001b28:	f003 f9fc 	bl	8004f24 <HAL_RCC_OscConfig>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001b32:	f000 f9e3 	bl	8001efc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b36:	230f      	movs	r3, #15
 8001b38:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b42:	2300      	movs	r3, #0
 8001b44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b46:	2300      	movs	r3, #0
 8001b48:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b4a:	1d3b      	adds	r3, r7, #4
 8001b4c:	2104      	movs	r1, #4
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f003 fcfa 	bl	8005548 <HAL_RCC_ClockConfig>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001b5a:	f000 f9cf 	bl	8001efc <Error_Handler>
  }
}
 8001b5e:	bf00      	nop
 8001b60:	3750      	adds	r7, #80	@ 0x50
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
	...

08001b68 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b08c      	sub	sp, #48	@ 0x30
 8001b6c:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001b6e:	4b44      	ldr	r3, [pc, #272]	@ (8001c80 <MX_FDCAN1_Init+0x118>)
 8001b70:	4a44      	ldr	r2, [pc, #272]	@ (8001c84 <MX_FDCAN1_Init+0x11c>)
 8001b72:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001b74:	4b42      	ldr	r3, [pc, #264]	@ (8001c80 <MX_FDCAN1_Init+0x118>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001b7a:	4b41      	ldr	r3, [pc, #260]	@ (8001c80 <MX_FDCAN1_Init+0x118>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001b80:	4b3f      	ldr	r3, [pc, #252]	@ (8001c80 <MX_FDCAN1_Init+0x118>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8001b86:	4b3e      	ldr	r3, [pc, #248]	@ (8001c80 <MX_FDCAN1_Init+0x118>)
 8001b88:	2201      	movs	r2, #1
 8001b8a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001b8c:	4b3c      	ldr	r3, [pc, #240]	@ (8001c80 <MX_FDCAN1_Init+0x118>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001b92:	4b3b      	ldr	r3, [pc, #236]	@ (8001c80 <MX_FDCAN1_Init+0x118>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8001b98:	4b39      	ldr	r3, [pc, #228]	@ (8001c80 <MX_FDCAN1_Init+0x118>)
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 16;
 8001b9e:	4b38      	ldr	r3, [pc, #224]	@ (8001c80 <MX_FDCAN1_Init+0x118>)
 8001ba0:	2210      	movs	r2, #16
 8001ba2:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 63;
 8001ba4:	4b36      	ldr	r3, [pc, #216]	@ (8001c80 <MX_FDCAN1_Init+0x118>)
 8001ba6:	223f      	movs	r2, #63	@ 0x3f
 8001ba8:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 16;
 8001baa:	4b35      	ldr	r3, [pc, #212]	@ (8001c80 <MX_FDCAN1_Init+0x118>)
 8001bac:	2210      	movs	r2, #16
 8001bae:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 8001bb0:	4b33      	ldr	r3, [pc, #204]	@ (8001c80 <MX_FDCAN1_Init+0x118>)
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8001bb6:	4b32      	ldr	r3, [pc, #200]	@ (8001c80 <MX_FDCAN1_Init+0x118>)
 8001bb8:	2204      	movs	r2, #4
 8001bba:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 8001bbc:	4b30      	ldr	r3, [pc, #192]	@ (8001c80 <MX_FDCAN1_Init+0x118>)
 8001bbe:	2205      	movs	r2, #5
 8001bc0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 8001bc2:	4b2f      	ldr	r3, [pc, #188]	@ (8001c80 <MX_FDCAN1_Init+0x118>)
 8001bc4:	2205      	movs	r2, #5
 8001bc6:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 2;
 8001bc8:	4b2d      	ldr	r3, [pc, #180]	@ (8001c80 <MX_FDCAN1_Init+0x118>)
 8001bca:	2202      	movs	r2, #2
 8001bcc:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 4;
 8001bce:	4b2c      	ldr	r3, [pc, #176]	@ (8001c80 <MX_FDCAN1_Init+0x118>)
 8001bd0:	2204      	movs	r2, #4
 8001bd2:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001bd4:	4b2a      	ldr	r3, [pc, #168]	@ (8001c80 <MX_FDCAN1_Init+0x118>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001bda:	4829      	ldr	r0, [pc, #164]	@ (8001c80 <MX_FDCAN1_Init+0x118>)
 8001bdc:	f002 f968 	bl	8003eb0 <HAL_FDCAN_Init>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8001be6:	f000 f989 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef s;

        s.FilterConfig = FDCAN_FILTER_TO_RXFIFO0 ;
 8001bea:	2301      	movs	r3, #1
 8001bec:	627b      	str	r3, [r7, #36]	@ 0x24
        s.FilterType = FDCAN_STANDARD_ID ;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	623b      	str	r3, [r7, #32]
        s.IdType= FDCAN_FILTER_DUAL;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	61bb      	str	r3, [r7, #24]

        s.FilterID1 = 0x110;
 8001bf6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
        s.FilterID2 = 0x11;
 8001bfc:	2311      	movs	r3, #17
 8001bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        s.FilterIndex = 0;
 8001c00:	2300      	movs	r3, #0
 8001c02:	61fb      	str	r3, [r7, #28]

        s.FilterID1 = 0x12;
 8001c04:	2312      	movs	r3, #18
 8001c06:	62bb      	str	r3, [r7, #40]	@ 0x28
        s.FilterID2 = 0x13;
 8001c08:	2313      	movs	r3, #19
 8001c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        s.FilterIndex = 1;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	61fb      	str	r3, [r7, #28]



    if(HAL_FDCAN_ConfigFilter(&hfdcan1,&s)!= HAL_OK){
 8001c10:	f107 0318 	add.w	r3, r7, #24
 8001c14:	4619      	mov	r1, r3
 8001c16:	481a      	ldr	r0, [pc, #104]	@ (8001c80 <MX_FDCAN1_Init+0x118>)
 8001c18:	f002 faa4 	bl	8004164 <HAL_FDCAN_ConfigFilter>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_FDCAN1_Init+0xbe>

      	 Error_Handler();
 8001c22:	f000 f96b 	bl	8001efc <Error_Handler>
        }

  FDCAN_FilterTypeDef Filterconfigure;

        Filterconfigure.FilterConfig = FDCAN_FILTER_TO_RXFIFO0 ;
 8001c26:	2301      	movs	r3, #1
 8001c28:	60fb      	str	r3, [r7, #12]
        Filterconfigure.FilterType = FDCAN_EXTENDED_ID ;
 8001c2a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c2e:	60bb      	str	r3, [r7, #8]
        Filterconfigure.IdType= FDCAN_FILTER_DUAL;
 8001c30:	2301      	movs	r3, #1
 8001c32:	603b      	str	r3, [r7, #0]

        Filterconfigure.FilterID1 = 0x1FF310;
 8001c34:	4b14      	ldr	r3, [pc, #80]	@ (8001c88 <MX_FDCAN1_Init+0x120>)
 8001c36:	613b      	str	r3, [r7, #16]
        Filterconfigure.FilterID2 = 0x1FF310;
 8001c38:	4b13      	ldr	r3, [pc, #76]	@ (8001c88 <MX_FDCAN1_Init+0x120>)
 8001c3a:	617b      	str	r3, [r7, #20]
        Filterconfigure.FilterIndex = 0;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	607b      	str	r3, [r7, #4]

        Filterconfigure.FilterID1 = 0x1FF615;
 8001c40:	4b12      	ldr	r3, [pc, #72]	@ (8001c8c <MX_FDCAN1_Init+0x124>)
 8001c42:	613b      	str	r3, [r7, #16]
        Filterconfigure.FilterID2 = 0x1FF110;
 8001c44:	4b12      	ldr	r3, [pc, #72]	@ (8001c90 <MX_FDCAN1_Init+0x128>)
 8001c46:	617b      	str	r3, [r7, #20]
        Filterconfigure.FilterIndex = 1;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	607b      	str	r3, [r7, #4]

        Filterconfigure.FilterID1 = 0x1FF611;
 8001c4c:	4b11      	ldr	r3, [pc, #68]	@ (8001c94 <MX_FDCAN1_Init+0x12c>)
 8001c4e:	613b      	str	r3, [r7, #16]
        Filterconfigure.FilterID2 = 0x1FF612;
 8001c50:	4b11      	ldr	r3, [pc, #68]	@ (8001c98 <MX_FDCAN1_Init+0x130>)
 8001c52:	617b      	str	r3, [r7, #20]
        Filterconfigure.FilterIndex = 2;
 8001c54:	2302      	movs	r3, #2
 8001c56:	607b      	str	r3, [r7, #4]

        Filterconfigure.FilterID1 = 0x1FF810;
 8001c58:	4b10      	ldr	r3, [pc, #64]	@ (8001c9c <MX_FDCAN1_Init+0x134>)
 8001c5a:	613b      	str	r3, [r7, #16]
        Filterconfigure.FilterID2 = 0x1FF820;
 8001c5c:	4b10      	ldr	r3, [pc, #64]	@ (8001ca0 <MX_FDCAN1_Init+0x138>)
 8001c5e:	617b      	str	r3, [r7, #20]
        Filterconfigure.FilterIndex = 3;
 8001c60:	2303      	movs	r3, #3
 8001c62:	607b      	str	r3, [r7, #4]

    if(HAL_FDCAN_ConfigFilter(&hfdcan1,&Filterconfigure)!= HAL_OK){
 8001c64:	463b      	mov	r3, r7
 8001c66:	4619      	mov	r1, r3
 8001c68:	4805      	ldr	r0, [pc, #20]	@ (8001c80 <MX_FDCAN1_Init+0x118>)
 8001c6a:	f002 fa7b 	bl	8004164 <HAL_FDCAN_ConfigFilter>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_FDCAN1_Init+0x110>

      	 Error_Handler();
 8001c74:	f000 f942 	bl	8001efc <Error_Handler>
        }
  /* USER CODE END FDCAN1_Init 2 */

}
 8001c78:	bf00      	nop
 8001c7a:	3730      	adds	r7, #48	@ 0x30
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	2000023c 	.word	0x2000023c
 8001c84:	40006400 	.word	0x40006400
 8001c88:	001ff310 	.word	0x001ff310
 8001c8c:	001ff615 	.word	0x001ff615
 8001c90:	001ff110 	.word	0x001ff110
 8001c94:	001ff611 	.word	0x001ff611
 8001c98:	001ff612 	.word	0x001ff612
 8001c9c:	001ff810 	.word	0x001ff810
 8001ca0:	001ff820 	.word	0x001ff820

08001ca4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001ca8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d18 <MX_SPI2_Init+0x74>)
 8001caa:	4a1c      	ldr	r2, [pc, #112]	@ (8001d1c <MX_SPI2_Init+0x78>)
 8001cac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001cae:	4b1a      	ldr	r3, [pc, #104]	@ (8001d18 <MX_SPI2_Init+0x74>)
 8001cb0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001cb4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001cb6:	4b18      	ldr	r3, [pc, #96]	@ (8001d18 <MX_SPI2_Init+0x74>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cbc:	4b16      	ldr	r3, [pc, #88]	@ (8001d18 <MX_SPI2_Init+0x74>)
 8001cbe:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001cc2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cc4:	4b14      	ldr	r3, [pc, #80]	@ (8001d18 <MX_SPI2_Init+0x74>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cca:	4b13      	ldr	r3, [pc, #76]	@ (8001d18 <MX_SPI2_Init+0x74>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001cd0:	4b11      	ldr	r3, [pc, #68]	@ (8001d18 <MX_SPI2_Init+0x74>)
 8001cd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cd6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001cd8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d18 <MX_SPI2_Init+0x74>)
 8001cda:	2208      	movs	r2, #8
 8001cdc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cde:	4b0e      	ldr	r3, [pc, #56]	@ (8001d18 <MX_SPI2_Init+0x74>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8001d18 <MX_SPI2_Init+0x74>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cea:	4b0b      	ldr	r3, [pc, #44]	@ (8001d18 <MX_SPI2_Init+0x74>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001cf0:	4b09      	ldr	r3, [pc, #36]	@ (8001d18 <MX_SPI2_Init+0x74>)
 8001cf2:	2207      	movs	r2, #7
 8001cf4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001cf6:	4b08      	ldr	r3, [pc, #32]	@ (8001d18 <MX_SPI2_Init+0x74>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001cfc:	4b06      	ldr	r3, [pc, #24]	@ (8001d18 <MX_SPI2_Init+0x74>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d02:	4805      	ldr	r0, [pc, #20]	@ (8001d18 <MX_SPI2_Init+0x74>)
 8001d04:	f004 f852 	bl	8005dac <HAL_SPI_Init>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001d0e:	f000 f8f5 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	200002a0 	.word	0x200002a0
 8001d1c:	40003800 	.word	0x40003800

08001d20 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b088      	sub	sp, #32
 8001d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d26:	f107 0310 	add.w	r3, r7, #16
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	605a      	str	r2, [r3, #4]
 8001d30:	609a      	str	r2, [r3, #8]
 8001d32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d34:	1d3b      	adds	r3, r7, #4
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	605a      	str	r2, [r3, #4]
 8001d3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001db8 <MX_TIM2_Init+0x98>)
 8001d40:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d44:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 159;
 8001d46:	4b1c      	ldr	r3, [pc, #112]	@ (8001db8 <MX_TIM2_Init+0x98>)
 8001d48:	229f      	movs	r2, #159	@ 0x9f
 8001d4a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001db8 <MX_TIM2_Init+0x98>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001d52:	4b19      	ldr	r3, [pc, #100]	@ (8001db8 <MX_TIM2_Init+0x98>)
 8001d54:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d58:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d5a:	4b17      	ldr	r3, [pc, #92]	@ (8001db8 <MX_TIM2_Init+0x98>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d60:	4b15      	ldr	r3, [pc, #84]	@ (8001db8 <MX_TIM2_Init+0x98>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d66:	4814      	ldr	r0, [pc, #80]	@ (8001db8 <MX_TIM2_Init+0x98>)
 8001d68:	f005 fc62 	bl	8007630 <HAL_TIM_Base_Init>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001d72:	f000 f8c3 	bl	8001efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d7a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d7c:	f107 0310 	add.w	r3, r7, #16
 8001d80:	4619      	mov	r1, r3
 8001d82:	480d      	ldr	r0, [pc, #52]	@ (8001db8 <MX_TIM2_Init+0x98>)
 8001d84:	f005 fd24 	bl	80077d0 <HAL_TIM_ConfigClockSource>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001d8e:	f000 f8b5 	bl	8001efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d92:	2300      	movs	r3, #0
 8001d94:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d96:	2300      	movs	r3, #0
 8001d98:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d9a:	1d3b      	adds	r3, r7, #4
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4806      	ldr	r0, [pc, #24]	@ (8001db8 <MX_TIM2_Init+0x98>)
 8001da0:	f005 ff7c 	bl	8007c9c <HAL_TIMEx_MasterConfigSynchronization>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001daa:	f000 f8a7 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001dae:	bf00      	nop
 8001db0:	3720      	adds	r7, #32
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	200003c4 	.word	0x200003c4

08001dbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001dc2:	4b16      	ldr	r3, [pc, #88]	@ (8001e1c <MX_DMA_Init+0x60>)
 8001dc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dc6:	4a15      	ldr	r2, [pc, #84]	@ (8001e1c <MX_DMA_Init+0x60>)
 8001dc8:	f043 0304 	orr.w	r3, r3, #4
 8001dcc:	6493      	str	r3, [r2, #72]	@ 0x48
 8001dce:	4b13      	ldr	r3, [pc, #76]	@ (8001e1c <MX_DMA_Init+0x60>)
 8001dd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dd2:	f003 0304 	and.w	r3, r3, #4
 8001dd6:	607b      	str	r3, [r7, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001dda:	4b10      	ldr	r3, [pc, #64]	@ (8001e1c <MX_DMA_Init+0x60>)
 8001ddc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dde:	4a0f      	ldr	r2, [pc, #60]	@ (8001e1c <MX_DMA_Init+0x60>)
 8001de0:	f043 0301 	orr.w	r3, r3, #1
 8001de4:	6493      	str	r3, [r2, #72]	@ 0x48
 8001de6:	4b0d      	ldr	r3, [pc, #52]	@ (8001e1c <MX_DMA_Init+0x60>)
 8001de8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	603b      	str	r3, [r7, #0]
 8001df0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001df2:	2200      	movs	r2, #0
 8001df4:	2100      	movs	r1, #0
 8001df6:	200b      	movs	r0, #11
 8001df8:	f001 fdb3 	bl	8003962 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001dfc:	200b      	movs	r0, #11
 8001dfe:	f001 fdca 	bl	8003996 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001e02:	2200      	movs	r2, #0
 8001e04:	2100      	movs	r1, #0
 8001e06:	200c      	movs	r0, #12
 8001e08:	f001 fdab 	bl	8003962 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001e0c:	200c      	movs	r0, #12
 8001e0e:	f001 fdc2 	bl	8003996 <HAL_NVIC_EnableIRQ>

}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40021000 	.word	0x40021000

08001e20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b088      	sub	sp, #32
 8001e24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e26:	f107 030c 	add.w	r3, r7, #12
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	605a      	str	r2, [r3, #4]
 8001e30:	609a      	str	r2, [r3, #8]
 8001e32:	60da      	str	r2, [r3, #12]
 8001e34:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e36:	4b2f      	ldr	r3, [pc, #188]	@ (8001ef4 <MX_GPIO_Init+0xd4>)
 8001e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e3a:	4a2e      	ldr	r2, [pc, #184]	@ (8001ef4 <MX_GPIO_Init+0xd4>)
 8001e3c:	f043 0320 	orr.w	r3, r3, #32
 8001e40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e42:	4b2c      	ldr	r3, [pc, #176]	@ (8001ef4 <MX_GPIO_Init+0xd4>)
 8001e44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e46:	f003 0320 	and.w	r3, r3, #32
 8001e4a:	60bb      	str	r3, [r7, #8]
 8001e4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4e:	4b29      	ldr	r3, [pc, #164]	@ (8001ef4 <MX_GPIO_Init+0xd4>)
 8001e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e52:	4a28      	ldr	r2, [pc, #160]	@ (8001ef4 <MX_GPIO_Init+0xd4>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e5a:	4b26      	ldr	r3, [pc, #152]	@ (8001ef4 <MX_GPIO_Init+0xd4>)
 8001e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	607b      	str	r3, [r7, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e66:	4b23      	ldr	r3, [pc, #140]	@ (8001ef4 <MX_GPIO_Init+0xd4>)
 8001e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e6a:	4a22      	ldr	r2, [pc, #136]	@ (8001ef4 <MX_GPIO_Init+0xd4>)
 8001e6c:	f043 0302 	orr.w	r3, r3, #2
 8001e70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e72:	4b20      	ldr	r3, [pc, #128]	@ (8001ef4 <MX_GPIO_Init+0xd4>)
 8001e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	603b      	str	r3, [r7, #0]
 8001e7c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|RST_PIN_Pin, GPIO_PIN_RESET);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2163      	movs	r1, #99	@ 0x63
 8001e82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e86:	f002 ff67 	bl	8004d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_RESET);
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2102      	movs	r1, #2
 8001e8e:	481a      	ldr	r0, [pc, #104]	@ (8001ef8 <MX_GPIO_Init+0xd8>)
 8001e90:	f002 ff62 	bl	8004d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8001e94:	2323      	movs	r3, #35	@ 0x23
 8001e96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea4:	f107 030c 	add.w	r3, r7, #12
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001eae:	f002 fdd1 	bl	8004a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_PIN_Pin */
  GPIO_InitStruct.Pin = RST_PIN_Pin;
 8001eb2:	2340      	movs	r3, #64	@ 0x40
 8001eb4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RST_PIN_GPIO_Port, &GPIO_InitStruct);
 8001ec2:	f107 030c 	add.w	r3, r7, #12
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ecc:	f002 fdc2 	bl	8004a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_PIN_Pin */
  GPIO_InitStruct.Pin = CS_PIN_Pin;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001edc:	2303      	movs	r3, #3
 8001ede:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_PIN_GPIO_Port, &GPIO_InitStruct);
 8001ee0:	f107 030c 	add.w	r3, r7, #12
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4804      	ldr	r0, [pc, #16]	@ (8001ef8 <MX_GPIO_Init+0xd8>)
 8001ee8:	f002 fdb4 	bl	8004a54 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001eec:	bf00      	nop
 8001eee:	3720      	adds	r7, #32
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	48000400 	.word	0x48000400

08001efc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f00:	b672      	cpsid	i
}
 8001f02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f04:	bf00      	nop
 8001f06:	e7fd      	b.n	8001f04 <Error_Handler+0x8>

08001f08 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8001f08:	b590      	push	{r4, r7, lr}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4604      	mov	r4, r0
 8001f10:	4608      	mov	r0, r1
 8001f12:	4611      	mov	r1, r2
 8001f14:	461a      	mov	r2, r3
 8001f16:	4623      	mov	r3, r4
 8001f18:	71fb      	strb	r3, [r7, #7]
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	71bb      	strb	r3, [r7, #6]
 8001f1e:	460b      	mov	r3, r1
 8001f20:	80bb      	strh	r3, [r7, #4]
 8001f22:	4613      	mov	r3, r2
 8001f24:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	2b08      	cmp	r3, #8
 8001f2a:	d902      	bls.n	8001f32 <socket+0x2a>
 8001f2c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f30:	e0ef      	b.n	8002112 <socket+0x20a>
	switch(protocol)
 8001f32:	79bb      	ldrb	r3, [r7, #6]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d005      	beq.n	8001f44 <socket+0x3c>
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	dd11      	ble.n	8001f60 <socket+0x58>
 8001f3c:	3b02      	subs	r3, #2
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d80e      	bhi.n	8001f60 <socket+0x58>
            if(taddr == 0) return SOCKERR_SOCKINIT;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8001f42:	e010      	b.n	8001f66 <socket+0x5e>
            getSIPR((uint8_t*)&taddr);
 8001f44:	f107 030c 	add.w	r3, r7, #12
 8001f48:	2204      	movs	r2, #4
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8001f50:	f000 ff70 	bl	8002e34 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d105      	bne.n	8001f66 <socket+0x5e>
 8001f5a:	f06f 0302 	mvn.w	r3, #2
 8001f5e:	e0d8      	b.n	8002112 <socket+0x20a>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8001f60:	f06f 0304 	mvn.w	r3, #4
 8001f64:	e0d5      	b.n	8002112 <socket+0x20a>
         break;
 8001f66:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8001f68:	78fb      	ldrb	r3, [r7, #3]
 8001f6a:	f003 0304 	and.w	r3, r3, #4
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d002      	beq.n	8001f78 <socket+0x70>
 8001f72:	f06f 0305 	mvn.w	r3, #5
 8001f76:	e0cc      	b.n	8002112 <socket+0x20a>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8001f78:	78fb      	ldrb	r3, [r7, #3]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d028      	beq.n	8001fd0 <socket+0xc8>
	{
   	switch(protocol)
 8001f7e:	79bb      	ldrb	r3, [r7, #6]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d002      	beq.n	8001f8a <socket+0x82>
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d008      	beq.n	8001f9a <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8001f88:	e022      	b.n	8001fd0 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8001f8a:	78fb      	ldrb	r3, [r7, #3]
 8001f8c:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d11a      	bne.n	8001fca <socket+0xc2>
 8001f94:	f06f 0305 	mvn.w	r3, #5
 8001f98:	e0bb      	b.n	8002112 <socket+0x20a>
   	      if(flag & SF_IGMP_VER2)
 8001f9a:	78fb      	ldrb	r3, [r7, #3]
 8001f9c:	f003 0320 	and.w	r3, r3, #32
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d006      	beq.n	8001fb2 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8001fa4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	db02      	blt.n	8001fb2 <socket+0xaa>
 8001fac:	f06f 0305 	mvn.w	r3, #5
 8001fb0:	e0af      	b.n	8002112 <socket+0x20a>
      	      if(flag & SF_UNI_BLOCK)
 8001fb2:	78fb      	ldrb	r3, [r7, #3]
 8001fb4:	f003 0310 	and.w	r3, r3, #16
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d008      	beq.n	8001fce <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8001fbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	db04      	blt.n	8001fce <socket+0xc6>
 8001fc4:	f06f 0305 	mvn.w	r3, #5
 8001fc8:	e0a3      	b.n	8002112 <socket+0x20a>
   	      break;
 8001fca:	bf00      	nop
 8001fcc:	e000      	b.n	8001fd0 <socket+0xc8>
   	      break;
 8001fce:	bf00      	nop
   	}
   }
	close(sn);
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f000 f8ac 	bl	8002130 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8001fd8:	79fb      	ldrb	r3, [r7, #7]
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	3301      	adds	r3, #1
 8001fde:	00d8      	lsls	r0, r3, #3
 8001fe0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fe4:	f023 030f 	bic.w	r3, r3, #15
 8001fe8:	b25a      	sxtb	r2, r3
 8001fea:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	b25b      	sxtb	r3, r3
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	f000 fecf 	bl	8002d98 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8001ffa:	88bb      	ldrh	r3, [r7, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d110      	bne.n	8002022 <socket+0x11a>
	{
	   port = sock_any_port++;
 8002000:	4b46      	ldr	r3, [pc, #280]	@ (800211c <socket+0x214>)
 8002002:	881b      	ldrh	r3, [r3, #0]
 8002004:	1c5a      	adds	r2, r3, #1
 8002006:	b291      	uxth	r1, r2
 8002008:	4a44      	ldr	r2, [pc, #272]	@ (800211c <socket+0x214>)
 800200a:	8011      	strh	r1, [r2, #0]
 800200c:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 800200e:	4b43      	ldr	r3, [pc, #268]	@ (800211c <socket+0x214>)
 8002010:	881b      	ldrh	r3, [r3, #0]
 8002012:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8002016:	4293      	cmp	r3, r2
 8002018:	d103      	bne.n	8002022 <socket+0x11a>
 800201a:	4b40      	ldr	r3, [pc, #256]	@ (800211c <socket+0x214>)
 800201c:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8002020:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8002022:	79fb      	ldrb	r3, [r7, #7]
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	3301      	adds	r3, #1
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800202e:	461a      	mov	r2, r3
 8002030:	88bb      	ldrh	r3, [r7, #4]
 8002032:	0a1b      	lsrs	r3, r3, #8
 8002034:	b29b      	uxth	r3, r3
 8002036:	b2db      	uxtb	r3, r3
 8002038:	4619      	mov	r1, r3
 800203a:	4610      	mov	r0, r2
 800203c:	f000 feac 	bl	8002d98 <WIZCHIP_WRITE>
 8002040:	79fb      	ldrb	r3, [r7, #7]
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	3301      	adds	r3, #1
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800204c:	461a      	mov	r2, r3
 800204e:	88bb      	ldrh	r3, [r7, #4]
 8002050:	b2db      	uxtb	r3, r3
 8002052:	4619      	mov	r1, r3
 8002054:	4610      	mov	r0, r2
 8002056:	f000 fe9f 	bl	8002d98 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 800205a:	79fb      	ldrb	r3, [r7, #7]
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	3301      	adds	r3, #1
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002066:	2101      	movs	r1, #1
 8002068:	4618      	mov	r0, r3
 800206a:	f000 fe95 	bl	8002d98 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800206e:	bf00      	nop
 8002070:	79fb      	ldrb	r3, [r7, #7]
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	3301      	adds	r3, #1
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800207c:	4618      	mov	r0, r3
 800207e:	f000 fe3f 	bl	8002d00 <WIZCHIP_READ>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1f3      	bne.n	8002070 <socket+0x168>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8002088:	79fb      	ldrb	r3, [r7, #7]
 800208a:	2201      	movs	r2, #1
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	b21b      	sxth	r3, r3
 8002092:	43db      	mvns	r3, r3
 8002094:	b21a      	sxth	r2, r3
 8002096:	4b22      	ldr	r3, [pc, #136]	@ (8002120 <socket+0x218>)
 8002098:	881b      	ldrh	r3, [r3, #0]
 800209a:	b21b      	sxth	r3, r3
 800209c:	4013      	ands	r3, r2
 800209e:	b21b      	sxth	r3, r3
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	4b1f      	ldr	r3, [pc, #124]	@ (8002120 <socket+0x218>)
 80020a4:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 80020a6:	78fb      	ldrb	r3, [r7, #3]
 80020a8:	f003 0201 	and.w	r2, r3, #1
 80020ac:	79fb      	ldrb	r3, [r7, #7]
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	b21a      	sxth	r2, r3
 80020b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002120 <socket+0x218>)
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	b21b      	sxth	r3, r3
 80020ba:	4313      	orrs	r3, r2
 80020bc:	b21b      	sxth	r3, r3
 80020be:	b29a      	uxth	r2, r3
 80020c0:	4b17      	ldr	r3, [pc, #92]	@ (8002120 <socket+0x218>)
 80020c2:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 80020c4:	79fb      	ldrb	r3, [r7, #7]
 80020c6:	2201      	movs	r2, #1
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	b21b      	sxth	r3, r3
 80020ce:	43db      	mvns	r3, r3
 80020d0:	b21a      	sxth	r2, r3
 80020d2:	4b14      	ldr	r3, [pc, #80]	@ (8002124 <socket+0x21c>)
 80020d4:	881b      	ldrh	r3, [r3, #0]
 80020d6:	b21b      	sxth	r3, r3
 80020d8:	4013      	ands	r3, r2
 80020da:	b21b      	sxth	r3, r3
 80020dc:	b29a      	uxth	r2, r3
 80020de:	4b11      	ldr	r3, [pc, #68]	@ (8002124 <socket+0x21c>)
 80020e0:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	4a10      	ldr	r2, [pc, #64]	@ (8002128 <socket+0x220>)
 80020e6:	2100      	movs	r1, #0
 80020e8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	4a0f      	ldr	r2, [pc, #60]	@ (800212c <socket+0x224>)
 80020f0:	2100      	movs	r1, #0
 80020f2:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 80020f4:	bf00      	nop
 80020f6:	79fb      	ldrb	r3, [r7, #7]
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	3301      	adds	r3, #1
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002102:	4618      	mov	r0, r3
 8002104:	f000 fdfc 	bl	8002d00 <WIZCHIP_READ>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d0f3      	beq.n	80020f6 <socket+0x1ee>
   return (int8_t)sn;
 800210e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8002112:	4618      	mov	r0, r3
 8002114:	3714      	adds	r7, #20
 8002116:	46bd      	mov	sp, r7
 8002118:	bd90      	pop	{r4, r7, pc}
 800211a:	bf00      	nop
 800211c:	20000020 	.word	0x20000020
 8002120:	20000630 	.word	0x20000630
 8002124:	20000632 	.word	0x20000632
 8002128:	20000634 	.word	0x20000634
 800212c:	20000644 	.word	0x20000644

08002130 <close>:

int8_t close(uint8_t sn)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 800213a:	79fb      	ldrb	r3, [r7, #7]
 800213c:	2b08      	cmp	r3, #8
 800213e:	d902      	bls.n	8002146 <close+0x16>
 8002140:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002144:	e055      	b.n	80021f2 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	3301      	adds	r3, #1
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002152:	2110      	movs	r1, #16
 8002154:	4618      	mov	r0, r3
 8002156:	f000 fe1f 	bl	8002d98 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 800215a:	bf00      	nop
 800215c:	79fb      	ldrb	r3, [r7, #7]
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	3301      	adds	r3, #1
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002168:	4618      	mov	r0, r3
 800216a:	f000 fdc9 	bl	8002d00 <WIZCHIP_READ>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1f3      	bne.n	800215c <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	3301      	adds	r3, #1
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002180:	211f      	movs	r1, #31
 8002182:	4618      	mov	r0, r3
 8002184:	f000 fe08 	bl	8002d98 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	2201      	movs	r2, #1
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	b21b      	sxth	r3, r3
 8002192:	43db      	mvns	r3, r3
 8002194:	b21a      	sxth	r2, r3
 8002196:	4b19      	ldr	r3, [pc, #100]	@ (80021fc <close+0xcc>)
 8002198:	881b      	ldrh	r3, [r3, #0]
 800219a:	b21b      	sxth	r3, r3
 800219c:	4013      	ands	r3, r2
 800219e:	b21b      	sxth	r3, r3
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	4b16      	ldr	r3, [pc, #88]	@ (80021fc <close+0xcc>)
 80021a4:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 80021a6:	79fb      	ldrb	r3, [r7, #7]
 80021a8:	2201      	movs	r2, #1
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	b21b      	sxth	r3, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	b21a      	sxth	r2, r3
 80021b4:	4b12      	ldr	r3, [pc, #72]	@ (8002200 <close+0xd0>)
 80021b6:	881b      	ldrh	r3, [r3, #0]
 80021b8:	b21b      	sxth	r3, r3
 80021ba:	4013      	ands	r3, r2
 80021bc:	b21b      	sxth	r3, r3
 80021be:	b29a      	uxth	r2, r3
 80021c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002200 <close+0xd0>)
 80021c2:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 80021c4:	79fb      	ldrb	r3, [r7, #7]
 80021c6:	4a0f      	ldr	r2, [pc, #60]	@ (8002204 <close+0xd4>)
 80021c8:	2100      	movs	r1, #0
 80021ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002208 <close+0xd8>)
 80021d2:	2100      	movs	r1, #0
 80021d4:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 80021d6:	bf00      	nop
 80021d8:	79fb      	ldrb	r3, [r7, #7]
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	3301      	adds	r3, #1
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80021e4:	4618      	mov	r0, r3
 80021e6:	f000 fd8b 	bl	8002d00 <WIZCHIP_READ>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1f3      	bne.n	80021d8 <close+0xa8>
	return SOCK_OK;
 80021f0:	2301      	movs	r3, #1
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20000630 	.word	0x20000630
 8002200:	20000632 	.word	0x20000632
 8002204:	20000634 	.word	0x20000634
 8002208:	20000644 	.word	0x20000644

0800220c <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	6039      	str	r1, [r7, #0]
 8002216:	71fb      	strb	r3, [r7, #7]
 8002218:	4613      	mov	r3, r2
 800221a:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 800221c:	79fb      	ldrb	r3, [r7, #7]
 800221e:	2b08      	cmp	r3, #8
 8002220:	d902      	bls.n	8002228 <connect+0x1c>
 8002222:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002226:	e0c6      	b.n	80023b6 <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002228:	79fb      	ldrb	r3, [r7, #7]
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	3301      	adds	r3, #1
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	4618      	mov	r0, r3
 8002232:	f000 fd65 	bl	8002d00 <WIZCHIP_READ>
 8002236:	4603      	mov	r3, r0
 8002238:	f003 030f 	and.w	r3, r3, #15
 800223c:	2b01      	cmp	r3, #1
 800223e:	d002      	beq.n	8002246 <connect+0x3a>
 8002240:	f06f 0304 	mvn.w	r3, #4
 8002244:	e0b7      	b.n	80023b6 <connect+0x1aa>
   CHECK_SOCKINIT();
 8002246:	79fb      	ldrb	r3, [r7, #7]
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	3301      	adds	r3, #1
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002252:	4618      	mov	r0, r3
 8002254:	f000 fd54 	bl	8002d00 <WIZCHIP_READ>
 8002258:	4603      	mov	r3, r0
 800225a:	2b13      	cmp	r3, #19
 800225c:	d002      	beq.n	8002264 <connect+0x58>
 800225e:	f06f 0302 	mvn.w	r3, #2
 8002262:	e0a8      	b.n	80023b6 <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	021b      	lsls	r3, r3, #8
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	3201      	adds	r2, #1
 8002272:	7812      	ldrb	r2, [r2, #0]
 8002274:	4413      	add	r3, r2
 8002276:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	021b      	lsls	r3, r3, #8
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	3202      	adds	r2, #2
 8002280:	7812      	ldrb	r2, [r2, #0]
 8002282:	4413      	add	r3, r2
 8002284:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	021b      	lsls	r3, r3, #8
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	3203      	adds	r2, #3
 800228e:	7812      	ldrb	r2, [r2, #0]
 8002290:	4413      	add	r3, r2
 8002292:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800229a:	d002      	beq.n	80022a2 <connect+0x96>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d102      	bne.n	80022a8 <connect+0x9c>
 80022a2:	f06f 030b 	mvn.w	r3, #11
 80022a6:	e086      	b.n	80023b6 <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 80022a8:	88bb      	ldrh	r3, [r7, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d102      	bne.n	80022b4 <connect+0xa8>
 80022ae:	f06f 030a 	mvn.w	r3, #10
 80022b2:	e080      	b.n	80023b6 <connect+0x1aa>
	setSn_DIPR(sn,addr);
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	3301      	adds	r3, #1
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 80022c0:	2204      	movs	r2, #4
 80022c2:	6839      	ldr	r1, [r7, #0]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f000 fe15 	bl	8002ef4 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	3301      	adds	r3, #1
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022d6:	461a      	mov	r2, r3
 80022d8:	88bb      	ldrh	r3, [r7, #4]
 80022da:	0a1b      	lsrs	r3, r3, #8
 80022dc:	b29b      	uxth	r3, r3
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	4619      	mov	r1, r3
 80022e2:	4610      	mov	r0, r2
 80022e4:	f000 fd58 	bl	8002d98 <WIZCHIP_WRITE>
 80022e8:	79fb      	ldrb	r3, [r7, #7]
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	3301      	adds	r3, #1
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 80022f4:	461a      	mov	r2, r3
 80022f6:	88bb      	ldrh	r3, [r7, #4]
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	4619      	mov	r1, r3
 80022fc:	4610      	mov	r0, r2
 80022fe:	f000 fd4b 	bl	8002d98 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 8002302:	79fb      	ldrb	r3, [r7, #7]
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	3301      	adds	r3, #1
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800230e:	2104      	movs	r1, #4
 8002310:	4618      	mov	r0, r3
 8002312:	f000 fd41 	bl	8002d98 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002316:	bf00      	nop
 8002318:	79fb      	ldrb	r3, [r7, #7]
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	3301      	adds	r3, #1
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002324:	4618      	mov	r0, r3
 8002326:	f000 fceb 	bl	8002d00 <WIZCHIP_READ>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1f3      	bne.n	8002318 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8002330:	4b23      	ldr	r3, [pc, #140]	@ (80023c0 <connect+0x1b4>)
 8002332:	881b      	ldrh	r3, [r3, #0]
 8002334:	461a      	mov	r2, r3
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	fa42 f303 	asr.w	r3, r2, r3
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	2b00      	cmp	r3, #0
 8002342:	d02b      	beq.n	800239c <connect+0x190>
 8002344:	2300      	movs	r3, #0
 8002346:	e036      	b.n	80023b6 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8002348:	79fb      	ldrb	r3, [r7, #7]
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	3301      	adds	r3, #1
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002354:	4618      	mov	r0, r3
 8002356:	f000 fcd3 	bl	8002d00 <WIZCHIP_READ>
 800235a:	4603      	mov	r3, r0
 800235c:	f003 0308 	and.w	r3, r3, #8
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00c      	beq.n	800237e <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8002364:	79fb      	ldrb	r3, [r7, #7]
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	3301      	adds	r3, #1
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002370:	2108      	movs	r1, #8
 8002372:	4618      	mov	r0, r3
 8002374:	f000 fd10 	bl	8002d98 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 8002378:	f06f 030c 	mvn.w	r3, #12
 800237c:	e01b      	b.n	80023b6 <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 800237e:	79fb      	ldrb	r3, [r7, #7]
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	3301      	adds	r3, #1
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800238a:	4618      	mov	r0, r3
 800238c:	f000 fcb8 	bl	8002d00 <WIZCHIP_READ>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d102      	bne.n	800239c <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 8002396:	f06f 0303 	mvn.w	r3, #3
 800239a:	e00c      	b.n	80023b6 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 800239c:	79fb      	ldrb	r3, [r7, #7]
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	3301      	adds	r3, #1
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 fca9 	bl	8002d00 <WIZCHIP_READ>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b17      	cmp	r3, #23
 80023b2:	d1c9      	bne.n	8002348 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 80023b4:	2301      	movs	r3, #1
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20000630 	.word	0x20000630

080023c4 <disconnect>:

int8_t disconnect(uint8_t sn)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4603      	mov	r3, r0
 80023cc:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 80023ce:	79fb      	ldrb	r3, [r7, #7]
 80023d0:	2b08      	cmp	r3, #8
 80023d2:	d902      	bls.n	80023da <disconnect+0x16>
 80023d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80023d8:	e062      	b.n	80024a0 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	3301      	adds	r3, #1
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 fc8c 	bl	8002d00 <WIZCHIP_READ>
 80023e8:	4603      	mov	r3, r0
 80023ea:	f003 030f 	and.w	r3, r3, #15
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d002      	beq.n	80023f8 <disconnect+0x34>
 80023f2:	f06f 0304 	mvn.w	r3, #4
 80023f6:	e053      	b.n	80024a0 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 80023f8:	79fb      	ldrb	r3, [r7, #7]
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	3301      	adds	r3, #1
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002404:	2108      	movs	r1, #8
 8002406:	4618      	mov	r0, r3
 8002408:	f000 fcc6 	bl	8002d98 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 800240c:	bf00      	nop
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	3301      	adds	r3, #1
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800241a:	4618      	mov	r0, r3
 800241c:	f000 fc70 	bl	8002d00 <WIZCHIP_READ>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1f3      	bne.n	800240e <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	2201      	movs	r2, #1
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	b21b      	sxth	r3, r3
 8002430:	43db      	mvns	r3, r3
 8002432:	b21a      	sxth	r2, r3
 8002434:	4b1c      	ldr	r3, [pc, #112]	@ (80024a8 <disconnect+0xe4>)
 8002436:	881b      	ldrh	r3, [r3, #0]
 8002438:	b21b      	sxth	r3, r3
 800243a:	4013      	ands	r3, r2
 800243c:	b21b      	sxth	r3, r3
 800243e:	b29a      	uxth	r2, r3
 8002440:	4b19      	ldr	r3, [pc, #100]	@ (80024a8 <disconnect+0xe4>)
 8002442:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8002444:	4b19      	ldr	r3, [pc, #100]	@ (80024ac <disconnect+0xe8>)
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	461a      	mov	r2, r3
 800244a:	79fb      	ldrb	r3, [r7, #7]
 800244c:	fa42 f303 	asr.w	r3, r2, r3
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	2b00      	cmp	r3, #0
 8002456:	d016      	beq.n	8002486 <disconnect+0xc2>
 8002458:	2300      	movs	r3, #0
 800245a:	e021      	b.n	80024a0 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 800245c:	79fb      	ldrb	r3, [r7, #7]
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	3301      	adds	r3, #1
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002468:	4618      	mov	r0, r3
 800246a:	f000 fc49 	bl	8002d00 <WIZCHIP_READ>
 800246e:	4603      	mov	r3, r0
 8002470:	f003 0308 	and.w	r3, r3, #8
 8002474:	2b00      	cmp	r3, #0
 8002476:	d006      	beq.n	8002486 <disconnect+0xc2>
	   {
	      close(sn);
 8002478:	79fb      	ldrb	r3, [r7, #7]
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff fe58 	bl	8002130 <close>
	      return SOCKERR_TIMEOUT;
 8002480:	f06f 030c 	mvn.w	r3, #12
 8002484:	e00c      	b.n	80024a0 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8002486:	79fb      	ldrb	r3, [r7, #7]
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	3301      	adds	r3, #1
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002492:	4618      	mov	r0, r3
 8002494:	f000 fc34 	bl	8002d00 <WIZCHIP_READ>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1de      	bne.n	800245c <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 800249e:	2301      	movs	r3, #1
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	20000632 	.word	0x20000632
 80024ac:	20000630 	.word	0x20000630

080024b0 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4603      	mov	r3, r0
 80024b8:	6039      	str	r1, [r7, #0]
 80024ba:	71fb      	strb	r3, [r7, #7]
 80024bc:	4613      	mov	r3, r2
 80024be:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 80024c0:	2300      	movs	r3, #0
 80024c2:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 80024c8:	79fb      	ldrb	r3, [r7, #7]
 80024ca:	2b08      	cmp	r3, #8
 80024cc:	d902      	bls.n	80024d4 <send+0x24>
 80024ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80024d2:	e0dd      	b.n	8002690 <send+0x1e0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80024d4:	79fb      	ldrb	r3, [r7, #7]
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	3301      	adds	r3, #1
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	4618      	mov	r0, r3
 80024de:	f000 fc0f 	bl	8002d00 <WIZCHIP_READ>
 80024e2:	4603      	mov	r3, r0
 80024e4:	f003 030f 	and.w	r3, r3, #15
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d002      	beq.n	80024f2 <send+0x42>
 80024ec:	f06f 0304 	mvn.w	r3, #4
 80024f0:	e0ce      	b.n	8002690 <send+0x1e0>
   CHECK_SOCKDATA();
 80024f2:	88bb      	ldrh	r3, [r7, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d102      	bne.n	80024fe <send+0x4e>
 80024f8:	f06f 030d 	mvn.w	r3, #13
 80024fc:	e0c8      	b.n	8002690 <send+0x1e0>
   tmp = getSn_SR(sn);
 80024fe:	79fb      	ldrb	r3, [r7, #7]
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	3301      	adds	r3, #1
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800250a:	4618      	mov	r0, r3
 800250c:	f000 fbf8 	bl	8002d00 <WIZCHIP_READ>
 8002510:	4603      	mov	r3, r0
 8002512:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8002514:	7bfb      	ldrb	r3, [r7, #15]
 8002516:	2b17      	cmp	r3, #23
 8002518:	d005      	beq.n	8002526 <send+0x76>
 800251a:	7bfb      	ldrb	r3, [r7, #15]
 800251c:	2b1c      	cmp	r3, #28
 800251e:	d002      	beq.n	8002526 <send+0x76>
 8002520:	f06f 0306 	mvn.w	r3, #6
 8002524:	e0b4      	b.n	8002690 <send+0x1e0>
   if( sock_is_sending & (1<<sn) )
 8002526:	4b5c      	ldr	r3, [pc, #368]	@ (8002698 <send+0x1e8>)
 8002528:	881b      	ldrh	r3, [r3, #0]
 800252a:	461a      	mov	r2, r3
 800252c:	79fb      	ldrb	r3, [r7, #7]
 800252e:	fa42 f303 	asr.w	r3, r2, r3
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	d039      	beq.n	80025ae <send+0xfe>
   {
      tmp = getSn_IR(sn);
 800253a:	79fb      	ldrb	r3, [r7, #7]
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	3301      	adds	r3, #1
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002546:	4618      	mov	r0, r3
 8002548:	f000 fbda 	bl	8002d00 <WIZCHIP_READ>
 800254c:	4603      	mov	r3, r0
 800254e:	f003 031f 	and.w	r3, r3, #31
 8002552:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8002554:	7bfb      	ldrb	r3, [r7, #15]
 8002556:	f003 0310 	and.w	r3, r3, #16
 800255a:	2b00      	cmp	r3, #0
 800255c:	d019      	beq.n	8002592 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800255e:	79fb      	ldrb	r3, [r7, #7]
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	3301      	adds	r3, #1
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800256a:	2110      	movs	r1, #16
 800256c:	4618      	mov	r0, r3
 800256e:	f000 fc13 	bl	8002d98 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8002572:	79fb      	ldrb	r3, [r7, #7]
 8002574:	2201      	movs	r2, #1
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	b21b      	sxth	r3, r3
 800257c:	43db      	mvns	r3, r3
 800257e:	b21a      	sxth	r2, r3
 8002580:	4b45      	ldr	r3, [pc, #276]	@ (8002698 <send+0x1e8>)
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	b21b      	sxth	r3, r3
 8002586:	4013      	ands	r3, r2
 8002588:	b21b      	sxth	r3, r3
 800258a:	b29a      	uxth	r2, r3
 800258c:	4b42      	ldr	r3, [pc, #264]	@ (8002698 <send+0x1e8>)
 800258e:	801a      	strh	r2, [r3, #0]
 8002590:	e00d      	b.n	80025ae <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8002592:	7bfb      	ldrb	r3, [r7, #15]
 8002594:	f003 0308 	and.w	r3, r3, #8
 8002598:	2b00      	cmp	r3, #0
 800259a:	d006      	beq.n	80025aa <send+0xfa>
      {
         close(sn);
 800259c:	79fb      	ldrb	r3, [r7, #7]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff fdc6 	bl	8002130 <close>
         return SOCKERR_TIMEOUT;
 80025a4:	f06f 030c 	mvn.w	r3, #12
 80025a8:	e072      	b.n	8002690 <send+0x1e0>
      }
      else return SOCK_BUSY;
 80025aa:	2300      	movs	r3, #0
 80025ac:	e070      	b.n	8002690 <send+0x1e0>
   }
   freesize = getSn_TxMAX(sn);
 80025ae:	79fb      	ldrb	r3, [r7, #7]
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	3301      	adds	r3, #1
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 80025ba:	4618      	mov	r0, r3
 80025bc:	f000 fba0 	bl	8002d00 <WIZCHIP_READ>
 80025c0:	4603      	mov	r3, r0
 80025c2:	029b      	lsls	r3, r3, #10
 80025c4:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80025c6:	88ba      	ldrh	r2, [r7, #4]
 80025c8:	89bb      	ldrh	r3, [r7, #12]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d901      	bls.n	80025d2 <send+0x122>
 80025ce:	89bb      	ldrh	r3, [r7, #12]
 80025d0:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80025d2:	79fb      	ldrb	r3, [r7, #7]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f000 fced 	bl	8002fb4 <getSn_TX_FSR>
 80025da:	4603      	mov	r3, r0
 80025dc:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 80025de:	79fb      	ldrb	r3, [r7, #7]
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	3301      	adds	r3, #1
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80025ea:	4618      	mov	r0, r3
 80025ec:	f000 fb88 	bl	8002d00 <WIZCHIP_READ>
 80025f0:	4603      	mov	r3, r0
 80025f2:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
 80025f6:	2b17      	cmp	r3, #23
 80025f8:	d009      	beq.n	800260e <send+0x15e>
 80025fa:	7bfb      	ldrb	r3, [r7, #15]
 80025fc:	2b1c      	cmp	r3, #28
 80025fe:	d006      	beq.n	800260e <send+0x15e>
      {
         close(sn);
 8002600:	79fb      	ldrb	r3, [r7, #7]
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff fd94 	bl	8002130 <close>
         return SOCKERR_SOCKSTATUS;
 8002608:	f06f 0306 	mvn.w	r3, #6
 800260c:	e040      	b.n	8002690 <send+0x1e0>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800260e:	4b23      	ldr	r3, [pc, #140]	@ (800269c <send+0x1ec>)
 8002610:	881b      	ldrh	r3, [r3, #0]
 8002612:	461a      	mov	r2, r3
 8002614:	79fb      	ldrb	r3, [r7, #7]
 8002616:	fa42 f303 	asr.w	r3, r2, r3
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d005      	beq.n	800262e <send+0x17e>
 8002622:	88ba      	ldrh	r2, [r7, #4]
 8002624:	89bb      	ldrh	r3, [r7, #12]
 8002626:	429a      	cmp	r2, r3
 8002628:	d901      	bls.n	800262e <send+0x17e>
 800262a:	2300      	movs	r3, #0
 800262c:	e030      	b.n	8002690 <send+0x1e0>
      if(len <= freesize) break;
 800262e:	88ba      	ldrh	r2, [r7, #4]
 8002630:	89bb      	ldrh	r3, [r7, #12]
 8002632:	429a      	cmp	r2, r3
 8002634:	d900      	bls.n	8002638 <send+0x188>
      freesize = getSn_TX_FSR(sn);
 8002636:	e7cc      	b.n	80025d2 <send+0x122>
      if(len <= freesize) break;
 8002638:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 800263a:	88ba      	ldrh	r2, [r7, #4]
 800263c:	79fb      	ldrb	r3, [r7, #7]
 800263e:	6839      	ldr	r1, [r7, #0]
 8002640:	4618      	mov	r0, r3
 8002642:	f000 fd49 	bl	80030d8 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	3301      	adds	r3, #1
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002652:	2120      	movs	r1, #32
 8002654:	4618      	mov	r0, r3
 8002656:	f000 fb9f 	bl	8002d98 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 800265a:	bf00      	nop
 800265c:	79fb      	ldrb	r3, [r7, #7]
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	3301      	adds	r3, #1
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002668:	4618      	mov	r0, r3
 800266a:	f000 fb49 	bl	8002d00 <WIZCHIP_READ>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1f3      	bne.n	800265c <send+0x1ac>
   sock_is_sending |= (1 << sn);
 8002674:	79fb      	ldrb	r3, [r7, #7]
 8002676:	2201      	movs	r2, #1
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	b21a      	sxth	r2, r3
 800267e:	4b06      	ldr	r3, [pc, #24]	@ (8002698 <send+0x1e8>)
 8002680:	881b      	ldrh	r3, [r3, #0]
 8002682:	b21b      	sxth	r3, r3
 8002684:	4313      	orrs	r3, r2
 8002686:	b21b      	sxth	r3, r3
 8002688:	b29a      	uxth	r2, r3
 800268a:	4b03      	ldr	r3, [pc, #12]	@ (8002698 <send+0x1e8>)
 800268c:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800268e:	88bb      	ldrh	r3, [r7, #4]
}
 8002690:	4618      	mov	r0, r3
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	20000632 	.word	0x20000632
 800269c:	20000630 	.word	0x20000630

080026a0 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80026a0:	b590      	push	{r4, r7, lr}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	4603      	mov	r3, r0
 80026a8:	6039      	str	r1, [r7, #0]
 80026aa:	71fb      	strb	r3, [r7, #7]
 80026ac:	4613      	mov	r3, r2
 80026ae:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 80026b0:	2300      	movs	r3, #0
 80026b2:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 80026b4:	2300      	movs	r3, #0
 80026b6:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 80026b8:	79fb      	ldrb	r3, [r7, #7]
 80026ba:	2b08      	cmp	r3, #8
 80026bc:	d902      	bls.n	80026c4 <recv+0x24>
 80026be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80026c2:	e09b      	b.n	80027fc <recv+0x15c>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80026c4:	79fb      	ldrb	r3, [r7, #7]
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	3301      	adds	r3, #1
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	4618      	mov	r0, r3
 80026ce:	f000 fb17 	bl	8002d00 <WIZCHIP_READ>
 80026d2:	4603      	mov	r3, r0
 80026d4:	f003 030f 	and.w	r3, r3, #15
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d002      	beq.n	80026e2 <recv+0x42>
 80026dc:	f06f 0304 	mvn.w	r3, #4
 80026e0:	e08c      	b.n	80027fc <recv+0x15c>
   CHECK_SOCKDATA();
 80026e2:	88bb      	ldrh	r3, [r7, #4]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d102      	bne.n	80026ee <recv+0x4e>
 80026e8:	f06f 030d 	mvn.w	r3, #13
 80026ec:	e086      	b.n	80027fc <recv+0x15c>
   
   recvsize = getSn_RxMAX(sn);
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	3301      	adds	r3, #1
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 fb00 	bl	8002d00 <WIZCHIP_READ>
 8002700:	4603      	mov	r3, r0
 8002702:	029b      	lsls	r3, r3, #10
 8002704:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8002706:	89ba      	ldrh	r2, [r7, #12]
 8002708:	88bb      	ldrh	r3, [r7, #4]
 800270a:	429a      	cmp	r2, r3
 800270c:	d201      	bcs.n	8002712 <recv+0x72>
 800270e:	89bb      	ldrh	r3, [r7, #12]
 8002710:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8002712:	79fb      	ldrb	r3, [r7, #7]
 8002714:	4618      	mov	r0, r3
 8002716:	f000 fc96 	bl	8003046 <getSn_RX_RSR>
 800271a:	4603      	mov	r3, r0
 800271c:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 800271e:	79fb      	ldrb	r3, [r7, #7]
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	3301      	adds	r3, #1
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800272a:	4618      	mov	r0, r3
 800272c:	f000 fae8 	bl	8002d00 <WIZCHIP_READ>
 8002730:	4603      	mov	r3, r0
 8002732:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8002734:	7bfb      	ldrb	r3, [r7, #15]
 8002736:	2b17      	cmp	r3, #23
 8002738:	d026      	beq.n	8002788 <recv+0xe8>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 800273a:	7bfb      	ldrb	r3, [r7, #15]
 800273c:	2b1c      	cmp	r3, #28
 800273e:	d11c      	bne.n	800277a <recv+0xda>
            {
               if(recvsize != 0) break;
 8002740:	89bb      	ldrh	r3, [r7, #12]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d133      	bne.n	80027ae <recv+0x10e>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8002746:	79fb      	ldrb	r3, [r7, #7]
 8002748:	4618      	mov	r0, r3
 800274a:	f000 fc33 	bl	8002fb4 <getSn_TX_FSR>
 800274e:	4603      	mov	r3, r0
 8002750:	461c      	mov	r4, r3
 8002752:	79fb      	ldrb	r3, [r7, #7]
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	3301      	adds	r3, #1
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 800275e:	4618      	mov	r0, r3
 8002760:	f000 face 	bl	8002d00 <WIZCHIP_READ>
 8002764:	4603      	mov	r3, r0
 8002766:	029b      	lsls	r3, r3, #10
 8002768:	429c      	cmp	r4, r3
 800276a:	d10d      	bne.n	8002788 <recv+0xe8>
               {
                  close(sn);
 800276c:	79fb      	ldrb	r3, [r7, #7]
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff fcde 	bl	8002130 <close>
                  return SOCKERR_SOCKSTATUS;
 8002774:	f06f 0306 	mvn.w	r3, #6
 8002778:	e040      	b.n	80027fc <recv+0x15c>
               }
            }
            else
            {
               close(sn);
 800277a:	79fb      	ldrb	r3, [r7, #7]
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff fcd7 	bl	8002130 <close>
               return SOCKERR_SOCKSTATUS;
 8002782:	f06f 0306 	mvn.w	r3, #6
 8002786:	e039      	b.n	80027fc <recv+0x15c>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8002788:	4b1e      	ldr	r3, [pc, #120]	@ (8002804 <recv+0x164>)
 800278a:	881b      	ldrh	r3, [r3, #0]
 800278c:	461a      	mov	r2, r3
 800278e:	79fb      	ldrb	r3, [r7, #7]
 8002790:	fa42 f303 	asr.w	r3, r2, r3
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	2b00      	cmp	r3, #0
 800279a:	d004      	beq.n	80027a6 <recv+0x106>
 800279c:	89bb      	ldrh	r3, [r7, #12]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <recv+0x106>
 80027a2:	2300      	movs	r3, #0
 80027a4:	e02a      	b.n	80027fc <recv+0x15c>
         if(recvsize != 0) break;
 80027a6:	89bb      	ldrh	r3, [r7, #12]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d102      	bne.n	80027b2 <recv+0x112>
         recvsize = getSn_RX_RSR(sn);
 80027ac:	e7b1      	b.n	8002712 <recv+0x72>
               if(recvsize != 0) break;
 80027ae:	bf00      	nop
 80027b0:	e000      	b.n	80027b4 <recv+0x114>
         if(recvsize != 0) break;
 80027b2:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 80027b4:	89ba      	ldrh	r2, [r7, #12]
 80027b6:	88bb      	ldrh	r3, [r7, #4]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d201      	bcs.n	80027c0 <recv+0x120>
 80027bc:	89bb      	ldrh	r3, [r7, #12]
 80027be:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 80027c0:	88ba      	ldrh	r2, [r7, #4]
 80027c2:	79fb      	ldrb	r3, [r7, #7]
 80027c4:	6839      	ldr	r1, [r7, #0]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f000 fce0 	bl	800318c <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	3301      	adds	r3, #1
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80027d8:	2140      	movs	r1, #64	@ 0x40
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 fadc 	bl	8002d98 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80027e0:	bf00      	nop
 80027e2:	79fb      	ldrb	r3, [r7, #7]
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	3301      	adds	r3, #1
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80027ee:	4618      	mov	r0, r3
 80027f0:	f000 fa86 	bl	8002d00 <WIZCHIP_READ>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1f3      	bne.n	80027e2 <recv+0x142>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80027fa:	88bb      	ldrh	r3, [r7, #4]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3714      	adds	r7, #20
 8002800:	46bd      	mov	sp, r7
 8002802:	bd90      	pop	{r4, r7, pc}
 8002804:	20000630 	.word	0x20000630

08002808 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800280e:	4b0f      	ldr	r3, [pc, #60]	@ (800284c <HAL_MspInit+0x44>)
 8002810:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002812:	4a0e      	ldr	r2, [pc, #56]	@ (800284c <HAL_MspInit+0x44>)
 8002814:	f043 0301 	orr.w	r3, r3, #1
 8002818:	6613      	str	r3, [r2, #96]	@ 0x60
 800281a:	4b0c      	ldr	r3, [pc, #48]	@ (800284c <HAL_MspInit+0x44>)
 800281c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	607b      	str	r3, [r7, #4]
 8002824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002826:	4b09      	ldr	r3, [pc, #36]	@ (800284c <HAL_MspInit+0x44>)
 8002828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800282a:	4a08      	ldr	r2, [pc, #32]	@ (800284c <HAL_MspInit+0x44>)
 800282c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002830:	6593      	str	r3, [r2, #88]	@ 0x58
 8002832:	4b06      	ldr	r3, [pc, #24]	@ (800284c <HAL_MspInit+0x44>)
 8002834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002836:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800283a:	603b      	str	r3, [r7, #0]
 800283c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800283e:	f002 fb61 	bl	8004f04 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002842:	bf00      	nop
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	40021000 	.word	0x40021000

08002850 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b09e      	sub	sp, #120	@ 0x78
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002858:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	605a      	str	r2, [r3, #4]
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	60da      	str	r2, [r3, #12]
 8002866:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002868:	f107 0310 	add.w	r3, r7, #16
 800286c:	2254      	movs	r2, #84	@ 0x54
 800286e:	2100      	movs	r1, #0
 8002870:	4618      	mov	r0, r3
 8002872:	f006 f804 	bl	800887e <memset>
  if(hfdcan->Instance==FDCAN1)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a24      	ldr	r2, [pc, #144]	@ (800290c <HAL_FDCAN_MspInit+0xbc>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d140      	bne.n	8002902 <HAL_FDCAN_MspInit+0xb2>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002880:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002884:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002886:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800288a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800288c:	f107 0310 	add.w	r3, r7, #16
 8002890:	4618      	mov	r0, r3
 8002892:	f003 f83d 	bl	8005910 <HAL_RCCEx_PeriphCLKConfig>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800289c:	f7ff fb2e 	bl	8001efc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80028a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002910 <HAL_FDCAN_MspInit+0xc0>)
 80028a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028a4:	4a1a      	ldr	r2, [pc, #104]	@ (8002910 <HAL_FDCAN_MspInit+0xc0>)
 80028a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80028aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80028ac:	4b18      	ldr	r3, [pc, #96]	@ (8002910 <HAL_FDCAN_MspInit+0xc0>)
 80028ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028b4:	60fb      	str	r3, [r7, #12]
 80028b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028b8:	4b15      	ldr	r3, [pc, #84]	@ (8002910 <HAL_FDCAN_MspInit+0xc0>)
 80028ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028bc:	4a14      	ldr	r2, [pc, #80]	@ (8002910 <HAL_FDCAN_MspInit+0xc0>)
 80028be:	f043 0302 	orr.w	r3, r3, #2
 80028c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028c4:	4b12      	ldr	r3, [pc, #72]	@ (8002910 <HAL_FDCAN_MspInit+0xc0>)
 80028c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	60bb      	str	r3, [r7, #8]
 80028ce:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80028d0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80028d4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d6:	2302      	movs	r3, #2
 80028d8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028da:	2300      	movs	r3, #0
 80028dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028de:	2303      	movs	r3, #3
 80028e0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80028e2:	2309      	movs	r3, #9
 80028e4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80028ea:	4619      	mov	r1, r3
 80028ec:	4809      	ldr	r0, [pc, #36]	@ (8002914 <HAL_FDCAN_MspInit+0xc4>)
 80028ee:	f002 f8b1 	bl	8004a54 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80028f2:	2200      	movs	r2, #0
 80028f4:	2100      	movs	r1, #0
 80028f6:	2015      	movs	r0, #21
 80028f8:	f001 f833 	bl	8003962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80028fc:	2015      	movs	r0, #21
 80028fe:	f001 f84a 	bl	8003996 <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8002902:	bf00      	nop
 8002904:	3778      	adds	r7, #120	@ 0x78
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40006400 	.word	0x40006400
 8002910:	40021000 	.word	0x40021000
 8002914:	48000400 	.word	0x48000400

08002918 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b08a      	sub	sp, #40	@ 0x28
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002920:	f107 0314 	add.w	r3, r7, #20
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	605a      	str	r2, [r3, #4]
 800292a:	609a      	str	r2, [r3, #8]
 800292c:	60da      	str	r2, [r3, #12]
 800292e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a49      	ldr	r2, [pc, #292]	@ (8002a5c <HAL_SPI_MspInit+0x144>)
 8002936:	4293      	cmp	r3, r2
 8002938:	f040 808c 	bne.w	8002a54 <HAL_SPI_MspInit+0x13c>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800293c:	4b48      	ldr	r3, [pc, #288]	@ (8002a60 <HAL_SPI_MspInit+0x148>)
 800293e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002940:	4a47      	ldr	r2, [pc, #284]	@ (8002a60 <HAL_SPI_MspInit+0x148>)
 8002942:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002946:	6593      	str	r3, [r2, #88]	@ 0x58
 8002948:	4b45      	ldr	r3, [pc, #276]	@ (8002a60 <HAL_SPI_MspInit+0x148>)
 800294a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800294c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002950:	613b      	str	r3, [r7, #16]
 8002952:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002954:	4b42      	ldr	r3, [pc, #264]	@ (8002a60 <HAL_SPI_MspInit+0x148>)
 8002956:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002958:	4a41      	ldr	r2, [pc, #260]	@ (8002a60 <HAL_SPI_MspInit+0x148>)
 800295a:	f043 0302 	orr.w	r3, r3, #2
 800295e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002960:	4b3f      	ldr	r3, [pc, #252]	@ (8002a60 <HAL_SPI_MspInit+0x148>)
 8002962:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	60fb      	str	r3, [r7, #12]
 800296a:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800296c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002970:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002972:	2302      	movs	r3, #2
 8002974:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002976:	2300      	movs	r3, #0
 8002978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800297a:	2303      	movs	r3, #3
 800297c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800297e:	2305      	movs	r3, #5
 8002980:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002982:	f107 0314 	add.w	r3, r7, #20
 8002986:	4619      	mov	r1, r3
 8002988:	4836      	ldr	r0, [pc, #216]	@ (8002a64 <HAL_SPI_MspInit+0x14c>)
 800298a:	f002 f863 	bl	8004a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800298e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002994:	2302      	movs	r3, #2
 8002996:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002998:	2301      	movs	r3, #1
 800299a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800299c:	2303      	movs	r3, #3
 800299e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029a0:	2305      	movs	r3, #5
 80029a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029a4:	f107 0314 	add.w	r3, r7, #20
 80029a8:	4619      	mov	r1, r3
 80029aa:	482e      	ldr	r0, [pc, #184]	@ (8002a64 <HAL_SPI_MspInit+0x14c>)
 80029ac:	f002 f852 	bl	8004a54 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel1;
 80029b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002a68 <HAL_SPI_MspInit+0x150>)
 80029b2:	4a2e      	ldr	r2, [pc, #184]	@ (8002a6c <HAL_SPI_MspInit+0x154>)
 80029b4:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80029b6:	4b2c      	ldr	r3, [pc, #176]	@ (8002a68 <HAL_SPI_MspInit+0x150>)
 80029b8:	220c      	movs	r2, #12
 80029ba:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029bc:	4b2a      	ldr	r3, [pc, #168]	@ (8002a68 <HAL_SPI_MspInit+0x150>)
 80029be:	2200      	movs	r2, #0
 80029c0:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029c2:	4b29      	ldr	r3, [pc, #164]	@ (8002a68 <HAL_SPI_MspInit+0x150>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029c8:	4b27      	ldr	r3, [pc, #156]	@ (8002a68 <HAL_SPI_MspInit+0x150>)
 80029ca:	2280      	movs	r2, #128	@ 0x80
 80029cc:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029ce:	4b26      	ldr	r3, [pc, #152]	@ (8002a68 <HAL_SPI_MspInit+0x150>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029d4:	4b24      	ldr	r3, [pc, #144]	@ (8002a68 <HAL_SPI_MspInit+0x150>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80029da:	4b23      	ldr	r3, [pc, #140]	@ (8002a68 <HAL_SPI_MspInit+0x150>)
 80029dc:	2200      	movs	r2, #0
 80029de:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80029e0:	4b21      	ldr	r3, [pc, #132]	@ (8002a68 <HAL_SPI_MspInit+0x150>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80029e6:	4820      	ldr	r0, [pc, #128]	@ (8002a68 <HAL_SPI_MspInit+0x150>)
 80029e8:	f000 fff0 	bl	80039cc <HAL_DMA_Init>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <HAL_SPI_MspInit+0xde>
    {
      Error_Handler();
 80029f2:	f7ff fa83 	bl	8001efc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a1b      	ldr	r2, [pc, #108]	@ (8002a68 <HAL_SPI_MspInit+0x150>)
 80029fa:	659a      	str	r2, [r3, #88]	@ 0x58
 80029fc:	4a1a      	ldr	r2, [pc, #104]	@ (8002a68 <HAL_SPI_MspInit+0x150>)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel2;
 8002a02:	4b1b      	ldr	r3, [pc, #108]	@ (8002a70 <HAL_SPI_MspInit+0x158>)
 8002a04:	4a1b      	ldr	r2, [pc, #108]	@ (8002a74 <HAL_SPI_MspInit+0x15c>)
 8002a06:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8002a08:	4b19      	ldr	r3, [pc, #100]	@ (8002a70 <HAL_SPI_MspInit+0x158>)
 8002a0a:	220d      	movs	r2, #13
 8002a0c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a0e:	4b18      	ldr	r3, [pc, #96]	@ (8002a70 <HAL_SPI_MspInit+0x158>)
 8002a10:	2210      	movs	r2, #16
 8002a12:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a14:	4b16      	ldr	r3, [pc, #88]	@ (8002a70 <HAL_SPI_MspInit+0x158>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a1a:	4b15      	ldr	r3, [pc, #84]	@ (8002a70 <HAL_SPI_MspInit+0x158>)
 8002a1c:	2280      	movs	r2, #128	@ 0x80
 8002a1e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a20:	4b13      	ldr	r3, [pc, #76]	@ (8002a70 <HAL_SPI_MspInit+0x158>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a26:	4b12      	ldr	r3, [pc, #72]	@ (8002a70 <HAL_SPI_MspInit+0x158>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002a2c:	4b10      	ldr	r3, [pc, #64]	@ (8002a70 <HAL_SPI_MspInit+0x158>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a32:	4b0f      	ldr	r3, [pc, #60]	@ (8002a70 <HAL_SPI_MspInit+0x158>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002a38:	480d      	ldr	r0, [pc, #52]	@ (8002a70 <HAL_SPI_MspInit+0x158>)
 8002a3a:	f000 ffc7 	bl	80039cc <HAL_DMA_Init>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <HAL_SPI_MspInit+0x130>
    {
      Error_Handler();
 8002a44:	f7ff fa5a 	bl	8001efc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a09      	ldr	r2, [pc, #36]	@ (8002a70 <HAL_SPI_MspInit+0x158>)
 8002a4c:	655a      	str	r2, [r3, #84]	@ 0x54
 8002a4e:	4a08      	ldr	r2, [pc, #32]	@ (8002a70 <HAL_SPI_MspInit+0x158>)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002a54:	bf00      	nop
 8002a56:	3728      	adds	r7, #40	@ 0x28
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	40003800 	.word	0x40003800
 8002a60:	40021000 	.word	0x40021000
 8002a64:	48000400 	.word	0x48000400
 8002a68:	20000304 	.word	0x20000304
 8002a6c:	40020008 	.word	0x40020008
 8002a70:	20000364 	.word	0x20000364
 8002a74:	4002001c 	.word	0x4002001c

08002a78 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a88:	d10b      	bne.n	8002aa2 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a8a:	4b09      	ldr	r3, [pc, #36]	@ (8002ab0 <HAL_TIM_Base_MspInit+0x38>)
 8002a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a8e:	4a08      	ldr	r2, [pc, #32]	@ (8002ab0 <HAL_TIM_Base_MspInit+0x38>)
 8002a90:	f043 0301 	orr.w	r3, r3, #1
 8002a94:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a96:	4b06      	ldr	r3, [pc, #24]	@ (8002ab0 <HAL_TIM_Base_MspInit+0x38>)
 8002a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002aa2:	bf00      	nop
 8002aa4:	3714      	adds	r7, #20
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	40021000 	.word	0x40021000

08002ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ab8:	bf00      	nop
 8002aba:	e7fd      	b.n	8002ab8 <NMI_Handler+0x4>

08002abc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ac0:	bf00      	nop
 8002ac2:	e7fd      	b.n	8002ac0 <HardFault_Handler+0x4>

08002ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ac8:	bf00      	nop
 8002aca:	e7fd      	b.n	8002ac8 <MemManage_Handler+0x4>

08002acc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ad0:	bf00      	nop
 8002ad2:	e7fd      	b.n	8002ad0 <BusFault_Handler+0x4>

08002ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ad8:	bf00      	nop
 8002ada:	e7fd      	b.n	8002ad8 <UsageFault_Handler+0x4>

08002adc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ae0:	bf00      	nop
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002aea:	b480      	push	{r7}
 8002aec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002aee:	bf00      	nop
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002afc:	bf00      	nop
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b0a:	f000 fe0f 	bl	800372c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b0e:	bf00      	nop
 8002b10:	bd80      	pop	{r7, pc}
	...

08002b14 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002b18:	4802      	ldr	r0, [pc, #8]	@ (8002b24 <DMA1_Channel1_IRQHandler+0x10>)
 8002b1a:	f001 f87a 	bl	8003c12 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002b1e:	bf00      	nop
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	20000304 	.word	0x20000304

08002b28 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002b2c:	4802      	ldr	r0, [pc, #8]	@ (8002b38 <DMA1_Channel2_IRQHandler+0x10>)
 8002b2e:	f001 f870 	bl	8003c12 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002b32:	bf00      	nop
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20000364 	.word	0x20000364

08002b3c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002b40:	4802      	ldr	r0, [pc, #8]	@ (8002b4c <FDCAN1_IT0_IRQHandler+0x10>)
 8002b42:	f001 fd7f 	bl	8004644 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002b46:	bf00      	nop
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	2000023c 	.word	0x2000023c

08002b50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  return 1;
 8002b54:	2301      	movs	r3, #1
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <_kill>:

int _kill(int pid, int sig)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b6a:	f005 fedb 	bl	8008924 <__errno>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2216      	movs	r2, #22
 8002b72:	601a      	str	r2, [r3, #0]
  return -1;
 8002b74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <_exit>:

void _exit (int status)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b88:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f7ff ffe7 	bl	8002b60 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b92:	bf00      	nop
 8002b94:	e7fd      	b.n	8002b92 <_exit+0x12>

08002b96 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b086      	sub	sp, #24
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	60f8      	str	r0, [r7, #12]
 8002b9e:	60b9      	str	r1, [r7, #8]
 8002ba0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	617b      	str	r3, [r7, #20]
 8002ba6:	e00a      	b.n	8002bbe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ba8:	f3af 8000 	nop.w
 8002bac:	4601      	mov	r1, r0
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	1c5a      	adds	r2, r3, #1
 8002bb2:	60ba      	str	r2, [r7, #8]
 8002bb4:	b2ca      	uxtb	r2, r1
 8002bb6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	3301      	adds	r3, #1
 8002bbc:	617b      	str	r3, [r7, #20]
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	dbf0      	blt.n	8002ba8 <_read+0x12>
  }

  return len;
 8002bc6:	687b      	ldr	r3, [r7, #4]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3718      	adds	r7, #24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bdc:	2300      	movs	r3, #0
 8002bde:	617b      	str	r3, [r7, #20]
 8002be0:	e009      	b.n	8002bf6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	1c5a      	adds	r2, r3, #1
 8002be6:	60ba      	str	r2, [r7, #8]
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	617b      	str	r3, [r7, #20]
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	dbf1      	blt.n	8002be2 <_write+0x12>
  }
  return len;
 8002bfe:	687b      	ldr	r3, [r7, #4]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3718      	adds	r7, #24
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <_close>:

int _close(int file)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c30:	605a      	str	r2, [r3, #4]
  return 0;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <_isatty>:

int _isatty(int file)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c48:	2301      	movs	r3, #1
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b085      	sub	sp, #20
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	60f8      	str	r0, [r7, #12]
 8002c5e:	60b9      	str	r1, [r7, #8]
 8002c60:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c78:	4a14      	ldr	r2, [pc, #80]	@ (8002ccc <_sbrk+0x5c>)
 8002c7a:	4b15      	ldr	r3, [pc, #84]	@ (8002cd0 <_sbrk+0x60>)
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c84:	4b13      	ldr	r3, [pc, #76]	@ (8002cd4 <_sbrk+0x64>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d102      	bne.n	8002c92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c8c:	4b11      	ldr	r3, [pc, #68]	@ (8002cd4 <_sbrk+0x64>)
 8002c8e:	4a12      	ldr	r2, [pc, #72]	@ (8002cd8 <_sbrk+0x68>)
 8002c90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c92:	4b10      	ldr	r3, [pc, #64]	@ (8002cd4 <_sbrk+0x64>)
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4413      	add	r3, r2
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d207      	bcs.n	8002cb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ca0:	f005 fe40 	bl	8008924 <__errno>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	220c      	movs	r2, #12
 8002ca8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002caa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002cae:	e009      	b.n	8002cc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cb0:	4b08      	ldr	r3, [pc, #32]	@ (8002cd4 <_sbrk+0x64>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cb6:	4b07      	ldr	r3, [pc, #28]	@ (8002cd4 <_sbrk+0x64>)
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	4a05      	ldr	r2, [pc, #20]	@ (8002cd4 <_sbrk+0x64>)
 8002cc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3718      	adds	r7, #24
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	20020000 	.word	0x20020000
 8002cd0:	00000400 	.word	0x00000400
 8002cd4:	2000064c 	.word	0x2000064c
 8002cd8:	200007a8 	.word	0x200007a8

08002cdc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002ce0:	4b06      	ldr	r3, [pc, #24]	@ (8002cfc <SystemInit+0x20>)
 8002ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ce6:	4a05      	ldr	r2, [pc, #20]	@ (8002cfc <SystemInit+0x20>)
 8002ce8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002cec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cf0:	bf00      	nop
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	e000ed00 	.word	0xe000ed00

08002d00 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8002d08:	4b22      	ldr	r3, [pc, #136]	@ (8002d94 <WIZCHIP_READ+0x94>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002d0e:	4b21      	ldr	r3, [pc, #132]	@ (8002d94 <WIZCHIP_READ+0x94>)
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002d14:	4b1f      	ldr	r3, [pc, #124]	@ (8002d94 <WIZCHIP_READ+0x94>)
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d003      	beq.n	8002d24 <WIZCHIP_READ+0x24>
 8002d1c:	4b1d      	ldr	r3, [pc, #116]	@ (8002d94 <WIZCHIP_READ+0x94>)
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d114      	bne.n	8002d4e <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002d24:	4b1b      	ldr	r3, [pc, #108]	@ (8002d94 <WIZCHIP_READ+0x94>)
 8002d26:	69db      	ldr	r3, [r3, #28]
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	0c12      	lsrs	r2, r2, #16
 8002d2c:	b2d2      	uxtb	r2, r2
 8002d2e:	4610      	mov	r0, r2
 8002d30:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002d32:	4b18      	ldr	r3, [pc, #96]	@ (8002d94 <WIZCHIP_READ+0x94>)
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	0a12      	lsrs	r2, r2, #8
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002d40:	4b14      	ldr	r3, [pc, #80]	@ (8002d94 <WIZCHIP_READ+0x94>)
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	b2d2      	uxtb	r2, r2
 8002d48:	4610      	mov	r0, r2
 8002d4a:	4798      	blx	r3
 8002d4c:	e011      	b.n	8002d72 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	0c1b      	lsrs	r3, r3, #16
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	0a1b      	lsrs	r3, r3, #8
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002d64:	4b0b      	ldr	r3, [pc, #44]	@ (8002d94 <WIZCHIP_READ+0x94>)
 8002d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d68:	f107 020c 	add.w	r2, r7, #12
 8002d6c:	2103      	movs	r1, #3
 8002d6e:	4610      	mov	r0, r2
 8002d70:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8002d72:	4b08      	ldr	r3, [pc, #32]	@ (8002d94 <WIZCHIP_READ+0x94>)
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	4798      	blx	r3
 8002d78:	4603      	mov	r3, r0
 8002d7a:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8002d7c:	4b05      	ldr	r3, [pc, #20]	@ (8002d94 <WIZCHIP_READ+0x94>)
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002d82:	4b04      	ldr	r3, [pc, #16]	@ (8002d94 <WIZCHIP_READ+0x94>)
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	4798      	blx	r3
   return ret;
 8002d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	20000028 	.word	0x20000028

08002d98 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	460b      	mov	r3, r1
 8002da2:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8002da4:	4b22      	ldr	r3, [pc, #136]	@ (8002e30 <WIZCHIP_WRITE+0x98>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002daa:	4b21      	ldr	r3, [pc, #132]	@ (8002e30 <WIZCHIP_WRITE+0x98>)
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f043 0304 	orr.w	r3, r3, #4
 8002db6:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002db8:	4b1d      	ldr	r3, [pc, #116]	@ (8002e30 <WIZCHIP_WRITE+0x98>)
 8002dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d119      	bne.n	8002df4 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002dc0:	4b1b      	ldr	r3, [pc, #108]	@ (8002e30 <WIZCHIP_WRITE+0x98>)
 8002dc2:	69db      	ldr	r3, [r3, #28]
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	0c12      	lsrs	r2, r2, #16
 8002dc8:	b2d2      	uxtb	r2, r2
 8002dca:	4610      	mov	r0, r2
 8002dcc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002dce:	4b18      	ldr	r3, [pc, #96]	@ (8002e30 <WIZCHIP_WRITE+0x98>)
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	0a12      	lsrs	r2, r2, #8
 8002dd6:	b2d2      	uxtb	r2, r2
 8002dd8:	4610      	mov	r0, r2
 8002dda:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002ddc:	4b14      	ldr	r3, [pc, #80]	@ (8002e30 <WIZCHIP_WRITE+0x98>)
 8002dde:	69db      	ldr	r3, [r3, #28]
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	4610      	mov	r0, r2
 8002de6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8002de8:	4b11      	ldr	r3, [pc, #68]	@ (8002e30 <WIZCHIP_WRITE+0x98>)
 8002dea:	69db      	ldr	r3, [r3, #28]
 8002dec:	78fa      	ldrb	r2, [r7, #3]
 8002dee:	4610      	mov	r0, r2
 8002df0:	4798      	blx	r3
 8002df2:	e013      	b.n	8002e1c <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	0c1b      	lsrs	r3, r3, #16
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	0a1b      	lsrs	r3, r3, #8
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8002e0a:	78fb      	ldrb	r3, [r7, #3]
 8002e0c:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8002e0e:	4b08      	ldr	r3, [pc, #32]	@ (8002e30 <WIZCHIP_WRITE+0x98>)
 8002e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e12:	f107 020c 	add.w	r2, r7, #12
 8002e16:	2104      	movs	r1, #4
 8002e18:	4610      	mov	r0, r2
 8002e1a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002e1c:	4b04      	ldr	r3, [pc, #16]	@ (8002e30 <WIZCHIP_WRITE+0x98>)
 8002e1e:	695b      	ldr	r3, [r3, #20]
 8002e20:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002e22:	4b03      	ldr	r3, [pc, #12]	@ (8002e30 <WIZCHIP_WRITE+0x98>)
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	4798      	blx	r3
}
 8002e28:	bf00      	nop
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	20000028 	.word	0x20000028

08002e34 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002e34:	b590      	push	{r4, r7, lr}
 8002e36:	b087      	sub	sp, #28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8002e42:	4b2b      	ldr	r3, [pc, #172]	@ (8002ef0 <WIZCHIP_READ_BUF+0xbc>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002e48:	4b29      	ldr	r3, [pc, #164]	@ (8002ef0 <WIZCHIP_READ_BUF+0xbc>)
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002e4e:	4b28      	ldr	r3, [pc, #160]	@ (8002ef0 <WIZCHIP_READ_BUF+0xbc>)
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <WIZCHIP_READ_BUF+0x2a>
 8002e56:	4b26      	ldr	r3, [pc, #152]	@ (8002ef0 <WIZCHIP_READ_BUF+0xbc>)
 8002e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d126      	bne.n	8002eac <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002e5e:	4b24      	ldr	r3, [pc, #144]	@ (8002ef0 <WIZCHIP_READ_BUF+0xbc>)
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	0c12      	lsrs	r2, r2, #16
 8002e66:	b2d2      	uxtb	r2, r2
 8002e68:	4610      	mov	r0, r2
 8002e6a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002e6c:	4b20      	ldr	r3, [pc, #128]	@ (8002ef0 <WIZCHIP_READ_BUF+0xbc>)
 8002e6e:	69db      	ldr	r3, [r3, #28]
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	0a12      	lsrs	r2, r2, #8
 8002e74:	b2d2      	uxtb	r2, r2
 8002e76:	4610      	mov	r0, r2
 8002e78:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002e7a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ef0 <WIZCHIP_READ_BUF+0xbc>)
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	b2d2      	uxtb	r2, r2
 8002e82:	4610      	mov	r0, r2
 8002e84:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002e86:	2300      	movs	r3, #0
 8002e88:	82fb      	strh	r3, [r7, #22]
 8002e8a:	e00a      	b.n	8002ea2 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8002e8c:	4b18      	ldr	r3, [pc, #96]	@ (8002ef0 <WIZCHIP_READ_BUF+0xbc>)
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	8afa      	ldrh	r2, [r7, #22]
 8002e92:	68b9      	ldr	r1, [r7, #8]
 8002e94:	188c      	adds	r4, r1, r2
 8002e96:	4798      	blx	r3
 8002e98:	4603      	mov	r3, r0
 8002e9a:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8002e9c:	8afb      	ldrh	r3, [r7, #22]
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	82fb      	strh	r3, [r7, #22]
 8002ea2:	8afa      	ldrh	r2, [r7, #22]
 8002ea4:	88fb      	ldrh	r3, [r7, #6]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d3f0      	bcc.n	8002e8c <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002eaa:	e017      	b.n	8002edc <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	0c1b      	lsrs	r3, r3, #16
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	0a1b      	lsrs	r3, r3, #8
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef0 <WIZCHIP_READ_BUF+0xbc>)
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec6:	f107 0210 	add.w	r2, r7, #16
 8002eca:	2103      	movs	r1, #3
 8002ecc:	4610      	mov	r0, r2
 8002ece:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8002ed0:	4b07      	ldr	r3, [pc, #28]	@ (8002ef0 <WIZCHIP_READ_BUF+0xbc>)
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	88fa      	ldrh	r2, [r7, #6]
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	68b8      	ldr	r0, [r7, #8]
 8002eda:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002edc:	4b04      	ldr	r3, [pc, #16]	@ (8002ef0 <WIZCHIP_READ_BUF+0xbc>)
 8002ede:	695b      	ldr	r3, [r3, #20]
 8002ee0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002ee2:	4b03      	ldr	r3, [pc, #12]	@ (8002ef0 <WIZCHIP_READ_BUF+0xbc>)
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	4798      	blx	r3
}
 8002ee8:	bf00      	nop
 8002eea:	371c      	adds	r7, #28
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd90      	pop	{r4, r7, pc}
 8002ef0:	20000028 	.word	0x20000028

08002ef4 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	4613      	mov	r3, r2
 8002f00:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8002f02:	4b2b      	ldr	r3, [pc, #172]	@ (8002fb0 <WIZCHIP_WRITE_BUF+0xbc>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002f08:	4b29      	ldr	r3, [pc, #164]	@ (8002fb0 <WIZCHIP_WRITE_BUF+0xbc>)
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f043 0304 	orr.w	r3, r3, #4
 8002f14:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002f16:	4b26      	ldr	r3, [pc, #152]	@ (8002fb0 <WIZCHIP_WRITE_BUF+0xbc>)
 8002f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d126      	bne.n	8002f6c <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002f1e:	4b24      	ldr	r3, [pc, #144]	@ (8002fb0 <WIZCHIP_WRITE_BUF+0xbc>)
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	0c12      	lsrs	r2, r2, #16
 8002f26:	b2d2      	uxtb	r2, r2
 8002f28:	4610      	mov	r0, r2
 8002f2a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002f2c:	4b20      	ldr	r3, [pc, #128]	@ (8002fb0 <WIZCHIP_WRITE_BUF+0xbc>)
 8002f2e:	69db      	ldr	r3, [r3, #28]
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	0a12      	lsrs	r2, r2, #8
 8002f34:	b2d2      	uxtb	r2, r2
 8002f36:	4610      	mov	r0, r2
 8002f38:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002f3a:	4b1d      	ldr	r3, [pc, #116]	@ (8002fb0 <WIZCHIP_WRITE_BUF+0xbc>)
 8002f3c:	69db      	ldr	r3, [r3, #28]
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	b2d2      	uxtb	r2, r2
 8002f42:	4610      	mov	r0, r2
 8002f44:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002f46:	2300      	movs	r3, #0
 8002f48:	82fb      	strh	r3, [r7, #22]
 8002f4a:	e00a      	b.n	8002f62 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8002f4c:	4b18      	ldr	r3, [pc, #96]	@ (8002fb0 <WIZCHIP_WRITE_BUF+0xbc>)
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	8afa      	ldrh	r2, [r7, #22]
 8002f52:	68b9      	ldr	r1, [r7, #8]
 8002f54:	440a      	add	r2, r1
 8002f56:	7812      	ldrb	r2, [r2, #0]
 8002f58:	4610      	mov	r0, r2
 8002f5a:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002f5c:	8afb      	ldrh	r3, [r7, #22]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	82fb      	strh	r3, [r7, #22]
 8002f62:	8afa      	ldrh	r2, [r7, #22]
 8002f64:	88fb      	ldrh	r3, [r7, #6]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d3f0      	bcc.n	8002f4c <WIZCHIP_WRITE_BUF+0x58>
 8002f6a:	e017      	b.n	8002f9c <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	0c1b      	lsrs	r3, r3, #16
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	0a1b      	lsrs	r3, r3, #8
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002f82:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb0 <WIZCHIP_WRITE_BUF+0xbc>)
 8002f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f86:	f107 0210 	add.w	r2, r7, #16
 8002f8a:	2103      	movs	r1, #3
 8002f8c:	4610      	mov	r0, r2
 8002f8e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8002f90:	4b07      	ldr	r3, [pc, #28]	@ (8002fb0 <WIZCHIP_WRITE_BUF+0xbc>)
 8002f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f94:	88fa      	ldrh	r2, [r7, #6]
 8002f96:	4611      	mov	r1, r2
 8002f98:	68b8      	ldr	r0, [r7, #8]
 8002f9a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002f9c:	4b04      	ldr	r3, [pc, #16]	@ (8002fb0 <WIZCHIP_WRITE_BUF+0xbc>)
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002fa2:	4b03      	ldr	r3, [pc, #12]	@ (8002fb0 <WIZCHIP_WRITE_BUF+0xbc>)
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	4798      	blx	r3
}
 8002fa8:	bf00      	nop
 8002faa:	3718      	adds	r7, #24
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	20000028 	.word	0x20000028

08002fb4 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8002fb4:	b590      	push	{r4, r7, lr}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	4603      	mov	r3, r0
 8002fbc:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	81fb      	strh	r3, [r7, #14]
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002fc6:	79fb      	ldrb	r3, [r7, #7]
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	3301      	adds	r3, #1
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7ff fe94 	bl	8002d00 <WIZCHIP_READ>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002fdc:	89bb      	ldrh	r3, [r7, #12]
 8002fde:	021b      	lsls	r3, r3, #8
 8002fe0:	b29c      	uxth	r4, r3
 8002fe2:	79fb      	ldrb	r3, [r7, #7]
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7ff fe86 	bl	8002d00 <WIZCHIP_READ>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	4423      	add	r3, r4
 8002ff8:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8002ffa:	89bb      	ldrh	r3, [r7, #12]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d019      	beq.n	8003034 <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8003000:	79fb      	ldrb	r3, [r7, #7]
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	3301      	adds	r3, #1
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff fe77 	bl	8002d00 <WIZCHIP_READ>
 8003012:	4603      	mov	r3, r0
 8003014:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8003016:	89fb      	ldrh	r3, [r7, #14]
 8003018:	021b      	lsls	r3, r3, #8
 800301a:	b29c      	uxth	r4, r3
 800301c:	79fb      	ldrb	r3, [r7, #7]
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	3301      	adds	r3, #1
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff fe69 	bl	8002d00 <WIZCHIP_READ>
 800302e:	4603      	mov	r3, r0
 8003030:	4423      	add	r3, r4
 8003032:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8003034:	89fa      	ldrh	r2, [r7, #14]
 8003036:	89bb      	ldrh	r3, [r7, #12]
 8003038:	429a      	cmp	r2, r3
 800303a:	d1c4      	bne.n	8002fc6 <getSn_TX_FSR+0x12>
   return val;
 800303c:	89fb      	ldrh	r3, [r7, #14]
}
 800303e:	4618      	mov	r0, r3
 8003040:	3714      	adds	r7, #20
 8003042:	46bd      	mov	sp, r7
 8003044:	bd90      	pop	{r4, r7, pc}

08003046 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8003046:	b590      	push	{r4, r7, lr}
 8003048:	b085      	sub	sp, #20
 800304a:	af00      	add	r7, sp, #0
 800304c:	4603      	mov	r3, r0
 800304e:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8003050:	2300      	movs	r3, #0
 8003052:	81fb      	strh	r3, [r7, #14]
 8003054:	2300      	movs	r3, #0
 8003056:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8003058:	79fb      	ldrb	r3, [r7, #7]
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	3301      	adds	r3, #1
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8003064:	4618      	mov	r0, r3
 8003066:	f7ff fe4b 	bl	8002d00 <WIZCHIP_READ>
 800306a:	4603      	mov	r3, r0
 800306c:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800306e:	89bb      	ldrh	r3, [r7, #12]
 8003070:	021b      	lsls	r3, r3, #8
 8003072:	b29c      	uxth	r4, r3
 8003074:	79fb      	ldrb	r3, [r7, #7]
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	3301      	adds	r3, #1
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff fe3d 	bl	8002d00 <WIZCHIP_READ>
 8003086:	4603      	mov	r3, r0
 8003088:	4423      	add	r3, r4
 800308a:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800308c:	89bb      	ldrh	r3, [r7, #12]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d019      	beq.n	80030c6 <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8003092:	79fb      	ldrb	r3, [r7, #7]
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	3301      	adds	r3, #1
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff fe2e 	bl	8002d00 <WIZCHIP_READ>
 80030a4:	4603      	mov	r3, r0
 80030a6:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80030a8:	89fb      	ldrh	r3, [r7, #14]
 80030aa:	021b      	lsls	r3, r3, #8
 80030ac:	b29c      	uxth	r4, r3
 80030ae:	79fb      	ldrb	r3, [r7, #7]
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	3301      	adds	r3, #1
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff fe20 	bl	8002d00 <WIZCHIP_READ>
 80030c0:	4603      	mov	r3, r0
 80030c2:	4423      	add	r3, r4
 80030c4:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80030c6:	89fa      	ldrh	r2, [r7, #14]
 80030c8:	89bb      	ldrh	r3, [r7, #12]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d1c4      	bne.n	8003058 <getSn_RX_RSR+0x12>
   return val;
 80030ce:	89fb      	ldrh	r3, [r7, #14]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3714      	adds	r7, #20
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd90      	pop	{r4, r7, pc}

080030d8 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80030d8:	b590      	push	{r4, r7, lr}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	4603      	mov	r3, r0
 80030e0:	6039      	str	r1, [r7, #0]
 80030e2:	71fb      	strb	r3, [r7, #7]
 80030e4:	4613      	mov	r3, r2
 80030e6:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80030e8:	2300      	movs	r3, #0
 80030ea:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80030ec:	2300      	movs	r3, #0
 80030ee:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 80030f0:	88bb      	ldrh	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d046      	beq.n	8003184 <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 80030f6:	79fb      	ldrb	r3, [r7, #7]
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	3301      	adds	r3, #1
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8003102:	4618      	mov	r0, r3
 8003104:	f7ff fdfc 	bl	8002d00 <WIZCHIP_READ>
 8003108:	4603      	mov	r3, r0
 800310a:	021b      	lsls	r3, r3, #8
 800310c:	b29c      	uxth	r4, r3
 800310e:	79fb      	ldrb	r3, [r7, #7]
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	3301      	adds	r3, #1
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff fdf0 	bl	8002d00 <WIZCHIP_READ>
 8003120:	4603      	mov	r3, r0
 8003122:	4423      	add	r3, r4
 8003124:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8003126:	89fb      	ldrh	r3, [r7, #14]
 8003128:	021a      	lsls	r2, r3, #8
 800312a:	79fb      	ldrb	r3, [r7, #7]
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	3302      	adds	r3, #2
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	4413      	add	r3, r2
 8003134:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8003136:	88bb      	ldrh	r3, [r7, #4]
 8003138:	461a      	mov	r2, r3
 800313a:	6839      	ldr	r1, [r7, #0]
 800313c:	68b8      	ldr	r0, [r7, #8]
 800313e:	f7ff fed9 	bl	8002ef4 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8003142:	89fa      	ldrh	r2, [r7, #14]
 8003144:	88bb      	ldrh	r3, [r7, #4]
 8003146:	4413      	add	r3, r2
 8003148:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 800314a:	79fb      	ldrb	r3, [r7, #7]
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	3301      	adds	r3, #1
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8003156:	461a      	mov	r2, r3
 8003158:	89fb      	ldrh	r3, [r7, #14]
 800315a:	0a1b      	lsrs	r3, r3, #8
 800315c:	b29b      	uxth	r3, r3
 800315e:	b2db      	uxtb	r3, r3
 8003160:	4619      	mov	r1, r3
 8003162:	4610      	mov	r0, r2
 8003164:	f7ff fe18 	bl	8002d98 <WIZCHIP_WRITE>
 8003168:	79fb      	ldrb	r3, [r7, #7]
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	3301      	adds	r3, #1
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8003174:	461a      	mov	r2, r3
 8003176:	89fb      	ldrh	r3, [r7, #14]
 8003178:	b2db      	uxtb	r3, r3
 800317a:	4619      	mov	r1, r3
 800317c:	4610      	mov	r0, r2
 800317e:	f7ff fe0b 	bl	8002d98 <WIZCHIP_WRITE>
 8003182:	e000      	b.n	8003186 <wiz_send_data+0xae>
   if(len == 0)  return;
 8003184:	bf00      	nop
}
 8003186:	3714      	adds	r7, #20
 8003188:	46bd      	mov	sp, r7
 800318a:	bd90      	pop	{r4, r7, pc}

0800318c <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800318c:	b590      	push	{r4, r7, lr}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	4603      	mov	r3, r0
 8003194:	6039      	str	r1, [r7, #0]
 8003196:	71fb      	strb	r3, [r7, #7]
 8003198:	4613      	mov	r3, r2
 800319a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800319c:	2300      	movs	r3, #0
 800319e:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80031a0:	2300      	movs	r3, #0
 80031a2:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 80031a4:	88bb      	ldrh	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d046      	beq.n	8003238 <wiz_recv_data+0xac>
   ptr = getSn_RX_RD(sn);
 80031aa:	79fb      	ldrb	r3, [r7, #7]
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	3301      	adds	r3, #1
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7ff fda2 	bl	8002d00 <WIZCHIP_READ>
 80031bc:	4603      	mov	r3, r0
 80031be:	021b      	lsls	r3, r3, #8
 80031c0:	b29c      	uxth	r4, r3
 80031c2:	79fb      	ldrb	r3, [r7, #7]
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	3301      	adds	r3, #1
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff fd96 	bl	8002d00 <WIZCHIP_READ>
 80031d4:	4603      	mov	r3, r0
 80031d6:	4423      	add	r3, r4
 80031d8:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 80031da:	89fb      	ldrh	r3, [r7, #14]
 80031dc:	021a      	lsls	r2, r3, #8
 80031de:	79fb      	ldrb	r3, [r7, #7]
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	3303      	adds	r3, #3
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	4413      	add	r3, r2
 80031e8:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 80031ea:	88bb      	ldrh	r3, [r7, #4]
 80031ec:	461a      	mov	r2, r3
 80031ee:	6839      	ldr	r1, [r7, #0]
 80031f0:	68b8      	ldr	r0, [r7, #8]
 80031f2:	f7ff fe1f 	bl	8002e34 <WIZCHIP_READ_BUF>
   ptr += len;
 80031f6:	89fa      	ldrh	r2, [r7, #14]
 80031f8:	88bb      	ldrh	r3, [r7, #4]
 80031fa:	4413      	add	r3, r2
 80031fc:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 80031fe:	79fb      	ldrb	r3, [r7, #7]
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	3301      	adds	r3, #1
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 800320a:	461a      	mov	r2, r3
 800320c:	89fb      	ldrh	r3, [r7, #14]
 800320e:	0a1b      	lsrs	r3, r3, #8
 8003210:	b29b      	uxth	r3, r3
 8003212:	b2db      	uxtb	r3, r3
 8003214:	4619      	mov	r1, r3
 8003216:	4610      	mov	r0, r2
 8003218:	f7ff fdbe 	bl	8002d98 <WIZCHIP_WRITE>
 800321c:	79fb      	ldrb	r3, [r7, #7]
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	3301      	adds	r3, #1
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8003228:	461a      	mov	r2, r3
 800322a:	89fb      	ldrh	r3, [r7, #14]
 800322c:	b2db      	uxtb	r3, r3
 800322e:	4619      	mov	r1, r3
 8003230:	4610      	mov	r0, r2
 8003232:	f7ff fdb1 	bl	8002d98 <WIZCHIP_WRITE>
 8003236:	e000      	b.n	800323a <wiz_recv_data+0xae>
   if(len == 0) return;
 8003238:	bf00      	nop
}
 800323a:	3714      	adds	r7, #20
 800323c:	46bd      	mov	sp, r7
 800323e:	bd90      	pop	{r4, r7, pc}

08003240 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void       wizchip_cris_enter(void)           {};
void       wizchip_cris_enter(void)           {}
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
 8003244:	bf00      	nop
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr

0800324e <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void       wizchip_cris_exit(void)          {};
void       wizchip_cris_exit(void)          {}
 800324e:	b480      	push	{r7}
 8003250:	af00      	add	r7, sp, #0
 8003252:	bf00      	nop
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <wizchip_cs_select>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_select(void)            {};

void wizchip_cs_select(void) {}
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
 8003260:	bf00      	nop
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_deselect(void)          {};
void wizchip_cs_deselect(void) { }
 800326a:	b480      	push	{r7}
 800326c:	af00      	add	r7, sp, #0
 800326e:	bf00      	nop
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	b2db      	uxtb	r3, r3
 8003286:	4618      	mov	r0, r3
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void     wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void     wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8003292:	b480      	push	{r7}
 8003294:	b083      	sub	sp, #12
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
 800329a:	460b      	mov	r3, r1
 800329c:	70fb      	strb	r3, [r7, #3]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	78fa      	ldrb	r2, [r7, #3]
 80032a2:	701a      	strb	r2, [r3, #0]
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	2300      	movs	r3, #0
 80032b6:	4618      	mov	r0, r3
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writebyte(uint8_t wb) {};
void     wizchip_spi_writebyte(uint8_t wb) {}
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4603      	mov	r3, r0
 80032c8:	71fb      	strb	r3, [r7, #7]
 80032ca:	bf00      	nop
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)     {}; 
void     wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)     {}
 80032d6:	b480      	push	{r7}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
 80032de:	460b      	mov	r3, r1
 80032e0:	807b      	strh	r3, [r7, #2]
 80032e2:	bf00      	nop
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr

080032ee <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 80032ee:	b480      	push	{r7}
 80032f0:	b083      	sub	sp, #12
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
 80032f6:	460b      	mov	r3, r1
 80032f8:	807b      	strh	r3, [r7, #2]
 80032fa:	bf00      	nop
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
	...

08003308 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d002      	beq.n	800331e <reg_wizchip_cs_cbfunc+0x16>
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d106      	bne.n	800332c <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800331e:	4b0a      	ldr	r3, [pc, #40]	@ (8003348 <reg_wizchip_cs_cbfunc+0x40>)
 8003320:	4a0a      	ldr	r2, [pc, #40]	@ (800334c <reg_wizchip_cs_cbfunc+0x44>)
 8003322:	611a      	str	r2, [r3, #16]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8003324:	4b08      	ldr	r3, [pc, #32]	@ (8003348 <reg_wizchip_cs_cbfunc+0x40>)
 8003326:	4a0a      	ldr	r2, [pc, #40]	@ (8003350 <reg_wizchip_cs_cbfunc+0x48>)
 8003328:	615a      	str	r2, [r3, #20]
 800332a:	e006      	b.n	800333a <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 800332c:	4a06      	ldr	r2, [pc, #24]	@ (8003348 <reg_wizchip_cs_cbfunc+0x40>)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6113      	str	r3, [r2, #16]
      WIZCHIP.CS._deselect = cs_desel;
 8003332:	4a05      	ldr	r2, [pc, #20]	@ (8003348 <reg_wizchip_cs_cbfunc+0x40>)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	6153      	str	r3, [r2, #20]
   }
}
 8003338:	bf00      	nop
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	20000028 	.word	0x20000028
 800334c:	0800325d 	.word	0x0800325d
 8003350:	0800326b 	.word	0x0800326b

08003354 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800335e:	bf00      	nop
 8003360:	4b0f      	ldr	r3, [pc, #60]	@ (80033a0 <reg_wizchip_spi_cbfunc+0x4c>)
 8003362:	881b      	ldrh	r3, [r3, #0]
 8003364:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003368:	2b00      	cmp	r3, #0
 800336a:	d0f9      	beq.n	8003360 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d002      	beq.n	8003378 <reg_wizchip_spi_cbfunc+0x24>
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d106      	bne.n	8003386 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8003378:	4b09      	ldr	r3, [pc, #36]	@ (80033a0 <reg_wizchip_spi_cbfunc+0x4c>)
 800337a:	4a0a      	ldr	r2, [pc, #40]	@ (80033a4 <reg_wizchip_spi_cbfunc+0x50>)
 800337c:	619a      	str	r2, [r3, #24]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 800337e:	4b08      	ldr	r3, [pc, #32]	@ (80033a0 <reg_wizchip_spi_cbfunc+0x4c>)
 8003380:	4a09      	ldr	r2, [pc, #36]	@ (80033a8 <reg_wizchip_spi_cbfunc+0x54>)
 8003382:	61da      	str	r2, [r3, #28]
 8003384:	e006      	b.n	8003394 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8003386:	4a06      	ldr	r2, [pc, #24]	@ (80033a0 <reg_wizchip_spi_cbfunc+0x4c>)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6193      	str	r3, [r2, #24]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 800338c:	4a04      	ldr	r2, [pc, #16]	@ (80033a0 <reg_wizchip_spi_cbfunc+0x4c>)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	61d3      	str	r3, [r2, #28]
   }
}
 8003392:	bf00      	nop
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr
 80033a0:	20000028 	.word	0x20000028
 80033a4:	080032b1 	.word	0x080032b1
 80033a8:	080032c1 	.word	0x080032c1

080033ac <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80033b6:	bf00      	nop
 80033b8:	4b0f      	ldr	r3, [pc, #60]	@ (80033f8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80033ba:	881b      	ldrh	r3, [r3, #0]
 80033bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0f9      	beq.n	80033b8 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d002      	beq.n	80033d0 <reg_wizchip_spiburst_cbfunc+0x24>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d106      	bne.n	80033de <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 80033d0:	4b09      	ldr	r3, [pc, #36]	@ (80033f8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80033d2:	4a0a      	ldr	r2, [pc, #40]	@ (80033fc <reg_wizchip_spiburst_cbfunc+0x50>)
 80033d4:	621a      	str	r2, [r3, #32]
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 80033d6:	4b08      	ldr	r3, [pc, #32]	@ (80033f8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80033d8:	4a09      	ldr	r2, [pc, #36]	@ (8003400 <reg_wizchip_spiburst_cbfunc+0x54>)
 80033da:	625a      	str	r2, [r3, #36]	@ 0x24
 80033dc:	e006      	b.n	80033ec <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 80033de:	4a06      	ldr	r2, [pc, #24]	@ (80033f8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6213      	str	r3, [r2, #32]
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 80033e4:	4a04      	ldr	r2, [pc, #16]	@ (80033f8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	6253      	str	r3, [r2, #36]	@ 0x24
   }
}
 80033ea:	bf00      	nop
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr
 80033f8:	20000028 	.word	0x20000028
 80033fc:	080032d7 	.word	0x080032d7
 8003400:	080032ef 	.word	0x080032ef

08003404 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 800340a:	1d3b      	adds	r3, r7, #4
 800340c:	2206      	movs	r2, #6
 800340e:	4619      	mov	r1, r3
 8003410:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8003414:	f7ff fd0e 	bl	8002e34 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8003418:	f107 0314 	add.w	r3, r7, #20
 800341c:	2204      	movs	r2, #4
 800341e:	4619      	mov	r1, r3
 8003420:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003424:	f7ff fd06 	bl	8002e34 <WIZCHIP_READ_BUF>
 8003428:	f107 0310 	add.w	r3, r7, #16
 800342c:	2204      	movs	r2, #4
 800342e:	4619      	mov	r1, r3
 8003430:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8003434:	f7ff fcfe 	bl	8002e34 <WIZCHIP_READ_BUF>
 8003438:	f107 030c 	add.w	r3, r7, #12
 800343c:	2204      	movs	r2, #4
 800343e:	4619      	mov	r1, r3
 8003440:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8003444:	f7ff fcf6 	bl	8002e34 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8003448:	2180      	movs	r1, #128	@ 0x80
 800344a:	2000      	movs	r0, #0
 800344c:	f7ff fca4 	bl	8002d98 <WIZCHIP_WRITE>
   getMR(); // for delay
 8003450:	2000      	movs	r0, #0
 8003452:	f7ff fc55 	bl	8002d00 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8003456:	1d3b      	adds	r3, r7, #4
 8003458:	2206      	movs	r2, #6
 800345a:	4619      	mov	r1, r3
 800345c:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8003460:	f7ff fd48 	bl	8002ef4 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8003464:	f107 0314 	add.w	r3, r7, #20
 8003468:	2204      	movs	r2, #4
 800346a:	4619      	mov	r1, r3
 800346c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003470:	f7ff fd40 	bl	8002ef4 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8003474:	f107 0310 	add.w	r3, r7, #16
 8003478:	2204      	movs	r2, #4
 800347a:	4619      	mov	r1, r3
 800347c:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8003480:	f7ff fd38 	bl	8002ef4 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8003484:	f107 030c 	add.w	r3, r7, #12
 8003488:	2204      	movs	r2, #4
 800348a:	4619      	mov	r1, r3
 800348c:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8003490:	f7ff fd30 	bl	8002ef4 <WIZCHIP_WRITE_BUF>
}
 8003494:	bf00      	nop
 8003496:	3718      	adds	r7, #24
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 80034a6:	2300      	movs	r3, #0
 80034a8:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 80034aa:	f7ff ffab 	bl	8003404 <wizchip_sw_reset>
   if(txsize)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d03b      	beq.n	800352c <wizchip_init+0x90>
   {
      tmp = 0;
 80034b4:	2300      	movs	r3, #0
 80034b6:	73bb      	strb	r3, [r7, #14]
            tmp += txsize[i];
            if(tmp > 128) return -1;
        }
        if(tmp % 8) return -1;
   #else
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80034b8:	2300      	movs	r3, #0
 80034ba:	73fb      	strb	r3, [r7, #15]
 80034bc:	e015      	b.n	80034ea <wizchip_init+0x4e>
        {
            tmp += txsize[i];
 80034be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	4413      	add	r3, r2
 80034c6:	781a      	ldrb	r2, [r3, #0]
 80034c8:	7bbb      	ldrb	r3, [r7, #14]
 80034ca:	4413      	add	r3, r2
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	73bb      	strb	r3, [r7, #14]

        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100 and w5100s
            if(tmp > 8) return -1;
        #else
            if(tmp > 16) return -1;
 80034d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80034d4:	2b10      	cmp	r3, #16
 80034d6:	dd02      	ble.n	80034de <wizchip_init+0x42>
 80034d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80034dc:	e066      	b.n	80035ac <wizchip_init+0x110>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80034de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	3301      	adds	r3, #1
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	73fb      	strb	r3, [r7, #15]
 80034ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ee:	2b07      	cmp	r3, #7
 80034f0:	dde5      	ble.n	80034be <wizchip_init+0x22>
        #endif
        }
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80034f2:	2300      	movs	r3, #0
 80034f4:	73fb      	strb	r3, [r7, #15]
 80034f6:	e015      	b.n	8003524 <wizchip_init+0x88>
        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100
            j = 0;
            while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
            setSn_TXBUF_SIZE(i, j);
        #else
            setSn_TXBUF_SIZE(i, txsize[i]);
 80034f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	3301      	adds	r3, #1
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8003506:	4618      	mov	r0, r3
 8003508:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	4413      	add	r3, r2
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	4619      	mov	r1, r3
 8003514:	f7ff fc40 	bl	8002d98 <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003518:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800351c:	b2db      	uxtb	r3, r3
 800351e:	3301      	adds	r3, #1
 8003520:	b2db      	uxtb	r3, r3
 8003522:	73fb      	strb	r3, [r7, #15]
 8003524:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003528:	2b07      	cmp	r3, #7
 800352a:	dde5      	ble.n	80034f8 <wizchip_init+0x5c>
        }

    #endif
   }

   if(rxsize)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d03b      	beq.n	80035aa <wizchip_init+0x10e>
   {
      tmp = 0;
 8003532:	2300      	movs	r3, #0
 8003534:	73bb      	strb	r3, [r7, #14]
            tmp += rxsize[i];
            if(tmp > 128) return -1;
        }
        if(tmp % 8) return -1;
   #else
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003536:	2300      	movs	r3, #0
 8003538:	73fb      	strb	r3, [r7, #15]
 800353a:	e015      	b.n	8003568 <wizchip_init+0xcc>
        {
            tmp += rxsize[i];
 800353c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003540:	683a      	ldr	r2, [r7, #0]
 8003542:	4413      	add	r3, r2
 8003544:	781a      	ldrb	r2, [r3, #0]
 8003546:	7bbb      	ldrb	r3, [r7, #14]
 8003548:	4413      	add	r3, r2
 800354a:	b2db      	uxtb	r3, r3
 800354c:	73bb      	strb	r3, [r7, #14]
        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100 and w5100s
            if(tmp > 8) return -1;
        #else
            if(tmp > 16) return -1;
 800354e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003552:	2b10      	cmp	r3, #16
 8003554:	dd02      	ble.n	800355c <wizchip_init+0xc0>
 8003556:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800355a:	e027      	b.n	80035ac <wizchip_init+0x110>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800355c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003560:	b2db      	uxtb	r3, r3
 8003562:	3301      	adds	r3, #1
 8003564:	b2db      	uxtb	r3, r3
 8003566:	73fb      	strb	r3, [r7, #15]
 8003568:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800356c:	2b07      	cmp	r3, #7
 800356e:	dde5      	ble.n	800353c <wizchip_init+0xa0>
        #endif
        }

        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003570:	2300      	movs	r3, #0
 8003572:	73fb      	strb	r3, [r7, #15]
 8003574:	e015      	b.n	80035a2 <wizchip_init+0x106>
        #if _WIZCHIP_ < W5200    // add condition for w5100
            j = 0;
            while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
            setSn_RXBUF_SIZE(i, j);
        #else
            setSn_RXBUF_SIZE(i, rxsize[i]);
 8003576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	3301      	adds	r3, #1
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8003584:	4618      	mov	r0, r3
 8003586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	4413      	add	r3, r2
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	4619      	mov	r1, r3
 8003592:	f7ff fc01 	bl	8002d98 <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800359a:	b2db      	uxtb	r3, r3
 800359c:	3301      	adds	r3, #1
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	73fb      	strb	r3, [r7, #15]
 80035a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035a6:	2b07      	cmp	r3, #7
 80035a8:	dde5      	ble.n	8003576 <wizchip_init+0xda>
        #endif
        }
    #endif
   }
   return 0;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2206      	movs	r2, #6
 80035c0:	4619      	mov	r1, r3
 80035c2:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80035c6:	f7ff fc95 	bl	8002ef4 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	330e      	adds	r3, #14
 80035ce:	2204      	movs	r2, #4
 80035d0:	4619      	mov	r1, r3
 80035d2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80035d6:	f7ff fc8d 	bl	8002ef4 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	330a      	adds	r3, #10
 80035de:	2204      	movs	r2, #4
 80035e0:	4619      	mov	r1, r3
 80035e2:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80035e6:	f7ff fc85 	bl	8002ef4 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	3306      	adds	r3, #6
 80035ee:	2204      	movs	r2, #4
 80035f0:	4619      	mov	r1, r3
 80035f2:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80035f6:	f7ff fc7d 	bl	8002ef4 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	7c9a      	ldrb	r2, [r3, #18]
 80035fe:	4b0b      	ldr	r3, [pc, #44]	@ (800362c <wizchip_setnetinfo+0x78>)
 8003600:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	7cda      	ldrb	r2, [r3, #19]
 8003606:	4b09      	ldr	r3, [pc, #36]	@ (800362c <wizchip_setnetinfo+0x78>)
 8003608:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	7d1a      	ldrb	r2, [r3, #20]
 800360e:	4b07      	ldr	r3, [pc, #28]	@ (800362c <wizchip_setnetinfo+0x78>)
 8003610:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	7d5a      	ldrb	r2, [r3, #21]
 8003616:	4b05      	ldr	r3, [pc, #20]	@ (800362c <wizchip_setnetinfo+0x78>)
 8003618:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	7d9a      	ldrb	r2, [r3, #22]
 800361e:	4b04      	ldr	r3, [pc, #16]	@ (8003630 <wizchip_setnetinfo+0x7c>)
 8003620:	701a      	strb	r2, [r3, #0]
}
 8003622:	bf00      	nop
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	20000650 	.word	0x20000650
 8003630:	20000654 	.word	0x20000654

08003634 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003634:	480d      	ldr	r0, [pc, #52]	@ (800366c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003636:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003638:	f7ff fb50 	bl	8002cdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800363c:	480c      	ldr	r0, [pc, #48]	@ (8003670 <LoopForever+0x6>)
  ldr r1, =_edata
 800363e:	490d      	ldr	r1, [pc, #52]	@ (8003674 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003640:	4a0d      	ldr	r2, [pc, #52]	@ (8003678 <LoopForever+0xe>)
  movs r3, #0
 8003642:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003644:	e002      	b.n	800364c <LoopCopyDataInit>

08003646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800364a:	3304      	adds	r3, #4

0800364c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800364c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800364e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003650:	d3f9      	bcc.n	8003646 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003652:	4a0a      	ldr	r2, [pc, #40]	@ (800367c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003654:	4c0a      	ldr	r4, [pc, #40]	@ (8003680 <LoopForever+0x16>)
  movs r3, #0
 8003656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003658:	e001      	b.n	800365e <LoopFillZerobss>

0800365a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800365a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800365c:	3204      	adds	r2, #4

0800365e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800365e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003660:	d3fb      	bcc.n	800365a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003662:	f005 f965 	bl	8008930 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003666:	f7fe f939 	bl	80018dc <main>

0800366a <LoopForever>:

LoopForever:
    b LoopForever
 800366a:	e7fe      	b.n	800366a <LoopForever>
  ldr   r0, =_estack
 800366c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003674:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8003678:	0800aa9c 	.word	0x0800aa9c
  ldr r2, =_sbss
 800367c:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8003680:	200007a8 	.word	0x200007a8

08003684 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003684:	e7fe      	b.n	8003684 <ADC1_2_IRQHandler>

08003686 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b082      	sub	sp, #8
 800368a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800368c:	2300      	movs	r3, #0
 800368e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003690:	2003      	movs	r0, #3
 8003692:	f000 f95b 	bl	800394c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003696:	2000      	movs	r0, #0
 8003698:	f000 f80e 	bl	80036b8 <HAL_InitTick>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d002      	beq.n	80036a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	71fb      	strb	r3, [r7, #7]
 80036a6:	e001      	b.n	80036ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80036a8:	f7ff f8ae 	bl	8002808 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80036ac:	79fb      	ldrb	r3, [r7, #7]

}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
	...

080036b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80036c0:	2300      	movs	r3, #0
 80036c2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80036c4:	4b16      	ldr	r3, [pc, #88]	@ (8003720 <HAL_InitTick+0x68>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d022      	beq.n	8003712 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80036cc:	4b15      	ldr	r3, [pc, #84]	@ (8003724 <HAL_InitTick+0x6c>)
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	4b13      	ldr	r3, [pc, #76]	@ (8003720 <HAL_InitTick+0x68>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80036d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80036dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 f966 	bl	80039b2 <HAL_SYSTICK_Config>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d10f      	bne.n	800370c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b0f      	cmp	r3, #15
 80036f0:	d809      	bhi.n	8003706 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036f2:	2200      	movs	r2, #0
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80036fa:	f000 f932 	bl	8003962 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80036fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003728 <HAL_InitTick+0x70>)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6013      	str	r3, [r2, #0]
 8003704:	e007      	b.n	8003716 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	73fb      	strb	r3, [r7, #15]
 800370a:	e004      	b.n	8003716 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	73fb      	strb	r3, [r7, #15]
 8003710:	e001      	b.n	8003716 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003716:	7bfb      	ldrb	r3, [r7, #15]
}
 8003718:	4618      	mov	r0, r3
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	20000054 	.word	0x20000054
 8003724:	20000024 	.word	0x20000024
 8003728:	20000050 	.word	0x20000050

0800372c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003730:	4b05      	ldr	r3, [pc, #20]	@ (8003748 <HAL_IncTick+0x1c>)
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	4b05      	ldr	r3, [pc, #20]	@ (800374c <HAL_IncTick+0x20>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4413      	add	r3, r2
 800373a:	4a03      	ldr	r2, [pc, #12]	@ (8003748 <HAL_IncTick+0x1c>)
 800373c:	6013      	str	r3, [r2, #0]
}
 800373e:	bf00      	nop
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	20000658 	.word	0x20000658
 800374c:	20000054 	.word	0x20000054

08003750 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  return uwTick;
 8003754:	4b03      	ldr	r3, [pc, #12]	@ (8003764 <HAL_GetTick+0x14>)
 8003756:	681b      	ldr	r3, [r3, #0]
}
 8003758:	4618      	mov	r0, r3
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	20000658 	.word	0x20000658

08003768 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003770:	f7ff ffee 	bl	8003750 <HAL_GetTick>
 8003774:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003780:	d004      	beq.n	800378c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003782:	4b09      	ldr	r3, [pc, #36]	@ (80037a8 <HAL_Delay+0x40>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	4413      	add	r3, r2
 800378a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800378c:	bf00      	nop
 800378e:	f7ff ffdf 	bl	8003750 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	429a      	cmp	r2, r3
 800379c:	d8f7      	bhi.n	800378e <HAL_Delay+0x26>
  {
  }
}
 800379e:	bf00      	nop
 80037a0:	bf00      	nop
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	20000054 	.word	0x20000054

080037ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f003 0307 	and.w	r3, r3, #7
 80037ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037bc:	4b0c      	ldr	r3, [pc, #48]	@ (80037f0 <__NVIC_SetPriorityGrouping+0x44>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037c2:	68ba      	ldr	r2, [r7, #8]
 80037c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037c8:	4013      	ands	r3, r2
 80037ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037de:	4a04      	ldr	r2, [pc, #16]	@ (80037f0 <__NVIC_SetPriorityGrouping+0x44>)
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	60d3      	str	r3, [r2, #12]
}
 80037e4:	bf00      	nop
 80037e6:	3714      	adds	r7, #20
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr
 80037f0:	e000ed00 	.word	0xe000ed00

080037f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037f8:	4b04      	ldr	r3, [pc, #16]	@ (800380c <__NVIC_GetPriorityGrouping+0x18>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	0a1b      	lsrs	r3, r3, #8
 80037fe:	f003 0307 	and.w	r3, r3, #7
}
 8003802:	4618      	mov	r0, r3
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	e000ed00 	.word	0xe000ed00

08003810 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	4603      	mov	r3, r0
 8003818:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800381a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381e:	2b00      	cmp	r3, #0
 8003820:	db0b      	blt.n	800383a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003822:	79fb      	ldrb	r3, [r7, #7]
 8003824:	f003 021f 	and.w	r2, r3, #31
 8003828:	4907      	ldr	r1, [pc, #28]	@ (8003848 <__NVIC_EnableIRQ+0x38>)
 800382a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382e:	095b      	lsrs	r3, r3, #5
 8003830:	2001      	movs	r0, #1
 8003832:	fa00 f202 	lsl.w	r2, r0, r2
 8003836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800383a:	bf00      	nop
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	e000e100 	.word	0xe000e100

0800384c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	4603      	mov	r3, r0
 8003854:	6039      	str	r1, [r7, #0]
 8003856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385c:	2b00      	cmp	r3, #0
 800385e:	db0a      	blt.n	8003876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	b2da      	uxtb	r2, r3
 8003864:	490c      	ldr	r1, [pc, #48]	@ (8003898 <__NVIC_SetPriority+0x4c>)
 8003866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386a:	0112      	lsls	r2, r2, #4
 800386c:	b2d2      	uxtb	r2, r2
 800386e:	440b      	add	r3, r1
 8003870:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003874:	e00a      	b.n	800388c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	b2da      	uxtb	r2, r3
 800387a:	4908      	ldr	r1, [pc, #32]	@ (800389c <__NVIC_SetPriority+0x50>)
 800387c:	79fb      	ldrb	r3, [r7, #7]
 800387e:	f003 030f 	and.w	r3, r3, #15
 8003882:	3b04      	subs	r3, #4
 8003884:	0112      	lsls	r2, r2, #4
 8003886:	b2d2      	uxtb	r2, r2
 8003888:	440b      	add	r3, r1
 800388a:	761a      	strb	r2, [r3, #24]
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	e000e100 	.word	0xe000e100
 800389c:	e000ed00 	.word	0xe000ed00

080038a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b089      	sub	sp, #36	@ 0x24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f003 0307 	and.w	r3, r3, #7
 80038b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	f1c3 0307 	rsb	r3, r3, #7
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	bf28      	it	cs
 80038be:	2304      	movcs	r3, #4
 80038c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	3304      	adds	r3, #4
 80038c6:	2b06      	cmp	r3, #6
 80038c8:	d902      	bls.n	80038d0 <NVIC_EncodePriority+0x30>
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	3b03      	subs	r3, #3
 80038ce:	e000      	b.n	80038d2 <NVIC_EncodePriority+0x32>
 80038d0:	2300      	movs	r3, #0
 80038d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	fa02 f303 	lsl.w	r3, r2, r3
 80038de:	43da      	mvns	r2, r3
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	401a      	ands	r2, r3
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038e8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	fa01 f303 	lsl.w	r3, r1, r3
 80038f2:	43d9      	mvns	r1, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038f8:	4313      	orrs	r3, r2
         );
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3724      	adds	r7, #36	@ 0x24
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
	...

08003908 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	3b01      	subs	r3, #1
 8003914:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003918:	d301      	bcc.n	800391e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800391a:	2301      	movs	r3, #1
 800391c:	e00f      	b.n	800393e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800391e:	4a0a      	ldr	r2, [pc, #40]	@ (8003948 <SysTick_Config+0x40>)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	3b01      	subs	r3, #1
 8003924:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003926:	210f      	movs	r1, #15
 8003928:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800392c:	f7ff ff8e 	bl	800384c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003930:	4b05      	ldr	r3, [pc, #20]	@ (8003948 <SysTick_Config+0x40>)
 8003932:	2200      	movs	r2, #0
 8003934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003936:	4b04      	ldr	r3, [pc, #16]	@ (8003948 <SysTick_Config+0x40>)
 8003938:	2207      	movs	r2, #7
 800393a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	e000e010 	.word	0xe000e010

0800394c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f7ff ff29 	bl	80037ac <__NVIC_SetPriorityGrouping>
}
 800395a:	bf00      	nop
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b086      	sub	sp, #24
 8003966:	af00      	add	r7, sp, #0
 8003968:	4603      	mov	r3, r0
 800396a:	60b9      	str	r1, [r7, #8]
 800396c:	607a      	str	r2, [r7, #4]
 800396e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003970:	f7ff ff40 	bl	80037f4 <__NVIC_GetPriorityGrouping>
 8003974:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	68b9      	ldr	r1, [r7, #8]
 800397a:	6978      	ldr	r0, [r7, #20]
 800397c:	f7ff ff90 	bl	80038a0 <NVIC_EncodePriority>
 8003980:	4602      	mov	r2, r0
 8003982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003986:	4611      	mov	r1, r2
 8003988:	4618      	mov	r0, r3
 800398a:	f7ff ff5f 	bl	800384c <__NVIC_SetPriority>
}
 800398e:	bf00      	nop
 8003990:	3718      	adds	r7, #24
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b082      	sub	sp, #8
 800399a:	af00      	add	r7, sp, #0
 800399c:	4603      	mov	r3, r0
 800399e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff ff33 	bl	8003810 <__NVIC_EnableIRQ>
}
 80039aa:	bf00      	nop
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b082      	sub	sp, #8
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7ff ffa4 	bl	8003908 <SysTick_Config>
 80039c0:	4603      	mov	r3, r0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
	...

080039cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e08d      	b.n	8003afa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	461a      	mov	r2, r3
 80039e4:	4b47      	ldr	r3, [pc, #284]	@ (8003b04 <HAL_DMA_Init+0x138>)
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d80f      	bhi.n	8003a0a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	461a      	mov	r2, r3
 80039f0:	4b45      	ldr	r3, [pc, #276]	@ (8003b08 <HAL_DMA_Init+0x13c>)
 80039f2:	4413      	add	r3, r2
 80039f4:	4a45      	ldr	r2, [pc, #276]	@ (8003b0c <HAL_DMA_Init+0x140>)
 80039f6:	fba2 2303 	umull	r2, r3, r2, r3
 80039fa:	091b      	lsrs	r3, r3, #4
 80039fc:	009a      	lsls	r2, r3, #2
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a42      	ldr	r2, [pc, #264]	@ (8003b10 <HAL_DMA_Init+0x144>)
 8003a06:	641a      	str	r2, [r3, #64]	@ 0x40
 8003a08:	e00e      	b.n	8003a28 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	461a      	mov	r2, r3
 8003a10:	4b40      	ldr	r3, [pc, #256]	@ (8003b14 <HAL_DMA_Init+0x148>)
 8003a12:	4413      	add	r3, r2
 8003a14:	4a3d      	ldr	r2, [pc, #244]	@ (8003b0c <HAL_DMA_Init+0x140>)
 8003a16:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1a:	091b      	lsrs	r3, r3, #4
 8003a1c:	009a      	lsls	r2, r3, #2
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a3c      	ldr	r2, [pc, #240]	@ (8003b18 <HAL_DMA_Init+0x14c>)
 8003a26:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003a3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a42:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003a4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 f9b6 	bl	8003dec <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a88:	d102      	bne.n	8003a90 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685a      	ldr	r2, [r3, #4]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a98:	b2d2      	uxtb	r2, r2
 8003a9a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003aa4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d010      	beq.n	8003ad0 <HAL_DMA_Init+0x104>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2b04      	cmp	r3, #4
 8003ab4:	d80c      	bhi.n	8003ad0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 f9d6 	bl	8003e68 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003acc:	605a      	str	r2, [r3, #4]
 8003ace:	e008      	b.n	8003ae2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	40020407 	.word	0x40020407
 8003b08:	bffdfff8 	.word	0xbffdfff8
 8003b0c:	cccccccd 	.word	0xcccccccd
 8003b10:	40020000 	.word	0x40020000
 8003b14:	bffdfbf8 	.word	0xbffdfbf8
 8003b18:	40020400 	.word	0x40020400

08003b1c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
 8003b28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d101      	bne.n	8003b3c <HAL_DMA_Start_IT+0x20>
 8003b38:	2302      	movs	r3, #2
 8003b3a:	e066      	b.n	8003c0a <HAL_DMA_Start_IT+0xee>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d155      	bne.n	8003bfc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2202      	movs	r2, #2
 8003b54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0201 	bic.w	r2, r2, #1
 8003b6c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	68b9      	ldr	r1, [r7, #8]
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f000 f8fb 	bl	8003d70 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d008      	beq.n	8003b94 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f042 020e 	orr.w	r2, r2, #14
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	e00f      	b.n	8003bb4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 0204 	bic.w	r2, r2, #4
 8003ba2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f042 020a 	orr.w	r2, r2, #10
 8003bb2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d007      	beq.n	8003bd2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bcc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bd0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d007      	beq.n	8003bea <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003be4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003be8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f042 0201 	orr.w	r2, r2, #1
 8003bf8:	601a      	str	r2, [r3, #0]
 8003bfa:	e005      	b.n	8003c08 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003c04:	2302      	movs	r3, #2
 8003c06:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003c08:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3718      	adds	r7, #24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b084      	sub	sp, #16
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c2e:	f003 031f 	and.w	r3, r3, #31
 8003c32:	2204      	movs	r2, #4
 8003c34:	409a      	lsls	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d026      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x7a>
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d021      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0320 	and.w	r3, r3, #32
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d107      	bne.n	8003c66 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 0204 	bic.w	r2, r2, #4
 8003c64:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c6a:	f003 021f 	and.w	r2, r3, #31
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c72:	2104      	movs	r1, #4
 8003c74:	fa01 f202 	lsl.w	r2, r1, r2
 8003c78:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d071      	beq.n	8003d66 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003c8a:	e06c      	b.n	8003d66 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c90:	f003 031f 	and.w	r3, r3, #31
 8003c94:	2202      	movs	r2, #2
 8003c96:	409a      	lsls	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d02e      	beq.n	8003cfe <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d029      	beq.n	8003cfe <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0320 	and.w	r3, r3, #32
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d10b      	bne.n	8003cd0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 020a 	bic.w	r2, r2, #10
 8003cc6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cd4:	f003 021f 	and.w	r2, r3, #31
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cdc:	2102      	movs	r1, #2
 8003cde:	fa01 f202 	lsl.w	r2, r1, r2
 8003ce2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d038      	beq.n	8003d66 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003cfc:	e033      	b.n	8003d66 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d02:	f003 031f 	and.w	r3, r3, #31
 8003d06:	2208      	movs	r2, #8
 8003d08:	409a      	lsls	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d02a      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	f003 0308 	and.w	r3, r3, #8
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d025      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f022 020e 	bic.w	r2, r2, #14
 8003d2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d30:	f003 021f 	and.w	r2, r3, #31
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d38:	2101      	movs	r1, #1
 8003d3a:	fa01 f202 	lsl.w	r2, r1, r2
 8003d3e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d004      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003d66:	bf00      	nop
 8003d68:	bf00      	nop
}
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
 8003d7c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003d86:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d004      	beq.n	8003d9a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003d98:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d9e:	f003 021f 	and.w	r2, r3, #31
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da6:	2101      	movs	r1, #1
 8003da8:	fa01 f202 	lsl.w	r2, r1, r2
 8003dac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	2b10      	cmp	r3, #16
 8003dbc:	d108      	bne.n	8003dd0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003dce:	e007      	b.n	8003de0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68ba      	ldr	r2, [r7, #8]
 8003dd6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	60da      	str	r2, [r3, #12]
}
 8003de0:	bf00      	nop
 8003de2:	3714      	adds	r7, #20
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b087      	sub	sp, #28
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	461a      	mov	r2, r3
 8003dfa:	4b16      	ldr	r3, [pc, #88]	@ (8003e54 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d802      	bhi.n	8003e06 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003e00:	4b15      	ldr	r3, [pc, #84]	@ (8003e58 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003e02:	617b      	str	r3, [r7, #20]
 8003e04:	e001      	b.n	8003e0a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003e06:	4b15      	ldr	r3, [pc, #84]	@ (8003e5c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003e08:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	3b08      	subs	r3, #8
 8003e16:	4a12      	ldr	r2, [pc, #72]	@ (8003e60 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003e18:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1c:	091b      	lsrs	r3, r3, #4
 8003e1e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e24:	089b      	lsrs	r3, r3, #2
 8003e26:	009a      	lsls	r2, r3, #2
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a0b      	ldr	r2, [pc, #44]	@ (8003e64 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003e36:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f003 031f 	and.w	r3, r3, #31
 8003e3e:	2201      	movs	r2, #1
 8003e40:	409a      	lsls	r2, r3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003e46:	bf00      	nop
 8003e48:	371c      	adds	r7, #28
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	40020407 	.word	0x40020407
 8003e58:	40020800 	.word	0x40020800
 8003e5c:	40020820 	.word	0x40020820
 8003e60:	cccccccd 	.word	0xcccccccd
 8003e64:	40020880 	.word	0x40020880

08003e68 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8003ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003e7c:	4413      	add	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	461a      	mov	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a08      	ldr	r2, [pc, #32]	@ (8003eac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003e8a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	f003 031f 	and.w	r3, r3, #31
 8003e94:	2201      	movs	r2, #1
 8003e96:	409a      	lsls	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003e9c:	bf00      	nop
 8003e9e:	3714      	adds	r7, #20
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	1000823f 	.word	0x1000823f
 8003eac:	40020940 	.word	0x40020940

08003eb0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e147      	b.n	8004152 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d106      	bne.n	8003edc <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7fe fcba 	bl	8002850 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	699a      	ldr	r2, [r3, #24]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f022 0210 	bic.w	r2, r2, #16
 8003eea:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003eec:	f7ff fc30 	bl	8003750 <HAL_GetTick>
 8003ef0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003ef2:	e012      	b.n	8003f1a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003ef4:	f7ff fc2c 	bl	8003750 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b0a      	cmp	r3, #10
 8003f00:	d90b      	bls.n	8003f1a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f06:	f043 0201 	orr.w	r2, r3, #1
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2203      	movs	r2, #3
 8003f12:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e11b      	b.n	8004152 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	f003 0308 	and.w	r3, r3, #8
 8003f24:	2b08      	cmp	r3, #8
 8003f26:	d0e5      	beq.n	8003ef4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	699a      	ldr	r2, [r3, #24]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f042 0201 	orr.w	r2, r2, #1
 8003f36:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f38:	f7ff fc0a 	bl	8003750 <HAL_GetTick>
 8003f3c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003f3e:	e012      	b.n	8003f66 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003f40:	f7ff fc06 	bl	8003750 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b0a      	cmp	r3, #10
 8003f4c:	d90b      	bls.n	8003f66 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f52:	f043 0201 	orr.w	r2, r3, #1
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2203      	movs	r2, #3
 8003f5e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e0f5      	b.n	8004152 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	f003 0301 	and.w	r3, r3, #1
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d0e5      	beq.n	8003f40 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	699a      	ldr	r2, [r3, #24]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f042 0202 	orr.w	r2, r2, #2
 8003f82:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a74      	ldr	r2, [pc, #464]	@ (800415c <HAL_FDCAN_Init+0x2ac>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d103      	bne.n	8003f96 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003f8e:	4a74      	ldr	r2, [pc, #464]	@ (8004160 <HAL_FDCAN_Init+0x2b0>)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	7c1b      	ldrb	r3, [r3, #16]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d108      	bne.n	8003fb0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	699a      	ldr	r2, [r3, #24]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fac:	619a      	str	r2, [r3, #24]
 8003fae:	e007      	b.n	8003fc0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	699a      	ldr	r2, [r3, #24]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003fbe:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	7c5b      	ldrb	r3, [r3, #17]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d108      	bne.n	8003fda <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	699a      	ldr	r2, [r3, #24]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003fd6:	619a      	str	r2, [r3, #24]
 8003fd8:	e007      	b.n	8003fea <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	699a      	ldr	r2, [r3, #24]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003fe8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	7c9b      	ldrb	r3, [r3, #18]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d108      	bne.n	8004004 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	699a      	ldr	r2, [r3, #24]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004000:	619a      	str	r2, [r3, #24]
 8004002:	e007      	b.n	8004014 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	699a      	ldr	r2, [r3, #24]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004012:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	689a      	ldr	r2, [r3, #8]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	430a      	orrs	r2, r1
 8004028:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	699a      	ldr	r2, [r3, #24]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8004038:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	691a      	ldr	r2, [r3, #16]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 0210 	bic.w	r2, r2, #16
 8004048:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d108      	bne.n	8004064 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	699a      	ldr	r2, [r3, #24]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f042 0204 	orr.w	r2, r2, #4
 8004060:	619a      	str	r2, [r3, #24]
 8004062:	e02c      	b.n	80040be <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d028      	beq.n	80040be <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	2b02      	cmp	r3, #2
 8004072:	d01c      	beq.n	80040ae <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	699a      	ldr	r2, [r3, #24]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004082:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	691a      	ldr	r2, [r3, #16]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f042 0210 	orr.w	r2, r2, #16
 8004092:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	2b03      	cmp	r3, #3
 800409a:	d110      	bne.n	80040be <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	699a      	ldr	r2, [r3, #24]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 0220 	orr.w	r2, r2, #32
 80040aa:	619a      	str	r2, [r3, #24]
 80040ac:	e007      	b.n	80040be <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	699a      	ldr	r2, [r3, #24]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f042 0220 	orr.w	r2, r2, #32
 80040bc:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	3b01      	subs	r3, #1
 80040c4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	3b01      	subs	r3, #1
 80040cc:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80040ce:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a1b      	ldr	r3, [r3, #32]
 80040d4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80040d6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	3b01      	subs	r3, #1
 80040e0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80040e6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80040e8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040f2:	d115      	bne.n	8004120 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040fe:	3b01      	subs	r3, #1
 8004100:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004102:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004108:	3b01      	subs	r3, #1
 800410a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800410c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004114:	3b01      	subs	r3, #1
 8004116:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800411c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800411e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	430a      	orrs	r2, r1
 8004132:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 fc20 	bl	800497c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	40006400 	.word	0x40006400
 8004160:	40006500 	.word	0x40006500

08004164 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8004164:	b480      	push	{r7}
 8004166:	b087      	sub	sp, #28
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004174:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004176:	7dfb      	ldrb	r3, [r7, #23]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d002      	beq.n	8004182 <HAL_FDCAN_ConfigFilter+0x1e>
 800417c:	7dfb      	ldrb	r3, [r7, #23]
 800417e:	2b02      	cmp	r3, #2
 8004180:	d13d      	bne.n	80041fe <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d119      	bne.n	80041be <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004196:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800419e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80041a4:	4313      	orrs	r3, r2
 80041a6:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4413      	add	r3, r2
 80041b4:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	601a      	str	r2, [r3, #0]
 80041bc:	e01d      	b.n	80041fa <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	075a      	lsls	r2, r3, #29
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	079a      	lsls	r2, r3, #30
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	00db      	lsls	r3, r3, #3
 80041e4:	4413      	add	r3, r2
 80041e6:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	3304      	adds	r3, #4
 80041f2:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80041fa:	2300      	movs	r3, #0
 80041fc:	e006      	b.n	800420c <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004202:	f043 0202 	orr.w	r2, r3, #2
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
  }
}
 800420c:	4618      	mov	r0, r3
 800420e:	371c      	adds	r7, #28
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b01      	cmp	r3, #1
 800422a:	d110      	bne.n	800424e <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2202      	movs	r2, #2
 8004230:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	699a      	ldr	r2, [r3, #24]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 0201 	bic.w	r2, r2, #1
 8004242:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 800424a:	2300      	movs	r3, #0
 800424c:	e006      	b.n	800425c <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004252:	f043 0204 	orr.w	r2, r3, #4
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
  }
}
 800425c:	4618      	mov	r0, r3
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8004268:	b480      	push	{r7}
 800426a:	b08b      	sub	sp, #44	@ 0x2c
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
 8004274:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8004276:	2300      	movs	r3, #0
 8004278:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004280:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8004282:	7efb      	ldrb	r3, [r7, #27]
 8004284:	2b02      	cmp	r3, #2
 8004286:	f040 80e8 	bne.w	800445a <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	2b40      	cmp	r3, #64	@ 0x40
 800428e:	d137      	bne.n	8004300 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004298:	f003 030f 	and.w	r3, r3, #15
 800429c:	2b00      	cmp	r3, #0
 800429e:	d107      	bne.n	80042b0 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042a4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e0db      	b.n	8004468 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042c0:	d10a      	bne.n	80042d8 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042d2:	d101      	bne.n	80042d8 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80042d4:	2301      	movs	r3, #1
 80042d6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042e0:	0a1b      	lsrs	r3, r3, #8
 80042e2:	f003 0303 	and.w	r3, r3, #3
 80042e6:	69fa      	ldr	r2, [r7, #28]
 80042e8:	4413      	add	r3, r2
 80042ea:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80042f0:	69fa      	ldr	r2, [r7, #28]
 80042f2:	4613      	mov	r3, r2
 80042f4:	00db      	lsls	r3, r3, #3
 80042f6:	4413      	add	r3, r2
 80042f8:	00db      	lsls	r3, r3, #3
 80042fa:	440b      	add	r3, r1
 80042fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80042fe:	e036      	b.n	800436e <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004308:	f003 030f 	and.w	r3, r3, #15
 800430c:	2b00      	cmp	r3, #0
 800430e:	d107      	bne.n	8004320 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004314:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e0a3      	b.n	8004468 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004328:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800432c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004330:	d10a      	bne.n	8004348 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800433a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800433e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004342:	d101      	bne.n	8004348 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004344:	2301      	movs	r3, #1
 8004346:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004350:	0a1b      	lsrs	r3, r3, #8
 8004352:	f003 0303 	and.w	r3, r3, #3
 8004356:	69fa      	ldr	r2, [r7, #28]
 8004358:	4413      	add	r3, r2
 800435a:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8004360:	69fa      	ldr	r2, [r7, #28]
 8004362:	4613      	mov	r3, r2
 8004364:	00db      	lsls	r3, r3, #3
 8004366:	4413      	add	r3, r2
 8004368:	00db      	lsls	r3, r3, #3
 800436a:	440b      	add	r3, r1
 800436c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800436e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d107      	bne.n	8004392 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8004382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	0c9b      	lsrs	r3, r3, #18
 8004388:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	601a      	str	r2, [r3, #0]
 8004390:	e005      	b.n	800439e <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8004392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800439e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80043aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80043b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b8:	3304      	adds	r3, #4
 80043ba:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80043bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80043c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	0c1b      	lsrs	r3, r3, #16
 80043cc:	f003 020f 	and.w	r2, r3, #15
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80043d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80043e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80043ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	0e1b      	lsrs	r3, r3, #24
 80043f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80043fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	0fda      	lsrs	r2, r3, #31
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8004404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004406:	3304      	adds	r3, #4
 8004408:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800440a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800440c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800440e:	2300      	movs	r3, #0
 8004410:	623b      	str	r3, [r7, #32]
 8004412:	e00a      	b.n	800442a <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8004414:	697a      	ldr	r2, [r7, #20]
 8004416:	6a3b      	ldr	r3, [r7, #32]
 8004418:	441a      	add	r2, r3
 800441a:	6839      	ldr	r1, [r7, #0]
 800441c:	6a3b      	ldr	r3, [r7, #32]
 800441e:	440b      	add	r3, r1
 8004420:	7812      	ldrb	r2, [r2, #0]
 8004422:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8004424:	6a3b      	ldr	r3, [r7, #32]
 8004426:	3301      	adds	r3, #1
 8004428:	623b      	str	r3, [r7, #32]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	4a11      	ldr	r2, [pc, #68]	@ (8004474 <HAL_FDCAN_GetRxMessage+0x20c>)
 8004430:	5cd3      	ldrb	r3, [r2, r3]
 8004432:	461a      	mov	r2, r3
 8004434:	6a3b      	ldr	r3, [r7, #32]
 8004436:	4293      	cmp	r3, r2
 8004438:	d3ec      	bcc.n	8004414 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	2b40      	cmp	r3, #64	@ 0x40
 800443e:	d105      	bne.n	800444c <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	69fa      	ldr	r2, [r7, #28]
 8004446:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800444a:	e004      	b.n	8004456 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	69fa      	ldr	r2, [r7, #28]
 8004452:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8004456:	2300      	movs	r3, #0
 8004458:	e006      	b.n	8004468 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800445e:	f043 0208 	orr.w	r2, r3, #8
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
  }
}
 8004468:	4618      	mov	r0, r3
 800446a:	372c      	adds	r7, #44	@ 0x2c
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr
 8004474:	0800a708 	.word	0x0800a708

08004478 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8004478:	b480      	push	{r7}
 800447a:	b087      	sub	sp, #28
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800448a:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800448c:	7dfb      	ldrb	r3, [r7, #23]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d003      	beq.n	800449a <HAL_FDCAN_ActivateNotification+0x22>
 8004492:	7dfb      	ldrb	r3, [r7, #23]
 8004494:	2b02      	cmp	r3, #2
 8004496:	f040 80c8 	bne.w	800462a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044a0:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	f003 0307 	and.w	r3, r3, #7
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d004      	beq.n	80044b6 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d03b      	beq.n	800452e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d004      	beq.n	80044ca <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d031      	beq.n	800452e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d004      	beq.n	80044de <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	f003 0304 	and.w	r3, r3, #4
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d027      	beq.n	800452e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d004      	beq.n	80044f2 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	f003 0308 	and.w	r3, r3, #8
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d01d      	beq.n	800452e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d004      	beq.n	8004506 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	f003 0310 	and.w	r3, r3, #16
 8004502:	2b00      	cmp	r3, #0
 8004504:	d013      	beq.n	800452e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800450c:	2b00      	cmp	r3, #0
 800450e:	d004      	beq.n	800451a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	f003 0320 	and.w	r3, r3, #32
 8004516:	2b00      	cmp	r3, #0
 8004518:	d009      	beq.n	800452e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8004520:	2b00      	cmp	r3, #0
 8004522:	d00c      	beq.n	800453e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800452a:	2b00      	cmp	r3, #0
 800452c:	d107      	bne.n	800453e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f042 0201 	orr.w	r2, r2, #1
 800453c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	f003 0307 	and.w	r3, r3, #7
 8004544:	2b00      	cmp	r3, #0
 8004546:	d004      	beq.n	8004552 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	d13b      	bne.n	80045ca <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8004558:	2b00      	cmp	r3, #0
 800455a:	d004      	beq.n	8004566 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d131      	bne.n	80045ca <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800456c:	2b00      	cmp	r3, #0
 800456e:	d004      	beq.n	800457a <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	f003 0304 	and.w	r3, r3, #4
 8004576:	2b00      	cmp	r3, #0
 8004578:	d127      	bne.n	80045ca <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8004580:	2b00      	cmp	r3, #0
 8004582:	d004      	beq.n	800458e <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	f003 0308 	and.w	r3, r3, #8
 800458a:	2b00      	cmp	r3, #0
 800458c:	d11d      	bne.n	80045ca <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8004594:	2b00      	cmp	r3, #0
 8004596:	d004      	beq.n	80045a2 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	f003 0310 	and.w	r3, r3, #16
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d113      	bne.n	80045ca <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d004      	beq.n	80045b6 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	f003 0320 	and.w	r3, r3, #32
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d109      	bne.n	80045ca <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00c      	beq.n	80045da <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d007      	beq.n	80045da <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f042 0202 	orr.w	r2, r2, #2
 80045d8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d009      	beq.n	80045f8 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d009      	beq.n	8004616 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	430a      	orrs	r2, r1
 8004612:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	430a      	orrs	r2, r1
 8004624:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8004626:	2300      	movs	r3, #0
 8004628:	e006      	b.n	8004638 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800462e:	f043 0202 	orr.w	r2, r3, #2
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
  }
}
 8004638:	4618      	mov	r0, r3
 800463a:	371c      	adds	r7, #28
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b08c      	sub	sp, #48	@ 0x30
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004652:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8004656:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800465e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004660:	4013      	ands	r3, r2
 8004662:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800466a:	f003 0307 	and.w	r3, r3, #7
 800466e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004676:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004678:	4013      	ands	r3, r2
 800467a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004682:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004686:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800468e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004690:	4013      	ands	r3, r2
 8004692:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800469a:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 800469e:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046a6:	6a3a      	ldr	r2, [r7, #32]
 80046a8:	4013      	ands	r3, r2
 80046aa:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046b2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80046b6:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046be:	69fa      	ldr	r2, [r7, #28]
 80046c0:	4013      	ands	r3, r2
 80046c2:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ca:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046d2:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	099b      	lsrs	r3, r3, #6
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00c      	beq.n	80046fa <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	099b      	lsrs	r3, r3, #6
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d006      	beq.n	80046fa <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2240      	movs	r2, #64	@ 0x40
 80046f2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f000 f922 	bl	800493e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	0a1b      	lsrs	r3, r3, #8
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b00      	cmp	r3, #0
 8004704:	d01a      	beq.n	800473c <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	0a1b      	lsrs	r3, r3, #8
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	2b00      	cmp	r3, #0
 8004710:	d014      	beq.n	800473c <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800471a:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	4013      	ands	r3, r2
 8004728:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004732:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004734:	6939      	ldr	r1, [r7, #16]
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f8e2 	bl	8004900 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800473c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800473e:	2b00      	cmp	r3, #0
 8004740:	d007      	beq.n	8004752 <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004748:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800474a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 f8ac 	bl	80048aa <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004754:	2b00      	cmp	r3, #0
 8004756:	d007      	beq.n	8004768 <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800475e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004760:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7fc fe40 	bl	80013e8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476a:	2b00      	cmp	r3, #0
 800476c:	d007      	beq.n	800477e <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004774:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004776:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 f8a1 	bl	80048c0 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	0a5b      	lsrs	r3, r3, #9
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00d      	beq.n	80047a6 <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	0a5b      	lsrs	r3, r3, #9
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d007      	beq.n	80047a6 <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800479e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 f898 	bl	80048d6 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	09db      	lsrs	r3, r3, #7
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d019      	beq.n	80047e6 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	09db      	lsrs	r3, r3, #7
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d013      	beq.n	80047e6 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80047c6:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	4013      	ands	r3, r2
 80047d4:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2280      	movs	r2, #128	@ 0x80
 80047dc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80047de:	68f9      	ldr	r1, [r7, #12]
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 f882 	bl	80048ea <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	0b5b      	lsrs	r3, r3, #13
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00d      	beq.n	800480e <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	0b5b      	lsrs	r3, r3, #13
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d007      	beq.n	800480e <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004806:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 f884 	bl	8004916 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	0bdb      	lsrs	r3, r3, #15
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00d      	beq.n	8004836 <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	0bdb      	lsrs	r3, r3, #15
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	2b00      	cmp	r3, #0
 8004824:	d007      	beq.n	8004836 <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800482e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f000 f87a 	bl	800492a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	0b9b      	lsrs	r3, r3, #14
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	d010      	beq.n	8004864 <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	0b9b      	lsrs	r3, r3, #14
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00a      	beq.n	8004864 <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004856:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800485c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d007      	beq.n	800487a <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	69fa      	ldr	r2, [r7, #28]
 8004870:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004872:	69f9      	ldr	r1, [r7, #28]
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 f876 	bl	8004966 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800487a:	6a3b      	ldr	r3, [r7, #32]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d009      	beq.n	8004894 <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6a3a      	ldr	r2, [r7, #32]
 8004886:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800488c:	6a3b      	ldr	r3, [r7, #32]
 800488e:	431a      	orrs	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004898:	2b00      	cmp	r3, #0
 800489a:	d002      	beq.n	80048a2 <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 f858 	bl	8004952 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80048a2:	bf00      	nop
 80048a4:	3730      	adds	r7, #48	@ 0x30
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80048aa:	b480      	push	{r7}
 80048ac:	b083      	sub	sp, #12
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
 80048b2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80048ca:	bf00      	nop
 80048cc:	370c      	adds	r7, #12
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr

080048d6 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80048d6:	b480      	push	{r7}
 80048d8:	b083      	sub	sp, #12
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80048de:	bf00      	nop
 80048e0:	370c      	adds	r7, #12
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80048ea:	b480      	push	{r7}
 80048ec:	b083      	sub	sp, #12
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
 80048f2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800490a:	bf00      	nop
 800490c:	370c      	adds	r7, #12
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr

08004916 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004916:	b480      	push	{r7}
 8004918:	b083      	sub	sp, #12
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800491e:	bf00      	nop
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800492a:	b480      	push	{r7}
 800492c:	b083      	sub	sp, #12
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004932:	bf00      	nop
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800493e:	b480      	push	{r7}
 8004940:	b083      	sub	sp, #12
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004946:	bf00      	nop
 8004948:	370c      	adds	r7, #12
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr

08004952 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004952:	b480      	push	{r7}
 8004954:	b083      	sub	sp, #12
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800495a:	bf00      	nop
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr

08004966 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004966:	b480      	push	{r7}
 8004968:	b083      	sub	sp, #12
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
 800496e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004970:	bf00      	nop
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004984:	4b30      	ldr	r3, [pc, #192]	@ (8004a48 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8004986:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a2f      	ldr	r2, [pc, #188]	@ (8004a4c <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d103      	bne.n	800499a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004998:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a2c      	ldr	r2, [pc, #176]	@ (8004a50 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d103      	bne.n	80049ac <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 80049aa:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	68ba      	ldr	r2, [r7, #8]
 80049b0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049ba:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049c2:	041a      	lsls	r2, r3, #16
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	430a      	orrs	r2, r1
 80049ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049e0:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049e8:	061a      	lsls	r2, r3, #24
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	60fb      	str	r3, [r7, #12]
 8004a20:	e005      	b.n	8004a2e <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	3304      	adds	r3, #4
 8004a2c:	60fb      	str	r3, [r7, #12]
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d3f3      	bcc.n	8004a22 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8004a3a:	bf00      	nop
 8004a3c:	bf00      	nop
 8004a3e:	3714      	adds	r7, #20
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr
 8004a48:	4000a400 	.word	0x4000a400
 8004a4c:	40006800 	.word	0x40006800
 8004a50:	40006c00 	.word	0x40006c00

08004a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b087      	sub	sp, #28
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004a62:	e15a      	b.n	8004d1a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	2101      	movs	r1, #1
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a70:	4013      	ands	r3, r2
 8004a72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	f000 814c 	beq.w	8004d14 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f003 0303 	and.w	r3, r3, #3
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d005      	beq.n	8004a94 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d130      	bne.n	8004af6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	005b      	lsls	r3, r3, #1
 8004a9e:	2203      	movs	r2, #3
 8004aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa4:	43db      	mvns	r3, r3
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	68da      	ldr	r2, [r3, #12]
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	005b      	lsls	r3, r3, #1
 8004ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004aca:	2201      	movs	r2, #1
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad2:	43db      	mvns	r3, r3
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	091b      	lsrs	r3, r3, #4
 8004ae0:	f003 0201 	and.w	r2, r3, #1
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	693a      	ldr	r2, [r7, #16]
 8004af4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f003 0303 	and.w	r3, r3, #3
 8004afe:	2b03      	cmp	r3, #3
 8004b00:	d017      	beq.n	8004b32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	005b      	lsls	r3, r3, #1
 8004b0c:	2203      	movs	r2, #3
 8004b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b12:	43db      	mvns	r3, r3
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	4013      	ands	r3, r2
 8004b18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	689a      	ldr	r2, [r3, #8]
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	005b      	lsls	r3, r3, #1
 8004b22:	fa02 f303 	lsl.w	r3, r2, r3
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	693a      	ldr	r2, [r7, #16]
 8004b30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f003 0303 	and.w	r3, r3, #3
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d123      	bne.n	8004b86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	08da      	lsrs	r2, r3, #3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	3208      	adds	r2, #8
 8004b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	f003 0307 	and.w	r3, r3, #7
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	220f      	movs	r2, #15
 8004b56:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5a:	43db      	mvns	r3, r3
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	4013      	ands	r3, r2
 8004b60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	691a      	ldr	r2, [r3, #16]
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	f003 0307 	and.w	r3, r3, #7
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	08da      	lsrs	r2, r3, #3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	3208      	adds	r2, #8
 8004b80:	6939      	ldr	r1, [r7, #16]
 8004b82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	005b      	lsls	r3, r3, #1
 8004b90:	2203      	movs	r2, #3
 8004b92:	fa02 f303 	lsl.w	r3, r2, r3
 8004b96:	43db      	mvns	r3, r3
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f003 0203 	and.w	r2, r3, #3
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	005b      	lsls	r3, r3, #1
 8004baa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bae:	693a      	ldr	r2, [r7, #16]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f000 80a6 	beq.w	8004d14 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bc8:	4b5b      	ldr	r3, [pc, #364]	@ (8004d38 <HAL_GPIO_Init+0x2e4>)
 8004bca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bcc:	4a5a      	ldr	r2, [pc, #360]	@ (8004d38 <HAL_GPIO_Init+0x2e4>)
 8004bce:	f043 0301 	orr.w	r3, r3, #1
 8004bd2:	6613      	str	r3, [r2, #96]	@ 0x60
 8004bd4:	4b58      	ldr	r3, [pc, #352]	@ (8004d38 <HAL_GPIO_Init+0x2e4>)
 8004bd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bd8:	f003 0301 	and.w	r3, r3, #1
 8004bdc:	60bb      	str	r3, [r7, #8]
 8004bde:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004be0:	4a56      	ldr	r2, [pc, #344]	@ (8004d3c <HAL_GPIO_Init+0x2e8>)
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	089b      	lsrs	r3, r3, #2
 8004be6:	3302      	adds	r3, #2
 8004be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	f003 0303 	and.w	r3, r3, #3
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	220f      	movs	r2, #15
 8004bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfc:	43db      	mvns	r3, r3
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	4013      	ands	r3, r2
 8004c02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004c0a:	d01f      	beq.n	8004c4c <HAL_GPIO_Init+0x1f8>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a4c      	ldr	r2, [pc, #304]	@ (8004d40 <HAL_GPIO_Init+0x2ec>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d019      	beq.n	8004c48 <HAL_GPIO_Init+0x1f4>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a4b      	ldr	r2, [pc, #300]	@ (8004d44 <HAL_GPIO_Init+0x2f0>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d013      	beq.n	8004c44 <HAL_GPIO_Init+0x1f0>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a4a      	ldr	r2, [pc, #296]	@ (8004d48 <HAL_GPIO_Init+0x2f4>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d00d      	beq.n	8004c40 <HAL_GPIO_Init+0x1ec>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a49      	ldr	r2, [pc, #292]	@ (8004d4c <HAL_GPIO_Init+0x2f8>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d007      	beq.n	8004c3c <HAL_GPIO_Init+0x1e8>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a48      	ldr	r2, [pc, #288]	@ (8004d50 <HAL_GPIO_Init+0x2fc>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d101      	bne.n	8004c38 <HAL_GPIO_Init+0x1e4>
 8004c34:	2305      	movs	r3, #5
 8004c36:	e00a      	b.n	8004c4e <HAL_GPIO_Init+0x1fa>
 8004c38:	2306      	movs	r3, #6
 8004c3a:	e008      	b.n	8004c4e <HAL_GPIO_Init+0x1fa>
 8004c3c:	2304      	movs	r3, #4
 8004c3e:	e006      	b.n	8004c4e <HAL_GPIO_Init+0x1fa>
 8004c40:	2303      	movs	r3, #3
 8004c42:	e004      	b.n	8004c4e <HAL_GPIO_Init+0x1fa>
 8004c44:	2302      	movs	r3, #2
 8004c46:	e002      	b.n	8004c4e <HAL_GPIO_Init+0x1fa>
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e000      	b.n	8004c4e <HAL_GPIO_Init+0x1fa>
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	f002 0203 	and.w	r2, r2, #3
 8004c54:	0092      	lsls	r2, r2, #2
 8004c56:	4093      	lsls	r3, r2
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c5e:	4937      	ldr	r1, [pc, #220]	@ (8004d3c <HAL_GPIO_Init+0x2e8>)
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	089b      	lsrs	r3, r3, #2
 8004c64:	3302      	adds	r3, #2
 8004c66:	693a      	ldr	r2, [r7, #16]
 8004c68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c6c:	4b39      	ldr	r3, [pc, #228]	@ (8004d54 <HAL_GPIO_Init+0x300>)
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	43db      	mvns	r3, r3
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	4013      	ands	r3, r2
 8004c7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d003      	beq.n	8004c90 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004c90:	4a30      	ldr	r2, [pc, #192]	@ (8004d54 <HAL_GPIO_Init+0x300>)
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004c96:	4b2f      	ldr	r3, [pc, #188]	@ (8004d54 <HAL_GPIO_Init+0x300>)
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	43db      	mvns	r3, r3
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004cba:	4a26      	ldr	r2, [pc, #152]	@ (8004d54 <HAL_GPIO_Init+0x300>)
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004cc0:	4b24      	ldr	r3, [pc, #144]	@ (8004d54 <HAL_GPIO_Init+0x300>)
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	43db      	mvns	r3, r3
 8004cca:	693a      	ldr	r2, [r7, #16]
 8004ccc:	4013      	ands	r3, r2
 8004cce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d003      	beq.n	8004ce4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004ce4:	4a1b      	ldr	r2, [pc, #108]	@ (8004d54 <HAL_GPIO_Init+0x300>)
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004cea:	4b1a      	ldr	r3, [pc, #104]	@ (8004d54 <HAL_GPIO_Init+0x300>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	43db      	mvns	r3, r3
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004d0e:	4a11      	ldr	r2, [pc, #68]	@ (8004d54 <HAL_GPIO_Init+0x300>)
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	3301      	adds	r3, #1
 8004d18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	fa22 f303 	lsr.w	r3, r2, r3
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f47f ae9d 	bne.w	8004a64 <HAL_GPIO_Init+0x10>
  }
}
 8004d2a:	bf00      	nop
 8004d2c:	bf00      	nop
 8004d2e:	371c      	adds	r7, #28
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr
 8004d38:	40021000 	.word	0x40021000
 8004d3c:	40010000 	.word	0x40010000
 8004d40:	48000400 	.word	0x48000400
 8004d44:	48000800 	.word	0x48000800
 8004d48:	48000c00 	.word	0x48000c00
 8004d4c:	48001000 	.word	0x48001000
 8004d50:	48001400 	.word	0x48001400
 8004d54:	40010400 	.word	0x40010400

08004d58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	460b      	mov	r3, r1
 8004d62:	807b      	strh	r3, [r7, #2]
 8004d64:	4613      	mov	r3, r2
 8004d66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d68:	787b      	ldrb	r3, [r7, #1]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d003      	beq.n	8004d76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d6e:	887a      	ldrh	r2, [r7, #2]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004d74:	e002      	b.n	8004d7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004d76:	887a      	ldrh	r2, [r7, #2]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	460b      	mov	r3, r1
 8004d92:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004d9a:	887a      	ldrh	r2, [r7, #2]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	4013      	ands	r3, r2
 8004da0:	041a      	lsls	r2, r3, #16
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	43d9      	mvns	r1, r3
 8004da6:	887b      	ldrh	r3, [r7, #2]
 8004da8:	400b      	ands	r3, r1
 8004daa:	431a      	orrs	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	619a      	str	r2, [r3, #24]
}
 8004db0:	bf00      	nop
 8004db2:	3714      	adds	r7, #20
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d141      	bne.n	8004e4e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004dca:	4b4b      	ldr	r3, [pc, #300]	@ (8004ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004dd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dd6:	d131      	bne.n	8004e3c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004dd8:	4b47      	ldr	r3, [pc, #284]	@ (8004ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004dde:	4a46      	ldr	r2, [pc, #280]	@ (8004ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004de0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004de4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004de8:	4b43      	ldr	r3, [pc, #268]	@ (8004ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004df0:	4a41      	ldr	r2, [pc, #260]	@ (8004ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004df2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004df6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004df8:	4b40      	ldr	r3, [pc, #256]	@ (8004efc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2232      	movs	r2, #50	@ 0x32
 8004dfe:	fb02 f303 	mul.w	r3, r2, r3
 8004e02:	4a3f      	ldr	r2, [pc, #252]	@ (8004f00 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004e04:	fba2 2303 	umull	r2, r3, r2, r3
 8004e08:	0c9b      	lsrs	r3, r3, #18
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e0e:	e002      	b.n	8004e16 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	3b01      	subs	r3, #1
 8004e14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e16:	4b38      	ldr	r3, [pc, #224]	@ (8004ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e22:	d102      	bne.n	8004e2a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1f2      	bne.n	8004e10 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e2a:	4b33      	ldr	r3, [pc, #204]	@ (8004ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e36:	d158      	bne.n	8004eea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e057      	b.n	8004eec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e3c:	4b2e      	ldr	r3, [pc, #184]	@ (8004ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e42:	4a2d      	ldr	r2, [pc, #180]	@ (8004ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e48:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004e4c:	e04d      	b.n	8004eea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e54:	d141      	bne.n	8004eda <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e56:	4b28      	ldr	r3, [pc, #160]	@ (8004ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004e5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e62:	d131      	bne.n	8004ec8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e64:	4b24      	ldr	r3, [pc, #144]	@ (8004ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e6a:	4a23      	ldr	r2, [pc, #140]	@ (8004ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e70:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e74:	4b20      	ldr	r3, [pc, #128]	@ (8004ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004e7c:	4a1e      	ldr	r2, [pc, #120]	@ (8004ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e82:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e84:	4b1d      	ldr	r3, [pc, #116]	@ (8004efc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2232      	movs	r2, #50	@ 0x32
 8004e8a:	fb02 f303 	mul.w	r3, r2, r3
 8004e8e:	4a1c      	ldr	r2, [pc, #112]	@ (8004f00 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004e90:	fba2 2303 	umull	r2, r3, r2, r3
 8004e94:	0c9b      	lsrs	r3, r3, #18
 8004e96:	3301      	adds	r3, #1
 8004e98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e9a:	e002      	b.n	8004ea2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ea2:	4b15      	ldr	r3, [pc, #84]	@ (8004ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eae:	d102      	bne.n	8004eb6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1f2      	bne.n	8004e9c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004eb6:	4b10      	ldr	r3, [pc, #64]	@ (8004ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ebe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ec2:	d112      	bne.n	8004eea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e011      	b.n	8004eec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8004ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ece:	4a0a      	ldr	r2, [pc, #40]	@ (8004ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ed0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ed4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004ed8:	e007      	b.n	8004eea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004eda:	4b07      	ldr	r3, [pc, #28]	@ (8004ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004ee2:	4a05      	ldr	r2, [pc, #20]	@ (8004ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ee4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004ee8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3714      	adds	r7, #20
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr
 8004ef8:	40007000 	.word	0x40007000
 8004efc:	20000024 	.word	0x20000024
 8004f00:	431bde83 	.word	0x431bde83

08004f04 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004f04:	b480      	push	{r7}
 8004f06:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004f08:	4b05      	ldr	r3, [pc, #20]	@ (8004f20 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	4a04      	ldr	r2, [pc, #16]	@ (8004f20 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004f0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f12:	6093      	str	r3, [r2, #8]
}
 8004f14:	bf00      	nop
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	40007000 	.word	0x40007000

08004f24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b088      	sub	sp, #32
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e2fe      	b.n	8005534 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d075      	beq.n	800502e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f42:	4b97      	ldr	r3, [pc, #604]	@ (80051a0 <HAL_RCC_OscConfig+0x27c>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f003 030c 	and.w	r3, r3, #12
 8004f4a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f4c:	4b94      	ldr	r3, [pc, #592]	@ (80051a0 <HAL_RCC_OscConfig+0x27c>)
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	f003 0303 	and.w	r3, r3, #3
 8004f54:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	2b0c      	cmp	r3, #12
 8004f5a:	d102      	bne.n	8004f62 <HAL_RCC_OscConfig+0x3e>
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	2b03      	cmp	r3, #3
 8004f60:	d002      	beq.n	8004f68 <HAL_RCC_OscConfig+0x44>
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	2b08      	cmp	r3, #8
 8004f66:	d10b      	bne.n	8004f80 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f68:	4b8d      	ldr	r3, [pc, #564]	@ (80051a0 <HAL_RCC_OscConfig+0x27c>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d05b      	beq.n	800502c <HAL_RCC_OscConfig+0x108>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d157      	bne.n	800502c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e2d9      	b.n	8005534 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f88:	d106      	bne.n	8004f98 <HAL_RCC_OscConfig+0x74>
 8004f8a:	4b85      	ldr	r3, [pc, #532]	@ (80051a0 <HAL_RCC_OscConfig+0x27c>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a84      	ldr	r2, [pc, #528]	@ (80051a0 <HAL_RCC_OscConfig+0x27c>)
 8004f90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f94:	6013      	str	r3, [r2, #0]
 8004f96:	e01d      	b.n	8004fd4 <HAL_RCC_OscConfig+0xb0>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004fa0:	d10c      	bne.n	8004fbc <HAL_RCC_OscConfig+0x98>
 8004fa2:	4b7f      	ldr	r3, [pc, #508]	@ (80051a0 <HAL_RCC_OscConfig+0x27c>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a7e      	ldr	r2, [pc, #504]	@ (80051a0 <HAL_RCC_OscConfig+0x27c>)
 8004fa8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004fac:	6013      	str	r3, [r2, #0]
 8004fae:	4b7c      	ldr	r3, [pc, #496]	@ (80051a0 <HAL_RCC_OscConfig+0x27c>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a7b      	ldr	r2, [pc, #492]	@ (80051a0 <HAL_RCC_OscConfig+0x27c>)
 8004fb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fb8:	6013      	str	r3, [r2, #0]
 8004fba:	e00b      	b.n	8004fd4 <HAL_RCC_OscConfig+0xb0>
 8004fbc:	4b78      	ldr	r3, [pc, #480]	@ (80051a0 <HAL_RCC_OscConfig+0x27c>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a77      	ldr	r2, [pc, #476]	@ (80051a0 <HAL_RCC_OscConfig+0x27c>)
 8004fc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fc6:	6013      	str	r3, [r2, #0]
 8004fc8:	4b75      	ldr	r3, [pc, #468]	@ (80051a0 <HAL_RCC_OscConfig+0x27c>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a74      	ldr	r2, [pc, #464]	@ (80051a0 <HAL_RCC_OscConfig+0x27c>)
 8004fce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004fd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d013      	beq.n	8005004 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fdc:	f7fe fbb8 	bl	8003750 <HAL_GetTick>
 8004fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fe2:	e008      	b.n	8004ff6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fe4:	f7fe fbb4 	bl	8003750 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b64      	cmp	r3, #100	@ 0x64
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e29e      	b.n	8005534 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ff6:	4b6a      	ldr	r3, [pc, #424]	@ (80051a0 <HAL_RCC_OscConfig+0x27c>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d0f0      	beq.n	8004fe4 <HAL_RCC_OscConfig+0xc0>
 8005002:	e014      	b.n	800502e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005004:	f7fe fba4 	bl	8003750 <HAL_GetTick>
 8005008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800500a:	e008      	b.n	800501e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800500c:	f7fe fba0 	bl	8003750 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b64      	cmp	r3, #100	@ 0x64
 8005018:	d901      	bls.n	800501e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e28a      	b.n	8005534 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800501e:	4b60      	ldr	r3, [pc, #384]	@ (80051a0 <HAL_RCC_OscConfig+0x27c>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1f0      	bne.n	800500c <HAL_RCC_OscConfig+0xe8>
 800502a:	e000      	b.n	800502e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800502c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0302 	and.w	r3, r3, #2
 8005036:	2b00      	cmp	r3, #0
 8005038:	d075      	beq.n	8005126 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800503a:	4b59      	ldr	r3, [pc, #356]	@ (80051a0 <HAL_RCC_OscConfig+0x27c>)
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f003 030c 	and.w	r3, r3, #12
 8005042:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005044:	4b56      	ldr	r3, [pc, #344]	@ (80051a0 <HAL_RCC_OscConfig+0x27c>)
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	f003 0303 	and.w	r3, r3, #3
 800504c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	2b0c      	cmp	r3, #12
 8005052:	d102      	bne.n	800505a <HAL_RCC_OscConfig+0x136>
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	2b02      	cmp	r3, #2
 8005058:	d002      	beq.n	8005060 <HAL_RCC_OscConfig+0x13c>
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	2b04      	cmp	r3, #4
 800505e:	d11f      	bne.n	80050a0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005060:	4b4f      	ldr	r3, [pc, #316]	@ (80051a0 <HAL_RCC_OscConfig+0x27c>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005068:	2b00      	cmp	r3, #0
 800506a:	d005      	beq.n	8005078 <HAL_RCC_OscConfig+0x154>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d101      	bne.n	8005078 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e25d      	b.n	8005534 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005078:	4b49      	ldr	r3, [pc, #292]	@ (80051a0 <HAL_RCC_OscConfig+0x27c>)
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	061b      	lsls	r3, r3, #24
 8005086:	4946      	ldr	r1, [pc, #280]	@ (80051a0 <HAL_RCC_OscConfig+0x27c>)
 8005088:	4313      	orrs	r3, r2
 800508a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800508c:	4b45      	ldr	r3, [pc, #276]	@ (80051a4 <HAL_RCC_OscConfig+0x280>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4618      	mov	r0, r3
 8005092:	f7fe fb11 	bl	80036b8 <HAL_InitTick>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d043      	beq.n	8005124 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e249      	b.n	8005534 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d023      	beq.n	80050f0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050a8:	4b3d      	ldr	r3, [pc, #244]	@ (80051a0 <HAL_RCC_OscConfig+0x27c>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a3c      	ldr	r2, [pc, #240]	@ (80051a0 <HAL_RCC_OscConfig+0x27c>)
 80050ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b4:	f7fe fb4c 	bl	8003750 <HAL_GetTick>
 80050b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050ba:	e008      	b.n	80050ce <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050bc:	f7fe fb48 	bl	8003750 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d901      	bls.n	80050ce <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e232      	b.n	8005534 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050ce:	4b34      	ldr	r3, [pc, #208]	@ (80051a0 <HAL_RCC_OscConfig+0x27c>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d0f0      	beq.n	80050bc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050da:	4b31      	ldr	r3, [pc, #196]	@ (80051a0 <HAL_RCC_OscConfig+0x27c>)
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	061b      	lsls	r3, r3, #24
 80050e8:	492d      	ldr	r1, [pc, #180]	@ (80051a0 <HAL_RCC_OscConfig+0x27c>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	604b      	str	r3, [r1, #4]
 80050ee:	e01a      	b.n	8005126 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050f0:	4b2b      	ldr	r3, [pc, #172]	@ (80051a0 <HAL_RCC_OscConfig+0x27c>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a2a      	ldr	r2, [pc, #168]	@ (80051a0 <HAL_RCC_OscConfig+0x27c>)
 80050f6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050fc:	f7fe fb28 	bl	8003750 <HAL_GetTick>
 8005100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005102:	e008      	b.n	8005116 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005104:	f7fe fb24 	bl	8003750 <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	2b02      	cmp	r3, #2
 8005110:	d901      	bls.n	8005116 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e20e      	b.n	8005534 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005116:	4b22      	ldr	r3, [pc, #136]	@ (80051a0 <HAL_RCC_OscConfig+0x27c>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1f0      	bne.n	8005104 <HAL_RCC_OscConfig+0x1e0>
 8005122:	e000      	b.n	8005126 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005124:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0308 	and.w	r3, r3, #8
 800512e:	2b00      	cmp	r3, #0
 8005130:	d041      	beq.n	80051b6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	695b      	ldr	r3, [r3, #20]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d01c      	beq.n	8005174 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800513a:	4b19      	ldr	r3, [pc, #100]	@ (80051a0 <HAL_RCC_OscConfig+0x27c>)
 800513c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005140:	4a17      	ldr	r2, [pc, #92]	@ (80051a0 <HAL_RCC_OscConfig+0x27c>)
 8005142:	f043 0301 	orr.w	r3, r3, #1
 8005146:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800514a:	f7fe fb01 	bl	8003750 <HAL_GetTick>
 800514e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005150:	e008      	b.n	8005164 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005152:	f7fe fafd 	bl	8003750 <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	2b02      	cmp	r3, #2
 800515e:	d901      	bls.n	8005164 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e1e7      	b.n	8005534 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005164:	4b0e      	ldr	r3, [pc, #56]	@ (80051a0 <HAL_RCC_OscConfig+0x27c>)
 8005166:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d0ef      	beq.n	8005152 <HAL_RCC_OscConfig+0x22e>
 8005172:	e020      	b.n	80051b6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005174:	4b0a      	ldr	r3, [pc, #40]	@ (80051a0 <HAL_RCC_OscConfig+0x27c>)
 8005176:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800517a:	4a09      	ldr	r2, [pc, #36]	@ (80051a0 <HAL_RCC_OscConfig+0x27c>)
 800517c:	f023 0301 	bic.w	r3, r3, #1
 8005180:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005184:	f7fe fae4 	bl	8003750 <HAL_GetTick>
 8005188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800518a:	e00d      	b.n	80051a8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800518c:	f7fe fae0 	bl	8003750 <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2b02      	cmp	r3, #2
 8005198:	d906      	bls.n	80051a8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e1ca      	b.n	8005534 <HAL_RCC_OscConfig+0x610>
 800519e:	bf00      	nop
 80051a0:	40021000 	.word	0x40021000
 80051a4:	20000050 	.word	0x20000050
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051a8:	4b8c      	ldr	r3, [pc, #560]	@ (80053dc <HAL_RCC_OscConfig+0x4b8>)
 80051aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051ae:	f003 0302 	and.w	r3, r3, #2
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1ea      	bne.n	800518c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0304 	and.w	r3, r3, #4
 80051be:	2b00      	cmp	r3, #0
 80051c0:	f000 80a6 	beq.w	8005310 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051c4:	2300      	movs	r3, #0
 80051c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80051c8:	4b84      	ldr	r3, [pc, #528]	@ (80053dc <HAL_RCC_OscConfig+0x4b8>)
 80051ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d101      	bne.n	80051d8 <HAL_RCC_OscConfig+0x2b4>
 80051d4:	2301      	movs	r3, #1
 80051d6:	e000      	b.n	80051da <HAL_RCC_OscConfig+0x2b6>
 80051d8:	2300      	movs	r3, #0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00d      	beq.n	80051fa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051de:	4b7f      	ldr	r3, [pc, #508]	@ (80053dc <HAL_RCC_OscConfig+0x4b8>)
 80051e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051e2:	4a7e      	ldr	r2, [pc, #504]	@ (80053dc <HAL_RCC_OscConfig+0x4b8>)
 80051e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80051ea:	4b7c      	ldr	r3, [pc, #496]	@ (80053dc <HAL_RCC_OscConfig+0x4b8>)
 80051ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051f2:	60fb      	str	r3, [r7, #12]
 80051f4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80051f6:	2301      	movs	r3, #1
 80051f8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051fa:	4b79      	ldr	r3, [pc, #484]	@ (80053e0 <HAL_RCC_OscConfig+0x4bc>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005202:	2b00      	cmp	r3, #0
 8005204:	d118      	bne.n	8005238 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005206:	4b76      	ldr	r3, [pc, #472]	@ (80053e0 <HAL_RCC_OscConfig+0x4bc>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a75      	ldr	r2, [pc, #468]	@ (80053e0 <HAL_RCC_OscConfig+0x4bc>)
 800520c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005210:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005212:	f7fe fa9d 	bl	8003750 <HAL_GetTick>
 8005216:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005218:	e008      	b.n	800522c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800521a:	f7fe fa99 	bl	8003750 <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	2b02      	cmp	r3, #2
 8005226:	d901      	bls.n	800522c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e183      	b.n	8005534 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800522c:	4b6c      	ldr	r3, [pc, #432]	@ (80053e0 <HAL_RCC_OscConfig+0x4bc>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005234:	2b00      	cmp	r3, #0
 8005236:	d0f0      	beq.n	800521a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d108      	bne.n	8005252 <HAL_RCC_OscConfig+0x32e>
 8005240:	4b66      	ldr	r3, [pc, #408]	@ (80053dc <HAL_RCC_OscConfig+0x4b8>)
 8005242:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005246:	4a65      	ldr	r2, [pc, #404]	@ (80053dc <HAL_RCC_OscConfig+0x4b8>)
 8005248:	f043 0301 	orr.w	r3, r3, #1
 800524c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005250:	e024      	b.n	800529c <HAL_RCC_OscConfig+0x378>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	2b05      	cmp	r3, #5
 8005258:	d110      	bne.n	800527c <HAL_RCC_OscConfig+0x358>
 800525a:	4b60      	ldr	r3, [pc, #384]	@ (80053dc <HAL_RCC_OscConfig+0x4b8>)
 800525c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005260:	4a5e      	ldr	r2, [pc, #376]	@ (80053dc <HAL_RCC_OscConfig+0x4b8>)
 8005262:	f043 0304 	orr.w	r3, r3, #4
 8005266:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800526a:	4b5c      	ldr	r3, [pc, #368]	@ (80053dc <HAL_RCC_OscConfig+0x4b8>)
 800526c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005270:	4a5a      	ldr	r2, [pc, #360]	@ (80053dc <HAL_RCC_OscConfig+0x4b8>)
 8005272:	f043 0301 	orr.w	r3, r3, #1
 8005276:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800527a:	e00f      	b.n	800529c <HAL_RCC_OscConfig+0x378>
 800527c:	4b57      	ldr	r3, [pc, #348]	@ (80053dc <HAL_RCC_OscConfig+0x4b8>)
 800527e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005282:	4a56      	ldr	r2, [pc, #344]	@ (80053dc <HAL_RCC_OscConfig+0x4b8>)
 8005284:	f023 0301 	bic.w	r3, r3, #1
 8005288:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800528c:	4b53      	ldr	r3, [pc, #332]	@ (80053dc <HAL_RCC_OscConfig+0x4b8>)
 800528e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005292:	4a52      	ldr	r2, [pc, #328]	@ (80053dc <HAL_RCC_OscConfig+0x4b8>)
 8005294:	f023 0304 	bic.w	r3, r3, #4
 8005298:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d016      	beq.n	80052d2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052a4:	f7fe fa54 	bl	8003750 <HAL_GetTick>
 80052a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052aa:	e00a      	b.n	80052c2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ac:	f7fe fa50 	bl	8003750 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d901      	bls.n	80052c2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e138      	b.n	8005534 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052c2:	4b46      	ldr	r3, [pc, #280]	@ (80053dc <HAL_RCC_OscConfig+0x4b8>)
 80052c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052c8:	f003 0302 	and.w	r3, r3, #2
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d0ed      	beq.n	80052ac <HAL_RCC_OscConfig+0x388>
 80052d0:	e015      	b.n	80052fe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052d2:	f7fe fa3d 	bl	8003750 <HAL_GetTick>
 80052d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052d8:	e00a      	b.n	80052f0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052da:	f7fe fa39 	bl	8003750 <HAL_GetTick>
 80052de:	4602      	mov	r2, r0
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d901      	bls.n	80052f0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80052ec:	2303      	movs	r3, #3
 80052ee:	e121      	b.n	8005534 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052f0:	4b3a      	ldr	r3, [pc, #232]	@ (80053dc <HAL_RCC_OscConfig+0x4b8>)
 80052f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052f6:	f003 0302 	and.w	r3, r3, #2
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1ed      	bne.n	80052da <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80052fe:	7ffb      	ldrb	r3, [r7, #31]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d105      	bne.n	8005310 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005304:	4b35      	ldr	r3, [pc, #212]	@ (80053dc <HAL_RCC_OscConfig+0x4b8>)
 8005306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005308:	4a34      	ldr	r2, [pc, #208]	@ (80053dc <HAL_RCC_OscConfig+0x4b8>)
 800530a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800530e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0320 	and.w	r3, r3, #32
 8005318:	2b00      	cmp	r3, #0
 800531a:	d03c      	beq.n	8005396 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d01c      	beq.n	800535e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005324:	4b2d      	ldr	r3, [pc, #180]	@ (80053dc <HAL_RCC_OscConfig+0x4b8>)
 8005326:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800532a:	4a2c      	ldr	r2, [pc, #176]	@ (80053dc <HAL_RCC_OscConfig+0x4b8>)
 800532c:	f043 0301 	orr.w	r3, r3, #1
 8005330:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005334:	f7fe fa0c 	bl	8003750 <HAL_GetTick>
 8005338:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800533a:	e008      	b.n	800534e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800533c:	f7fe fa08 	bl	8003750 <HAL_GetTick>
 8005340:	4602      	mov	r2, r0
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	2b02      	cmp	r3, #2
 8005348:	d901      	bls.n	800534e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e0f2      	b.n	8005534 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800534e:	4b23      	ldr	r3, [pc, #140]	@ (80053dc <HAL_RCC_OscConfig+0x4b8>)
 8005350:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005354:	f003 0302 	and.w	r3, r3, #2
 8005358:	2b00      	cmp	r3, #0
 800535a:	d0ef      	beq.n	800533c <HAL_RCC_OscConfig+0x418>
 800535c:	e01b      	b.n	8005396 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800535e:	4b1f      	ldr	r3, [pc, #124]	@ (80053dc <HAL_RCC_OscConfig+0x4b8>)
 8005360:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005364:	4a1d      	ldr	r2, [pc, #116]	@ (80053dc <HAL_RCC_OscConfig+0x4b8>)
 8005366:	f023 0301 	bic.w	r3, r3, #1
 800536a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800536e:	f7fe f9ef 	bl	8003750 <HAL_GetTick>
 8005372:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005374:	e008      	b.n	8005388 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005376:	f7fe f9eb 	bl	8003750 <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	2b02      	cmp	r3, #2
 8005382:	d901      	bls.n	8005388 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e0d5      	b.n	8005534 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005388:	4b14      	ldr	r3, [pc, #80]	@ (80053dc <HAL_RCC_OscConfig+0x4b8>)
 800538a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800538e:	f003 0302 	and.w	r3, r3, #2
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1ef      	bne.n	8005376 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	2b00      	cmp	r3, #0
 800539c:	f000 80c9 	beq.w	8005532 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053a0:	4b0e      	ldr	r3, [pc, #56]	@ (80053dc <HAL_RCC_OscConfig+0x4b8>)
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f003 030c 	and.w	r3, r3, #12
 80053a8:	2b0c      	cmp	r3, #12
 80053aa:	f000 8083 	beq.w	80054b4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	69db      	ldr	r3, [r3, #28]
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d15e      	bne.n	8005474 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053b6:	4b09      	ldr	r3, [pc, #36]	@ (80053dc <HAL_RCC_OscConfig+0x4b8>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a08      	ldr	r2, [pc, #32]	@ (80053dc <HAL_RCC_OscConfig+0x4b8>)
 80053bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80053c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c2:	f7fe f9c5 	bl	8003750 <HAL_GetTick>
 80053c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053c8:	e00c      	b.n	80053e4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053ca:	f7fe f9c1 	bl	8003750 <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	d905      	bls.n	80053e4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e0ab      	b.n	8005534 <HAL_RCC_OscConfig+0x610>
 80053dc:	40021000 	.word	0x40021000
 80053e0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053e4:	4b55      	ldr	r3, [pc, #340]	@ (800553c <HAL_RCC_OscConfig+0x618>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1ec      	bne.n	80053ca <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053f0:	4b52      	ldr	r3, [pc, #328]	@ (800553c <HAL_RCC_OscConfig+0x618>)
 80053f2:	68da      	ldr	r2, [r3, #12]
 80053f4:	4b52      	ldr	r3, [pc, #328]	@ (8005540 <HAL_RCC_OscConfig+0x61c>)
 80053f6:	4013      	ands	r3, r2
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	6a11      	ldr	r1, [r2, #32]
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005400:	3a01      	subs	r2, #1
 8005402:	0112      	lsls	r2, r2, #4
 8005404:	4311      	orrs	r1, r2
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800540a:	0212      	lsls	r2, r2, #8
 800540c:	4311      	orrs	r1, r2
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005412:	0852      	lsrs	r2, r2, #1
 8005414:	3a01      	subs	r2, #1
 8005416:	0552      	lsls	r2, r2, #21
 8005418:	4311      	orrs	r1, r2
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800541e:	0852      	lsrs	r2, r2, #1
 8005420:	3a01      	subs	r2, #1
 8005422:	0652      	lsls	r2, r2, #25
 8005424:	4311      	orrs	r1, r2
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800542a:	06d2      	lsls	r2, r2, #27
 800542c:	430a      	orrs	r2, r1
 800542e:	4943      	ldr	r1, [pc, #268]	@ (800553c <HAL_RCC_OscConfig+0x618>)
 8005430:	4313      	orrs	r3, r2
 8005432:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005434:	4b41      	ldr	r3, [pc, #260]	@ (800553c <HAL_RCC_OscConfig+0x618>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a40      	ldr	r2, [pc, #256]	@ (800553c <HAL_RCC_OscConfig+0x618>)
 800543a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800543e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005440:	4b3e      	ldr	r3, [pc, #248]	@ (800553c <HAL_RCC_OscConfig+0x618>)
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	4a3d      	ldr	r2, [pc, #244]	@ (800553c <HAL_RCC_OscConfig+0x618>)
 8005446:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800544a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800544c:	f7fe f980 	bl	8003750 <HAL_GetTick>
 8005450:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005452:	e008      	b.n	8005466 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005454:	f7fe f97c 	bl	8003750 <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	2b02      	cmp	r3, #2
 8005460:	d901      	bls.n	8005466 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e066      	b.n	8005534 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005466:	4b35      	ldr	r3, [pc, #212]	@ (800553c <HAL_RCC_OscConfig+0x618>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d0f0      	beq.n	8005454 <HAL_RCC_OscConfig+0x530>
 8005472:	e05e      	b.n	8005532 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005474:	4b31      	ldr	r3, [pc, #196]	@ (800553c <HAL_RCC_OscConfig+0x618>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a30      	ldr	r2, [pc, #192]	@ (800553c <HAL_RCC_OscConfig+0x618>)
 800547a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800547e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005480:	f7fe f966 	bl	8003750 <HAL_GetTick>
 8005484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005486:	e008      	b.n	800549a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005488:	f7fe f962 	bl	8003750 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b02      	cmp	r3, #2
 8005494:	d901      	bls.n	800549a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e04c      	b.n	8005534 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800549a:	4b28      	ldr	r3, [pc, #160]	@ (800553c <HAL_RCC_OscConfig+0x618>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1f0      	bne.n	8005488 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80054a6:	4b25      	ldr	r3, [pc, #148]	@ (800553c <HAL_RCC_OscConfig+0x618>)
 80054a8:	68da      	ldr	r2, [r3, #12]
 80054aa:	4924      	ldr	r1, [pc, #144]	@ (800553c <HAL_RCC_OscConfig+0x618>)
 80054ac:	4b25      	ldr	r3, [pc, #148]	@ (8005544 <HAL_RCC_OscConfig+0x620>)
 80054ae:	4013      	ands	r3, r2
 80054b0:	60cb      	str	r3, [r1, #12]
 80054b2:	e03e      	b.n	8005532 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	69db      	ldr	r3, [r3, #28]
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d101      	bne.n	80054c0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e039      	b.n	8005534 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80054c0:	4b1e      	ldr	r3, [pc, #120]	@ (800553c <HAL_RCC_OscConfig+0x618>)
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	f003 0203 	and.w	r2, r3, #3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a1b      	ldr	r3, [r3, #32]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d12c      	bne.n	800552e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054de:	3b01      	subs	r3, #1
 80054e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d123      	bne.n	800552e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d11b      	bne.n	800552e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005500:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005502:	429a      	cmp	r2, r3
 8005504:	d113      	bne.n	800552e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005510:	085b      	lsrs	r3, r3, #1
 8005512:	3b01      	subs	r3, #1
 8005514:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005516:	429a      	cmp	r2, r3
 8005518:	d109      	bne.n	800552e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005524:	085b      	lsrs	r3, r3, #1
 8005526:	3b01      	subs	r3, #1
 8005528:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800552a:	429a      	cmp	r2, r3
 800552c:	d001      	beq.n	8005532 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e000      	b.n	8005534 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3720      	adds	r7, #32
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	40021000 	.word	0x40021000
 8005540:	019f800c 	.word	0x019f800c
 8005544:	feeefffc 	.word	0xfeeefffc

08005548 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b086      	sub	sp, #24
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005552:	2300      	movs	r3, #0
 8005554:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d101      	bne.n	8005560 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e11e      	b.n	800579e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005560:	4b91      	ldr	r3, [pc, #580]	@ (80057a8 <HAL_RCC_ClockConfig+0x260>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 030f 	and.w	r3, r3, #15
 8005568:	683a      	ldr	r2, [r7, #0]
 800556a:	429a      	cmp	r2, r3
 800556c:	d910      	bls.n	8005590 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800556e:	4b8e      	ldr	r3, [pc, #568]	@ (80057a8 <HAL_RCC_ClockConfig+0x260>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f023 020f 	bic.w	r2, r3, #15
 8005576:	498c      	ldr	r1, [pc, #560]	@ (80057a8 <HAL_RCC_ClockConfig+0x260>)
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	4313      	orrs	r3, r2
 800557c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800557e:	4b8a      	ldr	r3, [pc, #552]	@ (80057a8 <HAL_RCC_ClockConfig+0x260>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 030f 	and.w	r3, r3, #15
 8005586:	683a      	ldr	r2, [r7, #0]
 8005588:	429a      	cmp	r2, r3
 800558a:	d001      	beq.n	8005590 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e106      	b.n	800579e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0301 	and.w	r3, r3, #1
 8005598:	2b00      	cmp	r3, #0
 800559a:	d073      	beq.n	8005684 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	2b03      	cmp	r3, #3
 80055a2:	d129      	bne.n	80055f8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055a4:	4b81      	ldr	r3, [pc, #516]	@ (80057ac <HAL_RCC_ClockConfig+0x264>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d101      	bne.n	80055b4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e0f4      	b.n	800579e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80055b4:	f000 f966 	bl	8005884 <RCC_GetSysClockFreqFromPLLSource>
 80055b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	4a7c      	ldr	r2, [pc, #496]	@ (80057b0 <HAL_RCC_ClockConfig+0x268>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d93f      	bls.n	8005642 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80055c2:	4b7a      	ldr	r3, [pc, #488]	@ (80057ac <HAL_RCC_ClockConfig+0x264>)
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d009      	beq.n	80055e2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d033      	beq.n	8005642 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d12f      	bne.n	8005642 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80055e2:	4b72      	ldr	r3, [pc, #456]	@ (80057ac <HAL_RCC_ClockConfig+0x264>)
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055ea:	4a70      	ldr	r2, [pc, #448]	@ (80057ac <HAL_RCC_ClockConfig+0x264>)
 80055ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80055f2:	2380      	movs	r3, #128	@ 0x80
 80055f4:	617b      	str	r3, [r7, #20]
 80055f6:	e024      	b.n	8005642 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d107      	bne.n	8005610 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005600:	4b6a      	ldr	r3, [pc, #424]	@ (80057ac <HAL_RCC_ClockConfig+0x264>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d109      	bne.n	8005620 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e0c6      	b.n	800579e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005610:	4b66      	ldr	r3, [pc, #408]	@ (80057ac <HAL_RCC_ClockConfig+0x264>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005618:	2b00      	cmp	r3, #0
 800561a:	d101      	bne.n	8005620 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e0be      	b.n	800579e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005620:	f000 f8ce 	bl	80057c0 <HAL_RCC_GetSysClockFreq>
 8005624:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	4a61      	ldr	r2, [pc, #388]	@ (80057b0 <HAL_RCC_ClockConfig+0x268>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d909      	bls.n	8005642 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800562e:	4b5f      	ldr	r3, [pc, #380]	@ (80057ac <HAL_RCC_ClockConfig+0x264>)
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005636:	4a5d      	ldr	r2, [pc, #372]	@ (80057ac <HAL_RCC_ClockConfig+0x264>)
 8005638:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800563c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800563e:	2380      	movs	r3, #128	@ 0x80
 8005640:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005642:	4b5a      	ldr	r3, [pc, #360]	@ (80057ac <HAL_RCC_ClockConfig+0x264>)
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f023 0203 	bic.w	r2, r3, #3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	4957      	ldr	r1, [pc, #348]	@ (80057ac <HAL_RCC_ClockConfig+0x264>)
 8005650:	4313      	orrs	r3, r2
 8005652:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005654:	f7fe f87c 	bl	8003750 <HAL_GetTick>
 8005658:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800565a:	e00a      	b.n	8005672 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800565c:	f7fe f878 	bl	8003750 <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	f241 3288 	movw	r2, #5000	@ 0x1388
 800566a:	4293      	cmp	r3, r2
 800566c:	d901      	bls.n	8005672 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	e095      	b.n	800579e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005672:	4b4e      	ldr	r3, [pc, #312]	@ (80057ac <HAL_RCC_ClockConfig+0x264>)
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f003 020c 	and.w	r2, r3, #12
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	429a      	cmp	r2, r3
 8005682:	d1eb      	bne.n	800565c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0302 	and.w	r3, r3, #2
 800568c:	2b00      	cmp	r3, #0
 800568e:	d023      	beq.n	80056d8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0304 	and.w	r3, r3, #4
 8005698:	2b00      	cmp	r3, #0
 800569a:	d005      	beq.n	80056a8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800569c:	4b43      	ldr	r3, [pc, #268]	@ (80057ac <HAL_RCC_ClockConfig+0x264>)
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	4a42      	ldr	r2, [pc, #264]	@ (80057ac <HAL_RCC_ClockConfig+0x264>)
 80056a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80056a6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 0308 	and.w	r3, r3, #8
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d007      	beq.n	80056c4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80056b4:	4b3d      	ldr	r3, [pc, #244]	@ (80057ac <HAL_RCC_ClockConfig+0x264>)
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80056bc:	4a3b      	ldr	r2, [pc, #236]	@ (80057ac <HAL_RCC_ClockConfig+0x264>)
 80056be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80056c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056c4:	4b39      	ldr	r3, [pc, #228]	@ (80057ac <HAL_RCC_ClockConfig+0x264>)
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	4936      	ldr	r1, [pc, #216]	@ (80057ac <HAL_RCC_ClockConfig+0x264>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	608b      	str	r3, [r1, #8]
 80056d6:	e008      	b.n	80056ea <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	2b80      	cmp	r3, #128	@ 0x80
 80056dc:	d105      	bne.n	80056ea <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80056de:	4b33      	ldr	r3, [pc, #204]	@ (80057ac <HAL_RCC_ClockConfig+0x264>)
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	4a32      	ldr	r2, [pc, #200]	@ (80057ac <HAL_RCC_ClockConfig+0x264>)
 80056e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056e8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056ea:	4b2f      	ldr	r3, [pc, #188]	@ (80057a8 <HAL_RCC_ClockConfig+0x260>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 030f 	and.w	r3, r3, #15
 80056f2:	683a      	ldr	r2, [r7, #0]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d21d      	bcs.n	8005734 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056f8:	4b2b      	ldr	r3, [pc, #172]	@ (80057a8 <HAL_RCC_ClockConfig+0x260>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f023 020f 	bic.w	r2, r3, #15
 8005700:	4929      	ldr	r1, [pc, #164]	@ (80057a8 <HAL_RCC_ClockConfig+0x260>)
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	4313      	orrs	r3, r2
 8005706:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005708:	f7fe f822 	bl	8003750 <HAL_GetTick>
 800570c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800570e:	e00a      	b.n	8005726 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005710:	f7fe f81e 	bl	8003750 <HAL_GetTick>
 8005714:	4602      	mov	r2, r0
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800571e:	4293      	cmp	r3, r2
 8005720:	d901      	bls.n	8005726 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e03b      	b.n	800579e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005726:	4b20      	ldr	r3, [pc, #128]	@ (80057a8 <HAL_RCC_ClockConfig+0x260>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 030f 	and.w	r3, r3, #15
 800572e:	683a      	ldr	r2, [r7, #0]
 8005730:	429a      	cmp	r2, r3
 8005732:	d1ed      	bne.n	8005710 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 0304 	and.w	r3, r3, #4
 800573c:	2b00      	cmp	r3, #0
 800573e:	d008      	beq.n	8005752 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005740:	4b1a      	ldr	r3, [pc, #104]	@ (80057ac <HAL_RCC_ClockConfig+0x264>)
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	4917      	ldr	r1, [pc, #92]	@ (80057ac <HAL_RCC_ClockConfig+0x264>)
 800574e:	4313      	orrs	r3, r2
 8005750:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 0308 	and.w	r3, r3, #8
 800575a:	2b00      	cmp	r3, #0
 800575c:	d009      	beq.n	8005772 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800575e:	4b13      	ldr	r3, [pc, #76]	@ (80057ac <HAL_RCC_ClockConfig+0x264>)
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	00db      	lsls	r3, r3, #3
 800576c:	490f      	ldr	r1, [pc, #60]	@ (80057ac <HAL_RCC_ClockConfig+0x264>)
 800576e:	4313      	orrs	r3, r2
 8005770:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005772:	f000 f825 	bl	80057c0 <HAL_RCC_GetSysClockFreq>
 8005776:	4602      	mov	r2, r0
 8005778:	4b0c      	ldr	r3, [pc, #48]	@ (80057ac <HAL_RCC_ClockConfig+0x264>)
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	091b      	lsrs	r3, r3, #4
 800577e:	f003 030f 	and.w	r3, r3, #15
 8005782:	490c      	ldr	r1, [pc, #48]	@ (80057b4 <HAL_RCC_ClockConfig+0x26c>)
 8005784:	5ccb      	ldrb	r3, [r1, r3]
 8005786:	f003 031f 	and.w	r3, r3, #31
 800578a:	fa22 f303 	lsr.w	r3, r2, r3
 800578e:	4a0a      	ldr	r2, [pc, #40]	@ (80057b8 <HAL_RCC_ClockConfig+0x270>)
 8005790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005792:	4b0a      	ldr	r3, [pc, #40]	@ (80057bc <HAL_RCC_ClockConfig+0x274>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4618      	mov	r0, r3
 8005798:	f7fd ff8e 	bl	80036b8 <HAL_InitTick>
 800579c:	4603      	mov	r3, r0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3718      	adds	r7, #24
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	40022000 	.word	0x40022000
 80057ac:	40021000 	.word	0x40021000
 80057b0:	04c4b400 	.word	0x04c4b400
 80057b4:	0800a6f8 	.word	0x0800a6f8
 80057b8:	20000024 	.word	0x20000024
 80057bc:	20000050 	.word	0x20000050

080057c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b087      	sub	sp, #28
 80057c4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80057c6:	4b2c      	ldr	r3, [pc, #176]	@ (8005878 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f003 030c 	and.w	r3, r3, #12
 80057ce:	2b04      	cmp	r3, #4
 80057d0:	d102      	bne.n	80057d8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80057d2:	4b2a      	ldr	r3, [pc, #168]	@ (800587c <HAL_RCC_GetSysClockFreq+0xbc>)
 80057d4:	613b      	str	r3, [r7, #16]
 80057d6:	e047      	b.n	8005868 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80057d8:	4b27      	ldr	r3, [pc, #156]	@ (8005878 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f003 030c 	and.w	r3, r3, #12
 80057e0:	2b08      	cmp	r3, #8
 80057e2:	d102      	bne.n	80057ea <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80057e4:	4b26      	ldr	r3, [pc, #152]	@ (8005880 <HAL_RCC_GetSysClockFreq+0xc0>)
 80057e6:	613b      	str	r3, [r7, #16]
 80057e8:	e03e      	b.n	8005868 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80057ea:	4b23      	ldr	r3, [pc, #140]	@ (8005878 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f003 030c 	and.w	r3, r3, #12
 80057f2:	2b0c      	cmp	r3, #12
 80057f4:	d136      	bne.n	8005864 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80057f6:	4b20      	ldr	r3, [pc, #128]	@ (8005878 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	f003 0303 	and.w	r3, r3, #3
 80057fe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005800:	4b1d      	ldr	r3, [pc, #116]	@ (8005878 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	091b      	lsrs	r3, r3, #4
 8005806:	f003 030f 	and.w	r3, r3, #15
 800580a:	3301      	adds	r3, #1
 800580c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2b03      	cmp	r3, #3
 8005812:	d10c      	bne.n	800582e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005814:	4a1a      	ldr	r2, [pc, #104]	@ (8005880 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	fbb2 f3f3 	udiv	r3, r2, r3
 800581c:	4a16      	ldr	r2, [pc, #88]	@ (8005878 <HAL_RCC_GetSysClockFreq+0xb8>)
 800581e:	68d2      	ldr	r2, [r2, #12]
 8005820:	0a12      	lsrs	r2, r2, #8
 8005822:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005826:	fb02 f303 	mul.w	r3, r2, r3
 800582a:	617b      	str	r3, [r7, #20]
      break;
 800582c:	e00c      	b.n	8005848 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800582e:	4a13      	ldr	r2, [pc, #76]	@ (800587c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	fbb2 f3f3 	udiv	r3, r2, r3
 8005836:	4a10      	ldr	r2, [pc, #64]	@ (8005878 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005838:	68d2      	ldr	r2, [r2, #12]
 800583a:	0a12      	lsrs	r2, r2, #8
 800583c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005840:	fb02 f303 	mul.w	r3, r2, r3
 8005844:	617b      	str	r3, [r7, #20]
      break;
 8005846:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005848:	4b0b      	ldr	r3, [pc, #44]	@ (8005878 <HAL_RCC_GetSysClockFreq+0xb8>)
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	0e5b      	lsrs	r3, r3, #25
 800584e:	f003 0303 	and.w	r3, r3, #3
 8005852:	3301      	adds	r3, #1
 8005854:	005b      	lsls	r3, r3, #1
 8005856:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005860:	613b      	str	r3, [r7, #16]
 8005862:	e001      	b.n	8005868 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005864:	2300      	movs	r3, #0
 8005866:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005868:	693b      	ldr	r3, [r7, #16]
}
 800586a:	4618      	mov	r0, r3
 800586c:	371c      	adds	r7, #28
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	40021000 	.word	0x40021000
 800587c:	00f42400 	.word	0x00f42400
 8005880:	016e3600 	.word	0x016e3600

08005884 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005884:	b480      	push	{r7}
 8005886:	b087      	sub	sp, #28
 8005888:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800588a:	4b1e      	ldr	r3, [pc, #120]	@ (8005904 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	f003 0303 	and.w	r3, r3, #3
 8005892:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005894:	4b1b      	ldr	r3, [pc, #108]	@ (8005904 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	091b      	lsrs	r3, r3, #4
 800589a:	f003 030f 	and.w	r3, r3, #15
 800589e:	3301      	adds	r3, #1
 80058a0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	2b03      	cmp	r3, #3
 80058a6:	d10c      	bne.n	80058c2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80058a8:	4a17      	ldr	r2, [pc, #92]	@ (8005908 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b0:	4a14      	ldr	r2, [pc, #80]	@ (8005904 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80058b2:	68d2      	ldr	r2, [r2, #12]
 80058b4:	0a12      	lsrs	r2, r2, #8
 80058b6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80058ba:	fb02 f303 	mul.w	r3, r2, r3
 80058be:	617b      	str	r3, [r7, #20]
    break;
 80058c0:	e00c      	b.n	80058dc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80058c2:	4a12      	ldr	r2, [pc, #72]	@ (800590c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ca:	4a0e      	ldr	r2, [pc, #56]	@ (8005904 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80058cc:	68d2      	ldr	r2, [r2, #12]
 80058ce:	0a12      	lsrs	r2, r2, #8
 80058d0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80058d4:	fb02 f303 	mul.w	r3, r2, r3
 80058d8:	617b      	str	r3, [r7, #20]
    break;
 80058da:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80058dc:	4b09      	ldr	r3, [pc, #36]	@ (8005904 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	0e5b      	lsrs	r3, r3, #25
 80058e2:	f003 0303 	and.w	r3, r3, #3
 80058e6:	3301      	adds	r3, #1
 80058e8:	005b      	lsls	r3, r3, #1
 80058ea:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80058f6:	687b      	ldr	r3, [r7, #4]
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	371c      	adds	r7, #28
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr
 8005904:	40021000 	.word	0x40021000
 8005908:	016e3600 	.word	0x016e3600
 800590c:	00f42400 	.word	0x00f42400

08005910 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005918:	2300      	movs	r3, #0
 800591a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800591c:	2300      	movs	r3, #0
 800591e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005928:	2b00      	cmp	r3, #0
 800592a:	f000 8098 	beq.w	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800592e:	2300      	movs	r3, #0
 8005930:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005932:	4b43      	ldr	r3, [pc, #268]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005936:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d10d      	bne.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800593e:	4b40      	ldr	r3, [pc, #256]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005942:	4a3f      	ldr	r2, [pc, #252]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005944:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005948:	6593      	str	r3, [r2, #88]	@ 0x58
 800594a:	4b3d      	ldr	r3, [pc, #244]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800594c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800594e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005952:	60bb      	str	r3, [r7, #8]
 8005954:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005956:	2301      	movs	r3, #1
 8005958:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800595a:	4b3a      	ldr	r3, [pc, #232]	@ (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a39      	ldr	r2, [pc, #228]	@ (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005960:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005964:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005966:	f7fd fef3 	bl	8003750 <HAL_GetTick>
 800596a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800596c:	e009      	b.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800596e:	f7fd feef 	bl	8003750 <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	2b02      	cmp	r3, #2
 800597a:	d902      	bls.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	74fb      	strb	r3, [r7, #19]
        break;
 8005980:	e005      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005982:	4b30      	ldr	r3, [pc, #192]	@ (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800598a:	2b00      	cmp	r3, #0
 800598c:	d0ef      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800598e:	7cfb      	ldrb	r3, [r7, #19]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d159      	bne.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005994:	4b2a      	ldr	r3, [pc, #168]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005996:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800599a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800599e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d01e      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d019      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80059b0:	4b23      	ldr	r3, [pc, #140]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80059bc:	4b20      	ldr	r3, [pc, #128]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059c2:	4a1f      	ldr	r2, [pc, #124]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80059cc:	4b1c      	ldr	r3, [pc, #112]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059d2:	4a1b      	ldr	r2, [pc, #108]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80059dc:	4a18      	ldr	r2, [pc, #96]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	f003 0301 	and.w	r3, r3, #1
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d016      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ee:	f7fd feaf 	bl	8003750 <HAL_GetTick>
 80059f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059f4:	e00b      	b.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059f6:	f7fd feab 	bl	8003750 <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d902      	bls.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	74fb      	strb	r3, [r7, #19]
            break;
 8005a0c:	e006      	b.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a14:	f003 0302 	and.w	r3, r3, #2
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d0ec      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005a1c:	7cfb      	ldrb	r3, [r7, #19]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d10b      	bne.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a22:	4b07      	ldr	r3, [pc, #28]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a28:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a30:	4903      	ldr	r1, [pc, #12]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005a38:	e008      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a3a:	7cfb      	ldrb	r3, [r7, #19]
 8005a3c:	74bb      	strb	r3, [r7, #18]
 8005a3e:	e005      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005a40:	40021000 	.word	0x40021000
 8005a44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a48:	7cfb      	ldrb	r3, [r7, #19]
 8005a4a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a4c:	7c7b      	ldrb	r3, [r7, #17]
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d105      	bne.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a52:	4ba7      	ldr	r3, [pc, #668]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a56:	4aa6      	ldr	r2, [pc, #664]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a5c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00a      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a6a:	4ba1      	ldr	r3, [pc, #644]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a70:	f023 0203 	bic.w	r2, r3, #3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	499d      	ldr	r1, [pc, #628]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0302 	and.w	r3, r3, #2
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00a      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a8c:	4b98      	ldr	r3, [pc, #608]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a92:	f023 020c 	bic.w	r2, r3, #12
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	4995      	ldr	r1, [pc, #596]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0304 	and.w	r3, r3, #4
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00a      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005aae:	4b90      	ldr	r3, [pc, #576]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ab4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	498c      	ldr	r1, [pc, #560]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0308 	and.w	r3, r3, #8
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00a      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005ad0:	4b87      	ldr	r3, [pc, #540]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ad6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	4984      	ldr	r1, [pc, #528]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0310 	and.w	r3, r3, #16
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00a      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005af2:	4b7f      	ldr	r3, [pc, #508]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005af8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	695b      	ldr	r3, [r3, #20]
 8005b00:	497b      	ldr	r1, [pc, #492]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b02:	4313      	orrs	r3, r2
 8005b04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0320 	and.w	r3, r3, #32
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d00a      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b14:	4b76      	ldr	r3, [pc, #472]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b1a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	4973      	ldr	r1, [pc, #460]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00a      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b36:	4b6e      	ldr	r3, [pc, #440]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b3c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	69db      	ldr	r3, [r3, #28]
 8005b44:	496a      	ldr	r1, [pc, #424]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d00a      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b58:	4b65      	ldr	r3, [pc, #404]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b5e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a1b      	ldr	r3, [r3, #32]
 8005b66:	4962      	ldr	r1, [pc, #392]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00a      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b7a:	4b5d      	ldr	r3, [pc, #372]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b80:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b88:	4959      	ldr	r1, [pc, #356]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00a      	beq.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005b9c:	4b54      	ldr	r3, [pc, #336]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ba2:	f023 0203 	bic.w	r2, r3, #3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005baa:	4951      	ldr	r1, [pc, #324]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bac:	4313      	orrs	r3, r2
 8005bae:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00a      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005bbe:	4b4c      	ldr	r3, [pc, #304]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bc4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bcc:	4948      	ldr	r1, [pc, #288]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d015      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005be0:	4b43      	ldr	r3, [pc, #268]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005be6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bee:	4940      	ldr	r1, [pc, #256]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bfa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005bfe:	d105      	bne.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c00:	4b3b      	ldr	r3, [pc, #236]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	4a3a      	ldr	r2, [pc, #232]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c0a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d015      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005c18:	4b35      	ldr	r3, [pc, #212]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c1e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c26:	4932      	ldr	r1, [pc, #200]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c36:	d105      	bne.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c38:	4b2d      	ldr	r3, [pc, #180]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	4a2c      	ldr	r2, [pc, #176]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c42:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d015      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005c50:	4b27      	ldr	r3, [pc, #156]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c56:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c5e:	4924      	ldr	r1, [pc, #144]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005c6e:	d105      	bne.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c70:	4b1f      	ldr	r3, [pc, #124]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	4a1e      	ldr	r2, [pc, #120]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c7a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d015      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c88:	4b19      	ldr	r3, [pc, #100]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c8e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c96:	4916      	ldr	r1, [pc, #88]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ca2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ca6:	d105      	bne.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ca8:	4b11      	ldr	r3, [pc, #68]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	4a10      	ldr	r2, [pc, #64]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005cb2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d019      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cc6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cce:	4908      	ldr	r1, [pc, #32]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005cde:	d109      	bne.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ce0:	4b03      	ldr	r3, [pc, #12]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	4a02      	ldr	r2, [pc, #8]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ce6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005cea:	60d3      	str	r3, [r2, #12]
 8005cec:	e002      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005cee:	bf00      	nop
 8005cf0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d015      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005d00:	4b29      	ldr	r3, [pc, #164]	@ (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d06:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d0e:	4926      	ldr	r1, [pc, #152]	@ (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d10:	4313      	orrs	r3, r2
 8005d12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d1e:	d105      	bne.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005d20:	4b21      	ldr	r3, [pc, #132]	@ (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	4a20      	ldr	r2, [pc, #128]	@ (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d2a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d015      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005d38:	4b1b      	ldr	r3, [pc, #108]	@ (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d3e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d46:	4918      	ldr	r1, [pc, #96]	@ (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d56:	d105      	bne.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005d58:	4b13      	ldr	r3, [pc, #76]	@ (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	4a12      	ldr	r2, [pc, #72]	@ (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d62:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d015      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005d70:	4b0d      	ldr	r3, [pc, #52]	@ (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d72:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005d76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d7e:	490a      	ldr	r1, [pc, #40]	@ (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d80:	4313      	orrs	r3, r2
 8005d82:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d8e:	d105      	bne.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d90:	4b05      	ldr	r3, [pc, #20]	@ (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	4a04      	ldr	r2, [pc, #16]	@ (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d9a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005d9c:	7cbb      	ldrb	r3, [r7, #18]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3718      	adds	r7, #24
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	40021000 	.word	0x40021000

08005dac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d101      	bne.n	8005dbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e09d      	b.n	8005efa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d108      	bne.n	8005dd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005dce:	d009      	beq.n	8005de4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	61da      	str	r2, [r3, #28]
 8005dd6:	e005      	b.n	8005de4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d106      	bne.n	8005e04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7fc fd8a 	bl	8002918 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2202      	movs	r2, #2
 8005e08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e1a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005e24:	d902      	bls.n	8005e2c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005e26:	2300      	movs	r3, #0
 8005e28:	60fb      	str	r3, [r7, #12]
 8005e2a:	e002      	b.n	8005e32 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005e2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005e30:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005e3a:	d007      	beq.n	8005e4c <HAL_SPI_Init+0xa0>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005e44:	d002      	beq.n	8005e4c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005e5c:	431a      	orrs	r2, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	f003 0302 	and.w	r3, r3, #2
 8005e66:	431a      	orrs	r2, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	695b      	ldr	r3, [r3, #20]
 8005e6c:	f003 0301 	and.w	r3, r3, #1
 8005e70:	431a      	orrs	r2, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	699b      	ldr	r3, [r3, #24]
 8005e76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e7a:	431a      	orrs	r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	69db      	ldr	r3, [r3, #28]
 8005e80:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e84:	431a      	orrs	r2, r3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a1b      	ldr	r3, [r3, #32]
 8005e8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e8e:	ea42 0103 	orr.w	r1, r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e96:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	430a      	orrs	r2, r1
 8005ea0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	0c1b      	lsrs	r3, r3, #16
 8005ea8:	f003 0204 	and.w	r2, r3, #4
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb0:	f003 0310 	and.w	r3, r3, #16
 8005eb4:	431a      	orrs	r2, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eba:	f003 0308 	and.w	r3, r3, #8
 8005ebe:	431a      	orrs	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005ec8:	ea42 0103 	orr.w	r1, r2, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	430a      	orrs	r2, r1
 8005ed8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	69da      	ldr	r2, [r3, #28]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ee8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3710      	adds	r7, #16
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b088      	sub	sp, #32
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	60f8      	str	r0, [r7, #12]
 8005f0a:	60b9      	str	r1, [r7, #8]
 8005f0c:	603b      	str	r3, [r7, #0]
 8005f0e:	4613      	mov	r3, r2
 8005f10:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f12:	f7fd fc1d 	bl	8003750 <HAL_GetTick>
 8005f16:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005f18:	88fb      	ldrh	r3, [r7, #6]
 8005f1a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d001      	beq.n	8005f2c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005f28:	2302      	movs	r3, #2
 8005f2a:	e15c      	b.n	80061e6 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d002      	beq.n	8005f38 <HAL_SPI_Transmit+0x36>
 8005f32:	88fb      	ldrh	r3, [r7, #6]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d101      	bne.n	8005f3c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e154      	b.n	80061e6 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d101      	bne.n	8005f4a <HAL_SPI_Transmit+0x48>
 8005f46:	2302      	movs	r3, #2
 8005f48:	e14d      	b.n	80061e6 <HAL_SPI_Transmit+0x2e4>
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2203      	movs	r2, #3
 8005f56:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	68ba      	ldr	r2, [r7, #8]
 8005f64:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	88fa      	ldrh	r2, [r7, #6]
 8005f6a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	88fa      	ldrh	r2, [r7, #6]
 8005f70:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2200      	movs	r2, #0
 8005f76:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2200      	movs	r2, #0
 8005f92:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f9c:	d10f      	bne.n	8005fbe <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fbc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fc8:	2b40      	cmp	r3, #64	@ 0x40
 8005fca:	d007      	beq.n	8005fdc <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005fda:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005fe4:	d952      	bls.n	800608c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d002      	beq.n	8005ff4 <HAL_SPI_Transmit+0xf2>
 8005fee:	8b7b      	ldrh	r3, [r7, #26]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d145      	bne.n	8006080 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ff8:	881a      	ldrh	r2, [r3, #0]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006004:	1c9a      	adds	r2, r3, #2
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800600e:	b29b      	uxth	r3, r3
 8006010:	3b01      	subs	r3, #1
 8006012:	b29a      	uxth	r2, r3
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006018:	e032      	b.n	8006080 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	f003 0302 	and.w	r3, r3, #2
 8006024:	2b02      	cmp	r3, #2
 8006026:	d112      	bne.n	800604e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800602c:	881a      	ldrh	r2, [r3, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006038:	1c9a      	adds	r2, r3, #2
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006042:	b29b      	uxth	r3, r3
 8006044:	3b01      	subs	r3, #1
 8006046:	b29a      	uxth	r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800604c:	e018      	b.n	8006080 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800604e:	f7fd fb7f 	bl	8003750 <HAL_GetTick>
 8006052:	4602      	mov	r2, r0
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	683a      	ldr	r2, [r7, #0]
 800605a:	429a      	cmp	r2, r3
 800605c:	d803      	bhi.n	8006066 <HAL_SPI_Transmit+0x164>
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006064:	d102      	bne.n	800606c <HAL_SPI_Transmit+0x16a>
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d109      	bne.n	8006080 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2200      	movs	r2, #0
 8006078:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	e0b2      	b.n	80061e6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006084:	b29b      	uxth	r3, r3
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1c7      	bne.n	800601a <HAL_SPI_Transmit+0x118>
 800608a:	e083      	b.n	8006194 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d002      	beq.n	800609a <HAL_SPI_Transmit+0x198>
 8006094:	8b7b      	ldrh	r3, [r7, #26]
 8006096:	2b01      	cmp	r3, #1
 8006098:	d177      	bne.n	800618a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800609e:	b29b      	uxth	r3, r3
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d912      	bls.n	80060ca <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060a8:	881a      	ldrh	r2, [r3, #0]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b4:	1c9a      	adds	r2, r3, #2
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060be:	b29b      	uxth	r3, r3
 80060c0:	3b02      	subs	r3, #2
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80060c8:	e05f      	b.n	800618a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	330c      	adds	r3, #12
 80060d4:	7812      	ldrb	r2, [r2, #0]
 80060d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060dc:	1c5a      	adds	r2, r3, #1
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	3b01      	subs	r3, #1
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80060f0:	e04b      	b.n	800618a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	f003 0302 	and.w	r3, r3, #2
 80060fc:	2b02      	cmp	r3, #2
 80060fe:	d12b      	bne.n	8006158 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006104:	b29b      	uxth	r3, r3
 8006106:	2b01      	cmp	r3, #1
 8006108:	d912      	bls.n	8006130 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800610e:	881a      	ldrh	r2, [r3, #0]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800611a:	1c9a      	adds	r2, r3, #2
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006124:	b29b      	uxth	r3, r3
 8006126:	3b02      	subs	r3, #2
 8006128:	b29a      	uxth	r2, r3
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800612e:	e02c      	b.n	800618a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	330c      	adds	r3, #12
 800613a:	7812      	ldrb	r2, [r2, #0]
 800613c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006142:	1c5a      	adds	r2, r3, #1
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800614c:	b29b      	uxth	r3, r3
 800614e:	3b01      	subs	r3, #1
 8006150:	b29a      	uxth	r2, r3
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006156:	e018      	b.n	800618a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006158:	f7fd fafa 	bl	8003750 <HAL_GetTick>
 800615c:	4602      	mov	r2, r0
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	683a      	ldr	r2, [r7, #0]
 8006164:	429a      	cmp	r2, r3
 8006166:	d803      	bhi.n	8006170 <HAL_SPI_Transmit+0x26e>
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800616e:	d102      	bne.n	8006176 <HAL_SPI_Transmit+0x274>
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d109      	bne.n	800618a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e02d      	b.n	80061e6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800618e:	b29b      	uxth	r3, r3
 8006190:	2b00      	cmp	r3, #0
 8006192:	d1ae      	bne.n	80060f2 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006194:	69fa      	ldr	r2, [r7, #28]
 8006196:	6839      	ldr	r1, [r7, #0]
 8006198:	68f8      	ldr	r0, [r7, #12]
 800619a:	f001 fa03 	bl	80075a4 <SPI_EndRxTxTransaction>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d002      	beq.n	80061aa <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2220      	movs	r2, #32
 80061a8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d10a      	bne.n	80061c8 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061b2:	2300      	movs	r3, #0
 80061b4:	617b      	str	r3, [r7, #20]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	617b      	str	r3, [r7, #20]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	617b      	str	r3, [r7, #20]
 80061c6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d001      	beq.n	80061e4 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e000      	b.n	80061e6 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80061e4:	2300      	movs	r3, #0
  }
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3720      	adds	r7, #32
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b088      	sub	sp, #32
 80061f2:	af02      	add	r7, sp, #8
 80061f4:	60f8      	str	r0, [r7, #12]
 80061f6:	60b9      	str	r1, [r7, #8]
 80061f8:	603b      	str	r3, [r7, #0]
 80061fa:	4613      	mov	r3, r2
 80061fc:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006204:	b2db      	uxtb	r3, r3
 8006206:	2b01      	cmp	r3, #1
 8006208:	d001      	beq.n	800620e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800620a:	2302      	movs	r3, #2
 800620c:	e123      	b.n	8006456 <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d002      	beq.n	800621a <HAL_SPI_Receive+0x2c>
 8006214:	88fb      	ldrh	r3, [r7, #6]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d101      	bne.n	800621e <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e11b      	b.n	8006456 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006226:	d112      	bne.n	800624e <HAL_SPI_Receive+0x60>
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d10e      	bne.n	800624e <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2204      	movs	r2, #4
 8006234:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006238:	88fa      	ldrh	r2, [r7, #6]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	9300      	str	r3, [sp, #0]
 800623e:	4613      	mov	r3, r2
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	68b9      	ldr	r1, [r7, #8]
 8006244:	68f8      	ldr	r0, [r7, #12]
 8006246:	f000 f90a 	bl	800645e <HAL_SPI_TransmitReceive>
 800624a:	4603      	mov	r3, r0
 800624c:	e103      	b.n	8006456 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800624e:	f7fd fa7f 	bl	8003750 <HAL_GetTick>
 8006252:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800625a:	2b01      	cmp	r3, #1
 800625c:	d101      	bne.n	8006262 <HAL_SPI_Receive+0x74>
 800625e:	2302      	movs	r3, #2
 8006260:	e0f9      	b.n	8006456 <HAL_SPI_Receive+0x268>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2204      	movs	r2, #4
 800626e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2200      	movs	r2, #0
 8006276:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	88fa      	ldrh	r2, [r7, #6]
 8006282:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	88fa      	ldrh	r2, [r7, #6]
 800628a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2200      	movs	r2, #0
 8006292:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2200      	movs	r2, #0
 8006298:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80062b4:	d908      	bls.n	80062c8 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	685a      	ldr	r2, [r3, #4]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80062c4:	605a      	str	r2, [r3, #4]
 80062c6:	e007      	b.n	80062d8 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	685a      	ldr	r2, [r3, #4]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80062d6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062e0:	d10f      	bne.n	8006302 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006300:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800630c:	2b40      	cmp	r3, #64	@ 0x40
 800630e:	d007      	beq.n	8006320 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800631e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006328:	d875      	bhi.n	8006416 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800632a:	e037      	b.n	800639c <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f003 0301 	and.w	r3, r3, #1
 8006336:	2b01      	cmp	r3, #1
 8006338:	d117      	bne.n	800636a <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f103 020c 	add.w	r2, r3, #12
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006346:	7812      	ldrb	r2, [r2, #0]
 8006348:	b2d2      	uxtb	r2, r2
 800634a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006350:	1c5a      	adds	r2, r3, #1
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800635c:	b29b      	uxth	r3, r3
 800635e:	3b01      	subs	r3, #1
 8006360:	b29a      	uxth	r2, r3
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8006368:	e018      	b.n	800639c <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800636a:	f7fd f9f1 	bl	8003750 <HAL_GetTick>
 800636e:	4602      	mov	r2, r0
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	1ad3      	subs	r3, r2, r3
 8006374:	683a      	ldr	r2, [r7, #0]
 8006376:	429a      	cmp	r2, r3
 8006378:	d803      	bhi.n	8006382 <HAL_SPI_Receive+0x194>
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006380:	d102      	bne.n	8006388 <HAL_SPI_Receive+0x19a>
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d109      	bne.n	800639c <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2200      	movs	r2, #0
 8006394:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006398:	2303      	movs	r3, #3
 800639a:	e05c      	b.n	8006456 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1c1      	bne.n	800632c <HAL_SPI_Receive+0x13e>
 80063a8:	e03b      	b.n	8006422 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	f003 0301 	and.w	r3, r3, #1
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d115      	bne.n	80063e4 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68da      	ldr	r2, [r3, #12]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063c2:	b292      	uxth	r2, r2
 80063c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ca:	1c9a      	adds	r2, r3, #2
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	3b01      	subs	r3, #1
 80063da:	b29a      	uxth	r2, r3
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80063e2:	e018      	b.n	8006416 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063e4:	f7fd f9b4 	bl	8003750 <HAL_GetTick>
 80063e8:	4602      	mov	r2, r0
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	683a      	ldr	r2, [r7, #0]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d803      	bhi.n	80063fc <HAL_SPI_Receive+0x20e>
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80063fa:	d102      	bne.n	8006402 <HAL_SPI_Receive+0x214>
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d109      	bne.n	8006416 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2201      	movs	r2, #1
 8006406:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006412:	2303      	movs	r3, #3
 8006414:	e01f      	b.n	8006456 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800641c:	b29b      	uxth	r3, r3
 800641e:	2b00      	cmp	r3, #0
 8006420:	d1c3      	bne.n	80063aa <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006422:	697a      	ldr	r2, [r7, #20]
 8006424:	6839      	ldr	r1, [r7, #0]
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f001 f864 	bl	80074f4 <SPI_EndRxTransaction>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d002      	beq.n	8006438 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2220      	movs	r2, #32
 8006436:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800644c:	2b00      	cmp	r3, #0
 800644e:	d001      	beq.n	8006454 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e000      	b.n	8006456 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8006454:	2300      	movs	r3, #0
  }
}
 8006456:	4618      	mov	r0, r3
 8006458:	3718      	adds	r7, #24
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}

0800645e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800645e:	b580      	push	{r7, lr}
 8006460:	b08a      	sub	sp, #40	@ 0x28
 8006462:	af00      	add	r7, sp, #0
 8006464:	60f8      	str	r0, [r7, #12]
 8006466:	60b9      	str	r1, [r7, #8]
 8006468:	607a      	str	r2, [r7, #4]
 800646a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800646c:	2301      	movs	r3, #1
 800646e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006470:	f7fd f96e 	bl	8003750 <HAL_GetTick>
 8006474:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800647c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006484:	887b      	ldrh	r3, [r7, #2]
 8006486:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8006488:	887b      	ldrh	r3, [r7, #2]
 800648a:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800648c:	7ffb      	ldrb	r3, [r7, #31]
 800648e:	2b01      	cmp	r3, #1
 8006490:	d00c      	beq.n	80064ac <HAL_SPI_TransmitReceive+0x4e>
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006498:	d106      	bne.n	80064a8 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d102      	bne.n	80064a8 <HAL_SPI_TransmitReceive+0x4a>
 80064a2:	7ffb      	ldrb	r3, [r7, #31]
 80064a4:	2b04      	cmp	r3, #4
 80064a6:	d001      	beq.n	80064ac <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80064a8:	2302      	movs	r3, #2
 80064aa:	e1f3      	b.n	8006894 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d005      	beq.n	80064be <HAL_SPI_TransmitReceive+0x60>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d002      	beq.n	80064be <HAL_SPI_TransmitReceive+0x60>
 80064b8:	887b      	ldrh	r3, [r7, #2]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d101      	bne.n	80064c2 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e1e8      	b.n	8006894 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d101      	bne.n	80064d0 <HAL_SPI_TransmitReceive+0x72>
 80064cc:	2302      	movs	r3, #2
 80064ce:	e1e1      	b.n	8006894 <HAL_SPI_TransmitReceive+0x436>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	2b04      	cmp	r3, #4
 80064e2:	d003      	beq.n	80064ec <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2205      	movs	r2, #5
 80064e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	887a      	ldrh	r2, [r7, #2]
 80064fc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	887a      	ldrh	r2, [r7, #2]
 8006504:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	68ba      	ldr	r2, [r7, #8]
 800650c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	887a      	ldrh	r2, [r7, #2]
 8006512:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	887a      	ldrh	r2, [r7, #2]
 8006518:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2200      	movs	r2, #0
 800651e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2200      	movs	r2, #0
 8006524:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800652e:	d802      	bhi.n	8006536 <HAL_SPI_TransmitReceive+0xd8>
 8006530:	8abb      	ldrh	r3, [r7, #20]
 8006532:	2b01      	cmp	r3, #1
 8006534:	d908      	bls.n	8006548 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006544:	605a      	str	r2, [r3, #4]
 8006546:	e007      	b.n	8006558 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	685a      	ldr	r2, [r3, #4]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006556:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006562:	2b40      	cmp	r3, #64	@ 0x40
 8006564:	d007      	beq.n	8006576 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006574:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800657e:	f240 8083 	bls.w	8006688 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d002      	beq.n	8006590 <HAL_SPI_TransmitReceive+0x132>
 800658a:	8afb      	ldrh	r3, [r7, #22]
 800658c:	2b01      	cmp	r3, #1
 800658e:	d16f      	bne.n	8006670 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006594:	881a      	ldrh	r2, [r3, #0]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065a0:	1c9a      	adds	r2, r3, #2
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	3b01      	subs	r3, #1
 80065ae:	b29a      	uxth	r2, r3
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065b4:	e05c      	b.n	8006670 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	f003 0302 	and.w	r3, r3, #2
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	d11b      	bne.n	80065fc <HAL_SPI_TransmitReceive+0x19e>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d016      	beq.n	80065fc <HAL_SPI_TransmitReceive+0x19e>
 80065ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d113      	bne.n	80065fc <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065d8:	881a      	ldrh	r2, [r3, #0]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065e4:	1c9a      	adds	r2, r3, #2
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	3b01      	subs	r3, #1
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80065f8:	2300      	movs	r3, #0
 80065fa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	f003 0301 	and.w	r3, r3, #1
 8006606:	2b01      	cmp	r3, #1
 8006608:	d11c      	bne.n	8006644 <HAL_SPI_TransmitReceive+0x1e6>
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006610:	b29b      	uxth	r3, r3
 8006612:	2b00      	cmp	r3, #0
 8006614:	d016      	beq.n	8006644 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68da      	ldr	r2, [r3, #12]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006620:	b292      	uxth	r2, r2
 8006622:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006628:	1c9a      	adds	r2, r3, #2
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006634:	b29b      	uxth	r3, r3
 8006636:	3b01      	subs	r3, #1
 8006638:	b29a      	uxth	r2, r3
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006640:	2301      	movs	r3, #1
 8006642:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006644:	f7fd f884 	bl	8003750 <HAL_GetTick>
 8006648:	4602      	mov	r2, r0
 800664a:	6a3b      	ldr	r3, [r7, #32]
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006650:	429a      	cmp	r2, r3
 8006652:	d80d      	bhi.n	8006670 <HAL_SPI_TransmitReceive+0x212>
 8006654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006656:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800665a:	d009      	beq.n	8006670 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2200      	movs	r2, #0
 8006668:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800666c:	2303      	movs	r3, #3
 800666e:	e111      	b.n	8006894 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006674:	b29b      	uxth	r3, r3
 8006676:	2b00      	cmp	r3, #0
 8006678:	d19d      	bne.n	80065b6 <HAL_SPI_TransmitReceive+0x158>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006680:	b29b      	uxth	r3, r3
 8006682:	2b00      	cmp	r3, #0
 8006684:	d197      	bne.n	80065b6 <HAL_SPI_TransmitReceive+0x158>
 8006686:	e0e5      	b.n	8006854 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d003      	beq.n	8006698 <HAL_SPI_TransmitReceive+0x23a>
 8006690:	8afb      	ldrh	r3, [r7, #22]
 8006692:	2b01      	cmp	r3, #1
 8006694:	f040 80d1 	bne.w	800683a <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800669c:	b29b      	uxth	r3, r3
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d912      	bls.n	80066c8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066a6:	881a      	ldrh	r2, [r3, #0]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066b2:	1c9a      	adds	r2, r3, #2
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066bc:	b29b      	uxth	r3, r3
 80066be:	3b02      	subs	r3, #2
 80066c0:	b29a      	uxth	r2, r3
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80066c6:	e0b8      	b.n	800683a <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	330c      	adds	r3, #12
 80066d2:	7812      	ldrb	r2, [r2, #0]
 80066d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066da:	1c5a      	adds	r2, r3, #1
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	3b01      	subs	r3, #1
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066ee:	e0a4      	b.n	800683a <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	f003 0302 	and.w	r3, r3, #2
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d134      	bne.n	8006768 <HAL_SPI_TransmitReceive+0x30a>
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006702:	b29b      	uxth	r3, r3
 8006704:	2b00      	cmp	r3, #0
 8006706:	d02f      	beq.n	8006768 <HAL_SPI_TransmitReceive+0x30a>
 8006708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800670a:	2b01      	cmp	r3, #1
 800670c:	d12c      	bne.n	8006768 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006712:	b29b      	uxth	r3, r3
 8006714:	2b01      	cmp	r3, #1
 8006716:	d912      	bls.n	800673e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800671c:	881a      	ldrh	r2, [r3, #0]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006728:	1c9a      	adds	r2, r3, #2
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006732:	b29b      	uxth	r3, r3
 8006734:	3b02      	subs	r3, #2
 8006736:	b29a      	uxth	r2, r3
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800673c:	e012      	b.n	8006764 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	330c      	adds	r3, #12
 8006748:	7812      	ldrb	r2, [r2, #0]
 800674a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006750:	1c5a      	adds	r2, r3, #1
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800675a:	b29b      	uxth	r3, r3
 800675c:	3b01      	subs	r3, #1
 800675e:	b29a      	uxth	r2, r3
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006764:	2300      	movs	r3, #0
 8006766:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	f003 0301 	and.w	r3, r3, #1
 8006772:	2b01      	cmp	r3, #1
 8006774:	d148      	bne.n	8006808 <HAL_SPI_TransmitReceive+0x3aa>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800677c:	b29b      	uxth	r3, r3
 800677e:	2b00      	cmp	r3, #0
 8006780:	d042      	beq.n	8006808 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006788:	b29b      	uxth	r3, r3
 800678a:	2b01      	cmp	r3, #1
 800678c:	d923      	bls.n	80067d6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68da      	ldr	r2, [r3, #12]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006798:	b292      	uxth	r2, r2
 800679a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067a0:	1c9a      	adds	r2, r3, #2
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	3b02      	subs	r3, #2
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80067be:	b29b      	uxth	r3, r3
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d81f      	bhi.n	8006804 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	685a      	ldr	r2, [r3, #4]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80067d2:	605a      	str	r2, [r3, #4]
 80067d4:	e016      	b.n	8006804 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f103 020c 	add.w	r2, r3, #12
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067e2:	7812      	ldrb	r2, [r2, #0]
 80067e4:	b2d2      	uxtb	r2, r2
 80067e6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ec:	1c5a      	adds	r2, r3, #1
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	3b01      	subs	r3, #1
 80067fc:	b29a      	uxth	r2, r3
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006804:	2301      	movs	r3, #1
 8006806:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006808:	f7fc ffa2 	bl	8003750 <HAL_GetTick>
 800680c:	4602      	mov	r2, r0
 800680e:	6a3b      	ldr	r3, [r7, #32]
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006814:	429a      	cmp	r2, r3
 8006816:	d803      	bhi.n	8006820 <HAL_SPI_TransmitReceive+0x3c2>
 8006818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800681a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800681e:	d102      	bne.n	8006826 <HAL_SPI_TransmitReceive+0x3c8>
 8006820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006822:	2b00      	cmp	r3, #0
 8006824:	d109      	bne.n	800683a <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2201      	movs	r2, #1
 800682a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e02c      	b.n	8006894 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800683e:	b29b      	uxth	r3, r3
 8006840:	2b00      	cmp	r3, #0
 8006842:	f47f af55 	bne.w	80066f0 <HAL_SPI_TransmitReceive+0x292>
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800684c:	b29b      	uxth	r3, r3
 800684e:	2b00      	cmp	r3, #0
 8006850:	f47f af4e 	bne.w	80066f0 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006854:	6a3a      	ldr	r2, [r7, #32]
 8006856:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006858:	68f8      	ldr	r0, [r7, #12]
 800685a:	f000 fea3 	bl	80075a4 <SPI_EndRxTxTransaction>
 800685e:	4603      	mov	r3, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d008      	beq.n	8006876 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2220      	movs	r2, #32
 8006868:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2200      	movs	r2, #0
 800686e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e00e      	b.n	8006894 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2201      	movs	r2, #1
 800687a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800688a:	2b00      	cmp	r3, #0
 800688c:	d001      	beq.n	8006892 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e000      	b.n	8006894 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8006892:	2300      	movs	r3, #0
  }
}
 8006894:	4618      	mov	r0, r3
 8006896:	3728      	adds	r7, #40	@ 0x28
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	60b9      	str	r1, [r7, #8]
 80068a6:	4613      	mov	r3, r2
 80068a8:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d001      	beq.n	80068ba <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 80068b6:	2302      	movs	r3, #2
 80068b8:	e0d4      	b.n	8006a64 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d002      	beq.n	80068c6 <HAL_SPI_Transmit_DMA+0x2a>
 80068c0:	88fb      	ldrh	r3, [r7, #6]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d101      	bne.n	80068ca <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e0cc      	b.n	8006a64 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d101      	bne.n	80068d8 <HAL_SPI_Transmit_DMA+0x3c>
 80068d4:	2302      	movs	r3, #2
 80068d6:	e0c5      	b.n	8006a64 <HAL_SPI_Transmit_DMA+0x1c8>
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2203      	movs	r2, #3
 80068e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2200      	movs	r2, #0
 80068ec:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	68ba      	ldr	r2, [r7, #8]
 80068f2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	88fa      	ldrh	r2, [r7, #6]
 80068f8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	88fa      	ldrh	r2, [r7, #6]
 80068fe:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2200      	movs	r2, #0
 800691e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800692a:	d10f      	bne.n	800694c <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800693a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800694a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006950:	4a46      	ldr	r2, [pc, #280]	@ (8006a6c <HAL_SPI_Transmit_DMA+0x1d0>)
 8006952:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006958:	4a45      	ldr	r2, [pc, #276]	@ (8006a70 <HAL_SPI_Transmit_DMA+0x1d4>)
 800695a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006960:	4a44      	ldr	r2, [pc, #272]	@ (8006a74 <HAL_SPI_Transmit_DMA+0x1d8>)
 8006962:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006968:	2200      	movs	r2, #0
 800696a:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	685a      	ldr	r2, [r3, #4]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800697a:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006984:	d82d      	bhi.n	80069e2 <HAL_SPI_Transmit_DMA+0x146>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800698a:	699b      	ldr	r3, [r3, #24]
 800698c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006990:	d127      	bne.n	80069e2 <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006996:	b29b      	uxth	r3, r3
 8006998:	f003 0301 	and.w	r3, r3, #1
 800699c:	2b00      	cmp	r3, #0
 800699e:	d10f      	bne.n	80069c0 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	685a      	ldr	r2, [r3, #4]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80069ae:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	085b      	lsrs	r3, r3, #1
 80069b8:	b29a      	uxth	r2, r3
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80069be:	e010      	b.n	80069e2 <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	685a      	ldr	r2, [r3, #4]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80069ce:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	085b      	lsrs	r3, r3, #1
 80069d8:	b29b      	uxth	r3, r3
 80069da:	3301      	adds	r3, #1
 80069dc:	b29a      	uxth	r2, r3
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069ea:	4619      	mov	r1, r3
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	330c      	adds	r3, #12
 80069f2:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069f8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80069fa:	f7fd f88f 	bl	8003b1c <HAL_DMA_Start_IT>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d00b      	beq.n	8006a1c <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a08:	f043 0210 	orr.w	r2, r3, #16
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e023      	b.n	8006a64 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a26:	2b40      	cmp	r3, #64	@ 0x40
 8006a28:	d007      	beq.n	8006a3a <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a38:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	685a      	ldr	r2, [r3, #4]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f042 0220 	orr.w	r2, r2, #32
 8006a50:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	685a      	ldr	r2, [r3, #4]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f042 0202 	orr.w	r2, r2, #2
 8006a60:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3710      	adds	r7, #16
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	08007223 	.word	0x08007223
 8006a70:	08007045 	.word	0x08007045
 8006a74:	08007277 	.word	0x08007277

08006a78 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	4613      	mov	r3, r2
 8006a84:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d001      	beq.n	8006a96 <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 8006a92:	2302      	movs	r3, #2
 8006a94:	e105      	b.n	8006ca2 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d002      	beq.n	8006aa2 <HAL_SPI_Receive_DMA+0x2a>
 8006a9c:	88fb      	ldrh	r3, [r7, #6]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d101      	bne.n	8006aa6 <HAL_SPI_Receive_DMA+0x2e>
  {
    return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e0fd      	b.n	8006ca2 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d110      	bne.n	8006ad0 <HAL_SPI_Receive_DMA+0x58>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ab6:	d10b      	bne.n	8006ad0 <HAL_SPI_Receive_DMA+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2204      	movs	r2, #4
 8006abc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8006ac0:	88fb      	ldrh	r3, [r7, #6]
 8006ac2:	68ba      	ldr	r2, [r7, #8]
 8006ac4:	68b9      	ldr	r1, [r7, #8]
 8006ac6:	68f8      	ldr	r0, [r7, #12]
 8006ac8:	f000 f8f6 	bl	8006cb8 <HAL_SPI_TransmitReceive_DMA>
 8006acc:	4603      	mov	r3, r0
 8006ace:	e0e8      	b.n	8006ca2 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d101      	bne.n	8006ade <HAL_SPI_Receive_DMA+0x66>
 8006ada:	2302      	movs	r3, #2
 8006adc:	e0e1      	b.n	8006ca2 <HAL_SPI_Receive_DMA+0x22a>
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2204      	movs	r2, #4
 8006aea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	68ba      	ldr	r2, [r7, #8]
 8006af8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	88fa      	ldrh	r2, [r7, #6]
 8006afe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	88fa      	ldrh	r2, [r7, #6]
 8006b06:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2200      	movs	r2, #0
 8006b14:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b2a:	d10f      	bne.n	8006b4c <HAL_SPI_Receive_DMA+0xd4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b3a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006b4a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	685a      	ldr	r2, [r3, #4]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006b5a:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006b64:	d908      	bls.n	8006b78 <HAL_SPI_Receive_DMA+0x100>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	685a      	ldr	r2, [r3, #4]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006b74:	605a      	str	r2, [r3, #4]
 8006b76:	e042      	b.n	8006bfe <HAL_SPI_Receive_DMA+0x186>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	685a      	ldr	r2, [r3, #4]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006b86:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b8c:	699b      	ldr	r3, [r3, #24]
 8006b8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b92:	d134      	bne.n	8006bfe <HAL_SPI_Receive_DMA+0x186>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	685a      	ldr	r2, [r3, #4]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006ba2:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	f003 0301 	and.w	r3, r3, #1
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d111      	bne.n	8006bd8 <HAL_SPI_Receive_DMA+0x160>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	685a      	ldr	r2, [r3, #4]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006bc2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	085b      	lsrs	r3, r3, #1
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8006bd6:	e012      	b.n	8006bfe <HAL_SPI_Receive_DMA+0x186>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	685a      	ldr	r2, [r3, #4]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006be6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	085b      	lsrs	r3, r3, #1
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c02:	4a2a      	ldr	r2, [pc, #168]	@ (8006cac <HAL_SPI_Receive_DMA+0x234>)
 8006c04:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c0a:	4a29      	ldr	r2, [pc, #164]	@ (8006cb0 <HAL_SPI_Receive_DMA+0x238>)
 8006c0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c12:	4a28      	ldr	r2, [pc, #160]	@ (8006cb4 <HAL_SPI_Receive_DMA+0x23c>)
 8006c14:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	330c      	adds	r3, #12
 8006c28:	4619      	mov	r1, r3
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c2e:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006c36:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006c38:	f7fc ff70 	bl	8003b1c <HAL_DMA_Start_IT>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00b      	beq.n	8006c5a <HAL_SPI_Receive_DMA+0x1e2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c46:	f043 0210 	orr.w	r2, r3, #16
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e023      	b.n	8006ca2 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c64:	2b40      	cmp	r3, #64	@ 0x40
 8006c66:	d007      	beq.n	8006c78 <HAL_SPI_Receive_DMA+0x200>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c76:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	685a      	ldr	r2, [r3, #4]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f042 0220 	orr.w	r2, r2, #32
 8006c8e:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	685a      	ldr	r2, [r3, #4]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f042 0201 	orr.w	r2, r2, #1
 8006c9e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3710      	adds	r7, #16
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	0800723f 	.word	0x0800723f
 8006cb0:	080070eb 	.word	0x080070eb
 8006cb4:	08007277 	.word	0x08007277

08006cb8 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b086      	sub	sp, #24
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	607a      	str	r2, [r7, #4]
 8006cc4:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006ccc:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8006cd4:	7dfb      	ldrb	r3, [r7, #23]
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d00c      	beq.n	8006cf4 <HAL_SPI_TransmitReceive_DMA+0x3c>
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ce0:	d106      	bne.n	8006cf0 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d102      	bne.n	8006cf0 <HAL_SPI_TransmitReceive_DMA+0x38>
 8006cea:	7dfb      	ldrb	r3, [r7, #23]
 8006cec:	2b04      	cmp	r3, #4
 8006cee:	d001      	beq.n	8006cf4 <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006cf0:	2302      	movs	r3, #2
 8006cf2:	e158      	b.n	8006fa6 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d005      	beq.n	8006d06 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d002      	beq.n	8006d06 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8006d00:	887b      	ldrh	r3, [r7, #2]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d101      	bne.n	8006d0a <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	e14d      	b.n	8006fa6 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d101      	bne.n	8006d18 <HAL_SPI_TransmitReceive_DMA+0x60>
 8006d14:	2302      	movs	r3, #2
 8006d16:	e146      	b.n	8006fa6 <HAL_SPI_TransmitReceive_DMA+0x2ee>
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	2b04      	cmp	r3, #4
 8006d2a:	d003      	beq.n	8006d34 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2205      	movs	r2, #5
 8006d30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2200      	movs	r2, #0
 8006d38:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	68ba      	ldr	r2, [r7, #8]
 8006d3e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	887a      	ldrh	r2, [r7, #2]
 8006d44:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	887a      	ldrh	r2, [r7, #2]
 8006d4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	887a      	ldrh	r2, [r7, #2]
 8006d56:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	887a      	ldrh	r2, [r7, #2]
 8006d5e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2200      	movs	r2, #0
 8006d66:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	685a      	ldr	r2, [r3, #4]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8006d7c:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006d86:	d908      	bls.n	8006d9a <HAL_SPI_TransmitReceive_DMA+0xe2>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	685a      	ldr	r2, [r3, #4]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006d96:	605a      	str	r2, [r3, #4]
 8006d98:	e06f      	b.n	8006e7a <HAL_SPI_TransmitReceive_DMA+0x1c2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	685a      	ldr	r2, [r3, #4]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006da8:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dae:	699b      	ldr	r3, [r3, #24]
 8006db0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006db4:	d126      	bne.n	8006e04 <HAL_SPI_TransmitReceive_DMA+0x14c>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8006dba:	f003 0301 	and.w	r3, r3, #1
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d10f      	bne.n	8006de2 <HAL_SPI_TransmitReceive_DMA+0x12a>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	685a      	ldr	r2, [r3, #4]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006dd0:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	085b      	lsrs	r3, r3, #1
 8006dda:	b29a      	uxth	r2, r3
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006de0:	e010      	b.n	8006e04 <HAL_SPI_TransmitReceive_DMA+0x14c>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	685a      	ldr	r2, [r3, #4]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006df0:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	085b      	lsrs	r3, r3, #1
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	b29a      	uxth	r2, r3
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e0e:	d134      	bne.n	8006e7a <HAL_SPI_TransmitReceive_DMA+0x1c2>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	685a      	ldr	r2, [r3, #4]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006e1e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	f003 0301 	and.w	r3, r3, #1
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d111      	bne.n	8006e54 <HAL_SPI_TransmitReceive_DMA+0x19c>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	685a      	ldr	r2, [r3, #4]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e3e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	085b      	lsrs	r3, r3, #1
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8006e52:	e012      	b.n	8006e7a <HAL_SPI_TransmitReceive_DMA+0x1c2>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	685a      	ldr	r2, [r3, #4]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006e62:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	085b      	lsrs	r3, r3, #1
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	3301      	adds	r3, #1
 8006e72:	b29a      	uxth	r2, r3
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	2b04      	cmp	r3, #4
 8006e84:	d108      	bne.n	8006e98 <HAL_SPI_TransmitReceive_DMA+0x1e0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e8a:	4a49      	ldr	r2, [pc, #292]	@ (8006fb0 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 8006e8c:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e92:	4a48      	ldr	r2, [pc, #288]	@ (8006fb4 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 8006e94:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006e96:	e007      	b.n	8006ea8 <HAL_SPI_TransmitReceive_DMA+0x1f0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e9c:	4a46      	ldr	r2, [pc, #280]	@ (8006fb8 <HAL_SPI_TransmitReceive_DMA+0x300>)
 8006e9e:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ea4:	4a45      	ldr	r2, [pc, #276]	@ (8006fbc <HAL_SPI_TransmitReceive_DMA+0x304>)
 8006ea6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006eac:	4a44      	ldr	r2, [pc, #272]	@ (8006fc0 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8006eae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	330c      	adds	r3, #12
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ec8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006ed0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006ed2:	f7fc fe23 	bl	8003b1c <HAL_DMA_Start_IT>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d00b      	beq.n	8006ef4 <HAL_SPI_TransmitReceive_DMA+0x23c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ee0:	f043 0210 	orr.w	r2, r3, #16
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	e058      	b.n	8006fa6 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	685a      	ldr	r2, [r3, #4]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f042 0201 	orr.w	r2, r2, #1
 8006f02:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f08:	2200      	movs	r2, #0
 8006f0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f10:	2200      	movs	r2, #0
 8006f12:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f18:	2200      	movs	r2, #0
 8006f1a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f20:	2200      	movs	r2, #0
 8006f22:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	330c      	adds	r3, #12
 8006f34:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f3a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006f3c:	f7fc fdee 	bl	8003b1c <HAL_DMA_Start_IT>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00b      	beq.n	8006f5e <HAL_SPI_TransmitReceive_DMA+0x2a6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f4a:	f043 0210 	orr.w	r2, r3, #16
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e023      	b.n	8006fa6 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f68:	2b40      	cmp	r3, #64	@ 0x40
 8006f6a:	d007      	beq.n	8006f7c <HAL_SPI_TransmitReceive_DMA+0x2c4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f7a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	685a      	ldr	r2, [r3, #4]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f042 0220 	orr.w	r2, r2, #32
 8006f92:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	685a      	ldr	r2, [r3, #4]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f042 0202 	orr.w	r2, r2, #2
 8006fa2:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3718      	adds	r7, #24
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	0800723f 	.word	0x0800723f
 8006fb4:	080070eb 	.word	0x080070eb
 8006fb8:	0800725b 	.word	0x0800725b
 8006fbc:	08007193 	.word	0x08007193
 8006fc0:	08007277 	.word	0x08007277

08006fc4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006fcc:	bf00      	nop
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006fe0:	bf00      	nop
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8006ff4:	bf00      	nop
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8007008:	bf00      	nop
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800701c:	bf00      	nop
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007036:	b2db      	uxtb	r3, r3
}
 8007038:	4618      	mov	r0, r3
 800703a:	370c      	adds	r7, #12
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b086      	sub	sp, #24
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007050:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007052:	f7fc fb7d 	bl	8003750 <HAL_GetTick>
 8007056:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 0320 	and.w	r3, r3, #32
 8007062:	2b20      	cmp	r3, #32
 8007064:	d03b      	beq.n	80070de <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	685a      	ldr	r2, [r3, #4]
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f022 0220 	bic.w	r2, r2, #32
 8007074:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	685a      	ldr	r2, [r3, #4]
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f022 0202 	bic.w	r2, r2, #2
 8007084:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007086:	693a      	ldr	r2, [r7, #16]
 8007088:	2164      	movs	r1, #100	@ 0x64
 800708a:	6978      	ldr	r0, [r7, #20]
 800708c:	f000 fa8a 	bl	80075a4 <SPI_EndRxTxTransaction>
 8007090:	4603      	mov	r3, r0
 8007092:	2b00      	cmp	r3, #0
 8007094:	d005      	beq.n	80070a2 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800709a:	f043 0220 	orr.w	r2, r3, #32
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d10a      	bne.n	80070c0 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80070aa:	2300      	movs	r3, #0
 80070ac:	60fb      	str	r3, [r7, #12]
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	60fb      	str	r3, [r7, #12]
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	60fb      	str	r3, [r7, #12]
 80070be:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	2200      	movs	r2, #0
 80070c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	2201      	movs	r2, #1
 80070ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d003      	beq.n	80070de <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80070d6:	6978      	ldr	r0, [r7, #20]
 80070d8:	f7ff ff9c 	bl	8007014 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80070dc:	e002      	b.n	80070e4 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80070de:	6978      	ldr	r0, [r7, #20]
 80070e0:	f7fa f954 	bl	800138c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80070e4:	3718      	adds	r7, #24
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}

080070ea <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80070ea:	b580      	push	{r7, lr}
 80070ec:	b084      	sub	sp, #16
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070f6:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80070f8:	f7fc fb2a 	bl	8003750 <HAL_GetTick>
 80070fc:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 0320 	and.w	r3, r3, #32
 8007108:	2b20      	cmp	r3, #32
 800710a:	d03c      	beq.n	8007186 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	685a      	ldr	r2, [r3, #4]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f022 0220 	bic.w	r2, r2, #32
 800711a:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d10d      	bne.n	8007140 <SPI_DMAReceiveCplt+0x56>
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800712c:	d108      	bne.n	8007140 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	685a      	ldr	r2, [r3, #4]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f022 0203 	bic.w	r2, r2, #3
 800713c:	605a      	str	r2, [r3, #4]
 800713e:	e007      	b.n	8007150 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	685a      	ldr	r2, [r3, #4]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f022 0201 	bic.w	r2, r2, #1
 800714e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007150:	68ba      	ldr	r2, [r7, #8]
 8007152:	2164      	movs	r1, #100	@ 0x64
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	f000 f9cd 	bl	80074f4 <SPI_EndRxTransaction>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d002      	beq.n	8007166 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2220      	movs	r2, #32
 8007164:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2200      	movs	r2, #0
 800716a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2201      	movs	r2, #1
 8007172:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800717a:	2b00      	cmp	r3, #0
 800717c:	d003      	beq.n	8007186 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800717e:	68f8      	ldr	r0, [r7, #12]
 8007180:	f7ff ff48 	bl	8007014 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007184:	e002      	b.n	800718c <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8007186:	68f8      	ldr	r0, [r7, #12]
 8007188:	f7fa f916 	bl	80013b8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800718c:	3710      	adds	r7, #16
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007192:	b580      	push	{r7, lr}
 8007194:	b084      	sub	sp, #16
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800719e:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071a0:	f7fc fad6 	bl	8003750 <HAL_GetTick>
 80071a4:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 0320 	and.w	r3, r3, #32
 80071b0:	2b20      	cmp	r3, #32
 80071b2:	d030      	beq.n	8007216 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	685a      	ldr	r2, [r3, #4]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f022 0220 	bic.w	r2, r2, #32
 80071c2:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80071c4:	68ba      	ldr	r2, [r7, #8]
 80071c6:	2164      	movs	r1, #100	@ 0x64
 80071c8:	68f8      	ldr	r0, [r7, #12]
 80071ca:	f000 f9eb 	bl	80075a4 <SPI_EndRxTxTransaction>
 80071ce:	4603      	mov	r3, r0
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d005      	beq.n	80071e0 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071d8:	f043 0220 	orr.w	r2, r3, #32
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	685a      	ldr	r2, [r3, #4]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f022 0203 	bic.w	r2, r2, #3
 80071ee:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2200      	movs	r2, #0
 80071f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2200      	movs	r2, #0
 80071fa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2201      	movs	r2, #1
 8007202:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800720a:	2b00      	cmp	r3, #0
 800720c:	d003      	beq.n	8007216 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800720e:	68f8      	ldr	r0, [r7, #12]
 8007210:	f7ff ff00 	bl	8007014 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007214:	e002      	b.n	800721c <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	f7ff fed4 	bl	8006fc4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800721c:	3710      	adds	r7, #16
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007222:	b580      	push	{r7, lr}
 8007224:	b084      	sub	sp, #16
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800722e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007230:	68f8      	ldr	r0, [r7, #12]
 8007232:	f7ff fed1 	bl	8006fd8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007236:	bf00      	nop
 8007238:	3710      	adds	r7, #16
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}

0800723e <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800723e:	b580      	push	{r7, lr}
 8007240:	b084      	sub	sp, #16
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800724a:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f7ff fecd 	bl	8006fec <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007252:	bf00      	nop
 8007254:	3710      	adds	r7, #16
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}

0800725a <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800725a:	b580      	push	{r7, lr}
 800725c:	b084      	sub	sp, #16
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007266:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8007268:	68f8      	ldr	r0, [r7, #12]
 800726a:	f7ff fec9 	bl	8007000 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800726e:	bf00      	nop
 8007270:	3710      	adds	r7, #16
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}

08007276 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007276:	b580      	push	{r7, lr}
 8007278:	b084      	sub	sp, #16
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007282:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	685a      	ldr	r2, [r3, #4]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f022 0203 	bic.w	r2, r2, #3
 8007292:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007298:	f043 0210 	orr.w	r2, r3, #16
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f7ff feb3 	bl	8007014 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80072ae:	bf00      	nop
 80072b0:	3710      	adds	r7, #16
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
	...

080072b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b088      	sub	sp, #32
 80072bc:	af00      	add	r7, sp, #0
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	60b9      	str	r1, [r7, #8]
 80072c2:	603b      	str	r3, [r7, #0]
 80072c4:	4613      	mov	r3, r2
 80072c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80072c8:	f7fc fa42 	bl	8003750 <HAL_GetTick>
 80072cc:	4602      	mov	r2, r0
 80072ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d0:	1a9b      	subs	r3, r3, r2
 80072d2:	683a      	ldr	r2, [r7, #0]
 80072d4:	4413      	add	r3, r2
 80072d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80072d8:	f7fc fa3a 	bl	8003750 <HAL_GetTick>
 80072dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80072de:	4b39      	ldr	r3, [pc, #228]	@ (80073c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	015b      	lsls	r3, r3, #5
 80072e4:	0d1b      	lsrs	r3, r3, #20
 80072e6:	69fa      	ldr	r2, [r7, #28]
 80072e8:	fb02 f303 	mul.w	r3, r2, r3
 80072ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072ee:	e054      	b.n	800739a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80072f6:	d050      	beq.n	800739a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80072f8:	f7fc fa2a 	bl	8003750 <HAL_GetTick>
 80072fc:	4602      	mov	r2, r0
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	1ad3      	subs	r3, r2, r3
 8007302:	69fa      	ldr	r2, [r7, #28]
 8007304:	429a      	cmp	r2, r3
 8007306:	d902      	bls.n	800730e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d13d      	bne.n	800738a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	685a      	ldr	r2, [r3, #4]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800731c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007326:	d111      	bne.n	800734c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007330:	d004      	beq.n	800733c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800733a:	d107      	bne.n	800734c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800734a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007350:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007354:	d10f      	bne.n	8007376 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007364:	601a      	str	r2, [r3, #0]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007374:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2201      	movs	r2, #1
 800737a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2200      	movs	r2, #0
 8007382:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007386:	2303      	movs	r3, #3
 8007388:	e017      	b.n	80073ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d101      	bne.n	8007394 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007390:	2300      	movs	r3, #0
 8007392:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	3b01      	subs	r3, #1
 8007398:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	689a      	ldr	r2, [r3, #8]
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	4013      	ands	r3, r2
 80073a4:	68ba      	ldr	r2, [r7, #8]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	bf0c      	ite	eq
 80073aa:	2301      	moveq	r3, #1
 80073ac:	2300      	movne	r3, #0
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	461a      	mov	r2, r3
 80073b2:	79fb      	ldrb	r3, [r7, #7]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d19b      	bne.n	80072f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80073b8:	2300      	movs	r3, #0
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3720      	adds	r7, #32
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	20000024 	.word	0x20000024

080073c8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b08a      	sub	sp, #40	@ 0x28
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	607a      	str	r2, [r7, #4]
 80073d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80073d6:	2300      	movs	r3, #0
 80073d8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80073da:	f7fc f9b9 	bl	8003750 <HAL_GetTick>
 80073de:	4602      	mov	r2, r0
 80073e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e2:	1a9b      	subs	r3, r3, r2
 80073e4:	683a      	ldr	r2, [r7, #0]
 80073e6:	4413      	add	r3, r2
 80073e8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80073ea:	f7fc f9b1 	bl	8003750 <HAL_GetTick>
 80073ee:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	330c      	adds	r3, #12
 80073f6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80073f8:	4b3d      	ldr	r3, [pc, #244]	@ (80074f0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	4613      	mov	r3, r2
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	4413      	add	r3, r2
 8007402:	00da      	lsls	r2, r3, #3
 8007404:	1ad3      	subs	r3, r2, r3
 8007406:	0d1b      	lsrs	r3, r3, #20
 8007408:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800740a:	fb02 f303 	mul.w	r3, r2, r3
 800740e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007410:	e060      	b.n	80074d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007418:	d107      	bne.n	800742a <SPI_WaitFifoStateUntilTimeout+0x62>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d104      	bne.n	800742a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007420:	69fb      	ldr	r3, [r7, #28]
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	b2db      	uxtb	r3, r3
 8007426:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007428:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007430:	d050      	beq.n	80074d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007432:	f7fc f98d 	bl	8003750 <HAL_GetTick>
 8007436:	4602      	mov	r2, r0
 8007438:	6a3b      	ldr	r3, [r7, #32]
 800743a:	1ad3      	subs	r3, r2, r3
 800743c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800743e:	429a      	cmp	r2, r3
 8007440:	d902      	bls.n	8007448 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007444:	2b00      	cmp	r3, #0
 8007446:	d13d      	bne.n	80074c4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	685a      	ldr	r2, [r3, #4]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007456:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007460:	d111      	bne.n	8007486 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800746a:	d004      	beq.n	8007476 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007474:	d107      	bne.n	8007486 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007484:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800748a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800748e:	d10f      	bne.n	80074b0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800749e:	601a      	str	r2, [r3, #0]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80074ae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2200      	movs	r2, #0
 80074bc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80074c0:	2303      	movs	r3, #3
 80074c2:	e010      	b.n	80074e6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d101      	bne.n	80074ce <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80074ca:	2300      	movs	r3, #0
 80074cc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	3b01      	subs	r3, #1
 80074d2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	689a      	ldr	r2, [r3, #8]
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	4013      	ands	r3, r2
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d196      	bne.n	8007412 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3728      	adds	r7, #40	@ 0x28
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	20000024 	.word	0x20000024

080074f4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b086      	sub	sp, #24
 80074f8:	af02      	add	r7, sp, #8
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007508:	d111      	bne.n	800752e <SPI_EndRxTransaction+0x3a>
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007512:	d004      	beq.n	800751e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800751c:	d107      	bne.n	800752e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800752c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	9300      	str	r3, [sp, #0]
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	2200      	movs	r2, #0
 8007536:	2180      	movs	r1, #128	@ 0x80
 8007538:	68f8      	ldr	r0, [r7, #12]
 800753a:	f7ff febd 	bl	80072b8 <SPI_WaitFlagStateUntilTimeout>
 800753e:	4603      	mov	r3, r0
 8007540:	2b00      	cmp	r3, #0
 8007542:	d007      	beq.n	8007554 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007548:	f043 0220 	orr.w	r2, r3, #32
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007550:	2303      	movs	r3, #3
 8007552:	e023      	b.n	800759c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800755c:	d11d      	bne.n	800759a <SPI_EndRxTransaction+0xa6>
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007566:	d004      	beq.n	8007572 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007570:	d113      	bne.n	800759a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	9300      	str	r3, [sp, #0]
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	2200      	movs	r2, #0
 800757a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800757e:	68f8      	ldr	r0, [r7, #12]
 8007580:	f7ff ff22 	bl	80073c8 <SPI_WaitFifoStateUntilTimeout>
 8007584:	4603      	mov	r3, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d007      	beq.n	800759a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800758e:	f043 0220 	orr.w	r2, r3, #32
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8007596:	2303      	movs	r3, #3
 8007598:	e000      	b.n	800759c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3710      	adds	r7, #16
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b086      	sub	sp, #24
 80075a8:	af02      	add	r7, sp, #8
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	9300      	str	r3, [sp, #0]
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	2200      	movs	r2, #0
 80075b8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	f7ff ff03 	bl	80073c8 <SPI_WaitFifoStateUntilTimeout>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d007      	beq.n	80075d8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075cc:	f043 0220 	orr.w	r2, r3, #32
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80075d4:	2303      	movs	r3, #3
 80075d6:	e027      	b.n	8007628 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	9300      	str	r3, [sp, #0]
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	2200      	movs	r2, #0
 80075e0:	2180      	movs	r1, #128	@ 0x80
 80075e2:	68f8      	ldr	r0, [r7, #12]
 80075e4:	f7ff fe68 	bl	80072b8 <SPI_WaitFlagStateUntilTimeout>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d007      	beq.n	80075fe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075f2:	f043 0220 	orr.w	r2, r3, #32
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80075fa:	2303      	movs	r3, #3
 80075fc:	e014      	b.n	8007628 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	9300      	str	r3, [sp, #0]
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	2200      	movs	r2, #0
 8007606:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f7ff fedc 	bl	80073c8 <SPI_WaitFifoStateUntilTimeout>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d007      	beq.n	8007626 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800761a:	f043 0220 	orr.w	r2, r3, #32
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007622:	2303      	movs	r3, #3
 8007624:	e000      	b.n	8007628 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007626:	2300      	movs	r3, #0
}
 8007628:	4618      	mov	r0, r3
 800762a:	3710      	adds	r7, #16
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d101      	bne.n	8007642 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	e049      	b.n	80076d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007648:	b2db      	uxtb	r3, r3
 800764a:	2b00      	cmp	r3, #0
 800764c:	d106      	bne.n	800765c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f7fb fa0e 	bl	8002a78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2202      	movs	r2, #2
 8007660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	3304      	adds	r3, #4
 800766c:	4619      	mov	r1, r3
 800766e:	4610      	mov	r0, r2
 8007670:	f000 f9c4 	bl	80079fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2201      	movs	r2, #1
 8007680:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2201      	movs	r2, #1
 8007688:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2201      	movs	r2, #1
 8007690:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3708      	adds	r7, #8
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
	...

080076e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b085      	sub	sp, #20
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d001      	beq.n	80076f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	e054      	b.n	80077a2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2202      	movs	r2, #2
 80076fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	68da      	ldr	r2, [r3, #12]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f042 0201 	orr.w	r2, r2, #1
 800770e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a26      	ldr	r2, [pc, #152]	@ (80077b0 <HAL_TIM_Base_Start_IT+0xd0>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d022      	beq.n	8007760 <HAL_TIM_Base_Start_IT+0x80>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007722:	d01d      	beq.n	8007760 <HAL_TIM_Base_Start_IT+0x80>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a22      	ldr	r2, [pc, #136]	@ (80077b4 <HAL_TIM_Base_Start_IT+0xd4>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d018      	beq.n	8007760 <HAL_TIM_Base_Start_IT+0x80>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a21      	ldr	r2, [pc, #132]	@ (80077b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d013      	beq.n	8007760 <HAL_TIM_Base_Start_IT+0x80>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a1f      	ldr	r2, [pc, #124]	@ (80077bc <HAL_TIM_Base_Start_IT+0xdc>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d00e      	beq.n	8007760 <HAL_TIM_Base_Start_IT+0x80>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a1e      	ldr	r2, [pc, #120]	@ (80077c0 <HAL_TIM_Base_Start_IT+0xe0>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d009      	beq.n	8007760 <HAL_TIM_Base_Start_IT+0x80>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a1c      	ldr	r2, [pc, #112]	@ (80077c4 <HAL_TIM_Base_Start_IT+0xe4>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d004      	beq.n	8007760 <HAL_TIM_Base_Start_IT+0x80>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a1b      	ldr	r2, [pc, #108]	@ (80077c8 <HAL_TIM_Base_Start_IT+0xe8>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d115      	bne.n	800778c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	689a      	ldr	r2, [r3, #8]
 8007766:	4b19      	ldr	r3, [pc, #100]	@ (80077cc <HAL_TIM_Base_Start_IT+0xec>)
 8007768:	4013      	ands	r3, r2
 800776a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2b06      	cmp	r3, #6
 8007770:	d015      	beq.n	800779e <HAL_TIM_Base_Start_IT+0xbe>
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007778:	d011      	beq.n	800779e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f042 0201 	orr.w	r2, r2, #1
 8007788:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800778a:	e008      	b.n	800779e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f042 0201 	orr.w	r2, r2, #1
 800779a:	601a      	str	r2, [r3, #0]
 800779c:	e000      	b.n	80077a0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800779e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3714      	adds	r7, #20
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop
 80077b0:	40012c00 	.word	0x40012c00
 80077b4:	40000400 	.word	0x40000400
 80077b8:	40000800 	.word	0x40000800
 80077bc:	40000c00 	.word	0x40000c00
 80077c0:	40013400 	.word	0x40013400
 80077c4:	40014000 	.word	0x40014000
 80077c8:	40015000 	.word	0x40015000
 80077cc:	00010007 	.word	0x00010007

080077d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80077da:	2300      	movs	r3, #0
 80077dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d101      	bne.n	80077ec <HAL_TIM_ConfigClockSource+0x1c>
 80077e8:	2302      	movs	r3, #2
 80077ea:	e0f6      	b.n	80079da <HAL_TIM_ConfigClockSource+0x20a>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2201      	movs	r2, #1
 80077f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2202      	movs	r2, #2
 80077f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800780a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800780e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007816:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	68ba      	ldr	r2, [r7, #8]
 800781e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a6f      	ldr	r2, [pc, #444]	@ (80079e4 <HAL_TIM_ConfigClockSource+0x214>)
 8007826:	4293      	cmp	r3, r2
 8007828:	f000 80c1 	beq.w	80079ae <HAL_TIM_ConfigClockSource+0x1de>
 800782c:	4a6d      	ldr	r2, [pc, #436]	@ (80079e4 <HAL_TIM_ConfigClockSource+0x214>)
 800782e:	4293      	cmp	r3, r2
 8007830:	f200 80c6 	bhi.w	80079c0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007834:	4a6c      	ldr	r2, [pc, #432]	@ (80079e8 <HAL_TIM_ConfigClockSource+0x218>)
 8007836:	4293      	cmp	r3, r2
 8007838:	f000 80b9 	beq.w	80079ae <HAL_TIM_ConfigClockSource+0x1de>
 800783c:	4a6a      	ldr	r2, [pc, #424]	@ (80079e8 <HAL_TIM_ConfigClockSource+0x218>)
 800783e:	4293      	cmp	r3, r2
 8007840:	f200 80be 	bhi.w	80079c0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007844:	4a69      	ldr	r2, [pc, #420]	@ (80079ec <HAL_TIM_ConfigClockSource+0x21c>)
 8007846:	4293      	cmp	r3, r2
 8007848:	f000 80b1 	beq.w	80079ae <HAL_TIM_ConfigClockSource+0x1de>
 800784c:	4a67      	ldr	r2, [pc, #412]	@ (80079ec <HAL_TIM_ConfigClockSource+0x21c>)
 800784e:	4293      	cmp	r3, r2
 8007850:	f200 80b6 	bhi.w	80079c0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007854:	4a66      	ldr	r2, [pc, #408]	@ (80079f0 <HAL_TIM_ConfigClockSource+0x220>)
 8007856:	4293      	cmp	r3, r2
 8007858:	f000 80a9 	beq.w	80079ae <HAL_TIM_ConfigClockSource+0x1de>
 800785c:	4a64      	ldr	r2, [pc, #400]	@ (80079f0 <HAL_TIM_ConfigClockSource+0x220>)
 800785e:	4293      	cmp	r3, r2
 8007860:	f200 80ae 	bhi.w	80079c0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007864:	4a63      	ldr	r2, [pc, #396]	@ (80079f4 <HAL_TIM_ConfigClockSource+0x224>)
 8007866:	4293      	cmp	r3, r2
 8007868:	f000 80a1 	beq.w	80079ae <HAL_TIM_ConfigClockSource+0x1de>
 800786c:	4a61      	ldr	r2, [pc, #388]	@ (80079f4 <HAL_TIM_ConfigClockSource+0x224>)
 800786e:	4293      	cmp	r3, r2
 8007870:	f200 80a6 	bhi.w	80079c0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007874:	4a60      	ldr	r2, [pc, #384]	@ (80079f8 <HAL_TIM_ConfigClockSource+0x228>)
 8007876:	4293      	cmp	r3, r2
 8007878:	f000 8099 	beq.w	80079ae <HAL_TIM_ConfigClockSource+0x1de>
 800787c:	4a5e      	ldr	r2, [pc, #376]	@ (80079f8 <HAL_TIM_ConfigClockSource+0x228>)
 800787e:	4293      	cmp	r3, r2
 8007880:	f200 809e 	bhi.w	80079c0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007884:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007888:	f000 8091 	beq.w	80079ae <HAL_TIM_ConfigClockSource+0x1de>
 800788c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007890:	f200 8096 	bhi.w	80079c0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007894:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007898:	f000 8089 	beq.w	80079ae <HAL_TIM_ConfigClockSource+0x1de>
 800789c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078a0:	f200 808e 	bhi.w	80079c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80078a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078a8:	d03e      	beq.n	8007928 <HAL_TIM_ConfigClockSource+0x158>
 80078aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078ae:	f200 8087 	bhi.w	80079c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80078b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078b6:	f000 8086 	beq.w	80079c6 <HAL_TIM_ConfigClockSource+0x1f6>
 80078ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078be:	d87f      	bhi.n	80079c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80078c0:	2b70      	cmp	r3, #112	@ 0x70
 80078c2:	d01a      	beq.n	80078fa <HAL_TIM_ConfigClockSource+0x12a>
 80078c4:	2b70      	cmp	r3, #112	@ 0x70
 80078c6:	d87b      	bhi.n	80079c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80078c8:	2b60      	cmp	r3, #96	@ 0x60
 80078ca:	d050      	beq.n	800796e <HAL_TIM_ConfigClockSource+0x19e>
 80078cc:	2b60      	cmp	r3, #96	@ 0x60
 80078ce:	d877      	bhi.n	80079c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80078d0:	2b50      	cmp	r3, #80	@ 0x50
 80078d2:	d03c      	beq.n	800794e <HAL_TIM_ConfigClockSource+0x17e>
 80078d4:	2b50      	cmp	r3, #80	@ 0x50
 80078d6:	d873      	bhi.n	80079c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80078d8:	2b40      	cmp	r3, #64	@ 0x40
 80078da:	d058      	beq.n	800798e <HAL_TIM_ConfigClockSource+0x1be>
 80078dc:	2b40      	cmp	r3, #64	@ 0x40
 80078de:	d86f      	bhi.n	80079c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80078e0:	2b30      	cmp	r3, #48	@ 0x30
 80078e2:	d064      	beq.n	80079ae <HAL_TIM_ConfigClockSource+0x1de>
 80078e4:	2b30      	cmp	r3, #48	@ 0x30
 80078e6:	d86b      	bhi.n	80079c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80078e8:	2b20      	cmp	r3, #32
 80078ea:	d060      	beq.n	80079ae <HAL_TIM_ConfigClockSource+0x1de>
 80078ec:	2b20      	cmp	r3, #32
 80078ee:	d867      	bhi.n	80079c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d05c      	beq.n	80079ae <HAL_TIM_ConfigClockSource+0x1de>
 80078f4:	2b10      	cmp	r3, #16
 80078f6:	d05a      	beq.n	80079ae <HAL_TIM_ConfigClockSource+0x1de>
 80078f8:	e062      	b.n	80079c0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800790a:	f000 f9a7 	bl	8007c5c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800791c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	68ba      	ldr	r2, [r7, #8]
 8007924:	609a      	str	r2, [r3, #8]
      break;
 8007926:	e04f      	b.n	80079c8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007938:	f000 f990 	bl	8007c5c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	689a      	ldr	r2, [r3, #8]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800794a:	609a      	str	r2, [r3, #8]
      break;
 800794c:	e03c      	b.n	80079c8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800795a:	461a      	mov	r2, r3
 800795c:	f000 f902 	bl	8007b64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	2150      	movs	r1, #80	@ 0x50
 8007966:	4618      	mov	r0, r3
 8007968:	f000 f95b 	bl	8007c22 <TIM_ITRx_SetConfig>
      break;
 800796c:	e02c      	b.n	80079c8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800797a:	461a      	mov	r2, r3
 800797c:	f000 f921 	bl	8007bc2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	2160      	movs	r1, #96	@ 0x60
 8007986:	4618      	mov	r0, r3
 8007988:	f000 f94b 	bl	8007c22 <TIM_ITRx_SetConfig>
      break;
 800798c:	e01c      	b.n	80079c8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800799a:	461a      	mov	r2, r3
 800799c:	f000 f8e2 	bl	8007b64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	2140      	movs	r1, #64	@ 0x40
 80079a6:	4618      	mov	r0, r3
 80079a8:	f000 f93b 	bl	8007c22 <TIM_ITRx_SetConfig>
      break;
 80079ac:	e00c      	b.n	80079c8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4619      	mov	r1, r3
 80079b8:	4610      	mov	r0, r2
 80079ba:	f000 f932 	bl	8007c22 <TIM_ITRx_SetConfig>
      break;
 80079be:	e003      	b.n	80079c8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	73fb      	strb	r3, [r7, #15]
      break;
 80079c4:	e000      	b.n	80079c8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80079c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80079d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3710      	adds	r7, #16
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	bf00      	nop
 80079e4:	00100070 	.word	0x00100070
 80079e8:	00100060 	.word	0x00100060
 80079ec:	00100050 	.word	0x00100050
 80079f0:	00100040 	.word	0x00100040
 80079f4:	00100030 	.word	0x00100030
 80079f8:	00100020 	.word	0x00100020

080079fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b085      	sub	sp, #20
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4a4c      	ldr	r2, [pc, #304]	@ (8007b40 <TIM_Base_SetConfig+0x144>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d017      	beq.n	8007a44 <TIM_Base_SetConfig+0x48>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a1a:	d013      	beq.n	8007a44 <TIM_Base_SetConfig+0x48>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4a49      	ldr	r2, [pc, #292]	@ (8007b44 <TIM_Base_SetConfig+0x148>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d00f      	beq.n	8007a44 <TIM_Base_SetConfig+0x48>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	4a48      	ldr	r2, [pc, #288]	@ (8007b48 <TIM_Base_SetConfig+0x14c>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d00b      	beq.n	8007a44 <TIM_Base_SetConfig+0x48>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	4a47      	ldr	r2, [pc, #284]	@ (8007b4c <TIM_Base_SetConfig+0x150>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d007      	beq.n	8007a44 <TIM_Base_SetConfig+0x48>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4a46      	ldr	r2, [pc, #280]	@ (8007b50 <TIM_Base_SetConfig+0x154>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d003      	beq.n	8007a44 <TIM_Base_SetConfig+0x48>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4a45      	ldr	r2, [pc, #276]	@ (8007b54 <TIM_Base_SetConfig+0x158>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d108      	bne.n	8007a56 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	68fa      	ldr	r2, [r7, #12]
 8007a52:	4313      	orrs	r3, r2
 8007a54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4a39      	ldr	r2, [pc, #228]	@ (8007b40 <TIM_Base_SetConfig+0x144>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d023      	beq.n	8007aa6 <TIM_Base_SetConfig+0xaa>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a64:	d01f      	beq.n	8007aa6 <TIM_Base_SetConfig+0xaa>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a36      	ldr	r2, [pc, #216]	@ (8007b44 <TIM_Base_SetConfig+0x148>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d01b      	beq.n	8007aa6 <TIM_Base_SetConfig+0xaa>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a35      	ldr	r2, [pc, #212]	@ (8007b48 <TIM_Base_SetConfig+0x14c>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d017      	beq.n	8007aa6 <TIM_Base_SetConfig+0xaa>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4a34      	ldr	r2, [pc, #208]	@ (8007b4c <TIM_Base_SetConfig+0x150>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d013      	beq.n	8007aa6 <TIM_Base_SetConfig+0xaa>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4a33      	ldr	r2, [pc, #204]	@ (8007b50 <TIM_Base_SetConfig+0x154>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d00f      	beq.n	8007aa6 <TIM_Base_SetConfig+0xaa>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a33      	ldr	r2, [pc, #204]	@ (8007b58 <TIM_Base_SetConfig+0x15c>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d00b      	beq.n	8007aa6 <TIM_Base_SetConfig+0xaa>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a32      	ldr	r2, [pc, #200]	@ (8007b5c <TIM_Base_SetConfig+0x160>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d007      	beq.n	8007aa6 <TIM_Base_SetConfig+0xaa>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4a31      	ldr	r2, [pc, #196]	@ (8007b60 <TIM_Base_SetConfig+0x164>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d003      	beq.n	8007aa6 <TIM_Base_SetConfig+0xaa>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a2c      	ldr	r2, [pc, #176]	@ (8007b54 <TIM_Base_SetConfig+0x158>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d108      	bne.n	8007ab8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007aac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	68fa      	ldr	r2, [r7, #12]
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	695b      	ldr	r3, [r3, #20]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	689a      	ldr	r2, [r3, #8]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4a18      	ldr	r2, [pc, #96]	@ (8007b40 <TIM_Base_SetConfig+0x144>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d013      	beq.n	8007b0c <TIM_Base_SetConfig+0x110>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4a1a      	ldr	r2, [pc, #104]	@ (8007b50 <TIM_Base_SetConfig+0x154>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d00f      	beq.n	8007b0c <TIM_Base_SetConfig+0x110>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a1a      	ldr	r2, [pc, #104]	@ (8007b58 <TIM_Base_SetConfig+0x15c>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d00b      	beq.n	8007b0c <TIM_Base_SetConfig+0x110>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a19      	ldr	r2, [pc, #100]	@ (8007b5c <TIM_Base_SetConfig+0x160>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d007      	beq.n	8007b0c <TIM_Base_SetConfig+0x110>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4a18      	ldr	r2, [pc, #96]	@ (8007b60 <TIM_Base_SetConfig+0x164>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d003      	beq.n	8007b0c <TIM_Base_SetConfig+0x110>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	4a13      	ldr	r2, [pc, #76]	@ (8007b54 <TIM_Base_SetConfig+0x158>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d103      	bne.n	8007b14 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	691a      	ldr	r2, [r3, #16]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2201      	movs	r2, #1
 8007b18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	691b      	ldr	r3, [r3, #16]
 8007b1e:	f003 0301 	and.w	r3, r3, #1
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d105      	bne.n	8007b32 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	691b      	ldr	r3, [r3, #16]
 8007b2a:	f023 0201 	bic.w	r2, r3, #1
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	611a      	str	r2, [r3, #16]
  }
}
 8007b32:	bf00      	nop
 8007b34:	3714      	adds	r7, #20
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	40012c00 	.word	0x40012c00
 8007b44:	40000400 	.word	0x40000400
 8007b48:	40000800 	.word	0x40000800
 8007b4c:	40000c00 	.word	0x40000c00
 8007b50:	40013400 	.word	0x40013400
 8007b54:	40015000 	.word	0x40015000
 8007b58:	40014000 	.word	0x40014000
 8007b5c:	40014400 	.word	0x40014400
 8007b60:	40014800 	.word	0x40014800

08007b64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b087      	sub	sp, #28
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	6a1b      	ldr	r3, [r3, #32]
 8007b74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	6a1b      	ldr	r3, [r3, #32]
 8007b7a:	f023 0201 	bic.w	r2, r3, #1
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	699b      	ldr	r3, [r3, #24]
 8007b86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007b8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	011b      	lsls	r3, r3, #4
 8007b94:	693a      	ldr	r2, [r7, #16]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	f023 030a 	bic.w	r3, r3, #10
 8007ba0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ba2:	697a      	ldr	r2, [r7, #20]
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	693a      	ldr	r2, [r7, #16]
 8007bae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	697a      	ldr	r2, [r7, #20]
 8007bb4:	621a      	str	r2, [r3, #32]
}
 8007bb6:	bf00      	nop
 8007bb8:	371c      	adds	r7, #28
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr

08007bc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007bc2:	b480      	push	{r7}
 8007bc4:	b087      	sub	sp, #28
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	60f8      	str	r0, [r7, #12]
 8007bca:	60b9      	str	r1, [r7, #8]
 8007bcc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6a1b      	ldr	r3, [r3, #32]
 8007bd2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6a1b      	ldr	r3, [r3, #32]
 8007bd8:	f023 0210 	bic.w	r2, r3, #16
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	699b      	ldr	r3, [r3, #24]
 8007be4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007bec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	031b      	lsls	r3, r3, #12
 8007bf2:	693a      	ldr	r2, [r7, #16]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007bfe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	011b      	lsls	r3, r3, #4
 8007c04:	697a      	ldr	r2, [r7, #20]
 8007c06:	4313      	orrs	r3, r2
 8007c08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	693a      	ldr	r2, [r7, #16]
 8007c0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	697a      	ldr	r2, [r7, #20]
 8007c14:	621a      	str	r2, [r3, #32]
}
 8007c16:	bf00      	nop
 8007c18:	371c      	adds	r7, #28
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr

08007c22 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c22:	b480      	push	{r7}
 8007c24:	b085      	sub	sp, #20
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
 8007c2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007c38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c3e:	683a      	ldr	r2, [r7, #0]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	f043 0307 	orr.w	r3, r3, #7
 8007c48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	68fa      	ldr	r2, [r7, #12]
 8007c4e:	609a      	str	r2, [r3, #8]
}
 8007c50:	bf00      	nop
 8007c52:	3714      	adds	r7, #20
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b087      	sub	sp, #28
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	60f8      	str	r0, [r7, #12]
 8007c64:	60b9      	str	r1, [r7, #8]
 8007c66:	607a      	str	r2, [r7, #4]
 8007c68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007c76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	021a      	lsls	r2, r3, #8
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	431a      	orrs	r2, r3
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	697a      	ldr	r2, [r7, #20]
 8007c86:	4313      	orrs	r3, r2
 8007c88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	697a      	ldr	r2, [r7, #20]
 8007c8e:	609a      	str	r2, [r3, #8]
}
 8007c90:	bf00      	nop
 8007c92:	371c      	adds	r7, #28
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b085      	sub	sp, #20
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d101      	bne.n	8007cb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007cb0:	2302      	movs	r3, #2
 8007cb2:	e074      	b.n	8007d9e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2202      	movs	r2, #2
 8007cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a34      	ldr	r2, [pc, #208]	@ (8007dac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d009      	beq.n	8007cf2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a33      	ldr	r2, [pc, #204]	@ (8007db0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d004      	beq.n	8007cf2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a31      	ldr	r2, [pc, #196]	@ (8007db4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d108      	bne.n	8007d04 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007cf8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	68fa      	ldr	r2, [r7, #12]
 8007d00:	4313      	orrs	r3, r2
 8007d02:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007d0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	68fa      	ldr	r2, [r7, #12]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	68fa      	ldr	r2, [r7, #12]
 8007d20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a21      	ldr	r2, [pc, #132]	@ (8007dac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d022      	beq.n	8007d72 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d34:	d01d      	beq.n	8007d72 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a1f      	ldr	r2, [pc, #124]	@ (8007db8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d018      	beq.n	8007d72 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a1d      	ldr	r2, [pc, #116]	@ (8007dbc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d013      	beq.n	8007d72 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a1c      	ldr	r2, [pc, #112]	@ (8007dc0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d00e      	beq.n	8007d72 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a15      	ldr	r2, [pc, #84]	@ (8007db0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d009      	beq.n	8007d72 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a18      	ldr	r2, [pc, #96]	@ (8007dc4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d004      	beq.n	8007d72 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a11      	ldr	r2, [pc, #68]	@ (8007db4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d10c      	bne.n	8007d8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	68ba      	ldr	r2, [r7, #8]
 8007d80:	4313      	orrs	r3, r2
 8007d82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	68ba      	ldr	r2, [r7, #8]
 8007d8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007d9c:	2300      	movs	r3, #0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3714      	adds	r7, #20
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop
 8007dac:	40012c00 	.word	0x40012c00
 8007db0:	40013400 	.word	0x40013400
 8007db4:	40015000 	.word	0x40015000
 8007db8:	40000400 	.word	0x40000400
 8007dbc:	40000800 	.word	0x40000800
 8007dc0:	40000c00 	.word	0x40000c00
 8007dc4:	40014000 	.word	0x40014000

08007dc8 <__cvt>:
 8007dc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007dcc:	ec57 6b10 	vmov	r6, r7, d0
 8007dd0:	2f00      	cmp	r7, #0
 8007dd2:	460c      	mov	r4, r1
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	463b      	mov	r3, r7
 8007dd8:	bfbb      	ittet	lt
 8007dda:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007dde:	461f      	movlt	r7, r3
 8007de0:	2300      	movge	r3, #0
 8007de2:	232d      	movlt	r3, #45	@ 0x2d
 8007de4:	700b      	strb	r3, [r1, #0]
 8007de6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007de8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007dec:	4691      	mov	r9, r2
 8007dee:	f023 0820 	bic.w	r8, r3, #32
 8007df2:	bfbc      	itt	lt
 8007df4:	4632      	movlt	r2, r6
 8007df6:	4616      	movlt	r6, r2
 8007df8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007dfc:	d005      	beq.n	8007e0a <__cvt+0x42>
 8007dfe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007e02:	d100      	bne.n	8007e06 <__cvt+0x3e>
 8007e04:	3401      	adds	r4, #1
 8007e06:	2102      	movs	r1, #2
 8007e08:	e000      	b.n	8007e0c <__cvt+0x44>
 8007e0a:	2103      	movs	r1, #3
 8007e0c:	ab03      	add	r3, sp, #12
 8007e0e:	9301      	str	r3, [sp, #4]
 8007e10:	ab02      	add	r3, sp, #8
 8007e12:	9300      	str	r3, [sp, #0]
 8007e14:	ec47 6b10 	vmov	d0, r6, r7
 8007e18:	4653      	mov	r3, sl
 8007e1a:	4622      	mov	r2, r4
 8007e1c:	f000 fe48 	bl	8008ab0 <_dtoa_r>
 8007e20:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007e24:	4605      	mov	r5, r0
 8007e26:	d119      	bne.n	8007e5c <__cvt+0x94>
 8007e28:	f019 0f01 	tst.w	r9, #1
 8007e2c:	d00e      	beq.n	8007e4c <__cvt+0x84>
 8007e2e:	eb00 0904 	add.w	r9, r0, r4
 8007e32:	2200      	movs	r2, #0
 8007e34:	2300      	movs	r3, #0
 8007e36:	4630      	mov	r0, r6
 8007e38:	4639      	mov	r1, r7
 8007e3a:	f7f8 fe6d 	bl	8000b18 <__aeabi_dcmpeq>
 8007e3e:	b108      	cbz	r0, 8007e44 <__cvt+0x7c>
 8007e40:	f8cd 900c 	str.w	r9, [sp, #12]
 8007e44:	2230      	movs	r2, #48	@ 0x30
 8007e46:	9b03      	ldr	r3, [sp, #12]
 8007e48:	454b      	cmp	r3, r9
 8007e4a:	d31e      	bcc.n	8007e8a <__cvt+0xc2>
 8007e4c:	9b03      	ldr	r3, [sp, #12]
 8007e4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e50:	1b5b      	subs	r3, r3, r5
 8007e52:	4628      	mov	r0, r5
 8007e54:	6013      	str	r3, [r2, #0]
 8007e56:	b004      	add	sp, #16
 8007e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e5c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007e60:	eb00 0904 	add.w	r9, r0, r4
 8007e64:	d1e5      	bne.n	8007e32 <__cvt+0x6a>
 8007e66:	7803      	ldrb	r3, [r0, #0]
 8007e68:	2b30      	cmp	r3, #48	@ 0x30
 8007e6a:	d10a      	bne.n	8007e82 <__cvt+0xba>
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	2300      	movs	r3, #0
 8007e70:	4630      	mov	r0, r6
 8007e72:	4639      	mov	r1, r7
 8007e74:	f7f8 fe50 	bl	8000b18 <__aeabi_dcmpeq>
 8007e78:	b918      	cbnz	r0, 8007e82 <__cvt+0xba>
 8007e7a:	f1c4 0401 	rsb	r4, r4, #1
 8007e7e:	f8ca 4000 	str.w	r4, [sl]
 8007e82:	f8da 3000 	ldr.w	r3, [sl]
 8007e86:	4499      	add	r9, r3
 8007e88:	e7d3      	b.n	8007e32 <__cvt+0x6a>
 8007e8a:	1c59      	adds	r1, r3, #1
 8007e8c:	9103      	str	r1, [sp, #12]
 8007e8e:	701a      	strb	r2, [r3, #0]
 8007e90:	e7d9      	b.n	8007e46 <__cvt+0x7e>

08007e92 <__exponent>:
 8007e92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e94:	2900      	cmp	r1, #0
 8007e96:	bfba      	itte	lt
 8007e98:	4249      	neglt	r1, r1
 8007e9a:	232d      	movlt	r3, #45	@ 0x2d
 8007e9c:	232b      	movge	r3, #43	@ 0x2b
 8007e9e:	2909      	cmp	r1, #9
 8007ea0:	7002      	strb	r2, [r0, #0]
 8007ea2:	7043      	strb	r3, [r0, #1]
 8007ea4:	dd29      	ble.n	8007efa <__exponent+0x68>
 8007ea6:	f10d 0307 	add.w	r3, sp, #7
 8007eaa:	461d      	mov	r5, r3
 8007eac:	270a      	movs	r7, #10
 8007eae:	461a      	mov	r2, r3
 8007eb0:	fbb1 f6f7 	udiv	r6, r1, r7
 8007eb4:	fb07 1416 	mls	r4, r7, r6, r1
 8007eb8:	3430      	adds	r4, #48	@ 0x30
 8007eba:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007ebe:	460c      	mov	r4, r1
 8007ec0:	2c63      	cmp	r4, #99	@ 0x63
 8007ec2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007ec6:	4631      	mov	r1, r6
 8007ec8:	dcf1      	bgt.n	8007eae <__exponent+0x1c>
 8007eca:	3130      	adds	r1, #48	@ 0x30
 8007ecc:	1e94      	subs	r4, r2, #2
 8007ece:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007ed2:	1c41      	adds	r1, r0, #1
 8007ed4:	4623      	mov	r3, r4
 8007ed6:	42ab      	cmp	r3, r5
 8007ed8:	d30a      	bcc.n	8007ef0 <__exponent+0x5e>
 8007eda:	f10d 0309 	add.w	r3, sp, #9
 8007ede:	1a9b      	subs	r3, r3, r2
 8007ee0:	42ac      	cmp	r4, r5
 8007ee2:	bf88      	it	hi
 8007ee4:	2300      	movhi	r3, #0
 8007ee6:	3302      	adds	r3, #2
 8007ee8:	4403      	add	r3, r0
 8007eea:	1a18      	subs	r0, r3, r0
 8007eec:	b003      	add	sp, #12
 8007eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ef0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007ef4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007ef8:	e7ed      	b.n	8007ed6 <__exponent+0x44>
 8007efa:	2330      	movs	r3, #48	@ 0x30
 8007efc:	3130      	adds	r1, #48	@ 0x30
 8007efe:	7083      	strb	r3, [r0, #2]
 8007f00:	70c1      	strb	r1, [r0, #3]
 8007f02:	1d03      	adds	r3, r0, #4
 8007f04:	e7f1      	b.n	8007eea <__exponent+0x58>
	...

08007f08 <_printf_float>:
 8007f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f0c:	b08d      	sub	sp, #52	@ 0x34
 8007f0e:	460c      	mov	r4, r1
 8007f10:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007f14:	4616      	mov	r6, r2
 8007f16:	461f      	mov	r7, r3
 8007f18:	4605      	mov	r5, r0
 8007f1a:	f000 fcb9 	bl	8008890 <_localeconv_r>
 8007f1e:	6803      	ldr	r3, [r0, #0]
 8007f20:	9304      	str	r3, [sp, #16]
 8007f22:	4618      	mov	r0, r3
 8007f24:	f7f8 f9cc 	bl	80002c0 <strlen>
 8007f28:	2300      	movs	r3, #0
 8007f2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f2c:	f8d8 3000 	ldr.w	r3, [r8]
 8007f30:	9005      	str	r0, [sp, #20]
 8007f32:	3307      	adds	r3, #7
 8007f34:	f023 0307 	bic.w	r3, r3, #7
 8007f38:	f103 0208 	add.w	r2, r3, #8
 8007f3c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007f40:	f8d4 b000 	ldr.w	fp, [r4]
 8007f44:	f8c8 2000 	str.w	r2, [r8]
 8007f48:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f4c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007f50:	9307      	str	r3, [sp, #28]
 8007f52:	f8cd 8018 	str.w	r8, [sp, #24]
 8007f56:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007f5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f5e:	4b9c      	ldr	r3, [pc, #624]	@ (80081d0 <_printf_float+0x2c8>)
 8007f60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007f64:	f7f8 fe0a 	bl	8000b7c <__aeabi_dcmpun>
 8007f68:	bb70      	cbnz	r0, 8007fc8 <_printf_float+0xc0>
 8007f6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f6e:	4b98      	ldr	r3, [pc, #608]	@ (80081d0 <_printf_float+0x2c8>)
 8007f70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007f74:	f7f8 fde4 	bl	8000b40 <__aeabi_dcmple>
 8007f78:	bb30      	cbnz	r0, 8007fc8 <_printf_float+0xc0>
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	4640      	mov	r0, r8
 8007f80:	4649      	mov	r1, r9
 8007f82:	f7f8 fdd3 	bl	8000b2c <__aeabi_dcmplt>
 8007f86:	b110      	cbz	r0, 8007f8e <_printf_float+0x86>
 8007f88:	232d      	movs	r3, #45	@ 0x2d
 8007f8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f8e:	4a91      	ldr	r2, [pc, #580]	@ (80081d4 <_printf_float+0x2cc>)
 8007f90:	4b91      	ldr	r3, [pc, #580]	@ (80081d8 <_printf_float+0x2d0>)
 8007f92:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007f96:	bf8c      	ite	hi
 8007f98:	4690      	movhi	r8, r2
 8007f9a:	4698      	movls	r8, r3
 8007f9c:	2303      	movs	r3, #3
 8007f9e:	6123      	str	r3, [r4, #16]
 8007fa0:	f02b 0304 	bic.w	r3, fp, #4
 8007fa4:	6023      	str	r3, [r4, #0]
 8007fa6:	f04f 0900 	mov.w	r9, #0
 8007faa:	9700      	str	r7, [sp, #0]
 8007fac:	4633      	mov	r3, r6
 8007fae:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007fb0:	4621      	mov	r1, r4
 8007fb2:	4628      	mov	r0, r5
 8007fb4:	f000 f9d2 	bl	800835c <_printf_common>
 8007fb8:	3001      	adds	r0, #1
 8007fba:	f040 808d 	bne.w	80080d8 <_printf_float+0x1d0>
 8007fbe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007fc2:	b00d      	add	sp, #52	@ 0x34
 8007fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fc8:	4642      	mov	r2, r8
 8007fca:	464b      	mov	r3, r9
 8007fcc:	4640      	mov	r0, r8
 8007fce:	4649      	mov	r1, r9
 8007fd0:	f7f8 fdd4 	bl	8000b7c <__aeabi_dcmpun>
 8007fd4:	b140      	cbz	r0, 8007fe8 <_printf_float+0xe0>
 8007fd6:	464b      	mov	r3, r9
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	bfbc      	itt	lt
 8007fdc:	232d      	movlt	r3, #45	@ 0x2d
 8007fde:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007fe2:	4a7e      	ldr	r2, [pc, #504]	@ (80081dc <_printf_float+0x2d4>)
 8007fe4:	4b7e      	ldr	r3, [pc, #504]	@ (80081e0 <_printf_float+0x2d8>)
 8007fe6:	e7d4      	b.n	8007f92 <_printf_float+0x8a>
 8007fe8:	6863      	ldr	r3, [r4, #4]
 8007fea:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007fee:	9206      	str	r2, [sp, #24]
 8007ff0:	1c5a      	adds	r2, r3, #1
 8007ff2:	d13b      	bne.n	800806c <_printf_float+0x164>
 8007ff4:	2306      	movs	r3, #6
 8007ff6:	6063      	str	r3, [r4, #4]
 8007ff8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	6022      	str	r2, [r4, #0]
 8008000:	9303      	str	r3, [sp, #12]
 8008002:	ab0a      	add	r3, sp, #40	@ 0x28
 8008004:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008008:	ab09      	add	r3, sp, #36	@ 0x24
 800800a:	9300      	str	r3, [sp, #0]
 800800c:	6861      	ldr	r1, [r4, #4]
 800800e:	ec49 8b10 	vmov	d0, r8, r9
 8008012:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008016:	4628      	mov	r0, r5
 8008018:	f7ff fed6 	bl	8007dc8 <__cvt>
 800801c:	9b06      	ldr	r3, [sp, #24]
 800801e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008020:	2b47      	cmp	r3, #71	@ 0x47
 8008022:	4680      	mov	r8, r0
 8008024:	d129      	bne.n	800807a <_printf_float+0x172>
 8008026:	1cc8      	adds	r0, r1, #3
 8008028:	db02      	blt.n	8008030 <_printf_float+0x128>
 800802a:	6863      	ldr	r3, [r4, #4]
 800802c:	4299      	cmp	r1, r3
 800802e:	dd41      	ble.n	80080b4 <_printf_float+0x1ac>
 8008030:	f1aa 0a02 	sub.w	sl, sl, #2
 8008034:	fa5f fa8a 	uxtb.w	sl, sl
 8008038:	3901      	subs	r1, #1
 800803a:	4652      	mov	r2, sl
 800803c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008040:	9109      	str	r1, [sp, #36]	@ 0x24
 8008042:	f7ff ff26 	bl	8007e92 <__exponent>
 8008046:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008048:	1813      	adds	r3, r2, r0
 800804a:	2a01      	cmp	r2, #1
 800804c:	4681      	mov	r9, r0
 800804e:	6123      	str	r3, [r4, #16]
 8008050:	dc02      	bgt.n	8008058 <_printf_float+0x150>
 8008052:	6822      	ldr	r2, [r4, #0]
 8008054:	07d2      	lsls	r2, r2, #31
 8008056:	d501      	bpl.n	800805c <_printf_float+0x154>
 8008058:	3301      	adds	r3, #1
 800805a:	6123      	str	r3, [r4, #16]
 800805c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008060:	2b00      	cmp	r3, #0
 8008062:	d0a2      	beq.n	8007faa <_printf_float+0xa2>
 8008064:	232d      	movs	r3, #45	@ 0x2d
 8008066:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800806a:	e79e      	b.n	8007faa <_printf_float+0xa2>
 800806c:	9a06      	ldr	r2, [sp, #24]
 800806e:	2a47      	cmp	r2, #71	@ 0x47
 8008070:	d1c2      	bne.n	8007ff8 <_printf_float+0xf0>
 8008072:	2b00      	cmp	r3, #0
 8008074:	d1c0      	bne.n	8007ff8 <_printf_float+0xf0>
 8008076:	2301      	movs	r3, #1
 8008078:	e7bd      	b.n	8007ff6 <_printf_float+0xee>
 800807a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800807e:	d9db      	bls.n	8008038 <_printf_float+0x130>
 8008080:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008084:	d118      	bne.n	80080b8 <_printf_float+0x1b0>
 8008086:	2900      	cmp	r1, #0
 8008088:	6863      	ldr	r3, [r4, #4]
 800808a:	dd0b      	ble.n	80080a4 <_printf_float+0x19c>
 800808c:	6121      	str	r1, [r4, #16]
 800808e:	b913      	cbnz	r3, 8008096 <_printf_float+0x18e>
 8008090:	6822      	ldr	r2, [r4, #0]
 8008092:	07d0      	lsls	r0, r2, #31
 8008094:	d502      	bpl.n	800809c <_printf_float+0x194>
 8008096:	3301      	adds	r3, #1
 8008098:	440b      	add	r3, r1
 800809a:	6123      	str	r3, [r4, #16]
 800809c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800809e:	f04f 0900 	mov.w	r9, #0
 80080a2:	e7db      	b.n	800805c <_printf_float+0x154>
 80080a4:	b913      	cbnz	r3, 80080ac <_printf_float+0x1a4>
 80080a6:	6822      	ldr	r2, [r4, #0]
 80080a8:	07d2      	lsls	r2, r2, #31
 80080aa:	d501      	bpl.n	80080b0 <_printf_float+0x1a8>
 80080ac:	3302      	adds	r3, #2
 80080ae:	e7f4      	b.n	800809a <_printf_float+0x192>
 80080b0:	2301      	movs	r3, #1
 80080b2:	e7f2      	b.n	800809a <_printf_float+0x192>
 80080b4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80080b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080ba:	4299      	cmp	r1, r3
 80080bc:	db05      	blt.n	80080ca <_printf_float+0x1c2>
 80080be:	6823      	ldr	r3, [r4, #0]
 80080c0:	6121      	str	r1, [r4, #16]
 80080c2:	07d8      	lsls	r0, r3, #31
 80080c4:	d5ea      	bpl.n	800809c <_printf_float+0x194>
 80080c6:	1c4b      	adds	r3, r1, #1
 80080c8:	e7e7      	b.n	800809a <_printf_float+0x192>
 80080ca:	2900      	cmp	r1, #0
 80080cc:	bfd4      	ite	le
 80080ce:	f1c1 0202 	rsble	r2, r1, #2
 80080d2:	2201      	movgt	r2, #1
 80080d4:	4413      	add	r3, r2
 80080d6:	e7e0      	b.n	800809a <_printf_float+0x192>
 80080d8:	6823      	ldr	r3, [r4, #0]
 80080da:	055a      	lsls	r2, r3, #21
 80080dc:	d407      	bmi.n	80080ee <_printf_float+0x1e6>
 80080de:	6923      	ldr	r3, [r4, #16]
 80080e0:	4642      	mov	r2, r8
 80080e2:	4631      	mov	r1, r6
 80080e4:	4628      	mov	r0, r5
 80080e6:	47b8      	blx	r7
 80080e8:	3001      	adds	r0, #1
 80080ea:	d12b      	bne.n	8008144 <_printf_float+0x23c>
 80080ec:	e767      	b.n	8007fbe <_printf_float+0xb6>
 80080ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80080f2:	f240 80dd 	bls.w	80082b0 <_printf_float+0x3a8>
 80080f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80080fa:	2200      	movs	r2, #0
 80080fc:	2300      	movs	r3, #0
 80080fe:	f7f8 fd0b 	bl	8000b18 <__aeabi_dcmpeq>
 8008102:	2800      	cmp	r0, #0
 8008104:	d033      	beq.n	800816e <_printf_float+0x266>
 8008106:	4a37      	ldr	r2, [pc, #220]	@ (80081e4 <_printf_float+0x2dc>)
 8008108:	2301      	movs	r3, #1
 800810a:	4631      	mov	r1, r6
 800810c:	4628      	mov	r0, r5
 800810e:	47b8      	blx	r7
 8008110:	3001      	adds	r0, #1
 8008112:	f43f af54 	beq.w	8007fbe <_printf_float+0xb6>
 8008116:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800811a:	4543      	cmp	r3, r8
 800811c:	db02      	blt.n	8008124 <_printf_float+0x21c>
 800811e:	6823      	ldr	r3, [r4, #0]
 8008120:	07d8      	lsls	r0, r3, #31
 8008122:	d50f      	bpl.n	8008144 <_printf_float+0x23c>
 8008124:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008128:	4631      	mov	r1, r6
 800812a:	4628      	mov	r0, r5
 800812c:	47b8      	blx	r7
 800812e:	3001      	adds	r0, #1
 8008130:	f43f af45 	beq.w	8007fbe <_printf_float+0xb6>
 8008134:	f04f 0900 	mov.w	r9, #0
 8008138:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800813c:	f104 0a1a 	add.w	sl, r4, #26
 8008140:	45c8      	cmp	r8, r9
 8008142:	dc09      	bgt.n	8008158 <_printf_float+0x250>
 8008144:	6823      	ldr	r3, [r4, #0]
 8008146:	079b      	lsls	r3, r3, #30
 8008148:	f100 8103 	bmi.w	8008352 <_printf_float+0x44a>
 800814c:	68e0      	ldr	r0, [r4, #12]
 800814e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008150:	4298      	cmp	r0, r3
 8008152:	bfb8      	it	lt
 8008154:	4618      	movlt	r0, r3
 8008156:	e734      	b.n	8007fc2 <_printf_float+0xba>
 8008158:	2301      	movs	r3, #1
 800815a:	4652      	mov	r2, sl
 800815c:	4631      	mov	r1, r6
 800815e:	4628      	mov	r0, r5
 8008160:	47b8      	blx	r7
 8008162:	3001      	adds	r0, #1
 8008164:	f43f af2b 	beq.w	8007fbe <_printf_float+0xb6>
 8008168:	f109 0901 	add.w	r9, r9, #1
 800816c:	e7e8      	b.n	8008140 <_printf_float+0x238>
 800816e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008170:	2b00      	cmp	r3, #0
 8008172:	dc39      	bgt.n	80081e8 <_printf_float+0x2e0>
 8008174:	4a1b      	ldr	r2, [pc, #108]	@ (80081e4 <_printf_float+0x2dc>)
 8008176:	2301      	movs	r3, #1
 8008178:	4631      	mov	r1, r6
 800817a:	4628      	mov	r0, r5
 800817c:	47b8      	blx	r7
 800817e:	3001      	adds	r0, #1
 8008180:	f43f af1d 	beq.w	8007fbe <_printf_float+0xb6>
 8008184:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008188:	ea59 0303 	orrs.w	r3, r9, r3
 800818c:	d102      	bne.n	8008194 <_printf_float+0x28c>
 800818e:	6823      	ldr	r3, [r4, #0]
 8008190:	07d9      	lsls	r1, r3, #31
 8008192:	d5d7      	bpl.n	8008144 <_printf_float+0x23c>
 8008194:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008198:	4631      	mov	r1, r6
 800819a:	4628      	mov	r0, r5
 800819c:	47b8      	blx	r7
 800819e:	3001      	adds	r0, #1
 80081a0:	f43f af0d 	beq.w	8007fbe <_printf_float+0xb6>
 80081a4:	f04f 0a00 	mov.w	sl, #0
 80081a8:	f104 0b1a 	add.w	fp, r4, #26
 80081ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081ae:	425b      	negs	r3, r3
 80081b0:	4553      	cmp	r3, sl
 80081b2:	dc01      	bgt.n	80081b8 <_printf_float+0x2b0>
 80081b4:	464b      	mov	r3, r9
 80081b6:	e793      	b.n	80080e0 <_printf_float+0x1d8>
 80081b8:	2301      	movs	r3, #1
 80081ba:	465a      	mov	r2, fp
 80081bc:	4631      	mov	r1, r6
 80081be:	4628      	mov	r0, r5
 80081c0:	47b8      	blx	r7
 80081c2:	3001      	adds	r0, #1
 80081c4:	f43f aefb 	beq.w	8007fbe <_printf_float+0xb6>
 80081c8:	f10a 0a01 	add.w	sl, sl, #1
 80081cc:	e7ee      	b.n	80081ac <_printf_float+0x2a4>
 80081ce:	bf00      	nop
 80081d0:	7fefffff 	.word	0x7fefffff
 80081d4:	0800a71c 	.word	0x0800a71c
 80081d8:	0800a718 	.word	0x0800a718
 80081dc:	0800a724 	.word	0x0800a724
 80081e0:	0800a720 	.word	0x0800a720
 80081e4:	0800a728 	.word	0x0800a728
 80081e8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80081ea:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80081ee:	4553      	cmp	r3, sl
 80081f0:	bfa8      	it	ge
 80081f2:	4653      	movge	r3, sl
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	4699      	mov	r9, r3
 80081f8:	dc36      	bgt.n	8008268 <_printf_float+0x360>
 80081fa:	f04f 0b00 	mov.w	fp, #0
 80081fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008202:	f104 021a 	add.w	r2, r4, #26
 8008206:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008208:	9306      	str	r3, [sp, #24]
 800820a:	eba3 0309 	sub.w	r3, r3, r9
 800820e:	455b      	cmp	r3, fp
 8008210:	dc31      	bgt.n	8008276 <_printf_float+0x36e>
 8008212:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008214:	459a      	cmp	sl, r3
 8008216:	dc3a      	bgt.n	800828e <_printf_float+0x386>
 8008218:	6823      	ldr	r3, [r4, #0]
 800821a:	07da      	lsls	r2, r3, #31
 800821c:	d437      	bmi.n	800828e <_printf_float+0x386>
 800821e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008220:	ebaa 0903 	sub.w	r9, sl, r3
 8008224:	9b06      	ldr	r3, [sp, #24]
 8008226:	ebaa 0303 	sub.w	r3, sl, r3
 800822a:	4599      	cmp	r9, r3
 800822c:	bfa8      	it	ge
 800822e:	4699      	movge	r9, r3
 8008230:	f1b9 0f00 	cmp.w	r9, #0
 8008234:	dc33      	bgt.n	800829e <_printf_float+0x396>
 8008236:	f04f 0800 	mov.w	r8, #0
 800823a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800823e:	f104 0b1a 	add.w	fp, r4, #26
 8008242:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008244:	ebaa 0303 	sub.w	r3, sl, r3
 8008248:	eba3 0309 	sub.w	r3, r3, r9
 800824c:	4543      	cmp	r3, r8
 800824e:	f77f af79 	ble.w	8008144 <_printf_float+0x23c>
 8008252:	2301      	movs	r3, #1
 8008254:	465a      	mov	r2, fp
 8008256:	4631      	mov	r1, r6
 8008258:	4628      	mov	r0, r5
 800825a:	47b8      	blx	r7
 800825c:	3001      	adds	r0, #1
 800825e:	f43f aeae 	beq.w	8007fbe <_printf_float+0xb6>
 8008262:	f108 0801 	add.w	r8, r8, #1
 8008266:	e7ec      	b.n	8008242 <_printf_float+0x33a>
 8008268:	4642      	mov	r2, r8
 800826a:	4631      	mov	r1, r6
 800826c:	4628      	mov	r0, r5
 800826e:	47b8      	blx	r7
 8008270:	3001      	adds	r0, #1
 8008272:	d1c2      	bne.n	80081fa <_printf_float+0x2f2>
 8008274:	e6a3      	b.n	8007fbe <_printf_float+0xb6>
 8008276:	2301      	movs	r3, #1
 8008278:	4631      	mov	r1, r6
 800827a:	4628      	mov	r0, r5
 800827c:	9206      	str	r2, [sp, #24]
 800827e:	47b8      	blx	r7
 8008280:	3001      	adds	r0, #1
 8008282:	f43f ae9c 	beq.w	8007fbe <_printf_float+0xb6>
 8008286:	9a06      	ldr	r2, [sp, #24]
 8008288:	f10b 0b01 	add.w	fp, fp, #1
 800828c:	e7bb      	b.n	8008206 <_printf_float+0x2fe>
 800828e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008292:	4631      	mov	r1, r6
 8008294:	4628      	mov	r0, r5
 8008296:	47b8      	blx	r7
 8008298:	3001      	adds	r0, #1
 800829a:	d1c0      	bne.n	800821e <_printf_float+0x316>
 800829c:	e68f      	b.n	8007fbe <_printf_float+0xb6>
 800829e:	9a06      	ldr	r2, [sp, #24]
 80082a0:	464b      	mov	r3, r9
 80082a2:	4442      	add	r2, r8
 80082a4:	4631      	mov	r1, r6
 80082a6:	4628      	mov	r0, r5
 80082a8:	47b8      	blx	r7
 80082aa:	3001      	adds	r0, #1
 80082ac:	d1c3      	bne.n	8008236 <_printf_float+0x32e>
 80082ae:	e686      	b.n	8007fbe <_printf_float+0xb6>
 80082b0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80082b4:	f1ba 0f01 	cmp.w	sl, #1
 80082b8:	dc01      	bgt.n	80082be <_printf_float+0x3b6>
 80082ba:	07db      	lsls	r3, r3, #31
 80082bc:	d536      	bpl.n	800832c <_printf_float+0x424>
 80082be:	2301      	movs	r3, #1
 80082c0:	4642      	mov	r2, r8
 80082c2:	4631      	mov	r1, r6
 80082c4:	4628      	mov	r0, r5
 80082c6:	47b8      	blx	r7
 80082c8:	3001      	adds	r0, #1
 80082ca:	f43f ae78 	beq.w	8007fbe <_printf_float+0xb6>
 80082ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082d2:	4631      	mov	r1, r6
 80082d4:	4628      	mov	r0, r5
 80082d6:	47b8      	blx	r7
 80082d8:	3001      	adds	r0, #1
 80082da:	f43f ae70 	beq.w	8007fbe <_printf_float+0xb6>
 80082de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80082e2:	2200      	movs	r2, #0
 80082e4:	2300      	movs	r3, #0
 80082e6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80082ea:	f7f8 fc15 	bl	8000b18 <__aeabi_dcmpeq>
 80082ee:	b9c0      	cbnz	r0, 8008322 <_printf_float+0x41a>
 80082f0:	4653      	mov	r3, sl
 80082f2:	f108 0201 	add.w	r2, r8, #1
 80082f6:	4631      	mov	r1, r6
 80082f8:	4628      	mov	r0, r5
 80082fa:	47b8      	blx	r7
 80082fc:	3001      	adds	r0, #1
 80082fe:	d10c      	bne.n	800831a <_printf_float+0x412>
 8008300:	e65d      	b.n	8007fbe <_printf_float+0xb6>
 8008302:	2301      	movs	r3, #1
 8008304:	465a      	mov	r2, fp
 8008306:	4631      	mov	r1, r6
 8008308:	4628      	mov	r0, r5
 800830a:	47b8      	blx	r7
 800830c:	3001      	adds	r0, #1
 800830e:	f43f ae56 	beq.w	8007fbe <_printf_float+0xb6>
 8008312:	f108 0801 	add.w	r8, r8, #1
 8008316:	45d0      	cmp	r8, sl
 8008318:	dbf3      	blt.n	8008302 <_printf_float+0x3fa>
 800831a:	464b      	mov	r3, r9
 800831c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008320:	e6df      	b.n	80080e2 <_printf_float+0x1da>
 8008322:	f04f 0800 	mov.w	r8, #0
 8008326:	f104 0b1a 	add.w	fp, r4, #26
 800832a:	e7f4      	b.n	8008316 <_printf_float+0x40e>
 800832c:	2301      	movs	r3, #1
 800832e:	4642      	mov	r2, r8
 8008330:	e7e1      	b.n	80082f6 <_printf_float+0x3ee>
 8008332:	2301      	movs	r3, #1
 8008334:	464a      	mov	r2, r9
 8008336:	4631      	mov	r1, r6
 8008338:	4628      	mov	r0, r5
 800833a:	47b8      	blx	r7
 800833c:	3001      	adds	r0, #1
 800833e:	f43f ae3e 	beq.w	8007fbe <_printf_float+0xb6>
 8008342:	f108 0801 	add.w	r8, r8, #1
 8008346:	68e3      	ldr	r3, [r4, #12]
 8008348:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800834a:	1a5b      	subs	r3, r3, r1
 800834c:	4543      	cmp	r3, r8
 800834e:	dcf0      	bgt.n	8008332 <_printf_float+0x42a>
 8008350:	e6fc      	b.n	800814c <_printf_float+0x244>
 8008352:	f04f 0800 	mov.w	r8, #0
 8008356:	f104 0919 	add.w	r9, r4, #25
 800835a:	e7f4      	b.n	8008346 <_printf_float+0x43e>

0800835c <_printf_common>:
 800835c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008360:	4616      	mov	r6, r2
 8008362:	4698      	mov	r8, r3
 8008364:	688a      	ldr	r2, [r1, #8]
 8008366:	690b      	ldr	r3, [r1, #16]
 8008368:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800836c:	4293      	cmp	r3, r2
 800836e:	bfb8      	it	lt
 8008370:	4613      	movlt	r3, r2
 8008372:	6033      	str	r3, [r6, #0]
 8008374:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008378:	4607      	mov	r7, r0
 800837a:	460c      	mov	r4, r1
 800837c:	b10a      	cbz	r2, 8008382 <_printf_common+0x26>
 800837e:	3301      	adds	r3, #1
 8008380:	6033      	str	r3, [r6, #0]
 8008382:	6823      	ldr	r3, [r4, #0]
 8008384:	0699      	lsls	r1, r3, #26
 8008386:	bf42      	ittt	mi
 8008388:	6833      	ldrmi	r3, [r6, #0]
 800838a:	3302      	addmi	r3, #2
 800838c:	6033      	strmi	r3, [r6, #0]
 800838e:	6825      	ldr	r5, [r4, #0]
 8008390:	f015 0506 	ands.w	r5, r5, #6
 8008394:	d106      	bne.n	80083a4 <_printf_common+0x48>
 8008396:	f104 0a19 	add.w	sl, r4, #25
 800839a:	68e3      	ldr	r3, [r4, #12]
 800839c:	6832      	ldr	r2, [r6, #0]
 800839e:	1a9b      	subs	r3, r3, r2
 80083a0:	42ab      	cmp	r3, r5
 80083a2:	dc26      	bgt.n	80083f2 <_printf_common+0x96>
 80083a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80083a8:	6822      	ldr	r2, [r4, #0]
 80083aa:	3b00      	subs	r3, #0
 80083ac:	bf18      	it	ne
 80083ae:	2301      	movne	r3, #1
 80083b0:	0692      	lsls	r2, r2, #26
 80083b2:	d42b      	bmi.n	800840c <_printf_common+0xb0>
 80083b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80083b8:	4641      	mov	r1, r8
 80083ba:	4638      	mov	r0, r7
 80083bc:	47c8      	blx	r9
 80083be:	3001      	adds	r0, #1
 80083c0:	d01e      	beq.n	8008400 <_printf_common+0xa4>
 80083c2:	6823      	ldr	r3, [r4, #0]
 80083c4:	6922      	ldr	r2, [r4, #16]
 80083c6:	f003 0306 	and.w	r3, r3, #6
 80083ca:	2b04      	cmp	r3, #4
 80083cc:	bf02      	ittt	eq
 80083ce:	68e5      	ldreq	r5, [r4, #12]
 80083d0:	6833      	ldreq	r3, [r6, #0]
 80083d2:	1aed      	subeq	r5, r5, r3
 80083d4:	68a3      	ldr	r3, [r4, #8]
 80083d6:	bf0c      	ite	eq
 80083d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083dc:	2500      	movne	r5, #0
 80083de:	4293      	cmp	r3, r2
 80083e0:	bfc4      	itt	gt
 80083e2:	1a9b      	subgt	r3, r3, r2
 80083e4:	18ed      	addgt	r5, r5, r3
 80083e6:	2600      	movs	r6, #0
 80083e8:	341a      	adds	r4, #26
 80083ea:	42b5      	cmp	r5, r6
 80083ec:	d11a      	bne.n	8008424 <_printf_common+0xc8>
 80083ee:	2000      	movs	r0, #0
 80083f0:	e008      	b.n	8008404 <_printf_common+0xa8>
 80083f2:	2301      	movs	r3, #1
 80083f4:	4652      	mov	r2, sl
 80083f6:	4641      	mov	r1, r8
 80083f8:	4638      	mov	r0, r7
 80083fa:	47c8      	blx	r9
 80083fc:	3001      	adds	r0, #1
 80083fe:	d103      	bne.n	8008408 <_printf_common+0xac>
 8008400:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008408:	3501      	adds	r5, #1
 800840a:	e7c6      	b.n	800839a <_printf_common+0x3e>
 800840c:	18e1      	adds	r1, r4, r3
 800840e:	1c5a      	adds	r2, r3, #1
 8008410:	2030      	movs	r0, #48	@ 0x30
 8008412:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008416:	4422      	add	r2, r4
 8008418:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800841c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008420:	3302      	adds	r3, #2
 8008422:	e7c7      	b.n	80083b4 <_printf_common+0x58>
 8008424:	2301      	movs	r3, #1
 8008426:	4622      	mov	r2, r4
 8008428:	4641      	mov	r1, r8
 800842a:	4638      	mov	r0, r7
 800842c:	47c8      	blx	r9
 800842e:	3001      	adds	r0, #1
 8008430:	d0e6      	beq.n	8008400 <_printf_common+0xa4>
 8008432:	3601      	adds	r6, #1
 8008434:	e7d9      	b.n	80083ea <_printf_common+0x8e>
	...

08008438 <_printf_i>:
 8008438:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800843c:	7e0f      	ldrb	r7, [r1, #24]
 800843e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008440:	2f78      	cmp	r7, #120	@ 0x78
 8008442:	4691      	mov	r9, r2
 8008444:	4680      	mov	r8, r0
 8008446:	460c      	mov	r4, r1
 8008448:	469a      	mov	sl, r3
 800844a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800844e:	d807      	bhi.n	8008460 <_printf_i+0x28>
 8008450:	2f62      	cmp	r7, #98	@ 0x62
 8008452:	d80a      	bhi.n	800846a <_printf_i+0x32>
 8008454:	2f00      	cmp	r7, #0
 8008456:	f000 80d1 	beq.w	80085fc <_printf_i+0x1c4>
 800845a:	2f58      	cmp	r7, #88	@ 0x58
 800845c:	f000 80b8 	beq.w	80085d0 <_printf_i+0x198>
 8008460:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008464:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008468:	e03a      	b.n	80084e0 <_printf_i+0xa8>
 800846a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800846e:	2b15      	cmp	r3, #21
 8008470:	d8f6      	bhi.n	8008460 <_printf_i+0x28>
 8008472:	a101      	add	r1, pc, #4	@ (adr r1, 8008478 <_printf_i+0x40>)
 8008474:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008478:	080084d1 	.word	0x080084d1
 800847c:	080084e5 	.word	0x080084e5
 8008480:	08008461 	.word	0x08008461
 8008484:	08008461 	.word	0x08008461
 8008488:	08008461 	.word	0x08008461
 800848c:	08008461 	.word	0x08008461
 8008490:	080084e5 	.word	0x080084e5
 8008494:	08008461 	.word	0x08008461
 8008498:	08008461 	.word	0x08008461
 800849c:	08008461 	.word	0x08008461
 80084a0:	08008461 	.word	0x08008461
 80084a4:	080085e3 	.word	0x080085e3
 80084a8:	0800850f 	.word	0x0800850f
 80084ac:	0800859d 	.word	0x0800859d
 80084b0:	08008461 	.word	0x08008461
 80084b4:	08008461 	.word	0x08008461
 80084b8:	08008605 	.word	0x08008605
 80084bc:	08008461 	.word	0x08008461
 80084c0:	0800850f 	.word	0x0800850f
 80084c4:	08008461 	.word	0x08008461
 80084c8:	08008461 	.word	0x08008461
 80084cc:	080085a5 	.word	0x080085a5
 80084d0:	6833      	ldr	r3, [r6, #0]
 80084d2:	1d1a      	adds	r2, r3, #4
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	6032      	str	r2, [r6, #0]
 80084d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80084dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80084e0:	2301      	movs	r3, #1
 80084e2:	e09c      	b.n	800861e <_printf_i+0x1e6>
 80084e4:	6833      	ldr	r3, [r6, #0]
 80084e6:	6820      	ldr	r0, [r4, #0]
 80084e8:	1d19      	adds	r1, r3, #4
 80084ea:	6031      	str	r1, [r6, #0]
 80084ec:	0606      	lsls	r6, r0, #24
 80084ee:	d501      	bpl.n	80084f4 <_printf_i+0xbc>
 80084f0:	681d      	ldr	r5, [r3, #0]
 80084f2:	e003      	b.n	80084fc <_printf_i+0xc4>
 80084f4:	0645      	lsls	r5, r0, #25
 80084f6:	d5fb      	bpl.n	80084f0 <_printf_i+0xb8>
 80084f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80084fc:	2d00      	cmp	r5, #0
 80084fe:	da03      	bge.n	8008508 <_printf_i+0xd0>
 8008500:	232d      	movs	r3, #45	@ 0x2d
 8008502:	426d      	negs	r5, r5
 8008504:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008508:	4858      	ldr	r0, [pc, #352]	@ (800866c <_printf_i+0x234>)
 800850a:	230a      	movs	r3, #10
 800850c:	e011      	b.n	8008532 <_printf_i+0xfa>
 800850e:	6821      	ldr	r1, [r4, #0]
 8008510:	6833      	ldr	r3, [r6, #0]
 8008512:	0608      	lsls	r0, r1, #24
 8008514:	f853 5b04 	ldr.w	r5, [r3], #4
 8008518:	d402      	bmi.n	8008520 <_printf_i+0xe8>
 800851a:	0649      	lsls	r1, r1, #25
 800851c:	bf48      	it	mi
 800851e:	b2ad      	uxthmi	r5, r5
 8008520:	2f6f      	cmp	r7, #111	@ 0x6f
 8008522:	4852      	ldr	r0, [pc, #328]	@ (800866c <_printf_i+0x234>)
 8008524:	6033      	str	r3, [r6, #0]
 8008526:	bf14      	ite	ne
 8008528:	230a      	movne	r3, #10
 800852a:	2308      	moveq	r3, #8
 800852c:	2100      	movs	r1, #0
 800852e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008532:	6866      	ldr	r6, [r4, #4]
 8008534:	60a6      	str	r6, [r4, #8]
 8008536:	2e00      	cmp	r6, #0
 8008538:	db05      	blt.n	8008546 <_printf_i+0x10e>
 800853a:	6821      	ldr	r1, [r4, #0]
 800853c:	432e      	orrs	r6, r5
 800853e:	f021 0104 	bic.w	r1, r1, #4
 8008542:	6021      	str	r1, [r4, #0]
 8008544:	d04b      	beq.n	80085de <_printf_i+0x1a6>
 8008546:	4616      	mov	r6, r2
 8008548:	fbb5 f1f3 	udiv	r1, r5, r3
 800854c:	fb03 5711 	mls	r7, r3, r1, r5
 8008550:	5dc7      	ldrb	r7, [r0, r7]
 8008552:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008556:	462f      	mov	r7, r5
 8008558:	42bb      	cmp	r3, r7
 800855a:	460d      	mov	r5, r1
 800855c:	d9f4      	bls.n	8008548 <_printf_i+0x110>
 800855e:	2b08      	cmp	r3, #8
 8008560:	d10b      	bne.n	800857a <_printf_i+0x142>
 8008562:	6823      	ldr	r3, [r4, #0]
 8008564:	07df      	lsls	r7, r3, #31
 8008566:	d508      	bpl.n	800857a <_printf_i+0x142>
 8008568:	6923      	ldr	r3, [r4, #16]
 800856a:	6861      	ldr	r1, [r4, #4]
 800856c:	4299      	cmp	r1, r3
 800856e:	bfde      	ittt	le
 8008570:	2330      	movle	r3, #48	@ 0x30
 8008572:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008576:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800857a:	1b92      	subs	r2, r2, r6
 800857c:	6122      	str	r2, [r4, #16]
 800857e:	f8cd a000 	str.w	sl, [sp]
 8008582:	464b      	mov	r3, r9
 8008584:	aa03      	add	r2, sp, #12
 8008586:	4621      	mov	r1, r4
 8008588:	4640      	mov	r0, r8
 800858a:	f7ff fee7 	bl	800835c <_printf_common>
 800858e:	3001      	adds	r0, #1
 8008590:	d14a      	bne.n	8008628 <_printf_i+0x1f0>
 8008592:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008596:	b004      	add	sp, #16
 8008598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800859c:	6823      	ldr	r3, [r4, #0]
 800859e:	f043 0320 	orr.w	r3, r3, #32
 80085a2:	6023      	str	r3, [r4, #0]
 80085a4:	4832      	ldr	r0, [pc, #200]	@ (8008670 <_printf_i+0x238>)
 80085a6:	2778      	movs	r7, #120	@ 0x78
 80085a8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80085ac:	6823      	ldr	r3, [r4, #0]
 80085ae:	6831      	ldr	r1, [r6, #0]
 80085b0:	061f      	lsls	r7, r3, #24
 80085b2:	f851 5b04 	ldr.w	r5, [r1], #4
 80085b6:	d402      	bmi.n	80085be <_printf_i+0x186>
 80085b8:	065f      	lsls	r7, r3, #25
 80085ba:	bf48      	it	mi
 80085bc:	b2ad      	uxthmi	r5, r5
 80085be:	6031      	str	r1, [r6, #0]
 80085c0:	07d9      	lsls	r1, r3, #31
 80085c2:	bf44      	itt	mi
 80085c4:	f043 0320 	orrmi.w	r3, r3, #32
 80085c8:	6023      	strmi	r3, [r4, #0]
 80085ca:	b11d      	cbz	r5, 80085d4 <_printf_i+0x19c>
 80085cc:	2310      	movs	r3, #16
 80085ce:	e7ad      	b.n	800852c <_printf_i+0xf4>
 80085d0:	4826      	ldr	r0, [pc, #152]	@ (800866c <_printf_i+0x234>)
 80085d2:	e7e9      	b.n	80085a8 <_printf_i+0x170>
 80085d4:	6823      	ldr	r3, [r4, #0]
 80085d6:	f023 0320 	bic.w	r3, r3, #32
 80085da:	6023      	str	r3, [r4, #0]
 80085dc:	e7f6      	b.n	80085cc <_printf_i+0x194>
 80085de:	4616      	mov	r6, r2
 80085e0:	e7bd      	b.n	800855e <_printf_i+0x126>
 80085e2:	6833      	ldr	r3, [r6, #0]
 80085e4:	6825      	ldr	r5, [r4, #0]
 80085e6:	6961      	ldr	r1, [r4, #20]
 80085e8:	1d18      	adds	r0, r3, #4
 80085ea:	6030      	str	r0, [r6, #0]
 80085ec:	062e      	lsls	r6, r5, #24
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	d501      	bpl.n	80085f6 <_printf_i+0x1be>
 80085f2:	6019      	str	r1, [r3, #0]
 80085f4:	e002      	b.n	80085fc <_printf_i+0x1c4>
 80085f6:	0668      	lsls	r0, r5, #25
 80085f8:	d5fb      	bpl.n	80085f2 <_printf_i+0x1ba>
 80085fa:	8019      	strh	r1, [r3, #0]
 80085fc:	2300      	movs	r3, #0
 80085fe:	6123      	str	r3, [r4, #16]
 8008600:	4616      	mov	r6, r2
 8008602:	e7bc      	b.n	800857e <_printf_i+0x146>
 8008604:	6833      	ldr	r3, [r6, #0]
 8008606:	1d1a      	adds	r2, r3, #4
 8008608:	6032      	str	r2, [r6, #0]
 800860a:	681e      	ldr	r6, [r3, #0]
 800860c:	6862      	ldr	r2, [r4, #4]
 800860e:	2100      	movs	r1, #0
 8008610:	4630      	mov	r0, r6
 8008612:	f7f7 fe05 	bl	8000220 <memchr>
 8008616:	b108      	cbz	r0, 800861c <_printf_i+0x1e4>
 8008618:	1b80      	subs	r0, r0, r6
 800861a:	6060      	str	r0, [r4, #4]
 800861c:	6863      	ldr	r3, [r4, #4]
 800861e:	6123      	str	r3, [r4, #16]
 8008620:	2300      	movs	r3, #0
 8008622:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008626:	e7aa      	b.n	800857e <_printf_i+0x146>
 8008628:	6923      	ldr	r3, [r4, #16]
 800862a:	4632      	mov	r2, r6
 800862c:	4649      	mov	r1, r9
 800862e:	4640      	mov	r0, r8
 8008630:	47d0      	blx	sl
 8008632:	3001      	adds	r0, #1
 8008634:	d0ad      	beq.n	8008592 <_printf_i+0x15a>
 8008636:	6823      	ldr	r3, [r4, #0]
 8008638:	079b      	lsls	r3, r3, #30
 800863a:	d413      	bmi.n	8008664 <_printf_i+0x22c>
 800863c:	68e0      	ldr	r0, [r4, #12]
 800863e:	9b03      	ldr	r3, [sp, #12]
 8008640:	4298      	cmp	r0, r3
 8008642:	bfb8      	it	lt
 8008644:	4618      	movlt	r0, r3
 8008646:	e7a6      	b.n	8008596 <_printf_i+0x15e>
 8008648:	2301      	movs	r3, #1
 800864a:	4632      	mov	r2, r6
 800864c:	4649      	mov	r1, r9
 800864e:	4640      	mov	r0, r8
 8008650:	47d0      	blx	sl
 8008652:	3001      	adds	r0, #1
 8008654:	d09d      	beq.n	8008592 <_printf_i+0x15a>
 8008656:	3501      	adds	r5, #1
 8008658:	68e3      	ldr	r3, [r4, #12]
 800865a:	9903      	ldr	r1, [sp, #12]
 800865c:	1a5b      	subs	r3, r3, r1
 800865e:	42ab      	cmp	r3, r5
 8008660:	dcf2      	bgt.n	8008648 <_printf_i+0x210>
 8008662:	e7eb      	b.n	800863c <_printf_i+0x204>
 8008664:	2500      	movs	r5, #0
 8008666:	f104 0619 	add.w	r6, r4, #25
 800866a:	e7f5      	b.n	8008658 <_printf_i+0x220>
 800866c:	0800a72a 	.word	0x0800a72a
 8008670:	0800a73b 	.word	0x0800a73b

08008674 <std>:
 8008674:	2300      	movs	r3, #0
 8008676:	b510      	push	{r4, lr}
 8008678:	4604      	mov	r4, r0
 800867a:	e9c0 3300 	strd	r3, r3, [r0]
 800867e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008682:	6083      	str	r3, [r0, #8]
 8008684:	8181      	strh	r1, [r0, #12]
 8008686:	6643      	str	r3, [r0, #100]	@ 0x64
 8008688:	81c2      	strh	r2, [r0, #14]
 800868a:	6183      	str	r3, [r0, #24]
 800868c:	4619      	mov	r1, r3
 800868e:	2208      	movs	r2, #8
 8008690:	305c      	adds	r0, #92	@ 0x5c
 8008692:	f000 f8f4 	bl	800887e <memset>
 8008696:	4b0d      	ldr	r3, [pc, #52]	@ (80086cc <std+0x58>)
 8008698:	6263      	str	r3, [r4, #36]	@ 0x24
 800869a:	4b0d      	ldr	r3, [pc, #52]	@ (80086d0 <std+0x5c>)
 800869c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800869e:	4b0d      	ldr	r3, [pc, #52]	@ (80086d4 <std+0x60>)
 80086a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80086a2:	4b0d      	ldr	r3, [pc, #52]	@ (80086d8 <std+0x64>)
 80086a4:	6323      	str	r3, [r4, #48]	@ 0x30
 80086a6:	4b0d      	ldr	r3, [pc, #52]	@ (80086dc <std+0x68>)
 80086a8:	6224      	str	r4, [r4, #32]
 80086aa:	429c      	cmp	r4, r3
 80086ac:	d006      	beq.n	80086bc <std+0x48>
 80086ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80086b2:	4294      	cmp	r4, r2
 80086b4:	d002      	beq.n	80086bc <std+0x48>
 80086b6:	33d0      	adds	r3, #208	@ 0xd0
 80086b8:	429c      	cmp	r4, r3
 80086ba:	d105      	bne.n	80086c8 <std+0x54>
 80086bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80086c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086c4:	f000 b958 	b.w	8008978 <__retarget_lock_init_recursive>
 80086c8:	bd10      	pop	{r4, pc}
 80086ca:	bf00      	nop
 80086cc:	080087f9 	.word	0x080087f9
 80086d0:	0800881b 	.word	0x0800881b
 80086d4:	08008853 	.word	0x08008853
 80086d8:	08008877 	.word	0x08008877
 80086dc:	2000065c 	.word	0x2000065c

080086e0 <stdio_exit_handler>:
 80086e0:	4a02      	ldr	r2, [pc, #8]	@ (80086ec <stdio_exit_handler+0xc>)
 80086e2:	4903      	ldr	r1, [pc, #12]	@ (80086f0 <stdio_exit_handler+0x10>)
 80086e4:	4803      	ldr	r0, [pc, #12]	@ (80086f4 <stdio_exit_handler+0x14>)
 80086e6:	f000 b869 	b.w	80087bc <_fwalk_sglue>
 80086ea:	bf00      	nop
 80086ec:	20000058 	.word	0x20000058
 80086f0:	0800a04d 	.word	0x0800a04d
 80086f4:	20000068 	.word	0x20000068

080086f8 <cleanup_stdio>:
 80086f8:	6841      	ldr	r1, [r0, #4]
 80086fa:	4b0c      	ldr	r3, [pc, #48]	@ (800872c <cleanup_stdio+0x34>)
 80086fc:	4299      	cmp	r1, r3
 80086fe:	b510      	push	{r4, lr}
 8008700:	4604      	mov	r4, r0
 8008702:	d001      	beq.n	8008708 <cleanup_stdio+0x10>
 8008704:	f001 fca2 	bl	800a04c <_fflush_r>
 8008708:	68a1      	ldr	r1, [r4, #8]
 800870a:	4b09      	ldr	r3, [pc, #36]	@ (8008730 <cleanup_stdio+0x38>)
 800870c:	4299      	cmp	r1, r3
 800870e:	d002      	beq.n	8008716 <cleanup_stdio+0x1e>
 8008710:	4620      	mov	r0, r4
 8008712:	f001 fc9b 	bl	800a04c <_fflush_r>
 8008716:	68e1      	ldr	r1, [r4, #12]
 8008718:	4b06      	ldr	r3, [pc, #24]	@ (8008734 <cleanup_stdio+0x3c>)
 800871a:	4299      	cmp	r1, r3
 800871c:	d004      	beq.n	8008728 <cleanup_stdio+0x30>
 800871e:	4620      	mov	r0, r4
 8008720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008724:	f001 bc92 	b.w	800a04c <_fflush_r>
 8008728:	bd10      	pop	{r4, pc}
 800872a:	bf00      	nop
 800872c:	2000065c 	.word	0x2000065c
 8008730:	200006c4 	.word	0x200006c4
 8008734:	2000072c 	.word	0x2000072c

08008738 <global_stdio_init.part.0>:
 8008738:	b510      	push	{r4, lr}
 800873a:	4b0b      	ldr	r3, [pc, #44]	@ (8008768 <global_stdio_init.part.0+0x30>)
 800873c:	4c0b      	ldr	r4, [pc, #44]	@ (800876c <global_stdio_init.part.0+0x34>)
 800873e:	4a0c      	ldr	r2, [pc, #48]	@ (8008770 <global_stdio_init.part.0+0x38>)
 8008740:	601a      	str	r2, [r3, #0]
 8008742:	4620      	mov	r0, r4
 8008744:	2200      	movs	r2, #0
 8008746:	2104      	movs	r1, #4
 8008748:	f7ff ff94 	bl	8008674 <std>
 800874c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008750:	2201      	movs	r2, #1
 8008752:	2109      	movs	r1, #9
 8008754:	f7ff ff8e 	bl	8008674 <std>
 8008758:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800875c:	2202      	movs	r2, #2
 800875e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008762:	2112      	movs	r1, #18
 8008764:	f7ff bf86 	b.w	8008674 <std>
 8008768:	20000794 	.word	0x20000794
 800876c:	2000065c 	.word	0x2000065c
 8008770:	080086e1 	.word	0x080086e1

08008774 <__sfp_lock_acquire>:
 8008774:	4801      	ldr	r0, [pc, #4]	@ (800877c <__sfp_lock_acquire+0x8>)
 8008776:	f000 b900 	b.w	800897a <__retarget_lock_acquire_recursive>
 800877a:	bf00      	nop
 800877c:	2000079d 	.word	0x2000079d

08008780 <__sfp_lock_release>:
 8008780:	4801      	ldr	r0, [pc, #4]	@ (8008788 <__sfp_lock_release+0x8>)
 8008782:	f000 b8fb 	b.w	800897c <__retarget_lock_release_recursive>
 8008786:	bf00      	nop
 8008788:	2000079d 	.word	0x2000079d

0800878c <__sinit>:
 800878c:	b510      	push	{r4, lr}
 800878e:	4604      	mov	r4, r0
 8008790:	f7ff fff0 	bl	8008774 <__sfp_lock_acquire>
 8008794:	6a23      	ldr	r3, [r4, #32]
 8008796:	b11b      	cbz	r3, 80087a0 <__sinit+0x14>
 8008798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800879c:	f7ff bff0 	b.w	8008780 <__sfp_lock_release>
 80087a0:	4b04      	ldr	r3, [pc, #16]	@ (80087b4 <__sinit+0x28>)
 80087a2:	6223      	str	r3, [r4, #32]
 80087a4:	4b04      	ldr	r3, [pc, #16]	@ (80087b8 <__sinit+0x2c>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d1f5      	bne.n	8008798 <__sinit+0xc>
 80087ac:	f7ff ffc4 	bl	8008738 <global_stdio_init.part.0>
 80087b0:	e7f2      	b.n	8008798 <__sinit+0xc>
 80087b2:	bf00      	nop
 80087b4:	080086f9 	.word	0x080086f9
 80087b8:	20000794 	.word	0x20000794

080087bc <_fwalk_sglue>:
 80087bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087c0:	4607      	mov	r7, r0
 80087c2:	4688      	mov	r8, r1
 80087c4:	4614      	mov	r4, r2
 80087c6:	2600      	movs	r6, #0
 80087c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80087cc:	f1b9 0901 	subs.w	r9, r9, #1
 80087d0:	d505      	bpl.n	80087de <_fwalk_sglue+0x22>
 80087d2:	6824      	ldr	r4, [r4, #0]
 80087d4:	2c00      	cmp	r4, #0
 80087d6:	d1f7      	bne.n	80087c8 <_fwalk_sglue+0xc>
 80087d8:	4630      	mov	r0, r6
 80087da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087de:	89ab      	ldrh	r3, [r5, #12]
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d907      	bls.n	80087f4 <_fwalk_sglue+0x38>
 80087e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80087e8:	3301      	adds	r3, #1
 80087ea:	d003      	beq.n	80087f4 <_fwalk_sglue+0x38>
 80087ec:	4629      	mov	r1, r5
 80087ee:	4638      	mov	r0, r7
 80087f0:	47c0      	blx	r8
 80087f2:	4306      	orrs	r6, r0
 80087f4:	3568      	adds	r5, #104	@ 0x68
 80087f6:	e7e9      	b.n	80087cc <_fwalk_sglue+0x10>

080087f8 <__sread>:
 80087f8:	b510      	push	{r4, lr}
 80087fa:	460c      	mov	r4, r1
 80087fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008800:	f000 f86c 	bl	80088dc <_read_r>
 8008804:	2800      	cmp	r0, #0
 8008806:	bfab      	itete	ge
 8008808:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800880a:	89a3      	ldrhlt	r3, [r4, #12]
 800880c:	181b      	addge	r3, r3, r0
 800880e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008812:	bfac      	ite	ge
 8008814:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008816:	81a3      	strhlt	r3, [r4, #12]
 8008818:	bd10      	pop	{r4, pc}

0800881a <__swrite>:
 800881a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800881e:	461f      	mov	r7, r3
 8008820:	898b      	ldrh	r3, [r1, #12]
 8008822:	05db      	lsls	r3, r3, #23
 8008824:	4605      	mov	r5, r0
 8008826:	460c      	mov	r4, r1
 8008828:	4616      	mov	r6, r2
 800882a:	d505      	bpl.n	8008838 <__swrite+0x1e>
 800882c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008830:	2302      	movs	r3, #2
 8008832:	2200      	movs	r2, #0
 8008834:	f000 f840 	bl	80088b8 <_lseek_r>
 8008838:	89a3      	ldrh	r3, [r4, #12]
 800883a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800883e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008842:	81a3      	strh	r3, [r4, #12]
 8008844:	4632      	mov	r2, r6
 8008846:	463b      	mov	r3, r7
 8008848:	4628      	mov	r0, r5
 800884a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800884e:	f000 b857 	b.w	8008900 <_write_r>

08008852 <__sseek>:
 8008852:	b510      	push	{r4, lr}
 8008854:	460c      	mov	r4, r1
 8008856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800885a:	f000 f82d 	bl	80088b8 <_lseek_r>
 800885e:	1c43      	adds	r3, r0, #1
 8008860:	89a3      	ldrh	r3, [r4, #12]
 8008862:	bf15      	itete	ne
 8008864:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008866:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800886a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800886e:	81a3      	strheq	r3, [r4, #12]
 8008870:	bf18      	it	ne
 8008872:	81a3      	strhne	r3, [r4, #12]
 8008874:	bd10      	pop	{r4, pc}

08008876 <__sclose>:
 8008876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800887a:	f000 b80d 	b.w	8008898 <_close_r>

0800887e <memset>:
 800887e:	4402      	add	r2, r0
 8008880:	4603      	mov	r3, r0
 8008882:	4293      	cmp	r3, r2
 8008884:	d100      	bne.n	8008888 <memset+0xa>
 8008886:	4770      	bx	lr
 8008888:	f803 1b01 	strb.w	r1, [r3], #1
 800888c:	e7f9      	b.n	8008882 <memset+0x4>
	...

08008890 <_localeconv_r>:
 8008890:	4800      	ldr	r0, [pc, #0]	@ (8008894 <_localeconv_r+0x4>)
 8008892:	4770      	bx	lr
 8008894:	200001a4 	.word	0x200001a4

08008898 <_close_r>:
 8008898:	b538      	push	{r3, r4, r5, lr}
 800889a:	4d06      	ldr	r5, [pc, #24]	@ (80088b4 <_close_r+0x1c>)
 800889c:	2300      	movs	r3, #0
 800889e:	4604      	mov	r4, r0
 80088a0:	4608      	mov	r0, r1
 80088a2:	602b      	str	r3, [r5, #0]
 80088a4:	f7fa f9b0 	bl	8002c08 <_close>
 80088a8:	1c43      	adds	r3, r0, #1
 80088aa:	d102      	bne.n	80088b2 <_close_r+0x1a>
 80088ac:	682b      	ldr	r3, [r5, #0]
 80088ae:	b103      	cbz	r3, 80088b2 <_close_r+0x1a>
 80088b0:	6023      	str	r3, [r4, #0]
 80088b2:	bd38      	pop	{r3, r4, r5, pc}
 80088b4:	20000798 	.word	0x20000798

080088b8 <_lseek_r>:
 80088b8:	b538      	push	{r3, r4, r5, lr}
 80088ba:	4d07      	ldr	r5, [pc, #28]	@ (80088d8 <_lseek_r+0x20>)
 80088bc:	4604      	mov	r4, r0
 80088be:	4608      	mov	r0, r1
 80088c0:	4611      	mov	r1, r2
 80088c2:	2200      	movs	r2, #0
 80088c4:	602a      	str	r2, [r5, #0]
 80088c6:	461a      	mov	r2, r3
 80088c8:	f7fa f9c5 	bl	8002c56 <_lseek>
 80088cc:	1c43      	adds	r3, r0, #1
 80088ce:	d102      	bne.n	80088d6 <_lseek_r+0x1e>
 80088d0:	682b      	ldr	r3, [r5, #0]
 80088d2:	b103      	cbz	r3, 80088d6 <_lseek_r+0x1e>
 80088d4:	6023      	str	r3, [r4, #0]
 80088d6:	bd38      	pop	{r3, r4, r5, pc}
 80088d8:	20000798 	.word	0x20000798

080088dc <_read_r>:
 80088dc:	b538      	push	{r3, r4, r5, lr}
 80088de:	4d07      	ldr	r5, [pc, #28]	@ (80088fc <_read_r+0x20>)
 80088e0:	4604      	mov	r4, r0
 80088e2:	4608      	mov	r0, r1
 80088e4:	4611      	mov	r1, r2
 80088e6:	2200      	movs	r2, #0
 80088e8:	602a      	str	r2, [r5, #0]
 80088ea:	461a      	mov	r2, r3
 80088ec:	f7fa f953 	bl	8002b96 <_read>
 80088f0:	1c43      	adds	r3, r0, #1
 80088f2:	d102      	bne.n	80088fa <_read_r+0x1e>
 80088f4:	682b      	ldr	r3, [r5, #0]
 80088f6:	b103      	cbz	r3, 80088fa <_read_r+0x1e>
 80088f8:	6023      	str	r3, [r4, #0]
 80088fa:	bd38      	pop	{r3, r4, r5, pc}
 80088fc:	20000798 	.word	0x20000798

08008900 <_write_r>:
 8008900:	b538      	push	{r3, r4, r5, lr}
 8008902:	4d07      	ldr	r5, [pc, #28]	@ (8008920 <_write_r+0x20>)
 8008904:	4604      	mov	r4, r0
 8008906:	4608      	mov	r0, r1
 8008908:	4611      	mov	r1, r2
 800890a:	2200      	movs	r2, #0
 800890c:	602a      	str	r2, [r5, #0]
 800890e:	461a      	mov	r2, r3
 8008910:	f7fa f95e 	bl	8002bd0 <_write>
 8008914:	1c43      	adds	r3, r0, #1
 8008916:	d102      	bne.n	800891e <_write_r+0x1e>
 8008918:	682b      	ldr	r3, [r5, #0]
 800891a:	b103      	cbz	r3, 800891e <_write_r+0x1e>
 800891c:	6023      	str	r3, [r4, #0]
 800891e:	bd38      	pop	{r3, r4, r5, pc}
 8008920:	20000798 	.word	0x20000798

08008924 <__errno>:
 8008924:	4b01      	ldr	r3, [pc, #4]	@ (800892c <__errno+0x8>)
 8008926:	6818      	ldr	r0, [r3, #0]
 8008928:	4770      	bx	lr
 800892a:	bf00      	nop
 800892c:	20000064 	.word	0x20000064

08008930 <__libc_init_array>:
 8008930:	b570      	push	{r4, r5, r6, lr}
 8008932:	4d0d      	ldr	r5, [pc, #52]	@ (8008968 <__libc_init_array+0x38>)
 8008934:	4c0d      	ldr	r4, [pc, #52]	@ (800896c <__libc_init_array+0x3c>)
 8008936:	1b64      	subs	r4, r4, r5
 8008938:	10a4      	asrs	r4, r4, #2
 800893a:	2600      	movs	r6, #0
 800893c:	42a6      	cmp	r6, r4
 800893e:	d109      	bne.n	8008954 <__libc_init_array+0x24>
 8008940:	4d0b      	ldr	r5, [pc, #44]	@ (8008970 <__libc_init_array+0x40>)
 8008942:	4c0c      	ldr	r4, [pc, #48]	@ (8008974 <__libc_init_array+0x44>)
 8008944:	f001 fec2 	bl	800a6cc <_init>
 8008948:	1b64      	subs	r4, r4, r5
 800894a:	10a4      	asrs	r4, r4, #2
 800894c:	2600      	movs	r6, #0
 800894e:	42a6      	cmp	r6, r4
 8008950:	d105      	bne.n	800895e <__libc_init_array+0x2e>
 8008952:	bd70      	pop	{r4, r5, r6, pc}
 8008954:	f855 3b04 	ldr.w	r3, [r5], #4
 8008958:	4798      	blx	r3
 800895a:	3601      	adds	r6, #1
 800895c:	e7ee      	b.n	800893c <__libc_init_array+0xc>
 800895e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008962:	4798      	blx	r3
 8008964:	3601      	adds	r6, #1
 8008966:	e7f2      	b.n	800894e <__libc_init_array+0x1e>
 8008968:	0800aa94 	.word	0x0800aa94
 800896c:	0800aa94 	.word	0x0800aa94
 8008970:	0800aa94 	.word	0x0800aa94
 8008974:	0800aa98 	.word	0x0800aa98

08008978 <__retarget_lock_init_recursive>:
 8008978:	4770      	bx	lr

0800897a <__retarget_lock_acquire_recursive>:
 800897a:	4770      	bx	lr

0800897c <__retarget_lock_release_recursive>:
 800897c:	4770      	bx	lr

0800897e <memcpy>:
 800897e:	440a      	add	r2, r1
 8008980:	4291      	cmp	r1, r2
 8008982:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008986:	d100      	bne.n	800898a <memcpy+0xc>
 8008988:	4770      	bx	lr
 800898a:	b510      	push	{r4, lr}
 800898c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008990:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008994:	4291      	cmp	r1, r2
 8008996:	d1f9      	bne.n	800898c <memcpy+0xe>
 8008998:	bd10      	pop	{r4, pc}

0800899a <quorem>:
 800899a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800899e:	6903      	ldr	r3, [r0, #16]
 80089a0:	690c      	ldr	r4, [r1, #16]
 80089a2:	42a3      	cmp	r3, r4
 80089a4:	4607      	mov	r7, r0
 80089a6:	db7e      	blt.n	8008aa6 <quorem+0x10c>
 80089a8:	3c01      	subs	r4, #1
 80089aa:	f101 0814 	add.w	r8, r1, #20
 80089ae:	00a3      	lsls	r3, r4, #2
 80089b0:	f100 0514 	add.w	r5, r0, #20
 80089b4:	9300      	str	r3, [sp, #0]
 80089b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80089ba:	9301      	str	r3, [sp, #4]
 80089bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80089c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80089c4:	3301      	adds	r3, #1
 80089c6:	429a      	cmp	r2, r3
 80089c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80089cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80089d0:	d32e      	bcc.n	8008a30 <quorem+0x96>
 80089d2:	f04f 0a00 	mov.w	sl, #0
 80089d6:	46c4      	mov	ip, r8
 80089d8:	46ae      	mov	lr, r5
 80089da:	46d3      	mov	fp, sl
 80089dc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80089e0:	b298      	uxth	r0, r3
 80089e2:	fb06 a000 	mla	r0, r6, r0, sl
 80089e6:	0c02      	lsrs	r2, r0, #16
 80089e8:	0c1b      	lsrs	r3, r3, #16
 80089ea:	fb06 2303 	mla	r3, r6, r3, r2
 80089ee:	f8de 2000 	ldr.w	r2, [lr]
 80089f2:	b280      	uxth	r0, r0
 80089f4:	b292      	uxth	r2, r2
 80089f6:	1a12      	subs	r2, r2, r0
 80089f8:	445a      	add	r2, fp
 80089fa:	f8de 0000 	ldr.w	r0, [lr]
 80089fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008a08:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008a0c:	b292      	uxth	r2, r2
 8008a0e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008a12:	45e1      	cmp	r9, ip
 8008a14:	f84e 2b04 	str.w	r2, [lr], #4
 8008a18:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008a1c:	d2de      	bcs.n	80089dc <quorem+0x42>
 8008a1e:	9b00      	ldr	r3, [sp, #0]
 8008a20:	58eb      	ldr	r3, [r5, r3]
 8008a22:	b92b      	cbnz	r3, 8008a30 <quorem+0x96>
 8008a24:	9b01      	ldr	r3, [sp, #4]
 8008a26:	3b04      	subs	r3, #4
 8008a28:	429d      	cmp	r5, r3
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	d32f      	bcc.n	8008a8e <quorem+0xf4>
 8008a2e:	613c      	str	r4, [r7, #16]
 8008a30:	4638      	mov	r0, r7
 8008a32:	f001 f97f 	bl	8009d34 <__mcmp>
 8008a36:	2800      	cmp	r0, #0
 8008a38:	db25      	blt.n	8008a86 <quorem+0xec>
 8008a3a:	4629      	mov	r1, r5
 8008a3c:	2000      	movs	r0, #0
 8008a3e:	f858 2b04 	ldr.w	r2, [r8], #4
 8008a42:	f8d1 c000 	ldr.w	ip, [r1]
 8008a46:	fa1f fe82 	uxth.w	lr, r2
 8008a4a:	fa1f f38c 	uxth.w	r3, ip
 8008a4e:	eba3 030e 	sub.w	r3, r3, lr
 8008a52:	4403      	add	r3, r0
 8008a54:	0c12      	lsrs	r2, r2, #16
 8008a56:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008a5a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a64:	45c1      	cmp	r9, r8
 8008a66:	f841 3b04 	str.w	r3, [r1], #4
 8008a6a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008a6e:	d2e6      	bcs.n	8008a3e <quorem+0xa4>
 8008a70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a74:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a78:	b922      	cbnz	r2, 8008a84 <quorem+0xea>
 8008a7a:	3b04      	subs	r3, #4
 8008a7c:	429d      	cmp	r5, r3
 8008a7e:	461a      	mov	r2, r3
 8008a80:	d30b      	bcc.n	8008a9a <quorem+0x100>
 8008a82:	613c      	str	r4, [r7, #16]
 8008a84:	3601      	adds	r6, #1
 8008a86:	4630      	mov	r0, r6
 8008a88:	b003      	add	sp, #12
 8008a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a8e:	6812      	ldr	r2, [r2, #0]
 8008a90:	3b04      	subs	r3, #4
 8008a92:	2a00      	cmp	r2, #0
 8008a94:	d1cb      	bne.n	8008a2e <quorem+0x94>
 8008a96:	3c01      	subs	r4, #1
 8008a98:	e7c6      	b.n	8008a28 <quorem+0x8e>
 8008a9a:	6812      	ldr	r2, [r2, #0]
 8008a9c:	3b04      	subs	r3, #4
 8008a9e:	2a00      	cmp	r2, #0
 8008aa0:	d1ef      	bne.n	8008a82 <quorem+0xe8>
 8008aa2:	3c01      	subs	r4, #1
 8008aa4:	e7ea      	b.n	8008a7c <quorem+0xe2>
 8008aa6:	2000      	movs	r0, #0
 8008aa8:	e7ee      	b.n	8008a88 <quorem+0xee>
 8008aaa:	0000      	movs	r0, r0
 8008aac:	0000      	movs	r0, r0
	...

08008ab0 <_dtoa_r>:
 8008ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ab4:	69c7      	ldr	r7, [r0, #28]
 8008ab6:	b097      	sub	sp, #92	@ 0x5c
 8008ab8:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008abc:	ec55 4b10 	vmov	r4, r5, d0
 8008ac0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008ac2:	9107      	str	r1, [sp, #28]
 8008ac4:	4681      	mov	r9, r0
 8008ac6:	920c      	str	r2, [sp, #48]	@ 0x30
 8008ac8:	9311      	str	r3, [sp, #68]	@ 0x44
 8008aca:	b97f      	cbnz	r7, 8008aec <_dtoa_r+0x3c>
 8008acc:	2010      	movs	r0, #16
 8008ace:	f000 fe09 	bl	80096e4 <malloc>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	f8c9 001c 	str.w	r0, [r9, #28]
 8008ad8:	b920      	cbnz	r0, 8008ae4 <_dtoa_r+0x34>
 8008ada:	4ba9      	ldr	r3, [pc, #676]	@ (8008d80 <_dtoa_r+0x2d0>)
 8008adc:	21ef      	movs	r1, #239	@ 0xef
 8008ade:	48a9      	ldr	r0, [pc, #676]	@ (8008d84 <_dtoa_r+0x2d4>)
 8008ae0:	f001 faec 	bl	800a0bc <__assert_func>
 8008ae4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008ae8:	6007      	str	r7, [r0, #0]
 8008aea:	60c7      	str	r7, [r0, #12]
 8008aec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008af0:	6819      	ldr	r1, [r3, #0]
 8008af2:	b159      	cbz	r1, 8008b0c <_dtoa_r+0x5c>
 8008af4:	685a      	ldr	r2, [r3, #4]
 8008af6:	604a      	str	r2, [r1, #4]
 8008af8:	2301      	movs	r3, #1
 8008afa:	4093      	lsls	r3, r2
 8008afc:	608b      	str	r3, [r1, #8]
 8008afe:	4648      	mov	r0, r9
 8008b00:	f000 fee6 	bl	80098d0 <_Bfree>
 8008b04:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	601a      	str	r2, [r3, #0]
 8008b0c:	1e2b      	subs	r3, r5, #0
 8008b0e:	bfb9      	ittee	lt
 8008b10:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008b14:	9305      	strlt	r3, [sp, #20]
 8008b16:	2300      	movge	r3, #0
 8008b18:	6033      	strge	r3, [r6, #0]
 8008b1a:	9f05      	ldr	r7, [sp, #20]
 8008b1c:	4b9a      	ldr	r3, [pc, #616]	@ (8008d88 <_dtoa_r+0x2d8>)
 8008b1e:	bfbc      	itt	lt
 8008b20:	2201      	movlt	r2, #1
 8008b22:	6032      	strlt	r2, [r6, #0]
 8008b24:	43bb      	bics	r3, r7
 8008b26:	d112      	bne.n	8008b4e <_dtoa_r+0x9e>
 8008b28:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008b2a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008b2e:	6013      	str	r3, [r2, #0]
 8008b30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008b34:	4323      	orrs	r3, r4
 8008b36:	f000 855a 	beq.w	80095ee <_dtoa_r+0xb3e>
 8008b3a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008b3c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8008d9c <_dtoa_r+0x2ec>
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	f000 855c 	beq.w	80095fe <_dtoa_r+0xb4e>
 8008b46:	f10a 0303 	add.w	r3, sl, #3
 8008b4a:	f000 bd56 	b.w	80095fa <_dtoa_r+0xb4a>
 8008b4e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008b52:	2200      	movs	r2, #0
 8008b54:	ec51 0b17 	vmov	r0, r1, d7
 8008b58:	2300      	movs	r3, #0
 8008b5a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8008b5e:	f7f7 ffdb 	bl	8000b18 <__aeabi_dcmpeq>
 8008b62:	4680      	mov	r8, r0
 8008b64:	b158      	cbz	r0, 8008b7e <_dtoa_r+0xce>
 8008b66:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008b68:	2301      	movs	r3, #1
 8008b6a:	6013      	str	r3, [r2, #0]
 8008b6c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008b6e:	b113      	cbz	r3, 8008b76 <_dtoa_r+0xc6>
 8008b70:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008b72:	4b86      	ldr	r3, [pc, #536]	@ (8008d8c <_dtoa_r+0x2dc>)
 8008b74:	6013      	str	r3, [r2, #0]
 8008b76:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008da0 <_dtoa_r+0x2f0>
 8008b7a:	f000 bd40 	b.w	80095fe <_dtoa_r+0xb4e>
 8008b7e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008b82:	aa14      	add	r2, sp, #80	@ 0x50
 8008b84:	a915      	add	r1, sp, #84	@ 0x54
 8008b86:	4648      	mov	r0, r9
 8008b88:	f001 f984 	bl	8009e94 <__d2b>
 8008b8c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008b90:	9002      	str	r0, [sp, #8]
 8008b92:	2e00      	cmp	r6, #0
 8008b94:	d078      	beq.n	8008c88 <_dtoa_r+0x1d8>
 8008b96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b98:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8008b9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ba0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008ba4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008ba8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008bac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	4b76      	ldr	r3, [pc, #472]	@ (8008d90 <_dtoa_r+0x2e0>)
 8008bb6:	f7f7 fb8f 	bl	80002d8 <__aeabi_dsub>
 8008bba:	a36b      	add	r3, pc, #428	@ (adr r3, 8008d68 <_dtoa_r+0x2b8>)
 8008bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc0:	f7f7 fd42 	bl	8000648 <__aeabi_dmul>
 8008bc4:	a36a      	add	r3, pc, #424	@ (adr r3, 8008d70 <_dtoa_r+0x2c0>)
 8008bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bca:	f7f7 fb87 	bl	80002dc <__adddf3>
 8008bce:	4604      	mov	r4, r0
 8008bd0:	4630      	mov	r0, r6
 8008bd2:	460d      	mov	r5, r1
 8008bd4:	f7f7 fcce 	bl	8000574 <__aeabi_i2d>
 8008bd8:	a367      	add	r3, pc, #412	@ (adr r3, 8008d78 <_dtoa_r+0x2c8>)
 8008bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bde:	f7f7 fd33 	bl	8000648 <__aeabi_dmul>
 8008be2:	4602      	mov	r2, r0
 8008be4:	460b      	mov	r3, r1
 8008be6:	4620      	mov	r0, r4
 8008be8:	4629      	mov	r1, r5
 8008bea:	f7f7 fb77 	bl	80002dc <__adddf3>
 8008bee:	4604      	mov	r4, r0
 8008bf0:	460d      	mov	r5, r1
 8008bf2:	f7f7 ffd9 	bl	8000ba8 <__aeabi_d2iz>
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	4607      	mov	r7, r0
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	4629      	mov	r1, r5
 8008c00:	f7f7 ff94 	bl	8000b2c <__aeabi_dcmplt>
 8008c04:	b140      	cbz	r0, 8008c18 <_dtoa_r+0x168>
 8008c06:	4638      	mov	r0, r7
 8008c08:	f7f7 fcb4 	bl	8000574 <__aeabi_i2d>
 8008c0c:	4622      	mov	r2, r4
 8008c0e:	462b      	mov	r3, r5
 8008c10:	f7f7 ff82 	bl	8000b18 <__aeabi_dcmpeq>
 8008c14:	b900      	cbnz	r0, 8008c18 <_dtoa_r+0x168>
 8008c16:	3f01      	subs	r7, #1
 8008c18:	2f16      	cmp	r7, #22
 8008c1a:	d852      	bhi.n	8008cc2 <_dtoa_r+0x212>
 8008c1c:	4b5d      	ldr	r3, [pc, #372]	@ (8008d94 <_dtoa_r+0x2e4>)
 8008c1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008c2a:	f7f7 ff7f 	bl	8000b2c <__aeabi_dcmplt>
 8008c2e:	2800      	cmp	r0, #0
 8008c30:	d049      	beq.n	8008cc6 <_dtoa_r+0x216>
 8008c32:	3f01      	subs	r7, #1
 8008c34:	2300      	movs	r3, #0
 8008c36:	9310      	str	r3, [sp, #64]	@ 0x40
 8008c38:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008c3a:	1b9b      	subs	r3, r3, r6
 8008c3c:	1e5a      	subs	r2, r3, #1
 8008c3e:	bf45      	ittet	mi
 8008c40:	f1c3 0301 	rsbmi	r3, r3, #1
 8008c44:	9300      	strmi	r3, [sp, #0]
 8008c46:	2300      	movpl	r3, #0
 8008c48:	2300      	movmi	r3, #0
 8008c4a:	9206      	str	r2, [sp, #24]
 8008c4c:	bf54      	ite	pl
 8008c4e:	9300      	strpl	r3, [sp, #0]
 8008c50:	9306      	strmi	r3, [sp, #24]
 8008c52:	2f00      	cmp	r7, #0
 8008c54:	db39      	blt.n	8008cca <_dtoa_r+0x21a>
 8008c56:	9b06      	ldr	r3, [sp, #24]
 8008c58:	970d      	str	r7, [sp, #52]	@ 0x34
 8008c5a:	443b      	add	r3, r7
 8008c5c:	9306      	str	r3, [sp, #24]
 8008c5e:	2300      	movs	r3, #0
 8008c60:	9308      	str	r3, [sp, #32]
 8008c62:	9b07      	ldr	r3, [sp, #28]
 8008c64:	2b09      	cmp	r3, #9
 8008c66:	d863      	bhi.n	8008d30 <_dtoa_r+0x280>
 8008c68:	2b05      	cmp	r3, #5
 8008c6a:	bfc4      	itt	gt
 8008c6c:	3b04      	subgt	r3, #4
 8008c6e:	9307      	strgt	r3, [sp, #28]
 8008c70:	9b07      	ldr	r3, [sp, #28]
 8008c72:	f1a3 0302 	sub.w	r3, r3, #2
 8008c76:	bfcc      	ite	gt
 8008c78:	2400      	movgt	r4, #0
 8008c7a:	2401      	movle	r4, #1
 8008c7c:	2b03      	cmp	r3, #3
 8008c7e:	d863      	bhi.n	8008d48 <_dtoa_r+0x298>
 8008c80:	e8df f003 	tbb	[pc, r3]
 8008c84:	2b375452 	.word	0x2b375452
 8008c88:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008c8c:	441e      	add	r6, r3
 8008c8e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008c92:	2b20      	cmp	r3, #32
 8008c94:	bfc1      	itttt	gt
 8008c96:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008c9a:	409f      	lslgt	r7, r3
 8008c9c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008ca0:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008ca4:	bfd6      	itet	le
 8008ca6:	f1c3 0320 	rsble	r3, r3, #32
 8008caa:	ea47 0003 	orrgt.w	r0, r7, r3
 8008cae:	fa04 f003 	lslle.w	r0, r4, r3
 8008cb2:	f7f7 fc4f 	bl	8000554 <__aeabi_ui2d>
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008cbc:	3e01      	subs	r6, #1
 8008cbe:	9212      	str	r2, [sp, #72]	@ 0x48
 8008cc0:	e776      	b.n	8008bb0 <_dtoa_r+0x100>
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	e7b7      	b.n	8008c36 <_dtoa_r+0x186>
 8008cc6:	9010      	str	r0, [sp, #64]	@ 0x40
 8008cc8:	e7b6      	b.n	8008c38 <_dtoa_r+0x188>
 8008cca:	9b00      	ldr	r3, [sp, #0]
 8008ccc:	1bdb      	subs	r3, r3, r7
 8008cce:	9300      	str	r3, [sp, #0]
 8008cd0:	427b      	negs	r3, r7
 8008cd2:	9308      	str	r3, [sp, #32]
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	930d      	str	r3, [sp, #52]	@ 0x34
 8008cd8:	e7c3      	b.n	8008c62 <_dtoa_r+0x1b2>
 8008cda:	2301      	movs	r3, #1
 8008cdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cde:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008ce0:	eb07 0b03 	add.w	fp, r7, r3
 8008ce4:	f10b 0301 	add.w	r3, fp, #1
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	9303      	str	r3, [sp, #12]
 8008cec:	bfb8      	it	lt
 8008cee:	2301      	movlt	r3, #1
 8008cf0:	e006      	b.n	8008d00 <_dtoa_r+0x250>
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cf6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	dd28      	ble.n	8008d4e <_dtoa_r+0x29e>
 8008cfc:	469b      	mov	fp, r3
 8008cfe:	9303      	str	r3, [sp, #12]
 8008d00:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008d04:	2100      	movs	r1, #0
 8008d06:	2204      	movs	r2, #4
 8008d08:	f102 0514 	add.w	r5, r2, #20
 8008d0c:	429d      	cmp	r5, r3
 8008d0e:	d926      	bls.n	8008d5e <_dtoa_r+0x2ae>
 8008d10:	6041      	str	r1, [r0, #4]
 8008d12:	4648      	mov	r0, r9
 8008d14:	f000 fd9c 	bl	8009850 <_Balloc>
 8008d18:	4682      	mov	sl, r0
 8008d1a:	2800      	cmp	r0, #0
 8008d1c:	d142      	bne.n	8008da4 <_dtoa_r+0x2f4>
 8008d1e:	4b1e      	ldr	r3, [pc, #120]	@ (8008d98 <_dtoa_r+0x2e8>)
 8008d20:	4602      	mov	r2, r0
 8008d22:	f240 11af 	movw	r1, #431	@ 0x1af
 8008d26:	e6da      	b.n	8008ade <_dtoa_r+0x2e>
 8008d28:	2300      	movs	r3, #0
 8008d2a:	e7e3      	b.n	8008cf4 <_dtoa_r+0x244>
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	e7d5      	b.n	8008cdc <_dtoa_r+0x22c>
 8008d30:	2401      	movs	r4, #1
 8008d32:	2300      	movs	r3, #0
 8008d34:	9307      	str	r3, [sp, #28]
 8008d36:	9409      	str	r4, [sp, #36]	@ 0x24
 8008d38:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f8cd b00c 	str.w	fp, [sp, #12]
 8008d42:	2312      	movs	r3, #18
 8008d44:	920c      	str	r2, [sp, #48]	@ 0x30
 8008d46:	e7db      	b.n	8008d00 <_dtoa_r+0x250>
 8008d48:	2301      	movs	r3, #1
 8008d4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d4c:	e7f4      	b.n	8008d38 <_dtoa_r+0x288>
 8008d4e:	f04f 0b01 	mov.w	fp, #1
 8008d52:	f8cd b00c 	str.w	fp, [sp, #12]
 8008d56:	465b      	mov	r3, fp
 8008d58:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8008d5c:	e7d0      	b.n	8008d00 <_dtoa_r+0x250>
 8008d5e:	3101      	adds	r1, #1
 8008d60:	0052      	lsls	r2, r2, #1
 8008d62:	e7d1      	b.n	8008d08 <_dtoa_r+0x258>
 8008d64:	f3af 8000 	nop.w
 8008d68:	636f4361 	.word	0x636f4361
 8008d6c:	3fd287a7 	.word	0x3fd287a7
 8008d70:	8b60c8b3 	.word	0x8b60c8b3
 8008d74:	3fc68a28 	.word	0x3fc68a28
 8008d78:	509f79fb 	.word	0x509f79fb
 8008d7c:	3fd34413 	.word	0x3fd34413
 8008d80:	0800a759 	.word	0x0800a759
 8008d84:	0800a770 	.word	0x0800a770
 8008d88:	7ff00000 	.word	0x7ff00000
 8008d8c:	0800a729 	.word	0x0800a729
 8008d90:	3ff80000 	.word	0x3ff80000
 8008d94:	0800a8c0 	.word	0x0800a8c0
 8008d98:	0800a7c8 	.word	0x0800a7c8
 8008d9c:	0800a755 	.word	0x0800a755
 8008da0:	0800a728 	.word	0x0800a728
 8008da4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008da8:	6018      	str	r0, [r3, #0]
 8008daa:	9b03      	ldr	r3, [sp, #12]
 8008dac:	2b0e      	cmp	r3, #14
 8008dae:	f200 80a1 	bhi.w	8008ef4 <_dtoa_r+0x444>
 8008db2:	2c00      	cmp	r4, #0
 8008db4:	f000 809e 	beq.w	8008ef4 <_dtoa_r+0x444>
 8008db8:	2f00      	cmp	r7, #0
 8008dba:	dd33      	ble.n	8008e24 <_dtoa_r+0x374>
 8008dbc:	4b9c      	ldr	r3, [pc, #624]	@ (8009030 <_dtoa_r+0x580>)
 8008dbe:	f007 020f 	and.w	r2, r7, #15
 8008dc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008dc6:	ed93 7b00 	vldr	d7, [r3]
 8008dca:	05f8      	lsls	r0, r7, #23
 8008dcc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008dd0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008dd4:	d516      	bpl.n	8008e04 <_dtoa_r+0x354>
 8008dd6:	4b97      	ldr	r3, [pc, #604]	@ (8009034 <_dtoa_r+0x584>)
 8008dd8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008ddc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008de0:	f7f7 fd5c 	bl	800089c <__aeabi_ddiv>
 8008de4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008de8:	f004 040f 	and.w	r4, r4, #15
 8008dec:	2603      	movs	r6, #3
 8008dee:	4d91      	ldr	r5, [pc, #580]	@ (8009034 <_dtoa_r+0x584>)
 8008df0:	b954      	cbnz	r4, 8008e08 <_dtoa_r+0x358>
 8008df2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008df6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008dfa:	f7f7 fd4f 	bl	800089c <__aeabi_ddiv>
 8008dfe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e02:	e028      	b.n	8008e56 <_dtoa_r+0x3a6>
 8008e04:	2602      	movs	r6, #2
 8008e06:	e7f2      	b.n	8008dee <_dtoa_r+0x33e>
 8008e08:	07e1      	lsls	r1, r4, #31
 8008e0a:	d508      	bpl.n	8008e1e <_dtoa_r+0x36e>
 8008e0c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008e10:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008e14:	f7f7 fc18 	bl	8000648 <__aeabi_dmul>
 8008e18:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008e1c:	3601      	adds	r6, #1
 8008e1e:	1064      	asrs	r4, r4, #1
 8008e20:	3508      	adds	r5, #8
 8008e22:	e7e5      	b.n	8008df0 <_dtoa_r+0x340>
 8008e24:	f000 80af 	beq.w	8008f86 <_dtoa_r+0x4d6>
 8008e28:	427c      	negs	r4, r7
 8008e2a:	4b81      	ldr	r3, [pc, #516]	@ (8009030 <_dtoa_r+0x580>)
 8008e2c:	4d81      	ldr	r5, [pc, #516]	@ (8009034 <_dtoa_r+0x584>)
 8008e2e:	f004 020f 	and.w	r2, r4, #15
 8008e32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e3a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008e3e:	f7f7 fc03 	bl	8000648 <__aeabi_dmul>
 8008e42:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e46:	1124      	asrs	r4, r4, #4
 8008e48:	2300      	movs	r3, #0
 8008e4a:	2602      	movs	r6, #2
 8008e4c:	2c00      	cmp	r4, #0
 8008e4e:	f040 808f 	bne.w	8008f70 <_dtoa_r+0x4c0>
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d1d3      	bne.n	8008dfe <_dtoa_r+0x34e>
 8008e56:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008e58:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	f000 8094 	beq.w	8008f8a <_dtoa_r+0x4da>
 8008e62:	4b75      	ldr	r3, [pc, #468]	@ (8009038 <_dtoa_r+0x588>)
 8008e64:	2200      	movs	r2, #0
 8008e66:	4620      	mov	r0, r4
 8008e68:	4629      	mov	r1, r5
 8008e6a:	f7f7 fe5f 	bl	8000b2c <__aeabi_dcmplt>
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	f000 808b 	beq.w	8008f8a <_dtoa_r+0x4da>
 8008e74:	9b03      	ldr	r3, [sp, #12]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	f000 8087 	beq.w	8008f8a <_dtoa_r+0x4da>
 8008e7c:	f1bb 0f00 	cmp.w	fp, #0
 8008e80:	dd34      	ble.n	8008eec <_dtoa_r+0x43c>
 8008e82:	4620      	mov	r0, r4
 8008e84:	4b6d      	ldr	r3, [pc, #436]	@ (800903c <_dtoa_r+0x58c>)
 8008e86:	2200      	movs	r2, #0
 8008e88:	4629      	mov	r1, r5
 8008e8a:	f7f7 fbdd 	bl	8000648 <__aeabi_dmul>
 8008e8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e92:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8008e96:	3601      	adds	r6, #1
 8008e98:	465c      	mov	r4, fp
 8008e9a:	4630      	mov	r0, r6
 8008e9c:	f7f7 fb6a 	bl	8000574 <__aeabi_i2d>
 8008ea0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ea4:	f7f7 fbd0 	bl	8000648 <__aeabi_dmul>
 8008ea8:	4b65      	ldr	r3, [pc, #404]	@ (8009040 <_dtoa_r+0x590>)
 8008eaa:	2200      	movs	r2, #0
 8008eac:	f7f7 fa16 	bl	80002dc <__adddf3>
 8008eb0:	4605      	mov	r5, r0
 8008eb2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008eb6:	2c00      	cmp	r4, #0
 8008eb8:	d16a      	bne.n	8008f90 <_dtoa_r+0x4e0>
 8008eba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ebe:	4b61      	ldr	r3, [pc, #388]	@ (8009044 <_dtoa_r+0x594>)
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	f7f7 fa09 	bl	80002d8 <__aeabi_dsub>
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	460b      	mov	r3, r1
 8008eca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008ece:	462a      	mov	r2, r5
 8008ed0:	4633      	mov	r3, r6
 8008ed2:	f7f7 fe49 	bl	8000b68 <__aeabi_dcmpgt>
 8008ed6:	2800      	cmp	r0, #0
 8008ed8:	f040 8298 	bne.w	800940c <_dtoa_r+0x95c>
 8008edc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ee0:	462a      	mov	r2, r5
 8008ee2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008ee6:	f7f7 fe21 	bl	8000b2c <__aeabi_dcmplt>
 8008eea:	bb38      	cbnz	r0, 8008f3c <_dtoa_r+0x48c>
 8008eec:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008ef0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008ef4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	f2c0 8157 	blt.w	80091aa <_dtoa_r+0x6fa>
 8008efc:	2f0e      	cmp	r7, #14
 8008efe:	f300 8154 	bgt.w	80091aa <_dtoa_r+0x6fa>
 8008f02:	4b4b      	ldr	r3, [pc, #300]	@ (8009030 <_dtoa_r+0x580>)
 8008f04:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008f08:	ed93 7b00 	vldr	d7, [r3]
 8008f0c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	ed8d 7b00 	vstr	d7, [sp]
 8008f14:	f280 80e5 	bge.w	80090e2 <_dtoa_r+0x632>
 8008f18:	9b03      	ldr	r3, [sp, #12]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	f300 80e1 	bgt.w	80090e2 <_dtoa_r+0x632>
 8008f20:	d10c      	bne.n	8008f3c <_dtoa_r+0x48c>
 8008f22:	4b48      	ldr	r3, [pc, #288]	@ (8009044 <_dtoa_r+0x594>)
 8008f24:	2200      	movs	r2, #0
 8008f26:	ec51 0b17 	vmov	r0, r1, d7
 8008f2a:	f7f7 fb8d 	bl	8000648 <__aeabi_dmul>
 8008f2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f32:	f7f7 fe0f 	bl	8000b54 <__aeabi_dcmpge>
 8008f36:	2800      	cmp	r0, #0
 8008f38:	f000 8266 	beq.w	8009408 <_dtoa_r+0x958>
 8008f3c:	2400      	movs	r4, #0
 8008f3e:	4625      	mov	r5, r4
 8008f40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008f42:	4656      	mov	r6, sl
 8008f44:	ea6f 0803 	mvn.w	r8, r3
 8008f48:	2700      	movs	r7, #0
 8008f4a:	4621      	mov	r1, r4
 8008f4c:	4648      	mov	r0, r9
 8008f4e:	f000 fcbf 	bl	80098d0 <_Bfree>
 8008f52:	2d00      	cmp	r5, #0
 8008f54:	f000 80bd 	beq.w	80090d2 <_dtoa_r+0x622>
 8008f58:	b12f      	cbz	r7, 8008f66 <_dtoa_r+0x4b6>
 8008f5a:	42af      	cmp	r7, r5
 8008f5c:	d003      	beq.n	8008f66 <_dtoa_r+0x4b6>
 8008f5e:	4639      	mov	r1, r7
 8008f60:	4648      	mov	r0, r9
 8008f62:	f000 fcb5 	bl	80098d0 <_Bfree>
 8008f66:	4629      	mov	r1, r5
 8008f68:	4648      	mov	r0, r9
 8008f6a:	f000 fcb1 	bl	80098d0 <_Bfree>
 8008f6e:	e0b0      	b.n	80090d2 <_dtoa_r+0x622>
 8008f70:	07e2      	lsls	r2, r4, #31
 8008f72:	d505      	bpl.n	8008f80 <_dtoa_r+0x4d0>
 8008f74:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008f78:	f7f7 fb66 	bl	8000648 <__aeabi_dmul>
 8008f7c:	3601      	adds	r6, #1
 8008f7e:	2301      	movs	r3, #1
 8008f80:	1064      	asrs	r4, r4, #1
 8008f82:	3508      	adds	r5, #8
 8008f84:	e762      	b.n	8008e4c <_dtoa_r+0x39c>
 8008f86:	2602      	movs	r6, #2
 8008f88:	e765      	b.n	8008e56 <_dtoa_r+0x3a6>
 8008f8a:	9c03      	ldr	r4, [sp, #12]
 8008f8c:	46b8      	mov	r8, r7
 8008f8e:	e784      	b.n	8008e9a <_dtoa_r+0x3ea>
 8008f90:	4b27      	ldr	r3, [pc, #156]	@ (8009030 <_dtoa_r+0x580>)
 8008f92:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008f94:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008f98:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008f9c:	4454      	add	r4, sl
 8008f9e:	2900      	cmp	r1, #0
 8008fa0:	d054      	beq.n	800904c <_dtoa_r+0x59c>
 8008fa2:	4929      	ldr	r1, [pc, #164]	@ (8009048 <_dtoa_r+0x598>)
 8008fa4:	2000      	movs	r0, #0
 8008fa6:	f7f7 fc79 	bl	800089c <__aeabi_ddiv>
 8008faa:	4633      	mov	r3, r6
 8008fac:	462a      	mov	r2, r5
 8008fae:	f7f7 f993 	bl	80002d8 <__aeabi_dsub>
 8008fb2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008fb6:	4656      	mov	r6, sl
 8008fb8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008fbc:	f7f7 fdf4 	bl	8000ba8 <__aeabi_d2iz>
 8008fc0:	4605      	mov	r5, r0
 8008fc2:	f7f7 fad7 	bl	8000574 <__aeabi_i2d>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	460b      	mov	r3, r1
 8008fca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008fce:	f7f7 f983 	bl	80002d8 <__aeabi_dsub>
 8008fd2:	3530      	adds	r5, #48	@ 0x30
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	460b      	mov	r3, r1
 8008fd8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008fdc:	f806 5b01 	strb.w	r5, [r6], #1
 8008fe0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008fe4:	f7f7 fda2 	bl	8000b2c <__aeabi_dcmplt>
 8008fe8:	2800      	cmp	r0, #0
 8008fea:	d172      	bne.n	80090d2 <_dtoa_r+0x622>
 8008fec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ff0:	4911      	ldr	r1, [pc, #68]	@ (8009038 <_dtoa_r+0x588>)
 8008ff2:	2000      	movs	r0, #0
 8008ff4:	f7f7 f970 	bl	80002d8 <__aeabi_dsub>
 8008ff8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008ffc:	f7f7 fd96 	bl	8000b2c <__aeabi_dcmplt>
 8009000:	2800      	cmp	r0, #0
 8009002:	f040 80b4 	bne.w	800916e <_dtoa_r+0x6be>
 8009006:	42a6      	cmp	r6, r4
 8009008:	f43f af70 	beq.w	8008eec <_dtoa_r+0x43c>
 800900c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009010:	4b0a      	ldr	r3, [pc, #40]	@ (800903c <_dtoa_r+0x58c>)
 8009012:	2200      	movs	r2, #0
 8009014:	f7f7 fb18 	bl	8000648 <__aeabi_dmul>
 8009018:	4b08      	ldr	r3, [pc, #32]	@ (800903c <_dtoa_r+0x58c>)
 800901a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800901e:	2200      	movs	r2, #0
 8009020:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009024:	f7f7 fb10 	bl	8000648 <__aeabi_dmul>
 8009028:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800902c:	e7c4      	b.n	8008fb8 <_dtoa_r+0x508>
 800902e:	bf00      	nop
 8009030:	0800a8c0 	.word	0x0800a8c0
 8009034:	0800a898 	.word	0x0800a898
 8009038:	3ff00000 	.word	0x3ff00000
 800903c:	40240000 	.word	0x40240000
 8009040:	401c0000 	.word	0x401c0000
 8009044:	40140000 	.word	0x40140000
 8009048:	3fe00000 	.word	0x3fe00000
 800904c:	4631      	mov	r1, r6
 800904e:	4628      	mov	r0, r5
 8009050:	f7f7 fafa 	bl	8000648 <__aeabi_dmul>
 8009054:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009058:	9413      	str	r4, [sp, #76]	@ 0x4c
 800905a:	4656      	mov	r6, sl
 800905c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009060:	f7f7 fda2 	bl	8000ba8 <__aeabi_d2iz>
 8009064:	4605      	mov	r5, r0
 8009066:	f7f7 fa85 	bl	8000574 <__aeabi_i2d>
 800906a:	4602      	mov	r2, r0
 800906c:	460b      	mov	r3, r1
 800906e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009072:	f7f7 f931 	bl	80002d8 <__aeabi_dsub>
 8009076:	3530      	adds	r5, #48	@ 0x30
 8009078:	f806 5b01 	strb.w	r5, [r6], #1
 800907c:	4602      	mov	r2, r0
 800907e:	460b      	mov	r3, r1
 8009080:	42a6      	cmp	r6, r4
 8009082:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009086:	f04f 0200 	mov.w	r2, #0
 800908a:	d124      	bne.n	80090d6 <_dtoa_r+0x626>
 800908c:	4baf      	ldr	r3, [pc, #700]	@ (800934c <_dtoa_r+0x89c>)
 800908e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009092:	f7f7 f923 	bl	80002dc <__adddf3>
 8009096:	4602      	mov	r2, r0
 8009098:	460b      	mov	r3, r1
 800909a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800909e:	f7f7 fd63 	bl	8000b68 <__aeabi_dcmpgt>
 80090a2:	2800      	cmp	r0, #0
 80090a4:	d163      	bne.n	800916e <_dtoa_r+0x6be>
 80090a6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80090aa:	49a8      	ldr	r1, [pc, #672]	@ (800934c <_dtoa_r+0x89c>)
 80090ac:	2000      	movs	r0, #0
 80090ae:	f7f7 f913 	bl	80002d8 <__aeabi_dsub>
 80090b2:	4602      	mov	r2, r0
 80090b4:	460b      	mov	r3, r1
 80090b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090ba:	f7f7 fd37 	bl	8000b2c <__aeabi_dcmplt>
 80090be:	2800      	cmp	r0, #0
 80090c0:	f43f af14 	beq.w	8008eec <_dtoa_r+0x43c>
 80090c4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80090c6:	1e73      	subs	r3, r6, #1
 80090c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80090ca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80090ce:	2b30      	cmp	r3, #48	@ 0x30
 80090d0:	d0f8      	beq.n	80090c4 <_dtoa_r+0x614>
 80090d2:	4647      	mov	r7, r8
 80090d4:	e03b      	b.n	800914e <_dtoa_r+0x69e>
 80090d6:	4b9e      	ldr	r3, [pc, #632]	@ (8009350 <_dtoa_r+0x8a0>)
 80090d8:	f7f7 fab6 	bl	8000648 <__aeabi_dmul>
 80090dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80090e0:	e7bc      	b.n	800905c <_dtoa_r+0x5ac>
 80090e2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80090e6:	4656      	mov	r6, sl
 80090e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80090ec:	4620      	mov	r0, r4
 80090ee:	4629      	mov	r1, r5
 80090f0:	f7f7 fbd4 	bl	800089c <__aeabi_ddiv>
 80090f4:	f7f7 fd58 	bl	8000ba8 <__aeabi_d2iz>
 80090f8:	4680      	mov	r8, r0
 80090fa:	f7f7 fa3b 	bl	8000574 <__aeabi_i2d>
 80090fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009102:	f7f7 faa1 	bl	8000648 <__aeabi_dmul>
 8009106:	4602      	mov	r2, r0
 8009108:	460b      	mov	r3, r1
 800910a:	4620      	mov	r0, r4
 800910c:	4629      	mov	r1, r5
 800910e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009112:	f7f7 f8e1 	bl	80002d8 <__aeabi_dsub>
 8009116:	f806 4b01 	strb.w	r4, [r6], #1
 800911a:	9d03      	ldr	r5, [sp, #12]
 800911c:	eba6 040a 	sub.w	r4, r6, sl
 8009120:	42a5      	cmp	r5, r4
 8009122:	4602      	mov	r2, r0
 8009124:	460b      	mov	r3, r1
 8009126:	d133      	bne.n	8009190 <_dtoa_r+0x6e0>
 8009128:	f7f7 f8d8 	bl	80002dc <__adddf3>
 800912c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009130:	4604      	mov	r4, r0
 8009132:	460d      	mov	r5, r1
 8009134:	f7f7 fd18 	bl	8000b68 <__aeabi_dcmpgt>
 8009138:	b9c0      	cbnz	r0, 800916c <_dtoa_r+0x6bc>
 800913a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800913e:	4620      	mov	r0, r4
 8009140:	4629      	mov	r1, r5
 8009142:	f7f7 fce9 	bl	8000b18 <__aeabi_dcmpeq>
 8009146:	b110      	cbz	r0, 800914e <_dtoa_r+0x69e>
 8009148:	f018 0f01 	tst.w	r8, #1
 800914c:	d10e      	bne.n	800916c <_dtoa_r+0x6bc>
 800914e:	9902      	ldr	r1, [sp, #8]
 8009150:	4648      	mov	r0, r9
 8009152:	f000 fbbd 	bl	80098d0 <_Bfree>
 8009156:	2300      	movs	r3, #0
 8009158:	7033      	strb	r3, [r6, #0]
 800915a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800915c:	3701      	adds	r7, #1
 800915e:	601f      	str	r7, [r3, #0]
 8009160:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009162:	2b00      	cmp	r3, #0
 8009164:	f000 824b 	beq.w	80095fe <_dtoa_r+0xb4e>
 8009168:	601e      	str	r6, [r3, #0]
 800916a:	e248      	b.n	80095fe <_dtoa_r+0xb4e>
 800916c:	46b8      	mov	r8, r7
 800916e:	4633      	mov	r3, r6
 8009170:	461e      	mov	r6, r3
 8009172:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009176:	2a39      	cmp	r2, #57	@ 0x39
 8009178:	d106      	bne.n	8009188 <_dtoa_r+0x6d8>
 800917a:	459a      	cmp	sl, r3
 800917c:	d1f8      	bne.n	8009170 <_dtoa_r+0x6c0>
 800917e:	2230      	movs	r2, #48	@ 0x30
 8009180:	f108 0801 	add.w	r8, r8, #1
 8009184:	f88a 2000 	strb.w	r2, [sl]
 8009188:	781a      	ldrb	r2, [r3, #0]
 800918a:	3201      	adds	r2, #1
 800918c:	701a      	strb	r2, [r3, #0]
 800918e:	e7a0      	b.n	80090d2 <_dtoa_r+0x622>
 8009190:	4b6f      	ldr	r3, [pc, #444]	@ (8009350 <_dtoa_r+0x8a0>)
 8009192:	2200      	movs	r2, #0
 8009194:	f7f7 fa58 	bl	8000648 <__aeabi_dmul>
 8009198:	2200      	movs	r2, #0
 800919a:	2300      	movs	r3, #0
 800919c:	4604      	mov	r4, r0
 800919e:	460d      	mov	r5, r1
 80091a0:	f7f7 fcba 	bl	8000b18 <__aeabi_dcmpeq>
 80091a4:	2800      	cmp	r0, #0
 80091a6:	d09f      	beq.n	80090e8 <_dtoa_r+0x638>
 80091a8:	e7d1      	b.n	800914e <_dtoa_r+0x69e>
 80091aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091ac:	2a00      	cmp	r2, #0
 80091ae:	f000 80ea 	beq.w	8009386 <_dtoa_r+0x8d6>
 80091b2:	9a07      	ldr	r2, [sp, #28]
 80091b4:	2a01      	cmp	r2, #1
 80091b6:	f300 80cd 	bgt.w	8009354 <_dtoa_r+0x8a4>
 80091ba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80091bc:	2a00      	cmp	r2, #0
 80091be:	f000 80c1 	beq.w	8009344 <_dtoa_r+0x894>
 80091c2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80091c6:	9c08      	ldr	r4, [sp, #32]
 80091c8:	9e00      	ldr	r6, [sp, #0]
 80091ca:	9a00      	ldr	r2, [sp, #0]
 80091cc:	441a      	add	r2, r3
 80091ce:	9200      	str	r2, [sp, #0]
 80091d0:	9a06      	ldr	r2, [sp, #24]
 80091d2:	2101      	movs	r1, #1
 80091d4:	441a      	add	r2, r3
 80091d6:	4648      	mov	r0, r9
 80091d8:	9206      	str	r2, [sp, #24]
 80091da:	f000 fc2d 	bl	8009a38 <__i2b>
 80091de:	4605      	mov	r5, r0
 80091e0:	b166      	cbz	r6, 80091fc <_dtoa_r+0x74c>
 80091e2:	9b06      	ldr	r3, [sp, #24]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	dd09      	ble.n	80091fc <_dtoa_r+0x74c>
 80091e8:	42b3      	cmp	r3, r6
 80091ea:	9a00      	ldr	r2, [sp, #0]
 80091ec:	bfa8      	it	ge
 80091ee:	4633      	movge	r3, r6
 80091f0:	1ad2      	subs	r2, r2, r3
 80091f2:	9200      	str	r2, [sp, #0]
 80091f4:	9a06      	ldr	r2, [sp, #24]
 80091f6:	1af6      	subs	r6, r6, r3
 80091f8:	1ad3      	subs	r3, r2, r3
 80091fa:	9306      	str	r3, [sp, #24]
 80091fc:	9b08      	ldr	r3, [sp, #32]
 80091fe:	b30b      	cbz	r3, 8009244 <_dtoa_r+0x794>
 8009200:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009202:	2b00      	cmp	r3, #0
 8009204:	f000 80c6 	beq.w	8009394 <_dtoa_r+0x8e4>
 8009208:	2c00      	cmp	r4, #0
 800920a:	f000 80c0 	beq.w	800938e <_dtoa_r+0x8de>
 800920e:	4629      	mov	r1, r5
 8009210:	4622      	mov	r2, r4
 8009212:	4648      	mov	r0, r9
 8009214:	f000 fcc8 	bl	8009ba8 <__pow5mult>
 8009218:	9a02      	ldr	r2, [sp, #8]
 800921a:	4601      	mov	r1, r0
 800921c:	4605      	mov	r5, r0
 800921e:	4648      	mov	r0, r9
 8009220:	f000 fc20 	bl	8009a64 <__multiply>
 8009224:	9902      	ldr	r1, [sp, #8]
 8009226:	4680      	mov	r8, r0
 8009228:	4648      	mov	r0, r9
 800922a:	f000 fb51 	bl	80098d0 <_Bfree>
 800922e:	9b08      	ldr	r3, [sp, #32]
 8009230:	1b1b      	subs	r3, r3, r4
 8009232:	9308      	str	r3, [sp, #32]
 8009234:	f000 80b1 	beq.w	800939a <_dtoa_r+0x8ea>
 8009238:	9a08      	ldr	r2, [sp, #32]
 800923a:	4641      	mov	r1, r8
 800923c:	4648      	mov	r0, r9
 800923e:	f000 fcb3 	bl	8009ba8 <__pow5mult>
 8009242:	9002      	str	r0, [sp, #8]
 8009244:	2101      	movs	r1, #1
 8009246:	4648      	mov	r0, r9
 8009248:	f000 fbf6 	bl	8009a38 <__i2b>
 800924c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800924e:	4604      	mov	r4, r0
 8009250:	2b00      	cmp	r3, #0
 8009252:	f000 81d8 	beq.w	8009606 <_dtoa_r+0xb56>
 8009256:	461a      	mov	r2, r3
 8009258:	4601      	mov	r1, r0
 800925a:	4648      	mov	r0, r9
 800925c:	f000 fca4 	bl	8009ba8 <__pow5mult>
 8009260:	9b07      	ldr	r3, [sp, #28]
 8009262:	2b01      	cmp	r3, #1
 8009264:	4604      	mov	r4, r0
 8009266:	f300 809f 	bgt.w	80093a8 <_dtoa_r+0x8f8>
 800926a:	9b04      	ldr	r3, [sp, #16]
 800926c:	2b00      	cmp	r3, #0
 800926e:	f040 8097 	bne.w	80093a0 <_dtoa_r+0x8f0>
 8009272:	9b05      	ldr	r3, [sp, #20]
 8009274:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009278:	2b00      	cmp	r3, #0
 800927a:	f040 8093 	bne.w	80093a4 <_dtoa_r+0x8f4>
 800927e:	9b05      	ldr	r3, [sp, #20]
 8009280:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009284:	0d1b      	lsrs	r3, r3, #20
 8009286:	051b      	lsls	r3, r3, #20
 8009288:	b133      	cbz	r3, 8009298 <_dtoa_r+0x7e8>
 800928a:	9b00      	ldr	r3, [sp, #0]
 800928c:	3301      	adds	r3, #1
 800928e:	9300      	str	r3, [sp, #0]
 8009290:	9b06      	ldr	r3, [sp, #24]
 8009292:	3301      	adds	r3, #1
 8009294:	9306      	str	r3, [sp, #24]
 8009296:	2301      	movs	r3, #1
 8009298:	9308      	str	r3, [sp, #32]
 800929a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800929c:	2b00      	cmp	r3, #0
 800929e:	f000 81b8 	beq.w	8009612 <_dtoa_r+0xb62>
 80092a2:	6923      	ldr	r3, [r4, #16]
 80092a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80092a8:	6918      	ldr	r0, [r3, #16]
 80092aa:	f000 fb79 	bl	80099a0 <__hi0bits>
 80092ae:	f1c0 0020 	rsb	r0, r0, #32
 80092b2:	9b06      	ldr	r3, [sp, #24]
 80092b4:	4418      	add	r0, r3
 80092b6:	f010 001f 	ands.w	r0, r0, #31
 80092ba:	f000 8082 	beq.w	80093c2 <_dtoa_r+0x912>
 80092be:	f1c0 0320 	rsb	r3, r0, #32
 80092c2:	2b04      	cmp	r3, #4
 80092c4:	dd73      	ble.n	80093ae <_dtoa_r+0x8fe>
 80092c6:	9b00      	ldr	r3, [sp, #0]
 80092c8:	f1c0 001c 	rsb	r0, r0, #28
 80092cc:	4403      	add	r3, r0
 80092ce:	9300      	str	r3, [sp, #0]
 80092d0:	9b06      	ldr	r3, [sp, #24]
 80092d2:	4403      	add	r3, r0
 80092d4:	4406      	add	r6, r0
 80092d6:	9306      	str	r3, [sp, #24]
 80092d8:	9b00      	ldr	r3, [sp, #0]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	dd05      	ble.n	80092ea <_dtoa_r+0x83a>
 80092de:	9902      	ldr	r1, [sp, #8]
 80092e0:	461a      	mov	r2, r3
 80092e2:	4648      	mov	r0, r9
 80092e4:	f000 fcba 	bl	8009c5c <__lshift>
 80092e8:	9002      	str	r0, [sp, #8]
 80092ea:	9b06      	ldr	r3, [sp, #24]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	dd05      	ble.n	80092fc <_dtoa_r+0x84c>
 80092f0:	4621      	mov	r1, r4
 80092f2:	461a      	mov	r2, r3
 80092f4:	4648      	mov	r0, r9
 80092f6:	f000 fcb1 	bl	8009c5c <__lshift>
 80092fa:	4604      	mov	r4, r0
 80092fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d061      	beq.n	80093c6 <_dtoa_r+0x916>
 8009302:	9802      	ldr	r0, [sp, #8]
 8009304:	4621      	mov	r1, r4
 8009306:	f000 fd15 	bl	8009d34 <__mcmp>
 800930a:	2800      	cmp	r0, #0
 800930c:	da5b      	bge.n	80093c6 <_dtoa_r+0x916>
 800930e:	2300      	movs	r3, #0
 8009310:	9902      	ldr	r1, [sp, #8]
 8009312:	220a      	movs	r2, #10
 8009314:	4648      	mov	r0, r9
 8009316:	f000 fafd 	bl	8009914 <__multadd>
 800931a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800931c:	9002      	str	r0, [sp, #8]
 800931e:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8009322:	2b00      	cmp	r3, #0
 8009324:	f000 8177 	beq.w	8009616 <_dtoa_r+0xb66>
 8009328:	4629      	mov	r1, r5
 800932a:	2300      	movs	r3, #0
 800932c:	220a      	movs	r2, #10
 800932e:	4648      	mov	r0, r9
 8009330:	f000 faf0 	bl	8009914 <__multadd>
 8009334:	f1bb 0f00 	cmp.w	fp, #0
 8009338:	4605      	mov	r5, r0
 800933a:	dc6f      	bgt.n	800941c <_dtoa_r+0x96c>
 800933c:	9b07      	ldr	r3, [sp, #28]
 800933e:	2b02      	cmp	r3, #2
 8009340:	dc49      	bgt.n	80093d6 <_dtoa_r+0x926>
 8009342:	e06b      	b.n	800941c <_dtoa_r+0x96c>
 8009344:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009346:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800934a:	e73c      	b.n	80091c6 <_dtoa_r+0x716>
 800934c:	3fe00000 	.word	0x3fe00000
 8009350:	40240000 	.word	0x40240000
 8009354:	9b03      	ldr	r3, [sp, #12]
 8009356:	1e5c      	subs	r4, r3, #1
 8009358:	9b08      	ldr	r3, [sp, #32]
 800935a:	42a3      	cmp	r3, r4
 800935c:	db09      	blt.n	8009372 <_dtoa_r+0x8c2>
 800935e:	1b1c      	subs	r4, r3, r4
 8009360:	9b03      	ldr	r3, [sp, #12]
 8009362:	2b00      	cmp	r3, #0
 8009364:	f6bf af30 	bge.w	80091c8 <_dtoa_r+0x718>
 8009368:	9b00      	ldr	r3, [sp, #0]
 800936a:	9a03      	ldr	r2, [sp, #12]
 800936c:	1a9e      	subs	r6, r3, r2
 800936e:	2300      	movs	r3, #0
 8009370:	e72b      	b.n	80091ca <_dtoa_r+0x71a>
 8009372:	9b08      	ldr	r3, [sp, #32]
 8009374:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009376:	9408      	str	r4, [sp, #32]
 8009378:	1ae3      	subs	r3, r4, r3
 800937a:	441a      	add	r2, r3
 800937c:	9e00      	ldr	r6, [sp, #0]
 800937e:	9b03      	ldr	r3, [sp, #12]
 8009380:	920d      	str	r2, [sp, #52]	@ 0x34
 8009382:	2400      	movs	r4, #0
 8009384:	e721      	b.n	80091ca <_dtoa_r+0x71a>
 8009386:	9c08      	ldr	r4, [sp, #32]
 8009388:	9e00      	ldr	r6, [sp, #0]
 800938a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800938c:	e728      	b.n	80091e0 <_dtoa_r+0x730>
 800938e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009392:	e751      	b.n	8009238 <_dtoa_r+0x788>
 8009394:	9a08      	ldr	r2, [sp, #32]
 8009396:	9902      	ldr	r1, [sp, #8]
 8009398:	e750      	b.n	800923c <_dtoa_r+0x78c>
 800939a:	f8cd 8008 	str.w	r8, [sp, #8]
 800939e:	e751      	b.n	8009244 <_dtoa_r+0x794>
 80093a0:	2300      	movs	r3, #0
 80093a2:	e779      	b.n	8009298 <_dtoa_r+0x7e8>
 80093a4:	9b04      	ldr	r3, [sp, #16]
 80093a6:	e777      	b.n	8009298 <_dtoa_r+0x7e8>
 80093a8:	2300      	movs	r3, #0
 80093aa:	9308      	str	r3, [sp, #32]
 80093ac:	e779      	b.n	80092a2 <_dtoa_r+0x7f2>
 80093ae:	d093      	beq.n	80092d8 <_dtoa_r+0x828>
 80093b0:	9a00      	ldr	r2, [sp, #0]
 80093b2:	331c      	adds	r3, #28
 80093b4:	441a      	add	r2, r3
 80093b6:	9200      	str	r2, [sp, #0]
 80093b8:	9a06      	ldr	r2, [sp, #24]
 80093ba:	441a      	add	r2, r3
 80093bc:	441e      	add	r6, r3
 80093be:	9206      	str	r2, [sp, #24]
 80093c0:	e78a      	b.n	80092d8 <_dtoa_r+0x828>
 80093c2:	4603      	mov	r3, r0
 80093c4:	e7f4      	b.n	80093b0 <_dtoa_r+0x900>
 80093c6:	9b03      	ldr	r3, [sp, #12]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	46b8      	mov	r8, r7
 80093cc:	dc20      	bgt.n	8009410 <_dtoa_r+0x960>
 80093ce:	469b      	mov	fp, r3
 80093d0:	9b07      	ldr	r3, [sp, #28]
 80093d2:	2b02      	cmp	r3, #2
 80093d4:	dd1e      	ble.n	8009414 <_dtoa_r+0x964>
 80093d6:	f1bb 0f00 	cmp.w	fp, #0
 80093da:	f47f adb1 	bne.w	8008f40 <_dtoa_r+0x490>
 80093de:	4621      	mov	r1, r4
 80093e0:	465b      	mov	r3, fp
 80093e2:	2205      	movs	r2, #5
 80093e4:	4648      	mov	r0, r9
 80093e6:	f000 fa95 	bl	8009914 <__multadd>
 80093ea:	4601      	mov	r1, r0
 80093ec:	4604      	mov	r4, r0
 80093ee:	9802      	ldr	r0, [sp, #8]
 80093f0:	f000 fca0 	bl	8009d34 <__mcmp>
 80093f4:	2800      	cmp	r0, #0
 80093f6:	f77f ada3 	ble.w	8008f40 <_dtoa_r+0x490>
 80093fa:	4656      	mov	r6, sl
 80093fc:	2331      	movs	r3, #49	@ 0x31
 80093fe:	f806 3b01 	strb.w	r3, [r6], #1
 8009402:	f108 0801 	add.w	r8, r8, #1
 8009406:	e59f      	b.n	8008f48 <_dtoa_r+0x498>
 8009408:	9c03      	ldr	r4, [sp, #12]
 800940a:	46b8      	mov	r8, r7
 800940c:	4625      	mov	r5, r4
 800940e:	e7f4      	b.n	80093fa <_dtoa_r+0x94a>
 8009410:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009414:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009416:	2b00      	cmp	r3, #0
 8009418:	f000 8101 	beq.w	800961e <_dtoa_r+0xb6e>
 800941c:	2e00      	cmp	r6, #0
 800941e:	dd05      	ble.n	800942c <_dtoa_r+0x97c>
 8009420:	4629      	mov	r1, r5
 8009422:	4632      	mov	r2, r6
 8009424:	4648      	mov	r0, r9
 8009426:	f000 fc19 	bl	8009c5c <__lshift>
 800942a:	4605      	mov	r5, r0
 800942c:	9b08      	ldr	r3, [sp, #32]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d05c      	beq.n	80094ec <_dtoa_r+0xa3c>
 8009432:	6869      	ldr	r1, [r5, #4]
 8009434:	4648      	mov	r0, r9
 8009436:	f000 fa0b 	bl	8009850 <_Balloc>
 800943a:	4606      	mov	r6, r0
 800943c:	b928      	cbnz	r0, 800944a <_dtoa_r+0x99a>
 800943e:	4b82      	ldr	r3, [pc, #520]	@ (8009648 <_dtoa_r+0xb98>)
 8009440:	4602      	mov	r2, r0
 8009442:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009446:	f7ff bb4a 	b.w	8008ade <_dtoa_r+0x2e>
 800944a:	692a      	ldr	r2, [r5, #16]
 800944c:	3202      	adds	r2, #2
 800944e:	0092      	lsls	r2, r2, #2
 8009450:	f105 010c 	add.w	r1, r5, #12
 8009454:	300c      	adds	r0, #12
 8009456:	f7ff fa92 	bl	800897e <memcpy>
 800945a:	2201      	movs	r2, #1
 800945c:	4631      	mov	r1, r6
 800945e:	4648      	mov	r0, r9
 8009460:	f000 fbfc 	bl	8009c5c <__lshift>
 8009464:	f10a 0301 	add.w	r3, sl, #1
 8009468:	9300      	str	r3, [sp, #0]
 800946a:	eb0a 030b 	add.w	r3, sl, fp
 800946e:	9308      	str	r3, [sp, #32]
 8009470:	9b04      	ldr	r3, [sp, #16]
 8009472:	f003 0301 	and.w	r3, r3, #1
 8009476:	462f      	mov	r7, r5
 8009478:	9306      	str	r3, [sp, #24]
 800947a:	4605      	mov	r5, r0
 800947c:	9b00      	ldr	r3, [sp, #0]
 800947e:	9802      	ldr	r0, [sp, #8]
 8009480:	4621      	mov	r1, r4
 8009482:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8009486:	f7ff fa88 	bl	800899a <quorem>
 800948a:	4603      	mov	r3, r0
 800948c:	3330      	adds	r3, #48	@ 0x30
 800948e:	9003      	str	r0, [sp, #12]
 8009490:	4639      	mov	r1, r7
 8009492:	9802      	ldr	r0, [sp, #8]
 8009494:	9309      	str	r3, [sp, #36]	@ 0x24
 8009496:	f000 fc4d 	bl	8009d34 <__mcmp>
 800949a:	462a      	mov	r2, r5
 800949c:	9004      	str	r0, [sp, #16]
 800949e:	4621      	mov	r1, r4
 80094a0:	4648      	mov	r0, r9
 80094a2:	f000 fc63 	bl	8009d6c <__mdiff>
 80094a6:	68c2      	ldr	r2, [r0, #12]
 80094a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094aa:	4606      	mov	r6, r0
 80094ac:	bb02      	cbnz	r2, 80094f0 <_dtoa_r+0xa40>
 80094ae:	4601      	mov	r1, r0
 80094b0:	9802      	ldr	r0, [sp, #8]
 80094b2:	f000 fc3f 	bl	8009d34 <__mcmp>
 80094b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094b8:	4602      	mov	r2, r0
 80094ba:	4631      	mov	r1, r6
 80094bc:	4648      	mov	r0, r9
 80094be:	920c      	str	r2, [sp, #48]	@ 0x30
 80094c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80094c2:	f000 fa05 	bl	80098d0 <_Bfree>
 80094c6:	9b07      	ldr	r3, [sp, #28]
 80094c8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80094ca:	9e00      	ldr	r6, [sp, #0]
 80094cc:	ea42 0103 	orr.w	r1, r2, r3
 80094d0:	9b06      	ldr	r3, [sp, #24]
 80094d2:	4319      	orrs	r1, r3
 80094d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094d6:	d10d      	bne.n	80094f4 <_dtoa_r+0xa44>
 80094d8:	2b39      	cmp	r3, #57	@ 0x39
 80094da:	d027      	beq.n	800952c <_dtoa_r+0xa7c>
 80094dc:	9a04      	ldr	r2, [sp, #16]
 80094de:	2a00      	cmp	r2, #0
 80094e0:	dd01      	ble.n	80094e6 <_dtoa_r+0xa36>
 80094e2:	9b03      	ldr	r3, [sp, #12]
 80094e4:	3331      	adds	r3, #49	@ 0x31
 80094e6:	f88b 3000 	strb.w	r3, [fp]
 80094ea:	e52e      	b.n	8008f4a <_dtoa_r+0x49a>
 80094ec:	4628      	mov	r0, r5
 80094ee:	e7b9      	b.n	8009464 <_dtoa_r+0x9b4>
 80094f0:	2201      	movs	r2, #1
 80094f2:	e7e2      	b.n	80094ba <_dtoa_r+0xa0a>
 80094f4:	9904      	ldr	r1, [sp, #16]
 80094f6:	2900      	cmp	r1, #0
 80094f8:	db04      	blt.n	8009504 <_dtoa_r+0xa54>
 80094fa:	9807      	ldr	r0, [sp, #28]
 80094fc:	4301      	orrs	r1, r0
 80094fe:	9806      	ldr	r0, [sp, #24]
 8009500:	4301      	orrs	r1, r0
 8009502:	d120      	bne.n	8009546 <_dtoa_r+0xa96>
 8009504:	2a00      	cmp	r2, #0
 8009506:	ddee      	ble.n	80094e6 <_dtoa_r+0xa36>
 8009508:	9902      	ldr	r1, [sp, #8]
 800950a:	9300      	str	r3, [sp, #0]
 800950c:	2201      	movs	r2, #1
 800950e:	4648      	mov	r0, r9
 8009510:	f000 fba4 	bl	8009c5c <__lshift>
 8009514:	4621      	mov	r1, r4
 8009516:	9002      	str	r0, [sp, #8]
 8009518:	f000 fc0c 	bl	8009d34 <__mcmp>
 800951c:	2800      	cmp	r0, #0
 800951e:	9b00      	ldr	r3, [sp, #0]
 8009520:	dc02      	bgt.n	8009528 <_dtoa_r+0xa78>
 8009522:	d1e0      	bne.n	80094e6 <_dtoa_r+0xa36>
 8009524:	07da      	lsls	r2, r3, #31
 8009526:	d5de      	bpl.n	80094e6 <_dtoa_r+0xa36>
 8009528:	2b39      	cmp	r3, #57	@ 0x39
 800952a:	d1da      	bne.n	80094e2 <_dtoa_r+0xa32>
 800952c:	2339      	movs	r3, #57	@ 0x39
 800952e:	f88b 3000 	strb.w	r3, [fp]
 8009532:	4633      	mov	r3, r6
 8009534:	461e      	mov	r6, r3
 8009536:	3b01      	subs	r3, #1
 8009538:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800953c:	2a39      	cmp	r2, #57	@ 0x39
 800953e:	d04e      	beq.n	80095de <_dtoa_r+0xb2e>
 8009540:	3201      	adds	r2, #1
 8009542:	701a      	strb	r2, [r3, #0]
 8009544:	e501      	b.n	8008f4a <_dtoa_r+0x49a>
 8009546:	2a00      	cmp	r2, #0
 8009548:	dd03      	ble.n	8009552 <_dtoa_r+0xaa2>
 800954a:	2b39      	cmp	r3, #57	@ 0x39
 800954c:	d0ee      	beq.n	800952c <_dtoa_r+0xa7c>
 800954e:	3301      	adds	r3, #1
 8009550:	e7c9      	b.n	80094e6 <_dtoa_r+0xa36>
 8009552:	9a00      	ldr	r2, [sp, #0]
 8009554:	9908      	ldr	r1, [sp, #32]
 8009556:	f802 3c01 	strb.w	r3, [r2, #-1]
 800955a:	428a      	cmp	r2, r1
 800955c:	d028      	beq.n	80095b0 <_dtoa_r+0xb00>
 800955e:	9902      	ldr	r1, [sp, #8]
 8009560:	2300      	movs	r3, #0
 8009562:	220a      	movs	r2, #10
 8009564:	4648      	mov	r0, r9
 8009566:	f000 f9d5 	bl	8009914 <__multadd>
 800956a:	42af      	cmp	r7, r5
 800956c:	9002      	str	r0, [sp, #8]
 800956e:	f04f 0300 	mov.w	r3, #0
 8009572:	f04f 020a 	mov.w	r2, #10
 8009576:	4639      	mov	r1, r7
 8009578:	4648      	mov	r0, r9
 800957a:	d107      	bne.n	800958c <_dtoa_r+0xadc>
 800957c:	f000 f9ca 	bl	8009914 <__multadd>
 8009580:	4607      	mov	r7, r0
 8009582:	4605      	mov	r5, r0
 8009584:	9b00      	ldr	r3, [sp, #0]
 8009586:	3301      	adds	r3, #1
 8009588:	9300      	str	r3, [sp, #0]
 800958a:	e777      	b.n	800947c <_dtoa_r+0x9cc>
 800958c:	f000 f9c2 	bl	8009914 <__multadd>
 8009590:	4629      	mov	r1, r5
 8009592:	4607      	mov	r7, r0
 8009594:	2300      	movs	r3, #0
 8009596:	220a      	movs	r2, #10
 8009598:	4648      	mov	r0, r9
 800959a:	f000 f9bb 	bl	8009914 <__multadd>
 800959e:	4605      	mov	r5, r0
 80095a0:	e7f0      	b.n	8009584 <_dtoa_r+0xad4>
 80095a2:	f1bb 0f00 	cmp.w	fp, #0
 80095a6:	bfcc      	ite	gt
 80095a8:	465e      	movgt	r6, fp
 80095aa:	2601      	movle	r6, #1
 80095ac:	4456      	add	r6, sl
 80095ae:	2700      	movs	r7, #0
 80095b0:	9902      	ldr	r1, [sp, #8]
 80095b2:	9300      	str	r3, [sp, #0]
 80095b4:	2201      	movs	r2, #1
 80095b6:	4648      	mov	r0, r9
 80095b8:	f000 fb50 	bl	8009c5c <__lshift>
 80095bc:	4621      	mov	r1, r4
 80095be:	9002      	str	r0, [sp, #8]
 80095c0:	f000 fbb8 	bl	8009d34 <__mcmp>
 80095c4:	2800      	cmp	r0, #0
 80095c6:	dcb4      	bgt.n	8009532 <_dtoa_r+0xa82>
 80095c8:	d102      	bne.n	80095d0 <_dtoa_r+0xb20>
 80095ca:	9b00      	ldr	r3, [sp, #0]
 80095cc:	07db      	lsls	r3, r3, #31
 80095ce:	d4b0      	bmi.n	8009532 <_dtoa_r+0xa82>
 80095d0:	4633      	mov	r3, r6
 80095d2:	461e      	mov	r6, r3
 80095d4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80095d8:	2a30      	cmp	r2, #48	@ 0x30
 80095da:	d0fa      	beq.n	80095d2 <_dtoa_r+0xb22>
 80095dc:	e4b5      	b.n	8008f4a <_dtoa_r+0x49a>
 80095de:	459a      	cmp	sl, r3
 80095e0:	d1a8      	bne.n	8009534 <_dtoa_r+0xa84>
 80095e2:	2331      	movs	r3, #49	@ 0x31
 80095e4:	f108 0801 	add.w	r8, r8, #1
 80095e8:	f88a 3000 	strb.w	r3, [sl]
 80095ec:	e4ad      	b.n	8008f4a <_dtoa_r+0x49a>
 80095ee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80095f0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800964c <_dtoa_r+0xb9c>
 80095f4:	b11b      	cbz	r3, 80095fe <_dtoa_r+0xb4e>
 80095f6:	f10a 0308 	add.w	r3, sl, #8
 80095fa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80095fc:	6013      	str	r3, [r2, #0]
 80095fe:	4650      	mov	r0, sl
 8009600:	b017      	add	sp, #92	@ 0x5c
 8009602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009606:	9b07      	ldr	r3, [sp, #28]
 8009608:	2b01      	cmp	r3, #1
 800960a:	f77f ae2e 	ble.w	800926a <_dtoa_r+0x7ba>
 800960e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009610:	9308      	str	r3, [sp, #32]
 8009612:	2001      	movs	r0, #1
 8009614:	e64d      	b.n	80092b2 <_dtoa_r+0x802>
 8009616:	f1bb 0f00 	cmp.w	fp, #0
 800961a:	f77f aed9 	ble.w	80093d0 <_dtoa_r+0x920>
 800961e:	4656      	mov	r6, sl
 8009620:	9802      	ldr	r0, [sp, #8]
 8009622:	4621      	mov	r1, r4
 8009624:	f7ff f9b9 	bl	800899a <quorem>
 8009628:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800962c:	f806 3b01 	strb.w	r3, [r6], #1
 8009630:	eba6 020a 	sub.w	r2, r6, sl
 8009634:	4593      	cmp	fp, r2
 8009636:	ddb4      	ble.n	80095a2 <_dtoa_r+0xaf2>
 8009638:	9902      	ldr	r1, [sp, #8]
 800963a:	2300      	movs	r3, #0
 800963c:	220a      	movs	r2, #10
 800963e:	4648      	mov	r0, r9
 8009640:	f000 f968 	bl	8009914 <__multadd>
 8009644:	9002      	str	r0, [sp, #8]
 8009646:	e7eb      	b.n	8009620 <_dtoa_r+0xb70>
 8009648:	0800a7c8 	.word	0x0800a7c8
 800964c:	0800a74c 	.word	0x0800a74c

08009650 <_free_r>:
 8009650:	b538      	push	{r3, r4, r5, lr}
 8009652:	4605      	mov	r5, r0
 8009654:	2900      	cmp	r1, #0
 8009656:	d041      	beq.n	80096dc <_free_r+0x8c>
 8009658:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800965c:	1f0c      	subs	r4, r1, #4
 800965e:	2b00      	cmp	r3, #0
 8009660:	bfb8      	it	lt
 8009662:	18e4      	addlt	r4, r4, r3
 8009664:	f000 f8e8 	bl	8009838 <__malloc_lock>
 8009668:	4a1d      	ldr	r2, [pc, #116]	@ (80096e0 <_free_r+0x90>)
 800966a:	6813      	ldr	r3, [r2, #0]
 800966c:	b933      	cbnz	r3, 800967c <_free_r+0x2c>
 800966e:	6063      	str	r3, [r4, #4]
 8009670:	6014      	str	r4, [r2, #0]
 8009672:	4628      	mov	r0, r5
 8009674:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009678:	f000 b8e4 	b.w	8009844 <__malloc_unlock>
 800967c:	42a3      	cmp	r3, r4
 800967e:	d908      	bls.n	8009692 <_free_r+0x42>
 8009680:	6820      	ldr	r0, [r4, #0]
 8009682:	1821      	adds	r1, r4, r0
 8009684:	428b      	cmp	r3, r1
 8009686:	bf01      	itttt	eq
 8009688:	6819      	ldreq	r1, [r3, #0]
 800968a:	685b      	ldreq	r3, [r3, #4]
 800968c:	1809      	addeq	r1, r1, r0
 800968e:	6021      	streq	r1, [r4, #0]
 8009690:	e7ed      	b.n	800966e <_free_r+0x1e>
 8009692:	461a      	mov	r2, r3
 8009694:	685b      	ldr	r3, [r3, #4]
 8009696:	b10b      	cbz	r3, 800969c <_free_r+0x4c>
 8009698:	42a3      	cmp	r3, r4
 800969a:	d9fa      	bls.n	8009692 <_free_r+0x42>
 800969c:	6811      	ldr	r1, [r2, #0]
 800969e:	1850      	adds	r0, r2, r1
 80096a0:	42a0      	cmp	r0, r4
 80096a2:	d10b      	bne.n	80096bc <_free_r+0x6c>
 80096a4:	6820      	ldr	r0, [r4, #0]
 80096a6:	4401      	add	r1, r0
 80096a8:	1850      	adds	r0, r2, r1
 80096aa:	4283      	cmp	r3, r0
 80096ac:	6011      	str	r1, [r2, #0]
 80096ae:	d1e0      	bne.n	8009672 <_free_r+0x22>
 80096b0:	6818      	ldr	r0, [r3, #0]
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	6053      	str	r3, [r2, #4]
 80096b6:	4408      	add	r0, r1
 80096b8:	6010      	str	r0, [r2, #0]
 80096ba:	e7da      	b.n	8009672 <_free_r+0x22>
 80096bc:	d902      	bls.n	80096c4 <_free_r+0x74>
 80096be:	230c      	movs	r3, #12
 80096c0:	602b      	str	r3, [r5, #0]
 80096c2:	e7d6      	b.n	8009672 <_free_r+0x22>
 80096c4:	6820      	ldr	r0, [r4, #0]
 80096c6:	1821      	adds	r1, r4, r0
 80096c8:	428b      	cmp	r3, r1
 80096ca:	bf04      	itt	eq
 80096cc:	6819      	ldreq	r1, [r3, #0]
 80096ce:	685b      	ldreq	r3, [r3, #4]
 80096d0:	6063      	str	r3, [r4, #4]
 80096d2:	bf04      	itt	eq
 80096d4:	1809      	addeq	r1, r1, r0
 80096d6:	6021      	streq	r1, [r4, #0]
 80096d8:	6054      	str	r4, [r2, #4]
 80096da:	e7ca      	b.n	8009672 <_free_r+0x22>
 80096dc:	bd38      	pop	{r3, r4, r5, pc}
 80096de:	bf00      	nop
 80096e0:	200007a4 	.word	0x200007a4

080096e4 <malloc>:
 80096e4:	4b02      	ldr	r3, [pc, #8]	@ (80096f0 <malloc+0xc>)
 80096e6:	4601      	mov	r1, r0
 80096e8:	6818      	ldr	r0, [r3, #0]
 80096ea:	f000 b825 	b.w	8009738 <_malloc_r>
 80096ee:	bf00      	nop
 80096f0:	20000064 	.word	0x20000064

080096f4 <sbrk_aligned>:
 80096f4:	b570      	push	{r4, r5, r6, lr}
 80096f6:	4e0f      	ldr	r6, [pc, #60]	@ (8009734 <sbrk_aligned+0x40>)
 80096f8:	460c      	mov	r4, r1
 80096fa:	6831      	ldr	r1, [r6, #0]
 80096fc:	4605      	mov	r5, r0
 80096fe:	b911      	cbnz	r1, 8009706 <sbrk_aligned+0x12>
 8009700:	f000 fccc 	bl	800a09c <_sbrk_r>
 8009704:	6030      	str	r0, [r6, #0]
 8009706:	4621      	mov	r1, r4
 8009708:	4628      	mov	r0, r5
 800970a:	f000 fcc7 	bl	800a09c <_sbrk_r>
 800970e:	1c43      	adds	r3, r0, #1
 8009710:	d103      	bne.n	800971a <sbrk_aligned+0x26>
 8009712:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009716:	4620      	mov	r0, r4
 8009718:	bd70      	pop	{r4, r5, r6, pc}
 800971a:	1cc4      	adds	r4, r0, #3
 800971c:	f024 0403 	bic.w	r4, r4, #3
 8009720:	42a0      	cmp	r0, r4
 8009722:	d0f8      	beq.n	8009716 <sbrk_aligned+0x22>
 8009724:	1a21      	subs	r1, r4, r0
 8009726:	4628      	mov	r0, r5
 8009728:	f000 fcb8 	bl	800a09c <_sbrk_r>
 800972c:	3001      	adds	r0, #1
 800972e:	d1f2      	bne.n	8009716 <sbrk_aligned+0x22>
 8009730:	e7ef      	b.n	8009712 <sbrk_aligned+0x1e>
 8009732:	bf00      	nop
 8009734:	200007a0 	.word	0x200007a0

08009738 <_malloc_r>:
 8009738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800973c:	1ccd      	adds	r5, r1, #3
 800973e:	f025 0503 	bic.w	r5, r5, #3
 8009742:	3508      	adds	r5, #8
 8009744:	2d0c      	cmp	r5, #12
 8009746:	bf38      	it	cc
 8009748:	250c      	movcc	r5, #12
 800974a:	2d00      	cmp	r5, #0
 800974c:	4606      	mov	r6, r0
 800974e:	db01      	blt.n	8009754 <_malloc_r+0x1c>
 8009750:	42a9      	cmp	r1, r5
 8009752:	d904      	bls.n	800975e <_malloc_r+0x26>
 8009754:	230c      	movs	r3, #12
 8009756:	6033      	str	r3, [r6, #0]
 8009758:	2000      	movs	r0, #0
 800975a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800975e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009834 <_malloc_r+0xfc>
 8009762:	f000 f869 	bl	8009838 <__malloc_lock>
 8009766:	f8d8 3000 	ldr.w	r3, [r8]
 800976a:	461c      	mov	r4, r3
 800976c:	bb44      	cbnz	r4, 80097c0 <_malloc_r+0x88>
 800976e:	4629      	mov	r1, r5
 8009770:	4630      	mov	r0, r6
 8009772:	f7ff ffbf 	bl	80096f4 <sbrk_aligned>
 8009776:	1c43      	adds	r3, r0, #1
 8009778:	4604      	mov	r4, r0
 800977a:	d158      	bne.n	800982e <_malloc_r+0xf6>
 800977c:	f8d8 4000 	ldr.w	r4, [r8]
 8009780:	4627      	mov	r7, r4
 8009782:	2f00      	cmp	r7, #0
 8009784:	d143      	bne.n	800980e <_malloc_r+0xd6>
 8009786:	2c00      	cmp	r4, #0
 8009788:	d04b      	beq.n	8009822 <_malloc_r+0xea>
 800978a:	6823      	ldr	r3, [r4, #0]
 800978c:	4639      	mov	r1, r7
 800978e:	4630      	mov	r0, r6
 8009790:	eb04 0903 	add.w	r9, r4, r3
 8009794:	f000 fc82 	bl	800a09c <_sbrk_r>
 8009798:	4581      	cmp	r9, r0
 800979a:	d142      	bne.n	8009822 <_malloc_r+0xea>
 800979c:	6821      	ldr	r1, [r4, #0]
 800979e:	1a6d      	subs	r5, r5, r1
 80097a0:	4629      	mov	r1, r5
 80097a2:	4630      	mov	r0, r6
 80097a4:	f7ff ffa6 	bl	80096f4 <sbrk_aligned>
 80097a8:	3001      	adds	r0, #1
 80097aa:	d03a      	beq.n	8009822 <_malloc_r+0xea>
 80097ac:	6823      	ldr	r3, [r4, #0]
 80097ae:	442b      	add	r3, r5
 80097b0:	6023      	str	r3, [r4, #0]
 80097b2:	f8d8 3000 	ldr.w	r3, [r8]
 80097b6:	685a      	ldr	r2, [r3, #4]
 80097b8:	bb62      	cbnz	r2, 8009814 <_malloc_r+0xdc>
 80097ba:	f8c8 7000 	str.w	r7, [r8]
 80097be:	e00f      	b.n	80097e0 <_malloc_r+0xa8>
 80097c0:	6822      	ldr	r2, [r4, #0]
 80097c2:	1b52      	subs	r2, r2, r5
 80097c4:	d420      	bmi.n	8009808 <_malloc_r+0xd0>
 80097c6:	2a0b      	cmp	r2, #11
 80097c8:	d917      	bls.n	80097fa <_malloc_r+0xc2>
 80097ca:	1961      	adds	r1, r4, r5
 80097cc:	42a3      	cmp	r3, r4
 80097ce:	6025      	str	r5, [r4, #0]
 80097d0:	bf18      	it	ne
 80097d2:	6059      	strne	r1, [r3, #4]
 80097d4:	6863      	ldr	r3, [r4, #4]
 80097d6:	bf08      	it	eq
 80097d8:	f8c8 1000 	streq.w	r1, [r8]
 80097dc:	5162      	str	r2, [r4, r5]
 80097de:	604b      	str	r3, [r1, #4]
 80097e0:	4630      	mov	r0, r6
 80097e2:	f000 f82f 	bl	8009844 <__malloc_unlock>
 80097e6:	f104 000b 	add.w	r0, r4, #11
 80097ea:	1d23      	adds	r3, r4, #4
 80097ec:	f020 0007 	bic.w	r0, r0, #7
 80097f0:	1ac2      	subs	r2, r0, r3
 80097f2:	bf1c      	itt	ne
 80097f4:	1a1b      	subne	r3, r3, r0
 80097f6:	50a3      	strne	r3, [r4, r2]
 80097f8:	e7af      	b.n	800975a <_malloc_r+0x22>
 80097fa:	6862      	ldr	r2, [r4, #4]
 80097fc:	42a3      	cmp	r3, r4
 80097fe:	bf0c      	ite	eq
 8009800:	f8c8 2000 	streq.w	r2, [r8]
 8009804:	605a      	strne	r2, [r3, #4]
 8009806:	e7eb      	b.n	80097e0 <_malloc_r+0xa8>
 8009808:	4623      	mov	r3, r4
 800980a:	6864      	ldr	r4, [r4, #4]
 800980c:	e7ae      	b.n	800976c <_malloc_r+0x34>
 800980e:	463c      	mov	r4, r7
 8009810:	687f      	ldr	r7, [r7, #4]
 8009812:	e7b6      	b.n	8009782 <_malloc_r+0x4a>
 8009814:	461a      	mov	r2, r3
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	42a3      	cmp	r3, r4
 800981a:	d1fb      	bne.n	8009814 <_malloc_r+0xdc>
 800981c:	2300      	movs	r3, #0
 800981e:	6053      	str	r3, [r2, #4]
 8009820:	e7de      	b.n	80097e0 <_malloc_r+0xa8>
 8009822:	230c      	movs	r3, #12
 8009824:	6033      	str	r3, [r6, #0]
 8009826:	4630      	mov	r0, r6
 8009828:	f000 f80c 	bl	8009844 <__malloc_unlock>
 800982c:	e794      	b.n	8009758 <_malloc_r+0x20>
 800982e:	6005      	str	r5, [r0, #0]
 8009830:	e7d6      	b.n	80097e0 <_malloc_r+0xa8>
 8009832:	bf00      	nop
 8009834:	200007a4 	.word	0x200007a4

08009838 <__malloc_lock>:
 8009838:	4801      	ldr	r0, [pc, #4]	@ (8009840 <__malloc_lock+0x8>)
 800983a:	f7ff b89e 	b.w	800897a <__retarget_lock_acquire_recursive>
 800983e:	bf00      	nop
 8009840:	2000079c 	.word	0x2000079c

08009844 <__malloc_unlock>:
 8009844:	4801      	ldr	r0, [pc, #4]	@ (800984c <__malloc_unlock+0x8>)
 8009846:	f7ff b899 	b.w	800897c <__retarget_lock_release_recursive>
 800984a:	bf00      	nop
 800984c:	2000079c 	.word	0x2000079c

08009850 <_Balloc>:
 8009850:	b570      	push	{r4, r5, r6, lr}
 8009852:	69c6      	ldr	r6, [r0, #28]
 8009854:	4604      	mov	r4, r0
 8009856:	460d      	mov	r5, r1
 8009858:	b976      	cbnz	r6, 8009878 <_Balloc+0x28>
 800985a:	2010      	movs	r0, #16
 800985c:	f7ff ff42 	bl	80096e4 <malloc>
 8009860:	4602      	mov	r2, r0
 8009862:	61e0      	str	r0, [r4, #28]
 8009864:	b920      	cbnz	r0, 8009870 <_Balloc+0x20>
 8009866:	4b18      	ldr	r3, [pc, #96]	@ (80098c8 <_Balloc+0x78>)
 8009868:	4818      	ldr	r0, [pc, #96]	@ (80098cc <_Balloc+0x7c>)
 800986a:	216b      	movs	r1, #107	@ 0x6b
 800986c:	f000 fc26 	bl	800a0bc <__assert_func>
 8009870:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009874:	6006      	str	r6, [r0, #0]
 8009876:	60c6      	str	r6, [r0, #12]
 8009878:	69e6      	ldr	r6, [r4, #28]
 800987a:	68f3      	ldr	r3, [r6, #12]
 800987c:	b183      	cbz	r3, 80098a0 <_Balloc+0x50>
 800987e:	69e3      	ldr	r3, [r4, #28]
 8009880:	68db      	ldr	r3, [r3, #12]
 8009882:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009886:	b9b8      	cbnz	r0, 80098b8 <_Balloc+0x68>
 8009888:	2101      	movs	r1, #1
 800988a:	fa01 f605 	lsl.w	r6, r1, r5
 800988e:	1d72      	adds	r2, r6, #5
 8009890:	0092      	lsls	r2, r2, #2
 8009892:	4620      	mov	r0, r4
 8009894:	f000 fc30 	bl	800a0f8 <_calloc_r>
 8009898:	b160      	cbz	r0, 80098b4 <_Balloc+0x64>
 800989a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800989e:	e00e      	b.n	80098be <_Balloc+0x6e>
 80098a0:	2221      	movs	r2, #33	@ 0x21
 80098a2:	2104      	movs	r1, #4
 80098a4:	4620      	mov	r0, r4
 80098a6:	f000 fc27 	bl	800a0f8 <_calloc_r>
 80098aa:	69e3      	ldr	r3, [r4, #28]
 80098ac:	60f0      	str	r0, [r6, #12]
 80098ae:	68db      	ldr	r3, [r3, #12]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d1e4      	bne.n	800987e <_Balloc+0x2e>
 80098b4:	2000      	movs	r0, #0
 80098b6:	bd70      	pop	{r4, r5, r6, pc}
 80098b8:	6802      	ldr	r2, [r0, #0]
 80098ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80098be:	2300      	movs	r3, #0
 80098c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80098c4:	e7f7      	b.n	80098b6 <_Balloc+0x66>
 80098c6:	bf00      	nop
 80098c8:	0800a759 	.word	0x0800a759
 80098cc:	0800a7d9 	.word	0x0800a7d9

080098d0 <_Bfree>:
 80098d0:	b570      	push	{r4, r5, r6, lr}
 80098d2:	69c6      	ldr	r6, [r0, #28]
 80098d4:	4605      	mov	r5, r0
 80098d6:	460c      	mov	r4, r1
 80098d8:	b976      	cbnz	r6, 80098f8 <_Bfree+0x28>
 80098da:	2010      	movs	r0, #16
 80098dc:	f7ff ff02 	bl	80096e4 <malloc>
 80098e0:	4602      	mov	r2, r0
 80098e2:	61e8      	str	r0, [r5, #28]
 80098e4:	b920      	cbnz	r0, 80098f0 <_Bfree+0x20>
 80098e6:	4b09      	ldr	r3, [pc, #36]	@ (800990c <_Bfree+0x3c>)
 80098e8:	4809      	ldr	r0, [pc, #36]	@ (8009910 <_Bfree+0x40>)
 80098ea:	218f      	movs	r1, #143	@ 0x8f
 80098ec:	f000 fbe6 	bl	800a0bc <__assert_func>
 80098f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098f4:	6006      	str	r6, [r0, #0]
 80098f6:	60c6      	str	r6, [r0, #12]
 80098f8:	b13c      	cbz	r4, 800990a <_Bfree+0x3a>
 80098fa:	69eb      	ldr	r3, [r5, #28]
 80098fc:	6862      	ldr	r2, [r4, #4]
 80098fe:	68db      	ldr	r3, [r3, #12]
 8009900:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009904:	6021      	str	r1, [r4, #0]
 8009906:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800990a:	bd70      	pop	{r4, r5, r6, pc}
 800990c:	0800a759 	.word	0x0800a759
 8009910:	0800a7d9 	.word	0x0800a7d9

08009914 <__multadd>:
 8009914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009918:	690d      	ldr	r5, [r1, #16]
 800991a:	4607      	mov	r7, r0
 800991c:	460c      	mov	r4, r1
 800991e:	461e      	mov	r6, r3
 8009920:	f101 0c14 	add.w	ip, r1, #20
 8009924:	2000      	movs	r0, #0
 8009926:	f8dc 3000 	ldr.w	r3, [ip]
 800992a:	b299      	uxth	r1, r3
 800992c:	fb02 6101 	mla	r1, r2, r1, r6
 8009930:	0c1e      	lsrs	r6, r3, #16
 8009932:	0c0b      	lsrs	r3, r1, #16
 8009934:	fb02 3306 	mla	r3, r2, r6, r3
 8009938:	b289      	uxth	r1, r1
 800993a:	3001      	adds	r0, #1
 800993c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009940:	4285      	cmp	r5, r0
 8009942:	f84c 1b04 	str.w	r1, [ip], #4
 8009946:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800994a:	dcec      	bgt.n	8009926 <__multadd+0x12>
 800994c:	b30e      	cbz	r6, 8009992 <__multadd+0x7e>
 800994e:	68a3      	ldr	r3, [r4, #8]
 8009950:	42ab      	cmp	r3, r5
 8009952:	dc19      	bgt.n	8009988 <__multadd+0x74>
 8009954:	6861      	ldr	r1, [r4, #4]
 8009956:	4638      	mov	r0, r7
 8009958:	3101      	adds	r1, #1
 800995a:	f7ff ff79 	bl	8009850 <_Balloc>
 800995e:	4680      	mov	r8, r0
 8009960:	b928      	cbnz	r0, 800996e <__multadd+0x5a>
 8009962:	4602      	mov	r2, r0
 8009964:	4b0c      	ldr	r3, [pc, #48]	@ (8009998 <__multadd+0x84>)
 8009966:	480d      	ldr	r0, [pc, #52]	@ (800999c <__multadd+0x88>)
 8009968:	21ba      	movs	r1, #186	@ 0xba
 800996a:	f000 fba7 	bl	800a0bc <__assert_func>
 800996e:	6922      	ldr	r2, [r4, #16]
 8009970:	3202      	adds	r2, #2
 8009972:	f104 010c 	add.w	r1, r4, #12
 8009976:	0092      	lsls	r2, r2, #2
 8009978:	300c      	adds	r0, #12
 800997a:	f7ff f800 	bl	800897e <memcpy>
 800997e:	4621      	mov	r1, r4
 8009980:	4638      	mov	r0, r7
 8009982:	f7ff ffa5 	bl	80098d0 <_Bfree>
 8009986:	4644      	mov	r4, r8
 8009988:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800998c:	3501      	adds	r5, #1
 800998e:	615e      	str	r6, [r3, #20]
 8009990:	6125      	str	r5, [r4, #16]
 8009992:	4620      	mov	r0, r4
 8009994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009998:	0800a7c8 	.word	0x0800a7c8
 800999c:	0800a7d9 	.word	0x0800a7d9

080099a0 <__hi0bits>:
 80099a0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80099a4:	4603      	mov	r3, r0
 80099a6:	bf36      	itet	cc
 80099a8:	0403      	lslcc	r3, r0, #16
 80099aa:	2000      	movcs	r0, #0
 80099ac:	2010      	movcc	r0, #16
 80099ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80099b2:	bf3c      	itt	cc
 80099b4:	021b      	lslcc	r3, r3, #8
 80099b6:	3008      	addcc	r0, #8
 80099b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80099bc:	bf3c      	itt	cc
 80099be:	011b      	lslcc	r3, r3, #4
 80099c0:	3004      	addcc	r0, #4
 80099c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099c6:	bf3c      	itt	cc
 80099c8:	009b      	lslcc	r3, r3, #2
 80099ca:	3002      	addcc	r0, #2
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	db05      	blt.n	80099dc <__hi0bits+0x3c>
 80099d0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80099d4:	f100 0001 	add.w	r0, r0, #1
 80099d8:	bf08      	it	eq
 80099da:	2020      	moveq	r0, #32
 80099dc:	4770      	bx	lr

080099de <__lo0bits>:
 80099de:	6803      	ldr	r3, [r0, #0]
 80099e0:	4602      	mov	r2, r0
 80099e2:	f013 0007 	ands.w	r0, r3, #7
 80099e6:	d00b      	beq.n	8009a00 <__lo0bits+0x22>
 80099e8:	07d9      	lsls	r1, r3, #31
 80099ea:	d421      	bmi.n	8009a30 <__lo0bits+0x52>
 80099ec:	0798      	lsls	r0, r3, #30
 80099ee:	bf49      	itett	mi
 80099f0:	085b      	lsrmi	r3, r3, #1
 80099f2:	089b      	lsrpl	r3, r3, #2
 80099f4:	2001      	movmi	r0, #1
 80099f6:	6013      	strmi	r3, [r2, #0]
 80099f8:	bf5c      	itt	pl
 80099fa:	6013      	strpl	r3, [r2, #0]
 80099fc:	2002      	movpl	r0, #2
 80099fe:	4770      	bx	lr
 8009a00:	b299      	uxth	r1, r3
 8009a02:	b909      	cbnz	r1, 8009a08 <__lo0bits+0x2a>
 8009a04:	0c1b      	lsrs	r3, r3, #16
 8009a06:	2010      	movs	r0, #16
 8009a08:	b2d9      	uxtb	r1, r3
 8009a0a:	b909      	cbnz	r1, 8009a10 <__lo0bits+0x32>
 8009a0c:	3008      	adds	r0, #8
 8009a0e:	0a1b      	lsrs	r3, r3, #8
 8009a10:	0719      	lsls	r1, r3, #28
 8009a12:	bf04      	itt	eq
 8009a14:	091b      	lsreq	r3, r3, #4
 8009a16:	3004      	addeq	r0, #4
 8009a18:	0799      	lsls	r1, r3, #30
 8009a1a:	bf04      	itt	eq
 8009a1c:	089b      	lsreq	r3, r3, #2
 8009a1e:	3002      	addeq	r0, #2
 8009a20:	07d9      	lsls	r1, r3, #31
 8009a22:	d403      	bmi.n	8009a2c <__lo0bits+0x4e>
 8009a24:	085b      	lsrs	r3, r3, #1
 8009a26:	f100 0001 	add.w	r0, r0, #1
 8009a2a:	d003      	beq.n	8009a34 <__lo0bits+0x56>
 8009a2c:	6013      	str	r3, [r2, #0]
 8009a2e:	4770      	bx	lr
 8009a30:	2000      	movs	r0, #0
 8009a32:	4770      	bx	lr
 8009a34:	2020      	movs	r0, #32
 8009a36:	4770      	bx	lr

08009a38 <__i2b>:
 8009a38:	b510      	push	{r4, lr}
 8009a3a:	460c      	mov	r4, r1
 8009a3c:	2101      	movs	r1, #1
 8009a3e:	f7ff ff07 	bl	8009850 <_Balloc>
 8009a42:	4602      	mov	r2, r0
 8009a44:	b928      	cbnz	r0, 8009a52 <__i2b+0x1a>
 8009a46:	4b05      	ldr	r3, [pc, #20]	@ (8009a5c <__i2b+0x24>)
 8009a48:	4805      	ldr	r0, [pc, #20]	@ (8009a60 <__i2b+0x28>)
 8009a4a:	f240 1145 	movw	r1, #325	@ 0x145
 8009a4e:	f000 fb35 	bl	800a0bc <__assert_func>
 8009a52:	2301      	movs	r3, #1
 8009a54:	6144      	str	r4, [r0, #20]
 8009a56:	6103      	str	r3, [r0, #16]
 8009a58:	bd10      	pop	{r4, pc}
 8009a5a:	bf00      	nop
 8009a5c:	0800a7c8 	.word	0x0800a7c8
 8009a60:	0800a7d9 	.word	0x0800a7d9

08009a64 <__multiply>:
 8009a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a68:	4617      	mov	r7, r2
 8009a6a:	690a      	ldr	r2, [r1, #16]
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	429a      	cmp	r2, r3
 8009a70:	bfa8      	it	ge
 8009a72:	463b      	movge	r3, r7
 8009a74:	4689      	mov	r9, r1
 8009a76:	bfa4      	itt	ge
 8009a78:	460f      	movge	r7, r1
 8009a7a:	4699      	movge	r9, r3
 8009a7c:	693d      	ldr	r5, [r7, #16]
 8009a7e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	6879      	ldr	r1, [r7, #4]
 8009a86:	eb05 060a 	add.w	r6, r5, sl
 8009a8a:	42b3      	cmp	r3, r6
 8009a8c:	b085      	sub	sp, #20
 8009a8e:	bfb8      	it	lt
 8009a90:	3101      	addlt	r1, #1
 8009a92:	f7ff fedd 	bl	8009850 <_Balloc>
 8009a96:	b930      	cbnz	r0, 8009aa6 <__multiply+0x42>
 8009a98:	4602      	mov	r2, r0
 8009a9a:	4b41      	ldr	r3, [pc, #260]	@ (8009ba0 <__multiply+0x13c>)
 8009a9c:	4841      	ldr	r0, [pc, #260]	@ (8009ba4 <__multiply+0x140>)
 8009a9e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009aa2:	f000 fb0b 	bl	800a0bc <__assert_func>
 8009aa6:	f100 0414 	add.w	r4, r0, #20
 8009aaa:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009aae:	4623      	mov	r3, r4
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	4573      	cmp	r3, lr
 8009ab4:	d320      	bcc.n	8009af8 <__multiply+0x94>
 8009ab6:	f107 0814 	add.w	r8, r7, #20
 8009aba:	f109 0114 	add.w	r1, r9, #20
 8009abe:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009ac2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009ac6:	9302      	str	r3, [sp, #8]
 8009ac8:	1beb      	subs	r3, r5, r7
 8009aca:	3b15      	subs	r3, #21
 8009acc:	f023 0303 	bic.w	r3, r3, #3
 8009ad0:	3304      	adds	r3, #4
 8009ad2:	3715      	adds	r7, #21
 8009ad4:	42bd      	cmp	r5, r7
 8009ad6:	bf38      	it	cc
 8009ad8:	2304      	movcc	r3, #4
 8009ada:	9301      	str	r3, [sp, #4]
 8009adc:	9b02      	ldr	r3, [sp, #8]
 8009ade:	9103      	str	r1, [sp, #12]
 8009ae0:	428b      	cmp	r3, r1
 8009ae2:	d80c      	bhi.n	8009afe <__multiply+0x9a>
 8009ae4:	2e00      	cmp	r6, #0
 8009ae6:	dd03      	ble.n	8009af0 <__multiply+0x8c>
 8009ae8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d055      	beq.n	8009b9c <__multiply+0x138>
 8009af0:	6106      	str	r6, [r0, #16]
 8009af2:	b005      	add	sp, #20
 8009af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009af8:	f843 2b04 	str.w	r2, [r3], #4
 8009afc:	e7d9      	b.n	8009ab2 <__multiply+0x4e>
 8009afe:	f8b1 a000 	ldrh.w	sl, [r1]
 8009b02:	f1ba 0f00 	cmp.w	sl, #0
 8009b06:	d01f      	beq.n	8009b48 <__multiply+0xe4>
 8009b08:	46c4      	mov	ip, r8
 8009b0a:	46a1      	mov	r9, r4
 8009b0c:	2700      	movs	r7, #0
 8009b0e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009b12:	f8d9 3000 	ldr.w	r3, [r9]
 8009b16:	fa1f fb82 	uxth.w	fp, r2
 8009b1a:	b29b      	uxth	r3, r3
 8009b1c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009b20:	443b      	add	r3, r7
 8009b22:	f8d9 7000 	ldr.w	r7, [r9]
 8009b26:	0c12      	lsrs	r2, r2, #16
 8009b28:	0c3f      	lsrs	r7, r7, #16
 8009b2a:	fb0a 7202 	mla	r2, sl, r2, r7
 8009b2e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009b32:	b29b      	uxth	r3, r3
 8009b34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b38:	4565      	cmp	r5, ip
 8009b3a:	f849 3b04 	str.w	r3, [r9], #4
 8009b3e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009b42:	d8e4      	bhi.n	8009b0e <__multiply+0xaa>
 8009b44:	9b01      	ldr	r3, [sp, #4]
 8009b46:	50e7      	str	r7, [r4, r3]
 8009b48:	9b03      	ldr	r3, [sp, #12]
 8009b4a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009b4e:	3104      	adds	r1, #4
 8009b50:	f1b9 0f00 	cmp.w	r9, #0
 8009b54:	d020      	beq.n	8009b98 <__multiply+0x134>
 8009b56:	6823      	ldr	r3, [r4, #0]
 8009b58:	4647      	mov	r7, r8
 8009b5a:	46a4      	mov	ip, r4
 8009b5c:	f04f 0a00 	mov.w	sl, #0
 8009b60:	f8b7 b000 	ldrh.w	fp, [r7]
 8009b64:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009b68:	fb09 220b 	mla	r2, r9, fp, r2
 8009b6c:	4452      	add	r2, sl
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b74:	f84c 3b04 	str.w	r3, [ip], #4
 8009b78:	f857 3b04 	ldr.w	r3, [r7], #4
 8009b7c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009b80:	f8bc 3000 	ldrh.w	r3, [ip]
 8009b84:	fb09 330a 	mla	r3, r9, sl, r3
 8009b88:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009b8c:	42bd      	cmp	r5, r7
 8009b8e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009b92:	d8e5      	bhi.n	8009b60 <__multiply+0xfc>
 8009b94:	9a01      	ldr	r2, [sp, #4]
 8009b96:	50a3      	str	r3, [r4, r2]
 8009b98:	3404      	adds	r4, #4
 8009b9a:	e79f      	b.n	8009adc <__multiply+0x78>
 8009b9c:	3e01      	subs	r6, #1
 8009b9e:	e7a1      	b.n	8009ae4 <__multiply+0x80>
 8009ba0:	0800a7c8 	.word	0x0800a7c8
 8009ba4:	0800a7d9 	.word	0x0800a7d9

08009ba8 <__pow5mult>:
 8009ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bac:	4615      	mov	r5, r2
 8009bae:	f012 0203 	ands.w	r2, r2, #3
 8009bb2:	4607      	mov	r7, r0
 8009bb4:	460e      	mov	r6, r1
 8009bb6:	d007      	beq.n	8009bc8 <__pow5mult+0x20>
 8009bb8:	4c25      	ldr	r4, [pc, #148]	@ (8009c50 <__pow5mult+0xa8>)
 8009bba:	3a01      	subs	r2, #1
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009bc2:	f7ff fea7 	bl	8009914 <__multadd>
 8009bc6:	4606      	mov	r6, r0
 8009bc8:	10ad      	asrs	r5, r5, #2
 8009bca:	d03d      	beq.n	8009c48 <__pow5mult+0xa0>
 8009bcc:	69fc      	ldr	r4, [r7, #28]
 8009bce:	b97c      	cbnz	r4, 8009bf0 <__pow5mult+0x48>
 8009bd0:	2010      	movs	r0, #16
 8009bd2:	f7ff fd87 	bl	80096e4 <malloc>
 8009bd6:	4602      	mov	r2, r0
 8009bd8:	61f8      	str	r0, [r7, #28]
 8009bda:	b928      	cbnz	r0, 8009be8 <__pow5mult+0x40>
 8009bdc:	4b1d      	ldr	r3, [pc, #116]	@ (8009c54 <__pow5mult+0xac>)
 8009bde:	481e      	ldr	r0, [pc, #120]	@ (8009c58 <__pow5mult+0xb0>)
 8009be0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009be4:	f000 fa6a 	bl	800a0bc <__assert_func>
 8009be8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009bec:	6004      	str	r4, [r0, #0]
 8009bee:	60c4      	str	r4, [r0, #12]
 8009bf0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009bf4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009bf8:	b94c      	cbnz	r4, 8009c0e <__pow5mult+0x66>
 8009bfa:	f240 2171 	movw	r1, #625	@ 0x271
 8009bfe:	4638      	mov	r0, r7
 8009c00:	f7ff ff1a 	bl	8009a38 <__i2b>
 8009c04:	2300      	movs	r3, #0
 8009c06:	f8c8 0008 	str.w	r0, [r8, #8]
 8009c0a:	4604      	mov	r4, r0
 8009c0c:	6003      	str	r3, [r0, #0]
 8009c0e:	f04f 0900 	mov.w	r9, #0
 8009c12:	07eb      	lsls	r3, r5, #31
 8009c14:	d50a      	bpl.n	8009c2c <__pow5mult+0x84>
 8009c16:	4631      	mov	r1, r6
 8009c18:	4622      	mov	r2, r4
 8009c1a:	4638      	mov	r0, r7
 8009c1c:	f7ff ff22 	bl	8009a64 <__multiply>
 8009c20:	4631      	mov	r1, r6
 8009c22:	4680      	mov	r8, r0
 8009c24:	4638      	mov	r0, r7
 8009c26:	f7ff fe53 	bl	80098d0 <_Bfree>
 8009c2a:	4646      	mov	r6, r8
 8009c2c:	106d      	asrs	r5, r5, #1
 8009c2e:	d00b      	beq.n	8009c48 <__pow5mult+0xa0>
 8009c30:	6820      	ldr	r0, [r4, #0]
 8009c32:	b938      	cbnz	r0, 8009c44 <__pow5mult+0x9c>
 8009c34:	4622      	mov	r2, r4
 8009c36:	4621      	mov	r1, r4
 8009c38:	4638      	mov	r0, r7
 8009c3a:	f7ff ff13 	bl	8009a64 <__multiply>
 8009c3e:	6020      	str	r0, [r4, #0]
 8009c40:	f8c0 9000 	str.w	r9, [r0]
 8009c44:	4604      	mov	r4, r0
 8009c46:	e7e4      	b.n	8009c12 <__pow5mult+0x6a>
 8009c48:	4630      	mov	r0, r6
 8009c4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c4e:	bf00      	nop
 8009c50:	0800a88c 	.word	0x0800a88c
 8009c54:	0800a759 	.word	0x0800a759
 8009c58:	0800a7d9 	.word	0x0800a7d9

08009c5c <__lshift>:
 8009c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c60:	460c      	mov	r4, r1
 8009c62:	6849      	ldr	r1, [r1, #4]
 8009c64:	6923      	ldr	r3, [r4, #16]
 8009c66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009c6a:	68a3      	ldr	r3, [r4, #8]
 8009c6c:	4607      	mov	r7, r0
 8009c6e:	4691      	mov	r9, r2
 8009c70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c74:	f108 0601 	add.w	r6, r8, #1
 8009c78:	42b3      	cmp	r3, r6
 8009c7a:	db0b      	blt.n	8009c94 <__lshift+0x38>
 8009c7c:	4638      	mov	r0, r7
 8009c7e:	f7ff fde7 	bl	8009850 <_Balloc>
 8009c82:	4605      	mov	r5, r0
 8009c84:	b948      	cbnz	r0, 8009c9a <__lshift+0x3e>
 8009c86:	4602      	mov	r2, r0
 8009c88:	4b28      	ldr	r3, [pc, #160]	@ (8009d2c <__lshift+0xd0>)
 8009c8a:	4829      	ldr	r0, [pc, #164]	@ (8009d30 <__lshift+0xd4>)
 8009c8c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009c90:	f000 fa14 	bl	800a0bc <__assert_func>
 8009c94:	3101      	adds	r1, #1
 8009c96:	005b      	lsls	r3, r3, #1
 8009c98:	e7ee      	b.n	8009c78 <__lshift+0x1c>
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	f100 0114 	add.w	r1, r0, #20
 8009ca0:	f100 0210 	add.w	r2, r0, #16
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	4553      	cmp	r3, sl
 8009ca8:	db33      	blt.n	8009d12 <__lshift+0xb6>
 8009caa:	6920      	ldr	r0, [r4, #16]
 8009cac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009cb0:	f104 0314 	add.w	r3, r4, #20
 8009cb4:	f019 091f 	ands.w	r9, r9, #31
 8009cb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009cbc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009cc0:	d02b      	beq.n	8009d1a <__lshift+0xbe>
 8009cc2:	f1c9 0e20 	rsb	lr, r9, #32
 8009cc6:	468a      	mov	sl, r1
 8009cc8:	2200      	movs	r2, #0
 8009cca:	6818      	ldr	r0, [r3, #0]
 8009ccc:	fa00 f009 	lsl.w	r0, r0, r9
 8009cd0:	4310      	orrs	r0, r2
 8009cd2:	f84a 0b04 	str.w	r0, [sl], #4
 8009cd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cda:	459c      	cmp	ip, r3
 8009cdc:	fa22 f20e 	lsr.w	r2, r2, lr
 8009ce0:	d8f3      	bhi.n	8009cca <__lshift+0x6e>
 8009ce2:	ebac 0304 	sub.w	r3, ip, r4
 8009ce6:	3b15      	subs	r3, #21
 8009ce8:	f023 0303 	bic.w	r3, r3, #3
 8009cec:	3304      	adds	r3, #4
 8009cee:	f104 0015 	add.w	r0, r4, #21
 8009cf2:	4560      	cmp	r0, ip
 8009cf4:	bf88      	it	hi
 8009cf6:	2304      	movhi	r3, #4
 8009cf8:	50ca      	str	r2, [r1, r3]
 8009cfa:	b10a      	cbz	r2, 8009d00 <__lshift+0xa4>
 8009cfc:	f108 0602 	add.w	r6, r8, #2
 8009d00:	3e01      	subs	r6, #1
 8009d02:	4638      	mov	r0, r7
 8009d04:	612e      	str	r6, [r5, #16]
 8009d06:	4621      	mov	r1, r4
 8009d08:	f7ff fde2 	bl	80098d0 <_Bfree>
 8009d0c:	4628      	mov	r0, r5
 8009d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d12:	f842 0f04 	str.w	r0, [r2, #4]!
 8009d16:	3301      	adds	r3, #1
 8009d18:	e7c5      	b.n	8009ca6 <__lshift+0x4a>
 8009d1a:	3904      	subs	r1, #4
 8009d1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d20:	f841 2f04 	str.w	r2, [r1, #4]!
 8009d24:	459c      	cmp	ip, r3
 8009d26:	d8f9      	bhi.n	8009d1c <__lshift+0xc0>
 8009d28:	e7ea      	b.n	8009d00 <__lshift+0xa4>
 8009d2a:	bf00      	nop
 8009d2c:	0800a7c8 	.word	0x0800a7c8
 8009d30:	0800a7d9 	.word	0x0800a7d9

08009d34 <__mcmp>:
 8009d34:	690a      	ldr	r2, [r1, #16]
 8009d36:	4603      	mov	r3, r0
 8009d38:	6900      	ldr	r0, [r0, #16]
 8009d3a:	1a80      	subs	r0, r0, r2
 8009d3c:	b530      	push	{r4, r5, lr}
 8009d3e:	d10e      	bne.n	8009d5e <__mcmp+0x2a>
 8009d40:	3314      	adds	r3, #20
 8009d42:	3114      	adds	r1, #20
 8009d44:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009d48:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009d4c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009d50:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009d54:	4295      	cmp	r5, r2
 8009d56:	d003      	beq.n	8009d60 <__mcmp+0x2c>
 8009d58:	d205      	bcs.n	8009d66 <__mcmp+0x32>
 8009d5a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009d5e:	bd30      	pop	{r4, r5, pc}
 8009d60:	42a3      	cmp	r3, r4
 8009d62:	d3f3      	bcc.n	8009d4c <__mcmp+0x18>
 8009d64:	e7fb      	b.n	8009d5e <__mcmp+0x2a>
 8009d66:	2001      	movs	r0, #1
 8009d68:	e7f9      	b.n	8009d5e <__mcmp+0x2a>
	...

08009d6c <__mdiff>:
 8009d6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d70:	4689      	mov	r9, r1
 8009d72:	4606      	mov	r6, r0
 8009d74:	4611      	mov	r1, r2
 8009d76:	4648      	mov	r0, r9
 8009d78:	4614      	mov	r4, r2
 8009d7a:	f7ff ffdb 	bl	8009d34 <__mcmp>
 8009d7e:	1e05      	subs	r5, r0, #0
 8009d80:	d112      	bne.n	8009da8 <__mdiff+0x3c>
 8009d82:	4629      	mov	r1, r5
 8009d84:	4630      	mov	r0, r6
 8009d86:	f7ff fd63 	bl	8009850 <_Balloc>
 8009d8a:	4602      	mov	r2, r0
 8009d8c:	b928      	cbnz	r0, 8009d9a <__mdiff+0x2e>
 8009d8e:	4b3f      	ldr	r3, [pc, #252]	@ (8009e8c <__mdiff+0x120>)
 8009d90:	f240 2137 	movw	r1, #567	@ 0x237
 8009d94:	483e      	ldr	r0, [pc, #248]	@ (8009e90 <__mdiff+0x124>)
 8009d96:	f000 f991 	bl	800a0bc <__assert_func>
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009da0:	4610      	mov	r0, r2
 8009da2:	b003      	add	sp, #12
 8009da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009da8:	bfbc      	itt	lt
 8009daa:	464b      	movlt	r3, r9
 8009dac:	46a1      	movlt	r9, r4
 8009dae:	4630      	mov	r0, r6
 8009db0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009db4:	bfba      	itte	lt
 8009db6:	461c      	movlt	r4, r3
 8009db8:	2501      	movlt	r5, #1
 8009dba:	2500      	movge	r5, #0
 8009dbc:	f7ff fd48 	bl	8009850 <_Balloc>
 8009dc0:	4602      	mov	r2, r0
 8009dc2:	b918      	cbnz	r0, 8009dcc <__mdiff+0x60>
 8009dc4:	4b31      	ldr	r3, [pc, #196]	@ (8009e8c <__mdiff+0x120>)
 8009dc6:	f240 2145 	movw	r1, #581	@ 0x245
 8009dca:	e7e3      	b.n	8009d94 <__mdiff+0x28>
 8009dcc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009dd0:	6926      	ldr	r6, [r4, #16]
 8009dd2:	60c5      	str	r5, [r0, #12]
 8009dd4:	f109 0310 	add.w	r3, r9, #16
 8009dd8:	f109 0514 	add.w	r5, r9, #20
 8009ddc:	f104 0e14 	add.w	lr, r4, #20
 8009de0:	f100 0b14 	add.w	fp, r0, #20
 8009de4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009de8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009dec:	9301      	str	r3, [sp, #4]
 8009dee:	46d9      	mov	r9, fp
 8009df0:	f04f 0c00 	mov.w	ip, #0
 8009df4:	9b01      	ldr	r3, [sp, #4]
 8009df6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009dfa:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009dfe:	9301      	str	r3, [sp, #4]
 8009e00:	fa1f f38a 	uxth.w	r3, sl
 8009e04:	4619      	mov	r1, r3
 8009e06:	b283      	uxth	r3, r0
 8009e08:	1acb      	subs	r3, r1, r3
 8009e0a:	0c00      	lsrs	r0, r0, #16
 8009e0c:	4463      	add	r3, ip
 8009e0e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009e12:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009e16:	b29b      	uxth	r3, r3
 8009e18:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009e1c:	4576      	cmp	r6, lr
 8009e1e:	f849 3b04 	str.w	r3, [r9], #4
 8009e22:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009e26:	d8e5      	bhi.n	8009df4 <__mdiff+0x88>
 8009e28:	1b33      	subs	r3, r6, r4
 8009e2a:	3b15      	subs	r3, #21
 8009e2c:	f023 0303 	bic.w	r3, r3, #3
 8009e30:	3415      	adds	r4, #21
 8009e32:	3304      	adds	r3, #4
 8009e34:	42a6      	cmp	r6, r4
 8009e36:	bf38      	it	cc
 8009e38:	2304      	movcc	r3, #4
 8009e3a:	441d      	add	r5, r3
 8009e3c:	445b      	add	r3, fp
 8009e3e:	461e      	mov	r6, r3
 8009e40:	462c      	mov	r4, r5
 8009e42:	4544      	cmp	r4, r8
 8009e44:	d30e      	bcc.n	8009e64 <__mdiff+0xf8>
 8009e46:	f108 0103 	add.w	r1, r8, #3
 8009e4a:	1b49      	subs	r1, r1, r5
 8009e4c:	f021 0103 	bic.w	r1, r1, #3
 8009e50:	3d03      	subs	r5, #3
 8009e52:	45a8      	cmp	r8, r5
 8009e54:	bf38      	it	cc
 8009e56:	2100      	movcc	r1, #0
 8009e58:	440b      	add	r3, r1
 8009e5a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009e5e:	b191      	cbz	r1, 8009e86 <__mdiff+0x11a>
 8009e60:	6117      	str	r7, [r2, #16]
 8009e62:	e79d      	b.n	8009da0 <__mdiff+0x34>
 8009e64:	f854 1b04 	ldr.w	r1, [r4], #4
 8009e68:	46e6      	mov	lr, ip
 8009e6a:	0c08      	lsrs	r0, r1, #16
 8009e6c:	fa1c fc81 	uxtah	ip, ip, r1
 8009e70:	4471      	add	r1, lr
 8009e72:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009e76:	b289      	uxth	r1, r1
 8009e78:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009e7c:	f846 1b04 	str.w	r1, [r6], #4
 8009e80:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009e84:	e7dd      	b.n	8009e42 <__mdiff+0xd6>
 8009e86:	3f01      	subs	r7, #1
 8009e88:	e7e7      	b.n	8009e5a <__mdiff+0xee>
 8009e8a:	bf00      	nop
 8009e8c:	0800a7c8 	.word	0x0800a7c8
 8009e90:	0800a7d9 	.word	0x0800a7d9

08009e94 <__d2b>:
 8009e94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009e98:	460f      	mov	r7, r1
 8009e9a:	2101      	movs	r1, #1
 8009e9c:	ec59 8b10 	vmov	r8, r9, d0
 8009ea0:	4616      	mov	r6, r2
 8009ea2:	f7ff fcd5 	bl	8009850 <_Balloc>
 8009ea6:	4604      	mov	r4, r0
 8009ea8:	b930      	cbnz	r0, 8009eb8 <__d2b+0x24>
 8009eaa:	4602      	mov	r2, r0
 8009eac:	4b23      	ldr	r3, [pc, #140]	@ (8009f3c <__d2b+0xa8>)
 8009eae:	4824      	ldr	r0, [pc, #144]	@ (8009f40 <__d2b+0xac>)
 8009eb0:	f240 310f 	movw	r1, #783	@ 0x30f
 8009eb4:	f000 f902 	bl	800a0bc <__assert_func>
 8009eb8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009ebc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009ec0:	b10d      	cbz	r5, 8009ec6 <__d2b+0x32>
 8009ec2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009ec6:	9301      	str	r3, [sp, #4]
 8009ec8:	f1b8 0300 	subs.w	r3, r8, #0
 8009ecc:	d023      	beq.n	8009f16 <__d2b+0x82>
 8009ece:	4668      	mov	r0, sp
 8009ed0:	9300      	str	r3, [sp, #0]
 8009ed2:	f7ff fd84 	bl	80099de <__lo0bits>
 8009ed6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009eda:	b1d0      	cbz	r0, 8009f12 <__d2b+0x7e>
 8009edc:	f1c0 0320 	rsb	r3, r0, #32
 8009ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ee4:	430b      	orrs	r3, r1
 8009ee6:	40c2      	lsrs	r2, r0
 8009ee8:	6163      	str	r3, [r4, #20]
 8009eea:	9201      	str	r2, [sp, #4]
 8009eec:	9b01      	ldr	r3, [sp, #4]
 8009eee:	61a3      	str	r3, [r4, #24]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	bf0c      	ite	eq
 8009ef4:	2201      	moveq	r2, #1
 8009ef6:	2202      	movne	r2, #2
 8009ef8:	6122      	str	r2, [r4, #16]
 8009efa:	b1a5      	cbz	r5, 8009f26 <__d2b+0x92>
 8009efc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009f00:	4405      	add	r5, r0
 8009f02:	603d      	str	r5, [r7, #0]
 8009f04:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009f08:	6030      	str	r0, [r6, #0]
 8009f0a:	4620      	mov	r0, r4
 8009f0c:	b003      	add	sp, #12
 8009f0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f12:	6161      	str	r1, [r4, #20]
 8009f14:	e7ea      	b.n	8009eec <__d2b+0x58>
 8009f16:	a801      	add	r0, sp, #4
 8009f18:	f7ff fd61 	bl	80099de <__lo0bits>
 8009f1c:	9b01      	ldr	r3, [sp, #4]
 8009f1e:	6163      	str	r3, [r4, #20]
 8009f20:	3020      	adds	r0, #32
 8009f22:	2201      	movs	r2, #1
 8009f24:	e7e8      	b.n	8009ef8 <__d2b+0x64>
 8009f26:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009f2a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009f2e:	6038      	str	r0, [r7, #0]
 8009f30:	6918      	ldr	r0, [r3, #16]
 8009f32:	f7ff fd35 	bl	80099a0 <__hi0bits>
 8009f36:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009f3a:	e7e5      	b.n	8009f08 <__d2b+0x74>
 8009f3c:	0800a7c8 	.word	0x0800a7c8
 8009f40:	0800a7d9 	.word	0x0800a7d9

08009f44 <__sflush_r>:
 8009f44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f4c:	0716      	lsls	r6, r2, #28
 8009f4e:	4605      	mov	r5, r0
 8009f50:	460c      	mov	r4, r1
 8009f52:	d454      	bmi.n	8009ffe <__sflush_r+0xba>
 8009f54:	684b      	ldr	r3, [r1, #4]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	dc02      	bgt.n	8009f60 <__sflush_r+0x1c>
 8009f5a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	dd48      	ble.n	8009ff2 <__sflush_r+0xae>
 8009f60:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009f62:	2e00      	cmp	r6, #0
 8009f64:	d045      	beq.n	8009ff2 <__sflush_r+0xae>
 8009f66:	2300      	movs	r3, #0
 8009f68:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009f6c:	682f      	ldr	r7, [r5, #0]
 8009f6e:	6a21      	ldr	r1, [r4, #32]
 8009f70:	602b      	str	r3, [r5, #0]
 8009f72:	d030      	beq.n	8009fd6 <__sflush_r+0x92>
 8009f74:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009f76:	89a3      	ldrh	r3, [r4, #12]
 8009f78:	0759      	lsls	r1, r3, #29
 8009f7a:	d505      	bpl.n	8009f88 <__sflush_r+0x44>
 8009f7c:	6863      	ldr	r3, [r4, #4]
 8009f7e:	1ad2      	subs	r2, r2, r3
 8009f80:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009f82:	b10b      	cbz	r3, 8009f88 <__sflush_r+0x44>
 8009f84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009f86:	1ad2      	subs	r2, r2, r3
 8009f88:	2300      	movs	r3, #0
 8009f8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009f8c:	6a21      	ldr	r1, [r4, #32]
 8009f8e:	4628      	mov	r0, r5
 8009f90:	47b0      	blx	r6
 8009f92:	1c43      	adds	r3, r0, #1
 8009f94:	89a3      	ldrh	r3, [r4, #12]
 8009f96:	d106      	bne.n	8009fa6 <__sflush_r+0x62>
 8009f98:	6829      	ldr	r1, [r5, #0]
 8009f9a:	291d      	cmp	r1, #29
 8009f9c:	d82b      	bhi.n	8009ff6 <__sflush_r+0xb2>
 8009f9e:	4a2a      	ldr	r2, [pc, #168]	@ (800a048 <__sflush_r+0x104>)
 8009fa0:	40ca      	lsrs	r2, r1
 8009fa2:	07d6      	lsls	r6, r2, #31
 8009fa4:	d527      	bpl.n	8009ff6 <__sflush_r+0xb2>
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	6062      	str	r2, [r4, #4]
 8009faa:	04d9      	lsls	r1, r3, #19
 8009fac:	6922      	ldr	r2, [r4, #16]
 8009fae:	6022      	str	r2, [r4, #0]
 8009fb0:	d504      	bpl.n	8009fbc <__sflush_r+0x78>
 8009fb2:	1c42      	adds	r2, r0, #1
 8009fb4:	d101      	bne.n	8009fba <__sflush_r+0x76>
 8009fb6:	682b      	ldr	r3, [r5, #0]
 8009fb8:	b903      	cbnz	r3, 8009fbc <__sflush_r+0x78>
 8009fba:	6560      	str	r0, [r4, #84]	@ 0x54
 8009fbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009fbe:	602f      	str	r7, [r5, #0]
 8009fc0:	b1b9      	cbz	r1, 8009ff2 <__sflush_r+0xae>
 8009fc2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009fc6:	4299      	cmp	r1, r3
 8009fc8:	d002      	beq.n	8009fd0 <__sflush_r+0x8c>
 8009fca:	4628      	mov	r0, r5
 8009fcc:	f7ff fb40 	bl	8009650 <_free_r>
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	6363      	str	r3, [r4, #52]	@ 0x34
 8009fd4:	e00d      	b.n	8009ff2 <__sflush_r+0xae>
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	4628      	mov	r0, r5
 8009fda:	47b0      	blx	r6
 8009fdc:	4602      	mov	r2, r0
 8009fde:	1c50      	adds	r0, r2, #1
 8009fe0:	d1c9      	bne.n	8009f76 <__sflush_r+0x32>
 8009fe2:	682b      	ldr	r3, [r5, #0]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d0c6      	beq.n	8009f76 <__sflush_r+0x32>
 8009fe8:	2b1d      	cmp	r3, #29
 8009fea:	d001      	beq.n	8009ff0 <__sflush_r+0xac>
 8009fec:	2b16      	cmp	r3, #22
 8009fee:	d11e      	bne.n	800a02e <__sflush_r+0xea>
 8009ff0:	602f      	str	r7, [r5, #0]
 8009ff2:	2000      	movs	r0, #0
 8009ff4:	e022      	b.n	800a03c <__sflush_r+0xf8>
 8009ff6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ffa:	b21b      	sxth	r3, r3
 8009ffc:	e01b      	b.n	800a036 <__sflush_r+0xf2>
 8009ffe:	690f      	ldr	r7, [r1, #16]
 800a000:	2f00      	cmp	r7, #0
 800a002:	d0f6      	beq.n	8009ff2 <__sflush_r+0xae>
 800a004:	0793      	lsls	r3, r2, #30
 800a006:	680e      	ldr	r6, [r1, #0]
 800a008:	bf08      	it	eq
 800a00a:	694b      	ldreq	r3, [r1, #20]
 800a00c:	600f      	str	r7, [r1, #0]
 800a00e:	bf18      	it	ne
 800a010:	2300      	movne	r3, #0
 800a012:	eba6 0807 	sub.w	r8, r6, r7
 800a016:	608b      	str	r3, [r1, #8]
 800a018:	f1b8 0f00 	cmp.w	r8, #0
 800a01c:	dde9      	ble.n	8009ff2 <__sflush_r+0xae>
 800a01e:	6a21      	ldr	r1, [r4, #32]
 800a020:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a022:	4643      	mov	r3, r8
 800a024:	463a      	mov	r2, r7
 800a026:	4628      	mov	r0, r5
 800a028:	47b0      	blx	r6
 800a02a:	2800      	cmp	r0, #0
 800a02c:	dc08      	bgt.n	800a040 <__sflush_r+0xfc>
 800a02e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a032:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a036:	81a3      	strh	r3, [r4, #12]
 800a038:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a03c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a040:	4407      	add	r7, r0
 800a042:	eba8 0800 	sub.w	r8, r8, r0
 800a046:	e7e7      	b.n	800a018 <__sflush_r+0xd4>
 800a048:	20400001 	.word	0x20400001

0800a04c <_fflush_r>:
 800a04c:	b538      	push	{r3, r4, r5, lr}
 800a04e:	690b      	ldr	r3, [r1, #16]
 800a050:	4605      	mov	r5, r0
 800a052:	460c      	mov	r4, r1
 800a054:	b913      	cbnz	r3, 800a05c <_fflush_r+0x10>
 800a056:	2500      	movs	r5, #0
 800a058:	4628      	mov	r0, r5
 800a05a:	bd38      	pop	{r3, r4, r5, pc}
 800a05c:	b118      	cbz	r0, 800a066 <_fflush_r+0x1a>
 800a05e:	6a03      	ldr	r3, [r0, #32]
 800a060:	b90b      	cbnz	r3, 800a066 <_fflush_r+0x1a>
 800a062:	f7fe fb93 	bl	800878c <__sinit>
 800a066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d0f3      	beq.n	800a056 <_fflush_r+0xa>
 800a06e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a070:	07d0      	lsls	r0, r2, #31
 800a072:	d404      	bmi.n	800a07e <_fflush_r+0x32>
 800a074:	0599      	lsls	r1, r3, #22
 800a076:	d402      	bmi.n	800a07e <_fflush_r+0x32>
 800a078:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a07a:	f7fe fc7e 	bl	800897a <__retarget_lock_acquire_recursive>
 800a07e:	4628      	mov	r0, r5
 800a080:	4621      	mov	r1, r4
 800a082:	f7ff ff5f 	bl	8009f44 <__sflush_r>
 800a086:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a088:	07da      	lsls	r2, r3, #31
 800a08a:	4605      	mov	r5, r0
 800a08c:	d4e4      	bmi.n	800a058 <_fflush_r+0xc>
 800a08e:	89a3      	ldrh	r3, [r4, #12]
 800a090:	059b      	lsls	r3, r3, #22
 800a092:	d4e1      	bmi.n	800a058 <_fflush_r+0xc>
 800a094:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a096:	f7fe fc71 	bl	800897c <__retarget_lock_release_recursive>
 800a09a:	e7dd      	b.n	800a058 <_fflush_r+0xc>

0800a09c <_sbrk_r>:
 800a09c:	b538      	push	{r3, r4, r5, lr}
 800a09e:	4d06      	ldr	r5, [pc, #24]	@ (800a0b8 <_sbrk_r+0x1c>)
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	4604      	mov	r4, r0
 800a0a4:	4608      	mov	r0, r1
 800a0a6:	602b      	str	r3, [r5, #0]
 800a0a8:	f7f8 fde2 	bl	8002c70 <_sbrk>
 800a0ac:	1c43      	adds	r3, r0, #1
 800a0ae:	d102      	bne.n	800a0b6 <_sbrk_r+0x1a>
 800a0b0:	682b      	ldr	r3, [r5, #0]
 800a0b2:	b103      	cbz	r3, 800a0b6 <_sbrk_r+0x1a>
 800a0b4:	6023      	str	r3, [r4, #0]
 800a0b6:	bd38      	pop	{r3, r4, r5, pc}
 800a0b8:	20000798 	.word	0x20000798

0800a0bc <__assert_func>:
 800a0bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a0be:	4614      	mov	r4, r2
 800a0c0:	461a      	mov	r2, r3
 800a0c2:	4b09      	ldr	r3, [pc, #36]	@ (800a0e8 <__assert_func+0x2c>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	4605      	mov	r5, r0
 800a0c8:	68d8      	ldr	r0, [r3, #12]
 800a0ca:	b14c      	cbz	r4, 800a0e0 <__assert_func+0x24>
 800a0cc:	4b07      	ldr	r3, [pc, #28]	@ (800a0ec <__assert_func+0x30>)
 800a0ce:	9100      	str	r1, [sp, #0]
 800a0d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a0d4:	4906      	ldr	r1, [pc, #24]	@ (800a0f0 <__assert_func+0x34>)
 800a0d6:	462b      	mov	r3, r5
 800a0d8:	f000 f842 	bl	800a160 <fiprintf>
 800a0dc:	f000 f852 	bl	800a184 <abort>
 800a0e0:	4b04      	ldr	r3, [pc, #16]	@ (800a0f4 <__assert_func+0x38>)
 800a0e2:	461c      	mov	r4, r3
 800a0e4:	e7f3      	b.n	800a0ce <__assert_func+0x12>
 800a0e6:	bf00      	nop
 800a0e8:	20000064 	.word	0x20000064
 800a0ec:	0800a83c 	.word	0x0800a83c
 800a0f0:	0800a849 	.word	0x0800a849
 800a0f4:	0800a877 	.word	0x0800a877

0800a0f8 <_calloc_r>:
 800a0f8:	b570      	push	{r4, r5, r6, lr}
 800a0fa:	fba1 5402 	umull	r5, r4, r1, r2
 800a0fe:	b934      	cbnz	r4, 800a10e <_calloc_r+0x16>
 800a100:	4629      	mov	r1, r5
 800a102:	f7ff fb19 	bl	8009738 <_malloc_r>
 800a106:	4606      	mov	r6, r0
 800a108:	b928      	cbnz	r0, 800a116 <_calloc_r+0x1e>
 800a10a:	4630      	mov	r0, r6
 800a10c:	bd70      	pop	{r4, r5, r6, pc}
 800a10e:	220c      	movs	r2, #12
 800a110:	6002      	str	r2, [r0, #0]
 800a112:	2600      	movs	r6, #0
 800a114:	e7f9      	b.n	800a10a <_calloc_r+0x12>
 800a116:	462a      	mov	r2, r5
 800a118:	4621      	mov	r1, r4
 800a11a:	f7fe fbb0 	bl	800887e <memset>
 800a11e:	e7f4      	b.n	800a10a <_calloc_r+0x12>

0800a120 <__ascii_mbtowc>:
 800a120:	b082      	sub	sp, #8
 800a122:	b901      	cbnz	r1, 800a126 <__ascii_mbtowc+0x6>
 800a124:	a901      	add	r1, sp, #4
 800a126:	b142      	cbz	r2, 800a13a <__ascii_mbtowc+0x1a>
 800a128:	b14b      	cbz	r3, 800a13e <__ascii_mbtowc+0x1e>
 800a12a:	7813      	ldrb	r3, [r2, #0]
 800a12c:	600b      	str	r3, [r1, #0]
 800a12e:	7812      	ldrb	r2, [r2, #0]
 800a130:	1e10      	subs	r0, r2, #0
 800a132:	bf18      	it	ne
 800a134:	2001      	movne	r0, #1
 800a136:	b002      	add	sp, #8
 800a138:	4770      	bx	lr
 800a13a:	4610      	mov	r0, r2
 800a13c:	e7fb      	b.n	800a136 <__ascii_mbtowc+0x16>
 800a13e:	f06f 0001 	mvn.w	r0, #1
 800a142:	e7f8      	b.n	800a136 <__ascii_mbtowc+0x16>

0800a144 <__ascii_wctomb>:
 800a144:	4603      	mov	r3, r0
 800a146:	4608      	mov	r0, r1
 800a148:	b141      	cbz	r1, 800a15c <__ascii_wctomb+0x18>
 800a14a:	2aff      	cmp	r2, #255	@ 0xff
 800a14c:	d904      	bls.n	800a158 <__ascii_wctomb+0x14>
 800a14e:	228a      	movs	r2, #138	@ 0x8a
 800a150:	601a      	str	r2, [r3, #0]
 800a152:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a156:	4770      	bx	lr
 800a158:	700a      	strb	r2, [r1, #0]
 800a15a:	2001      	movs	r0, #1
 800a15c:	4770      	bx	lr
	...

0800a160 <fiprintf>:
 800a160:	b40e      	push	{r1, r2, r3}
 800a162:	b503      	push	{r0, r1, lr}
 800a164:	4601      	mov	r1, r0
 800a166:	ab03      	add	r3, sp, #12
 800a168:	4805      	ldr	r0, [pc, #20]	@ (800a180 <fiprintf+0x20>)
 800a16a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a16e:	6800      	ldr	r0, [r0, #0]
 800a170:	9301      	str	r3, [sp, #4]
 800a172:	f000 f837 	bl	800a1e4 <_vfiprintf_r>
 800a176:	b002      	add	sp, #8
 800a178:	f85d eb04 	ldr.w	lr, [sp], #4
 800a17c:	b003      	add	sp, #12
 800a17e:	4770      	bx	lr
 800a180:	20000064 	.word	0x20000064

0800a184 <abort>:
 800a184:	b508      	push	{r3, lr}
 800a186:	2006      	movs	r0, #6
 800a188:	f000 fa00 	bl	800a58c <raise>
 800a18c:	2001      	movs	r0, #1
 800a18e:	f7f8 fcf7 	bl	8002b80 <_exit>

0800a192 <__sfputc_r>:
 800a192:	6893      	ldr	r3, [r2, #8]
 800a194:	3b01      	subs	r3, #1
 800a196:	2b00      	cmp	r3, #0
 800a198:	b410      	push	{r4}
 800a19a:	6093      	str	r3, [r2, #8]
 800a19c:	da08      	bge.n	800a1b0 <__sfputc_r+0x1e>
 800a19e:	6994      	ldr	r4, [r2, #24]
 800a1a0:	42a3      	cmp	r3, r4
 800a1a2:	db01      	blt.n	800a1a8 <__sfputc_r+0x16>
 800a1a4:	290a      	cmp	r1, #10
 800a1a6:	d103      	bne.n	800a1b0 <__sfputc_r+0x1e>
 800a1a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1ac:	f000 b932 	b.w	800a414 <__swbuf_r>
 800a1b0:	6813      	ldr	r3, [r2, #0]
 800a1b2:	1c58      	adds	r0, r3, #1
 800a1b4:	6010      	str	r0, [r2, #0]
 800a1b6:	7019      	strb	r1, [r3, #0]
 800a1b8:	4608      	mov	r0, r1
 800a1ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1be:	4770      	bx	lr

0800a1c0 <__sfputs_r>:
 800a1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1c2:	4606      	mov	r6, r0
 800a1c4:	460f      	mov	r7, r1
 800a1c6:	4614      	mov	r4, r2
 800a1c8:	18d5      	adds	r5, r2, r3
 800a1ca:	42ac      	cmp	r4, r5
 800a1cc:	d101      	bne.n	800a1d2 <__sfputs_r+0x12>
 800a1ce:	2000      	movs	r0, #0
 800a1d0:	e007      	b.n	800a1e2 <__sfputs_r+0x22>
 800a1d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1d6:	463a      	mov	r2, r7
 800a1d8:	4630      	mov	r0, r6
 800a1da:	f7ff ffda 	bl	800a192 <__sfputc_r>
 800a1de:	1c43      	adds	r3, r0, #1
 800a1e0:	d1f3      	bne.n	800a1ca <__sfputs_r+0xa>
 800a1e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a1e4 <_vfiprintf_r>:
 800a1e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1e8:	460d      	mov	r5, r1
 800a1ea:	b09d      	sub	sp, #116	@ 0x74
 800a1ec:	4614      	mov	r4, r2
 800a1ee:	4698      	mov	r8, r3
 800a1f0:	4606      	mov	r6, r0
 800a1f2:	b118      	cbz	r0, 800a1fc <_vfiprintf_r+0x18>
 800a1f4:	6a03      	ldr	r3, [r0, #32]
 800a1f6:	b90b      	cbnz	r3, 800a1fc <_vfiprintf_r+0x18>
 800a1f8:	f7fe fac8 	bl	800878c <__sinit>
 800a1fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a1fe:	07d9      	lsls	r1, r3, #31
 800a200:	d405      	bmi.n	800a20e <_vfiprintf_r+0x2a>
 800a202:	89ab      	ldrh	r3, [r5, #12]
 800a204:	059a      	lsls	r2, r3, #22
 800a206:	d402      	bmi.n	800a20e <_vfiprintf_r+0x2a>
 800a208:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a20a:	f7fe fbb6 	bl	800897a <__retarget_lock_acquire_recursive>
 800a20e:	89ab      	ldrh	r3, [r5, #12]
 800a210:	071b      	lsls	r3, r3, #28
 800a212:	d501      	bpl.n	800a218 <_vfiprintf_r+0x34>
 800a214:	692b      	ldr	r3, [r5, #16]
 800a216:	b99b      	cbnz	r3, 800a240 <_vfiprintf_r+0x5c>
 800a218:	4629      	mov	r1, r5
 800a21a:	4630      	mov	r0, r6
 800a21c:	f000 f938 	bl	800a490 <__swsetup_r>
 800a220:	b170      	cbz	r0, 800a240 <_vfiprintf_r+0x5c>
 800a222:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a224:	07dc      	lsls	r4, r3, #31
 800a226:	d504      	bpl.n	800a232 <_vfiprintf_r+0x4e>
 800a228:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a22c:	b01d      	add	sp, #116	@ 0x74
 800a22e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a232:	89ab      	ldrh	r3, [r5, #12]
 800a234:	0598      	lsls	r0, r3, #22
 800a236:	d4f7      	bmi.n	800a228 <_vfiprintf_r+0x44>
 800a238:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a23a:	f7fe fb9f 	bl	800897c <__retarget_lock_release_recursive>
 800a23e:	e7f3      	b.n	800a228 <_vfiprintf_r+0x44>
 800a240:	2300      	movs	r3, #0
 800a242:	9309      	str	r3, [sp, #36]	@ 0x24
 800a244:	2320      	movs	r3, #32
 800a246:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a24a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a24e:	2330      	movs	r3, #48	@ 0x30
 800a250:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a400 <_vfiprintf_r+0x21c>
 800a254:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a258:	f04f 0901 	mov.w	r9, #1
 800a25c:	4623      	mov	r3, r4
 800a25e:	469a      	mov	sl, r3
 800a260:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a264:	b10a      	cbz	r2, 800a26a <_vfiprintf_r+0x86>
 800a266:	2a25      	cmp	r2, #37	@ 0x25
 800a268:	d1f9      	bne.n	800a25e <_vfiprintf_r+0x7a>
 800a26a:	ebba 0b04 	subs.w	fp, sl, r4
 800a26e:	d00b      	beq.n	800a288 <_vfiprintf_r+0xa4>
 800a270:	465b      	mov	r3, fp
 800a272:	4622      	mov	r2, r4
 800a274:	4629      	mov	r1, r5
 800a276:	4630      	mov	r0, r6
 800a278:	f7ff ffa2 	bl	800a1c0 <__sfputs_r>
 800a27c:	3001      	adds	r0, #1
 800a27e:	f000 80a7 	beq.w	800a3d0 <_vfiprintf_r+0x1ec>
 800a282:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a284:	445a      	add	r2, fp
 800a286:	9209      	str	r2, [sp, #36]	@ 0x24
 800a288:	f89a 3000 	ldrb.w	r3, [sl]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	f000 809f 	beq.w	800a3d0 <_vfiprintf_r+0x1ec>
 800a292:	2300      	movs	r3, #0
 800a294:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a298:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a29c:	f10a 0a01 	add.w	sl, sl, #1
 800a2a0:	9304      	str	r3, [sp, #16]
 800a2a2:	9307      	str	r3, [sp, #28]
 800a2a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a2a8:	931a      	str	r3, [sp, #104]	@ 0x68
 800a2aa:	4654      	mov	r4, sl
 800a2ac:	2205      	movs	r2, #5
 800a2ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2b2:	4853      	ldr	r0, [pc, #332]	@ (800a400 <_vfiprintf_r+0x21c>)
 800a2b4:	f7f5 ffb4 	bl	8000220 <memchr>
 800a2b8:	9a04      	ldr	r2, [sp, #16]
 800a2ba:	b9d8      	cbnz	r0, 800a2f4 <_vfiprintf_r+0x110>
 800a2bc:	06d1      	lsls	r1, r2, #27
 800a2be:	bf44      	itt	mi
 800a2c0:	2320      	movmi	r3, #32
 800a2c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2c6:	0713      	lsls	r3, r2, #28
 800a2c8:	bf44      	itt	mi
 800a2ca:	232b      	movmi	r3, #43	@ 0x2b
 800a2cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2d0:	f89a 3000 	ldrb.w	r3, [sl]
 800a2d4:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2d6:	d015      	beq.n	800a304 <_vfiprintf_r+0x120>
 800a2d8:	9a07      	ldr	r2, [sp, #28]
 800a2da:	4654      	mov	r4, sl
 800a2dc:	2000      	movs	r0, #0
 800a2de:	f04f 0c0a 	mov.w	ip, #10
 800a2e2:	4621      	mov	r1, r4
 800a2e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2e8:	3b30      	subs	r3, #48	@ 0x30
 800a2ea:	2b09      	cmp	r3, #9
 800a2ec:	d94b      	bls.n	800a386 <_vfiprintf_r+0x1a2>
 800a2ee:	b1b0      	cbz	r0, 800a31e <_vfiprintf_r+0x13a>
 800a2f0:	9207      	str	r2, [sp, #28]
 800a2f2:	e014      	b.n	800a31e <_vfiprintf_r+0x13a>
 800a2f4:	eba0 0308 	sub.w	r3, r0, r8
 800a2f8:	fa09 f303 	lsl.w	r3, r9, r3
 800a2fc:	4313      	orrs	r3, r2
 800a2fe:	9304      	str	r3, [sp, #16]
 800a300:	46a2      	mov	sl, r4
 800a302:	e7d2      	b.n	800a2aa <_vfiprintf_r+0xc6>
 800a304:	9b03      	ldr	r3, [sp, #12]
 800a306:	1d19      	adds	r1, r3, #4
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	9103      	str	r1, [sp, #12]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	bfbb      	ittet	lt
 800a310:	425b      	neglt	r3, r3
 800a312:	f042 0202 	orrlt.w	r2, r2, #2
 800a316:	9307      	strge	r3, [sp, #28]
 800a318:	9307      	strlt	r3, [sp, #28]
 800a31a:	bfb8      	it	lt
 800a31c:	9204      	strlt	r2, [sp, #16]
 800a31e:	7823      	ldrb	r3, [r4, #0]
 800a320:	2b2e      	cmp	r3, #46	@ 0x2e
 800a322:	d10a      	bne.n	800a33a <_vfiprintf_r+0x156>
 800a324:	7863      	ldrb	r3, [r4, #1]
 800a326:	2b2a      	cmp	r3, #42	@ 0x2a
 800a328:	d132      	bne.n	800a390 <_vfiprintf_r+0x1ac>
 800a32a:	9b03      	ldr	r3, [sp, #12]
 800a32c:	1d1a      	adds	r2, r3, #4
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	9203      	str	r2, [sp, #12]
 800a332:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a336:	3402      	adds	r4, #2
 800a338:	9305      	str	r3, [sp, #20]
 800a33a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a410 <_vfiprintf_r+0x22c>
 800a33e:	7821      	ldrb	r1, [r4, #0]
 800a340:	2203      	movs	r2, #3
 800a342:	4650      	mov	r0, sl
 800a344:	f7f5 ff6c 	bl	8000220 <memchr>
 800a348:	b138      	cbz	r0, 800a35a <_vfiprintf_r+0x176>
 800a34a:	9b04      	ldr	r3, [sp, #16]
 800a34c:	eba0 000a 	sub.w	r0, r0, sl
 800a350:	2240      	movs	r2, #64	@ 0x40
 800a352:	4082      	lsls	r2, r0
 800a354:	4313      	orrs	r3, r2
 800a356:	3401      	adds	r4, #1
 800a358:	9304      	str	r3, [sp, #16]
 800a35a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a35e:	4829      	ldr	r0, [pc, #164]	@ (800a404 <_vfiprintf_r+0x220>)
 800a360:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a364:	2206      	movs	r2, #6
 800a366:	f7f5 ff5b 	bl	8000220 <memchr>
 800a36a:	2800      	cmp	r0, #0
 800a36c:	d03f      	beq.n	800a3ee <_vfiprintf_r+0x20a>
 800a36e:	4b26      	ldr	r3, [pc, #152]	@ (800a408 <_vfiprintf_r+0x224>)
 800a370:	bb1b      	cbnz	r3, 800a3ba <_vfiprintf_r+0x1d6>
 800a372:	9b03      	ldr	r3, [sp, #12]
 800a374:	3307      	adds	r3, #7
 800a376:	f023 0307 	bic.w	r3, r3, #7
 800a37a:	3308      	adds	r3, #8
 800a37c:	9303      	str	r3, [sp, #12]
 800a37e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a380:	443b      	add	r3, r7
 800a382:	9309      	str	r3, [sp, #36]	@ 0x24
 800a384:	e76a      	b.n	800a25c <_vfiprintf_r+0x78>
 800a386:	fb0c 3202 	mla	r2, ip, r2, r3
 800a38a:	460c      	mov	r4, r1
 800a38c:	2001      	movs	r0, #1
 800a38e:	e7a8      	b.n	800a2e2 <_vfiprintf_r+0xfe>
 800a390:	2300      	movs	r3, #0
 800a392:	3401      	adds	r4, #1
 800a394:	9305      	str	r3, [sp, #20]
 800a396:	4619      	mov	r1, r3
 800a398:	f04f 0c0a 	mov.w	ip, #10
 800a39c:	4620      	mov	r0, r4
 800a39e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3a2:	3a30      	subs	r2, #48	@ 0x30
 800a3a4:	2a09      	cmp	r2, #9
 800a3a6:	d903      	bls.n	800a3b0 <_vfiprintf_r+0x1cc>
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d0c6      	beq.n	800a33a <_vfiprintf_r+0x156>
 800a3ac:	9105      	str	r1, [sp, #20]
 800a3ae:	e7c4      	b.n	800a33a <_vfiprintf_r+0x156>
 800a3b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3b4:	4604      	mov	r4, r0
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	e7f0      	b.n	800a39c <_vfiprintf_r+0x1b8>
 800a3ba:	ab03      	add	r3, sp, #12
 800a3bc:	9300      	str	r3, [sp, #0]
 800a3be:	462a      	mov	r2, r5
 800a3c0:	4b12      	ldr	r3, [pc, #72]	@ (800a40c <_vfiprintf_r+0x228>)
 800a3c2:	a904      	add	r1, sp, #16
 800a3c4:	4630      	mov	r0, r6
 800a3c6:	f7fd fd9f 	bl	8007f08 <_printf_float>
 800a3ca:	4607      	mov	r7, r0
 800a3cc:	1c78      	adds	r0, r7, #1
 800a3ce:	d1d6      	bne.n	800a37e <_vfiprintf_r+0x19a>
 800a3d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a3d2:	07d9      	lsls	r1, r3, #31
 800a3d4:	d405      	bmi.n	800a3e2 <_vfiprintf_r+0x1fe>
 800a3d6:	89ab      	ldrh	r3, [r5, #12]
 800a3d8:	059a      	lsls	r2, r3, #22
 800a3da:	d402      	bmi.n	800a3e2 <_vfiprintf_r+0x1fe>
 800a3dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a3de:	f7fe facd 	bl	800897c <__retarget_lock_release_recursive>
 800a3e2:	89ab      	ldrh	r3, [r5, #12]
 800a3e4:	065b      	lsls	r3, r3, #25
 800a3e6:	f53f af1f 	bmi.w	800a228 <_vfiprintf_r+0x44>
 800a3ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a3ec:	e71e      	b.n	800a22c <_vfiprintf_r+0x48>
 800a3ee:	ab03      	add	r3, sp, #12
 800a3f0:	9300      	str	r3, [sp, #0]
 800a3f2:	462a      	mov	r2, r5
 800a3f4:	4b05      	ldr	r3, [pc, #20]	@ (800a40c <_vfiprintf_r+0x228>)
 800a3f6:	a904      	add	r1, sp, #16
 800a3f8:	4630      	mov	r0, r6
 800a3fa:	f7fe f81d 	bl	8008438 <_printf_i>
 800a3fe:	e7e4      	b.n	800a3ca <_vfiprintf_r+0x1e6>
 800a400:	0800a878 	.word	0x0800a878
 800a404:	0800a882 	.word	0x0800a882
 800a408:	08007f09 	.word	0x08007f09
 800a40c:	0800a1c1 	.word	0x0800a1c1
 800a410:	0800a87e 	.word	0x0800a87e

0800a414 <__swbuf_r>:
 800a414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a416:	460e      	mov	r6, r1
 800a418:	4614      	mov	r4, r2
 800a41a:	4605      	mov	r5, r0
 800a41c:	b118      	cbz	r0, 800a426 <__swbuf_r+0x12>
 800a41e:	6a03      	ldr	r3, [r0, #32]
 800a420:	b90b      	cbnz	r3, 800a426 <__swbuf_r+0x12>
 800a422:	f7fe f9b3 	bl	800878c <__sinit>
 800a426:	69a3      	ldr	r3, [r4, #24]
 800a428:	60a3      	str	r3, [r4, #8]
 800a42a:	89a3      	ldrh	r3, [r4, #12]
 800a42c:	071a      	lsls	r2, r3, #28
 800a42e:	d501      	bpl.n	800a434 <__swbuf_r+0x20>
 800a430:	6923      	ldr	r3, [r4, #16]
 800a432:	b943      	cbnz	r3, 800a446 <__swbuf_r+0x32>
 800a434:	4621      	mov	r1, r4
 800a436:	4628      	mov	r0, r5
 800a438:	f000 f82a 	bl	800a490 <__swsetup_r>
 800a43c:	b118      	cbz	r0, 800a446 <__swbuf_r+0x32>
 800a43e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800a442:	4638      	mov	r0, r7
 800a444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a446:	6823      	ldr	r3, [r4, #0]
 800a448:	6922      	ldr	r2, [r4, #16]
 800a44a:	1a98      	subs	r0, r3, r2
 800a44c:	6963      	ldr	r3, [r4, #20]
 800a44e:	b2f6      	uxtb	r6, r6
 800a450:	4283      	cmp	r3, r0
 800a452:	4637      	mov	r7, r6
 800a454:	dc05      	bgt.n	800a462 <__swbuf_r+0x4e>
 800a456:	4621      	mov	r1, r4
 800a458:	4628      	mov	r0, r5
 800a45a:	f7ff fdf7 	bl	800a04c <_fflush_r>
 800a45e:	2800      	cmp	r0, #0
 800a460:	d1ed      	bne.n	800a43e <__swbuf_r+0x2a>
 800a462:	68a3      	ldr	r3, [r4, #8]
 800a464:	3b01      	subs	r3, #1
 800a466:	60a3      	str	r3, [r4, #8]
 800a468:	6823      	ldr	r3, [r4, #0]
 800a46a:	1c5a      	adds	r2, r3, #1
 800a46c:	6022      	str	r2, [r4, #0]
 800a46e:	701e      	strb	r6, [r3, #0]
 800a470:	6962      	ldr	r2, [r4, #20]
 800a472:	1c43      	adds	r3, r0, #1
 800a474:	429a      	cmp	r2, r3
 800a476:	d004      	beq.n	800a482 <__swbuf_r+0x6e>
 800a478:	89a3      	ldrh	r3, [r4, #12]
 800a47a:	07db      	lsls	r3, r3, #31
 800a47c:	d5e1      	bpl.n	800a442 <__swbuf_r+0x2e>
 800a47e:	2e0a      	cmp	r6, #10
 800a480:	d1df      	bne.n	800a442 <__swbuf_r+0x2e>
 800a482:	4621      	mov	r1, r4
 800a484:	4628      	mov	r0, r5
 800a486:	f7ff fde1 	bl	800a04c <_fflush_r>
 800a48a:	2800      	cmp	r0, #0
 800a48c:	d0d9      	beq.n	800a442 <__swbuf_r+0x2e>
 800a48e:	e7d6      	b.n	800a43e <__swbuf_r+0x2a>

0800a490 <__swsetup_r>:
 800a490:	b538      	push	{r3, r4, r5, lr}
 800a492:	4b29      	ldr	r3, [pc, #164]	@ (800a538 <__swsetup_r+0xa8>)
 800a494:	4605      	mov	r5, r0
 800a496:	6818      	ldr	r0, [r3, #0]
 800a498:	460c      	mov	r4, r1
 800a49a:	b118      	cbz	r0, 800a4a4 <__swsetup_r+0x14>
 800a49c:	6a03      	ldr	r3, [r0, #32]
 800a49e:	b90b      	cbnz	r3, 800a4a4 <__swsetup_r+0x14>
 800a4a0:	f7fe f974 	bl	800878c <__sinit>
 800a4a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4a8:	0719      	lsls	r1, r3, #28
 800a4aa:	d422      	bmi.n	800a4f2 <__swsetup_r+0x62>
 800a4ac:	06da      	lsls	r2, r3, #27
 800a4ae:	d407      	bmi.n	800a4c0 <__swsetup_r+0x30>
 800a4b0:	2209      	movs	r2, #9
 800a4b2:	602a      	str	r2, [r5, #0]
 800a4b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4b8:	81a3      	strh	r3, [r4, #12]
 800a4ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a4be:	e033      	b.n	800a528 <__swsetup_r+0x98>
 800a4c0:	0758      	lsls	r0, r3, #29
 800a4c2:	d512      	bpl.n	800a4ea <__swsetup_r+0x5a>
 800a4c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a4c6:	b141      	cbz	r1, 800a4da <__swsetup_r+0x4a>
 800a4c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a4cc:	4299      	cmp	r1, r3
 800a4ce:	d002      	beq.n	800a4d6 <__swsetup_r+0x46>
 800a4d0:	4628      	mov	r0, r5
 800a4d2:	f7ff f8bd 	bl	8009650 <_free_r>
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	6363      	str	r3, [r4, #52]	@ 0x34
 800a4da:	89a3      	ldrh	r3, [r4, #12]
 800a4dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a4e0:	81a3      	strh	r3, [r4, #12]
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	6063      	str	r3, [r4, #4]
 800a4e6:	6923      	ldr	r3, [r4, #16]
 800a4e8:	6023      	str	r3, [r4, #0]
 800a4ea:	89a3      	ldrh	r3, [r4, #12]
 800a4ec:	f043 0308 	orr.w	r3, r3, #8
 800a4f0:	81a3      	strh	r3, [r4, #12]
 800a4f2:	6923      	ldr	r3, [r4, #16]
 800a4f4:	b94b      	cbnz	r3, 800a50a <__swsetup_r+0x7a>
 800a4f6:	89a3      	ldrh	r3, [r4, #12]
 800a4f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a4fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a500:	d003      	beq.n	800a50a <__swsetup_r+0x7a>
 800a502:	4621      	mov	r1, r4
 800a504:	4628      	mov	r0, r5
 800a506:	f000 f883 	bl	800a610 <__smakebuf_r>
 800a50a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a50e:	f013 0201 	ands.w	r2, r3, #1
 800a512:	d00a      	beq.n	800a52a <__swsetup_r+0x9a>
 800a514:	2200      	movs	r2, #0
 800a516:	60a2      	str	r2, [r4, #8]
 800a518:	6962      	ldr	r2, [r4, #20]
 800a51a:	4252      	negs	r2, r2
 800a51c:	61a2      	str	r2, [r4, #24]
 800a51e:	6922      	ldr	r2, [r4, #16]
 800a520:	b942      	cbnz	r2, 800a534 <__swsetup_r+0xa4>
 800a522:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a526:	d1c5      	bne.n	800a4b4 <__swsetup_r+0x24>
 800a528:	bd38      	pop	{r3, r4, r5, pc}
 800a52a:	0799      	lsls	r1, r3, #30
 800a52c:	bf58      	it	pl
 800a52e:	6962      	ldrpl	r2, [r4, #20]
 800a530:	60a2      	str	r2, [r4, #8]
 800a532:	e7f4      	b.n	800a51e <__swsetup_r+0x8e>
 800a534:	2000      	movs	r0, #0
 800a536:	e7f7      	b.n	800a528 <__swsetup_r+0x98>
 800a538:	20000064 	.word	0x20000064

0800a53c <_raise_r>:
 800a53c:	291f      	cmp	r1, #31
 800a53e:	b538      	push	{r3, r4, r5, lr}
 800a540:	4605      	mov	r5, r0
 800a542:	460c      	mov	r4, r1
 800a544:	d904      	bls.n	800a550 <_raise_r+0x14>
 800a546:	2316      	movs	r3, #22
 800a548:	6003      	str	r3, [r0, #0]
 800a54a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a54e:	bd38      	pop	{r3, r4, r5, pc}
 800a550:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a552:	b112      	cbz	r2, 800a55a <_raise_r+0x1e>
 800a554:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a558:	b94b      	cbnz	r3, 800a56e <_raise_r+0x32>
 800a55a:	4628      	mov	r0, r5
 800a55c:	f000 f830 	bl	800a5c0 <_getpid_r>
 800a560:	4622      	mov	r2, r4
 800a562:	4601      	mov	r1, r0
 800a564:	4628      	mov	r0, r5
 800a566:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a56a:	f000 b817 	b.w	800a59c <_kill_r>
 800a56e:	2b01      	cmp	r3, #1
 800a570:	d00a      	beq.n	800a588 <_raise_r+0x4c>
 800a572:	1c59      	adds	r1, r3, #1
 800a574:	d103      	bne.n	800a57e <_raise_r+0x42>
 800a576:	2316      	movs	r3, #22
 800a578:	6003      	str	r3, [r0, #0]
 800a57a:	2001      	movs	r0, #1
 800a57c:	e7e7      	b.n	800a54e <_raise_r+0x12>
 800a57e:	2100      	movs	r1, #0
 800a580:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a584:	4620      	mov	r0, r4
 800a586:	4798      	blx	r3
 800a588:	2000      	movs	r0, #0
 800a58a:	e7e0      	b.n	800a54e <_raise_r+0x12>

0800a58c <raise>:
 800a58c:	4b02      	ldr	r3, [pc, #8]	@ (800a598 <raise+0xc>)
 800a58e:	4601      	mov	r1, r0
 800a590:	6818      	ldr	r0, [r3, #0]
 800a592:	f7ff bfd3 	b.w	800a53c <_raise_r>
 800a596:	bf00      	nop
 800a598:	20000064 	.word	0x20000064

0800a59c <_kill_r>:
 800a59c:	b538      	push	{r3, r4, r5, lr}
 800a59e:	4d07      	ldr	r5, [pc, #28]	@ (800a5bc <_kill_r+0x20>)
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	4604      	mov	r4, r0
 800a5a4:	4608      	mov	r0, r1
 800a5a6:	4611      	mov	r1, r2
 800a5a8:	602b      	str	r3, [r5, #0]
 800a5aa:	f7f8 fad9 	bl	8002b60 <_kill>
 800a5ae:	1c43      	adds	r3, r0, #1
 800a5b0:	d102      	bne.n	800a5b8 <_kill_r+0x1c>
 800a5b2:	682b      	ldr	r3, [r5, #0]
 800a5b4:	b103      	cbz	r3, 800a5b8 <_kill_r+0x1c>
 800a5b6:	6023      	str	r3, [r4, #0]
 800a5b8:	bd38      	pop	{r3, r4, r5, pc}
 800a5ba:	bf00      	nop
 800a5bc:	20000798 	.word	0x20000798

0800a5c0 <_getpid_r>:
 800a5c0:	f7f8 bac6 	b.w	8002b50 <_getpid>

0800a5c4 <__swhatbuf_r>:
 800a5c4:	b570      	push	{r4, r5, r6, lr}
 800a5c6:	460c      	mov	r4, r1
 800a5c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5cc:	2900      	cmp	r1, #0
 800a5ce:	b096      	sub	sp, #88	@ 0x58
 800a5d0:	4615      	mov	r5, r2
 800a5d2:	461e      	mov	r6, r3
 800a5d4:	da0d      	bge.n	800a5f2 <__swhatbuf_r+0x2e>
 800a5d6:	89a3      	ldrh	r3, [r4, #12]
 800a5d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a5dc:	f04f 0100 	mov.w	r1, #0
 800a5e0:	bf14      	ite	ne
 800a5e2:	2340      	movne	r3, #64	@ 0x40
 800a5e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a5e8:	2000      	movs	r0, #0
 800a5ea:	6031      	str	r1, [r6, #0]
 800a5ec:	602b      	str	r3, [r5, #0]
 800a5ee:	b016      	add	sp, #88	@ 0x58
 800a5f0:	bd70      	pop	{r4, r5, r6, pc}
 800a5f2:	466a      	mov	r2, sp
 800a5f4:	f000 f848 	bl	800a688 <_fstat_r>
 800a5f8:	2800      	cmp	r0, #0
 800a5fa:	dbec      	blt.n	800a5d6 <__swhatbuf_r+0x12>
 800a5fc:	9901      	ldr	r1, [sp, #4]
 800a5fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a602:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a606:	4259      	negs	r1, r3
 800a608:	4159      	adcs	r1, r3
 800a60a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a60e:	e7eb      	b.n	800a5e8 <__swhatbuf_r+0x24>

0800a610 <__smakebuf_r>:
 800a610:	898b      	ldrh	r3, [r1, #12]
 800a612:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a614:	079d      	lsls	r5, r3, #30
 800a616:	4606      	mov	r6, r0
 800a618:	460c      	mov	r4, r1
 800a61a:	d507      	bpl.n	800a62c <__smakebuf_r+0x1c>
 800a61c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a620:	6023      	str	r3, [r4, #0]
 800a622:	6123      	str	r3, [r4, #16]
 800a624:	2301      	movs	r3, #1
 800a626:	6163      	str	r3, [r4, #20]
 800a628:	b003      	add	sp, #12
 800a62a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a62c:	ab01      	add	r3, sp, #4
 800a62e:	466a      	mov	r2, sp
 800a630:	f7ff ffc8 	bl	800a5c4 <__swhatbuf_r>
 800a634:	9f00      	ldr	r7, [sp, #0]
 800a636:	4605      	mov	r5, r0
 800a638:	4639      	mov	r1, r7
 800a63a:	4630      	mov	r0, r6
 800a63c:	f7ff f87c 	bl	8009738 <_malloc_r>
 800a640:	b948      	cbnz	r0, 800a656 <__smakebuf_r+0x46>
 800a642:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a646:	059a      	lsls	r2, r3, #22
 800a648:	d4ee      	bmi.n	800a628 <__smakebuf_r+0x18>
 800a64a:	f023 0303 	bic.w	r3, r3, #3
 800a64e:	f043 0302 	orr.w	r3, r3, #2
 800a652:	81a3      	strh	r3, [r4, #12]
 800a654:	e7e2      	b.n	800a61c <__smakebuf_r+0xc>
 800a656:	89a3      	ldrh	r3, [r4, #12]
 800a658:	6020      	str	r0, [r4, #0]
 800a65a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a65e:	81a3      	strh	r3, [r4, #12]
 800a660:	9b01      	ldr	r3, [sp, #4]
 800a662:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a666:	b15b      	cbz	r3, 800a680 <__smakebuf_r+0x70>
 800a668:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a66c:	4630      	mov	r0, r6
 800a66e:	f000 f81d 	bl	800a6ac <_isatty_r>
 800a672:	b128      	cbz	r0, 800a680 <__smakebuf_r+0x70>
 800a674:	89a3      	ldrh	r3, [r4, #12]
 800a676:	f023 0303 	bic.w	r3, r3, #3
 800a67a:	f043 0301 	orr.w	r3, r3, #1
 800a67e:	81a3      	strh	r3, [r4, #12]
 800a680:	89a3      	ldrh	r3, [r4, #12]
 800a682:	431d      	orrs	r5, r3
 800a684:	81a5      	strh	r5, [r4, #12]
 800a686:	e7cf      	b.n	800a628 <__smakebuf_r+0x18>

0800a688 <_fstat_r>:
 800a688:	b538      	push	{r3, r4, r5, lr}
 800a68a:	4d07      	ldr	r5, [pc, #28]	@ (800a6a8 <_fstat_r+0x20>)
 800a68c:	2300      	movs	r3, #0
 800a68e:	4604      	mov	r4, r0
 800a690:	4608      	mov	r0, r1
 800a692:	4611      	mov	r1, r2
 800a694:	602b      	str	r3, [r5, #0]
 800a696:	f7f8 fac3 	bl	8002c20 <_fstat>
 800a69a:	1c43      	adds	r3, r0, #1
 800a69c:	d102      	bne.n	800a6a4 <_fstat_r+0x1c>
 800a69e:	682b      	ldr	r3, [r5, #0]
 800a6a0:	b103      	cbz	r3, 800a6a4 <_fstat_r+0x1c>
 800a6a2:	6023      	str	r3, [r4, #0]
 800a6a4:	bd38      	pop	{r3, r4, r5, pc}
 800a6a6:	bf00      	nop
 800a6a8:	20000798 	.word	0x20000798

0800a6ac <_isatty_r>:
 800a6ac:	b538      	push	{r3, r4, r5, lr}
 800a6ae:	4d06      	ldr	r5, [pc, #24]	@ (800a6c8 <_isatty_r+0x1c>)
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	4604      	mov	r4, r0
 800a6b4:	4608      	mov	r0, r1
 800a6b6:	602b      	str	r3, [r5, #0]
 800a6b8:	f7f8 fac2 	bl	8002c40 <_isatty>
 800a6bc:	1c43      	adds	r3, r0, #1
 800a6be:	d102      	bne.n	800a6c6 <_isatty_r+0x1a>
 800a6c0:	682b      	ldr	r3, [r5, #0]
 800a6c2:	b103      	cbz	r3, 800a6c6 <_isatty_r+0x1a>
 800a6c4:	6023      	str	r3, [r4, #0]
 800a6c6:	bd38      	pop	{r3, r4, r5, pc}
 800a6c8:	20000798 	.word	0x20000798

0800a6cc <_init>:
 800a6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ce:	bf00      	nop
 800a6d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6d2:	bc08      	pop	{r3}
 800a6d4:	469e      	mov	lr, r3
 800a6d6:	4770      	bx	lr

0800a6d8 <_fini>:
 800a6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6da:	bf00      	nop
 800a6dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6de:	bc08      	pop	{r3}
 800a6e0:	469e      	mov	lr, r3
 800a6e2:	4770      	bx	lr
