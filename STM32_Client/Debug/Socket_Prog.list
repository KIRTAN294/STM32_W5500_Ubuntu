
Socket_Prog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a784  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  0800a968  0800a968  0000b968  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad74  0800ad74  0000c224  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ad74  0800ad74  0000bd74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad7c  0800ad7c  0000c224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad7c  0800ad7c  0000bd7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ad80  0800ad80  0000bd80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000224  20000000  0800ad84  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000052c  20000228  0800afa8  0000c228  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000754  0800afa8  0000c754  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c224  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016e64  00000000  00000000  0000c254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003463  00000000  00000000  000230b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001710  00000000  00000000  00026520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011f1  00000000  00000000  00027c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029400  00000000  00000000  00028e21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000183eb  00000000  00000000  00052221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106382  00000000  00000000  0006a60c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017098e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071e0  00000000  00000000  001709d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000093  00000000  00000000  00177bb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000228 	.word	0x20000228
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a94c 	.word	0x0800a94c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000022c 	.word	0x2000022c
 800021c:	0800a94c 	.word	0x0800a94c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <Handlebmsmessage>:
//
//
//
//}

void Handlebmsmessage(uint32_t can_id, uint8_t *RxData, uint8_t length){
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	71fb      	strb	r3, [r7, #7]

	Bms_message = true;
 8000ca6:	4b73      	ldr	r3, [pc, #460]	@ (8000e74 <Handlebmsmessage+0x1dc>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	701a      	strb	r2, [r3, #0]

	switch(can_id){
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	4a72      	ldr	r2, [pc, #456]	@ (8000e78 <Handlebmsmessage+0x1e0>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	f000 80c8 	beq.w	8000e46 <Handlebmsmessage+0x1ae>
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	4a6f      	ldr	r2, [pc, #444]	@ (8000e78 <Handlebmsmessage+0x1e0>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	f200 80d5 	bhi.w	8000e6a <Handlebmsmessage+0x1d2>
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	4a6e      	ldr	r2, [pc, #440]	@ (8000e7c <Handlebmsmessage+0x1e4>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	f000 80ac 	beq.w	8000e22 <Handlebmsmessage+0x18a>
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	4a6b      	ldr	r2, [pc, #428]	@ (8000e7c <Handlebmsmessage+0x1e4>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	f200 80cb 	bhi.w	8000e6a <Handlebmsmessage+0x1d2>
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	4a6a      	ldr	r2, [pc, #424]	@ (8000e80 <Handlebmsmessage+0x1e8>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d077      	beq.n	8000dcc <Handlebmsmessage+0x134>
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	4a68      	ldr	r2, [pc, #416]	@ (8000e80 <Handlebmsmessage+0x1e8>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	f200 80c2 	bhi.w	8000e6a <Handlebmsmessage+0x1d2>
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	4a66      	ldr	r2, [pc, #408]	@ (8000e84 <Handlebmsmessage+0x1ec>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d034      	beq.n	8000d58 <Handlebmsmessage+0xc0>
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	4a64      	ldr	r2, [pc, #400]	@ (8000e84 <Handlebmsmessage+0x1ec>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	f200 80b9 	bhi.w	8000e6a <Handlebmsmessage+0x1d2>
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	4a63      	ldr	r2, [pc, #396]	@ (8000e88 <Handlebmsmessage+0x1f0>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d03d      	beq.n	8000d7c <Handlebmsmessage+0xe4>
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	4a61      	ldr	r2, [pc, #388]	@ (8000e88 <Handlebmsmessage+0x1f0>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	f200 80b0 	bhi.w	8000e6a <Handlebmsmessage+0x1d2>
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	4a5f      	ldr	r2, [pc, #380]	@ (8000e8c <Handlebmsmessage+0x1f4>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d046      	beq.n	8000da0 <Handlebmsmessage+0x108>
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	4a5d      	ldr	r2, [pc, #372]	@ (8000e8c <Handlebmsmessage+0x1f4>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	f200 80a7 	bhi.w	8000e6a <Handlebmsmessage+0x1d2>
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 8000d22:	d004      	beq.n	8000d2e <Handlebmsmessage+0x96>
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4a5a      	ldr	r2, [pc, #360]	@ (8000e90 <Handlebmsmessage+0x1f8>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d061      	beq.n	8000df0 <Handlebmsmessage+0x158>
              eth_msg.length = sizeof(master_data.status7);
              memcpy(eth_msg.payload, &master_data.status7, sizeof(master_data.status7));
              break;

	}
}
 8000d2c:	e09d      	b.n	8000e6a <Handlebmsmessage+0x1d2>
	          eth_msg.can_id = APP_flag_error_CANID;
 8000d2e:	4b59      	ldr	r3, [pc, #356]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000d30:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8000d34:	601a      	str	r2, [r3, #0]
              Unpack_APP_flag_error_bms_can(&master_data.status, RxData, length);
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	68b9      	ldr	r1, [r7, #8]
 8000d3c:	4856      	ldr	r0, [pc, #344]	@ (8000e98 <Handlebmsmessage+0x200>)
 8000d3e:	f000 fb29 	bl	8001394 <Unpack_APP_flag_error_bms_can>
              eth_msg.length = sizeof(master_data.status);
 8000d42:	4b54      	ldr	r3, [pc, #336]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000d44:	2208      	movs	r2, #8
 8000d46:	605a      	str	r2, [r3, #4]
              memcpy(eth_msg.payload, &master_data.status, sizeof(master_data.status));
 8000d48:	4b52      	ldr	r3, [pc, #328]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000d4a:	4a53      	ldr	r2, [pc, #332]	@ (8000e98 <Handlebmsmessage+0x200>)
 8000d4c:	3308      	adds	r3, #8
 8000d4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d52:	e883 0003 	stmia.w	r3, {r0, r1}
              break;
 8000d56:	e088      	b.n	8000e6a <Handlebmsmessage+0x1d2>
	          eth_msg.can_id = BAT_BMS_IntTemp_CANID;
 8000d58:	4b4e      	ldr	r3, [pc, #312]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000d5a:	4a4a      	ldr	r2, [pc, #296]	@ (8000e84 <Handlebmsmessage+0x1ec>)
 8000d5c:	601a      	str	r2, [r3, #0]
              Unpack_BAT_BMS_IntTemp_bms_can(&master_data.status1, RxData, length);
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	461a      	mov	r2, r3
 8000d62:	68b9      	ldr	r1, [r7, #8]
 8000d64:	484d      	ldr	r0, [pc, #308]	@ (8000e9c <Handlebmsmessage+0x204>)
 8000d66:	f000 fc63 	bl	8001630 <Unpack_BAT_BMS_IntTemp_bms_can>
              eth_msg.length = sizeof(master_data.status1);
 8000d6a:	4b4a      	ldr	r3, [pc, #296]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000d6c:	2220      	movs	r2, #32
 8000d6e:	605a      	str	r2, [r3, #4]
              memcpy(eth_msg.payload, &master_data.status1, sizeof(master_data.status1));
 8000d70:	2220      	movs	r2, #32
 8000d72:	494a      	ldr	r1, [pc, #296]	@ (8000e9c <Handlebmsmessage+0x204>)
 8000d74:	484a      	ldr	r0, [pc, #296]	@ (8000ea0 <Handlebmsmessage+0x208>)
 8000d76:	f007 ff44 	bl	8008c02 <memcpy>
              break;
 8000d7a:	e076      	b.n	8000e6a <Handlebmsmessage+0x1d2>
	          eth_msg.can_id = BAT_BMS_ExtTemp_CANID;
 8000d7c:	4b45      	ldr	r3, [pc, #276]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000d7e:	4a42      	ldr	r2, [pc, #264]	@ (8000e88 <Handlebmsmessage+0x1f0>)
 8000d80:	601a      	str	r2, [r3, #0]
              Unpack_BAT_BMS_ExtTemp_bms_can(&master_data.status2, RxData, length);
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	461a      	mov	r2, r3
 8000d86:	68b9      	ldr	r1, [r7, #8]
 8000d88:	4846      	ldr	r0, [pc, #280]	@ (8000ea4 <Handlebmsmessage+0x20c>)
 8000d8a:	f000 fbd9 	bl	8001540 <Unpack_BAT_BMS_ExtTemp_bms_can>
              eth_msg.length = sizeof(master_data.status2);
 8000d8e:	4b41      	ldr	r3, [pc, #260]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000d90:	2228      	movs	r2, #40	@ 0x28
 8000d92:	605a      	str	r2, [r3, #4]
              memcpy(eth_msg.payload, &master_data.status2, sizeof(master_data.status2));
 8000d94:	2228      	movs	r2, #40	@ 0x28
 8000d96:	4943      	ldr	r1, [pc, #268]	@ (8000ea4 <Handlebmsmessage+0x20c>)
 8000d98:	4841      	ldr	r0, [pc, #260]	@ (8000ea0 <Handlebmsmessage+0x208>)
 8000d9a:	f007 ff32 	bl	8008c02 <memcpy>
              break;
 8000d9e:	e064      	b.n	8000e6a <Handlebmsmessage+0x1d2>
	          eth_msg.can_id = BAT_AFE_Fet_Status_CANID;
 8000da0:	4b3c      	ldr	r3, [pc, #240]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000da2:	4a3a      	ldr	r2, [pc, #232]	@ (8000e8c <Handlebmsmessage+0x1f4>)
 8000da4:	601a      	str	r2, [r3, #0]
              Unpack_BAT_AFE_Fet_Status_bms_can(&master_data.status3, RxData, length);
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	461a      	mov	r2, r3
 8000daa:	68b9      	ldr	r1, [r7, #8]
 8000dac:	483e      	ldr	r0, [pc, #248]	@ (8000ea8 <Handlebmsmessage+0x210>)
 8000dae:	f000 fb87 	bl	80014c0 <Unpack_BAT_AFE_Fet_Status_bms_can>
              eth_msg.length = sizeof(master_data.status3);
 8000db2:	4b38      	ldr	r3, [pc, #224]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000db4:	2206      	movs	r2, #6
 8000db6:	605a      	str	r2, [r3, #4]
              memcpy(eth_msg.payload, &master_data.status3, sizeof(master_data.status3));
 8000db8:	4b36      	ldr	r3, [pc, #216]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000dba:	4a37      	ldr	r2, [pc, #220]	@ (8000e98 <Handlebmsmessage+0x200>)
 8000dbc:	3308      	adds	r3, #8
 8000dbe:	3250      	adds	r2, #80	@ 0x50
 8000dc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dc4:	6018      	str	r0, [r3, #0]
 8000dc6:	3304      	adds	r3, #4
 8000dc8:	8019      	strh	r1, [r3, #0]
              break;
 8000dca:	e04e      	b.n	8000e6a <Handlebmsmessage+0x1d2>
	          eth_msg.can_id = BAT_BMS_Charger_Load_Status_CANID;
 8000dcc:	4b31      	ldr	r3, [pc, #196]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000dce:	4a2c      	ldr	r2, [pc, #176]	@ (8000e80 <Handlebmsmessage+0x1e8>)
 8000dd0:	601a      	str	r2, [r3, #0]
              Unpack_BAT_BMS_Charger_Load_Status_bms_can(&master_data.status4, RxData,length);
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	68b9      	ldr	r1, [r7, #8]
 8000dd8:	4834      	ldr	r0, [pc, #208]	@ (8000eac <Handlebmsmessage+0x214>)
 8000dda:	f000 fc8b 	bl	80016f4 <Unpack_BAT_BMS_Charger_Load_Status_bms_can>
              eth_msg.length = sizeof(master_data.status4);
 8000dde:	4b2d      	ldr	r3, [pc, #180]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000de0:	2202      	movs	r2, #2
 8000de2:	605a      	str	r2, [r3, #4]
              memcpy(eth_msg.payload, &master_data.status4, sizeof(master_data.status4));
 8000de4:	4b2c      	ldr	r3, [pc, #176]	@ (8000e98 <Handlebmsmessage+0x200>)
 8000de6:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 8000dea:	4b2a      	ldr	r3, [pc, #168]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000dec:	811a      	strh	r2, [r3, #8]
              break;
 8000dee:	e03c      	b.n	8000e6a <Handlebmsmessage+0x1d2>
	          eth_msg.can_id = BMS_Temp_Sensor_Present_CANID;
 8000df0:	4b28      	ldr	r3, [pc, #160]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000df2:	4a27      	ldr	r2, [pc, #156]	@ (8000e90 <Handlebmsmessage+0x1f8>)
 8000df4:	601a      	str	r2, [r3, #0]
              Unpack_BMS_Temp_Sensor_Present_bms_can(&master_data.status5, RxData, length);
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	68b9      	ldr	r1, [r7, #8]
 8000dfc:	482c      	ldr	r0, [pc, #176]	@ (8000eb0 <Handlebmsmessage+0x218>)
 8000dfe:	f000 fb17 	bl	8001430 <Unpack_BMS_Temp_Sensor_Present_bms_can>
              eth_msg.length = sizeof(master_data.status5);
 8000e02:	4b24      	ldr	r3, [pc, #144]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000e04:	2207      	movs	r2, #7
 8000e06:	605a      	str	r2, [r3, #4]
              memcpy(eth_msg.payload, &master_data.status5, sizeof(master_data.status5));
 8000e08:	4b22      	ldr	r3, [pc, #136]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000e0a:	4a23      	ldr	r2, [pc, #140]	@ (8000e98 <Handlebmsmessage+0x200>)
 8000e0c:	3308      	adds	r3, #8
 8000e0e:	3258      	adds	r2, #88	@ 0x58
 8000e10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e14:	6018      	str	r0, [r3, #0]
 8000e16:	3304      	adds	r3, #4
 8000e18:	8019      	strh	r1, [r3, #0]
 8000e1a:	3302      	adds	r3, #2
 8000e1c:	0c0a      	lsrs	r2, r1, #16
 8000e1e:	701a      	strb	r2, [r3, #0]
              break;
 8000e20:	e023      	b.n	8000e6a <Handlebmsmessage+0x1d2>
	          eth_msg.can_id = BAT_GAUGE_OvrVIEW_CANID;
 8000e22:	4b1c      	ldr	r3, [pc, #112]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000e24:	4a15      	ldr	r2, [pc, #84]	@ (8000e7c <Handlebmsmessage+0x1e4>)
 8000e26:	601a      	str	r2, [r3, #0]
              Unpack_BAT_GAUGE_OvrVIEW_bms_can(&master_data.status6, RxData, length);
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	68b9      	ldr	r1, [r7, #8]
 8000e2e:	4821      	ldr	r0, [pc, #132]	@ (8000eb4 <Handlebmsmessage+0x21c>)
 8000e30:	f000 fc82 	bl	8001738 <Unpack_BAT_GAUGE_OvrVIEW_bms_can>
              eth_msg.length = sizeof(master_data.status6);
 8000e34:	4b17      	ldr	r3, [pc, #92]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000e36:	2210      	movs	r2, #16
 8000e38:	605a      	str	r2, [r3, #4]
              memcpy(eth_msg.payload, &master_data.status6, sizeof(master_data.status6));
 8000e3a:	2210      	movs	r2, #16
 8000e3c:	491d      	ldr	r1, [pc, #116]	@ (8000eb4 <Handlebmsmessage+0x21c>)
 8000e3e:	4818      	ldr	r0, [pc, #96]	@ (8000ea0 <Handlebmsmessage+0x208>)
 8000e40:	f007 fedf 	bl	8008c02 <memcpy>
              break;
 8000e44:	e011      	b.n	8000e6a <Handlebmsmessage+0x1d2>
	          eth_msg.can_id = BAT_GAUGE_ViT_CANID;
 8000e46:	4b13      	ldr	r3, [pc, #76]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000e48:	4a0b      	ldr	r2, [pc, #44]	@ (8000e78 <Handlebmsmessage+0x1e0>)
 8000e4a:	601a      	str	r2, [r3, #0]
              Unpack_BAT_GAUGE_ViT_bms_can(&master_data.status7, RxData, length);
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	68b9      	ldr	r1, [r7, #8]
 8000e52:	4819      	ldr	r0, [pc, #100]	@ (8000eb8 <Handlebmsmessage+0x220>)
 8000e54:	f000 fcc0 	bl	80017d8 <Unpack_BAT_GAUGE_ViT_bms_can>
              eth_msg.length = sizeof(master_data.status7);
 8000e58:	4b0e      	ldr	r3, [pc, #56]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000e5a:	2230      	movs	r2, #48	@ 0x30
 8000e5c:	605a      	str	r2, [r3, #4]
              memcpy(eth_msg.payload, &master_data.status7, sizeof(master_data.status7));
 8000e5e:	2230      	movs	r2, #48	@ 0x30
 8000e60:	4915      	ldr	r1, [pc, #84]	@ (8000eb8 <Handlebmsmessage+0x220>)
 8000e62:	480f      	ldr	r0, [pc, #60]	@ (8000ea0 <Handlebmsmessage+0x208>)
 8000e64:	f007 fecd 	bl	8008c02 <memcpy>
              break;
 8000e68:	bf00      	nop
}
 8000e6a:	bf00      	nop
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000244 	.word	0x20000244
 8000e78:	001ff820 	.word	0x001ff820
 8000e7c:	001ff810 	.word	0x001ff810
 8000e80:	001ff615 	.word	0x001ff615
 8000e84:	001ff612 	.word	0x001ff612
 8000e88:	001ff611 	.word	0x001ff611
 8000e8c:	001ff310 	.word	0x001ff310
 8000e90:	001ff110 	.word	0x001ff110
 8000e94:	200002e8 	.word	0x200002e8
 8000e98:	20000248 	.word	0x20000248
 8000e9c:	20000250 	.word	0x20000250
 8000ea0:	200002f0 	.word	0x200002f0
 8000ea4:	20000270 	.word	0x20000270
 8000ea8:	20000298 	.word	0x20000298
 8000eac:	2000029e 	.word	0x2000029e
 8000eb0:	200002a0 	.word	0x200002a0
 8000eb4:	200002a8 	.word	0x200002a8
 8000eb8:	200002b8 	.word	0x200002b8

08000ebc <sendbmsdata>:

void sendbmsdata(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
    if (Bms_message && getSn_SR(TCP_SOCKET) == SOCK_ESTABLISHED)
 8000ec2:	4b12      	ldr	r3, [pc, #72]	@ (8000f0c <sendbmsdata+0x50>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d01b      	beq.n	8000f02 <sendbmsdata+0x46>
 8000eca:	f44f 704a 	mov.w	r0, #808	@ 0x328
 8000ece:	f002 f87b 	bl	8002fc8 <WIZCHIP_READ>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b17      	cmp	r3, #23
 8000ed6:	d114      	bne.n	8000f02 <sendbmsdata+0x46>
    {

        int32_t sent = send(TCP_SOCKET, (uint8_t*)&eth_msg ,sizeof(Ethernet_BMS_Packet));
 8000ed8:	2248      	movs	r2, #72	@ 0x48
 8000eda:	490d      	ldr	r1, [pc, #52]	@ (8000f10 <sendbmsdata+0x54>)
 8000edc:	2001      	movs	r0, #1
 8000ede:	f001 fb71 	bl	80025c4 <send>
 8000ee2:	6078      	str	r0, [r7, #4]

        if (sent > 0)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	dd08      	ble.n	8000efc <sendbmsdata+0x40>
        {
            HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8000eea:	2101      	movs	r1, #1
 8000eec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ef0:	f004 f88c 	bl	800500c <HAL_GPIO_TogglePin>
            Bms_message = false;
 8000ef4:	4b05      	ldr	r3, [pc, #20]	@ (8000f0c <sendbmsdata+0x50>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	701a      	strb	r2, [r3, #0]
        {
            disconnect(TCP_SOCKET);
        }

    }
}
 8000efa:	e002      	b.n	8000f02 <sendbmsdata+0x46>
            disconnect(TCP_SOCKET);
 8000efc:	2001      	movs	r0, #1
 8000efe:	f001 faeb 	bl	80024d8 <disconnect>
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000244 	.word	0x20000244
 8000f10:	200002e8 	.word	0x200002e8

08000f14 <bytesToFloat>:
EulerAngles last_angles;
EulerAngles txBuffer[MAX_MESSAGES];
uint8_t large_buffer[BUFFER_SIZE];


float bytesToFloat(uint8_t *bytes) {
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]

    float value;
    memcpy(&value, bytes, sizeof(float));
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	60fb      	str	r3, [r7, #12]
    return value;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	ee07 3a90 	vmov	s15, r3
}
 8000f28:	eeb0 0a67 	vmov.f32	s0, s15
 8000f2c:	3714      	adds	r7, #20
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
	...

08000f38 <Handleimumessage>:

void Handleimumessage(uint32_t can_id, uint8_t *RxData){
 8000f38:	b5b0      	push	{r4, r5, r7, lr}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]



	switch(can_id){
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	3b11      	subs	r3, #17
 8000f46:	2b23      	cmp	r3, #35	@ 0x23
 8000f48:	f200 8175 	bhi.w	8001236 <Handleimumessage+0x2fe>
 8000f4c:	a201      	add	r2, pc, #4	@ (adr r2, 8000f54 <Handleimumessage+0x1c>)
 8000f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f52:	bf00      	nop
 8000f54:	0800116f 	.word	0x0800116f
 8000f58:	08001195 	.word	0x08001195
 8000f5c:	080011d7 	.word	0x080011d7
 8000f60:	08001237 	.word	0x08001237
 8000f64:	08001237 	.word	0x08001237
 8000f68:	08001237 	.word	0x08001237
 8000f6c:	08001237 	.word	0x08001237
 8000f70:	08001237 	.word	0x08001237
 8000f74:	08001237 	.word	0x08001237
 8000f78:	08001237 	.word	0x08001237
 8000f7c:	08001237 	.word	0x08001237
 8000f80:	08001237 	.word	0x08001237
 8000f84:	08001237 	.word	0x08001237
 8000f88:	08001237 	.word	0x08001237
 8000f8c:	08001237 	.word	0x08001237
 8000f90:	08001237 	.word	0x08001237
 8000f94:	08001237 	.word	0x08001237
 8000f98:	08000fe5 	.word	0x08000fe5
 8000f9c:	08001237 	.word	0x08001237
 8000fa0:	08001237 	.word	0x08001237
 8000fa4:	08001237 	.word	0x08001237
 8000fa8:	08001237 	.word	0x08001237
 8000fac:	08001237 	.word	0x08001237
 8000fb0:	08001237 	.word	0x08001237
 8000fb4:	08001237 	.word	0x08001237
 8000fb8:	08001237 	.word	0x08001237
 8000fbc:	08001237 	.word	0x08001237
 8000fc0:	08001237 	.word	0x08001237
 8000fc4:	08001237 	.word	0x08001237
 8000fc8:	08001237 	.word	0x08001237
 8000fcc:	08001237 	.word	0x08001237
 8000fd0:	08001237 	.word	0x08001237
 8000fd4:	08001237 	.word	0x08001237
 8000fd8:	08001237 	.word	0x08001237
 8000fdc:	08001237 	.word	0x08001237
 8000fe0:	080010b5 	.word	0x080010b5

	        case 0x22:
	             int16_t roll_rad = (RxData[0]<<8 ) | RxData[1];
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	b21b      	sxth	r3, r3
 8000fea:	021b      	lsls	r3, r3, #8
 8000fec:	b21a      	sxth	r2, r3
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	b21b      	sxth	r3, r3
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	833b      	strh	r3, [r7, #24]
	             int16_t pitch_rad= (RxData[2]<<8)| RxData[3];
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	3302      	adds	r3, #2
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	b21b      	sxth	r3, r3
 8001002:	021b      	lsls	r3, r3, #8
 8001004:	b21a      	sxth	r2, r3
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	3303      	adds	r3, #3
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	b21b      	sxth	r3, r3
 800100e:	4313      	orrs	r3, r2
 8001010:	82fb      	strh	r3, [r7, #22]
	             int16_t yaw_rad = (RxData[4]<<8 )| RxData[5];
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	3304      	adds	r3, #4
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	b21b      	sxth	r3, r3
 800101a:	021b      	lsls	r3, r3, #8
 800101c:	b21a      	sxth	r2, r3
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	3305      	adds	r3, #5
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	b21b      	sxth	r3, r3
 8001026:	4313      	orrs	r3, r2
 8001028:	82bb      	strh	r3, [r7, #20]

	              if((roll_rad>=0 && roll_rad<=23040) ||(pitch_rad>=0 && pitch_rad<=23040) || (yaw_rad>=0 && yaw_rad<=23040)){
 800102a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800102e:	2b00      	cmp	r3, #0
 8001030:	db04      	blt.n	800103c <Handleimumessage+0x104>
 8001032:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001036:	f5b3 4fb4 	cmp.w	r3, #23040	@ 0x5a00
 800103a:	dd13      	ble.n	8001064 <Handleimumessage+0x12c>
 800103c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001040:	2b00      	cmp	r3, #0
 8001042:	db04      	blt.n	800104e <Handleimumessage+0x116>
 8001044:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001048:	f5b3 4fb4 	cmp.w	r3, #23040	@ 0x5a00
 800104c:	dd0a      	ble.n	8001064 <Handleimumessage+0x12c>
 800104e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001052:	2b00      	cmp	r3, #0
 8001054:	f2c0 80ee 	blt.w	8001234 <Handleimumessage+0x2fc>
 8001058:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800105c:	f5b3 4fb4 	cmp.w	r3, #23040	@ 0x5a00
 8001060:	f300 80e8 	bgt.w	8001234 <Handleimumessage+0x2fc>

	             angles.roll= (roll_rad * 0.0078f);
 8001064:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001068:	ee07 3a90 	vmov	s15, r3
 800106c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001070:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8001280 <Handleimumessage+0x348>
 8001074:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001078:	4b82      	ldr	r3, [pc, #520]	@ (8001284 <Handleimumessage+0x34c>)
 800107a:	edc3 7a00 	vstr	s15, [r3]
	             angles.pitch= (pitch_rad * 0.0078f);
 800107e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001082:	ee07 3a90 	vmov	s15, r3
 8001086:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800108a:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8001280 <Handleimumessage+0x348>
 800108e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001092:	4b7c      	ldr	r3, [pc, #496]	@ (8001284 <Handleimumessage+0x34c>)
 8001094:	edc3 7a01 	vstr	s15, [r3, #4]
	             angles.yaw = (yaw_rad * 0.0078f);
 8001098:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800109c:	ee07 3a90 	vmov	s15, r3
 80010a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010a4:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 8001280 <Handleimumessage+0x348>
 80010a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010ac:	4b75      	ldr	r3, [pc, #468]	@ (8001284 <Handleimumessage+0x34c>)
 80010ae:	edc3 7a02 	vstr	s15, [r3, #8]
	             angles.roll= (roll_rad - 65536)*0.0078;
	             angles.pitch= (pitch_rad - 65536)*0.0078;
	             angles.yaw = (yaw_rad - 65536)*0.0078;

	              }
	             break;
 80010b2:	e0bf      	b.n	8001234 <Handleimumessage+0x2fc>

	        case 0x34:
	             int16_t accX = (RxData[0] << 8) | RxData[1];
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	b21b      	sxth	r3, r3
 80010ba:	021b      	lsls	r3, r3, #8
 80010bc:	b21a      	sxth	r2, r3
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	3301      	adds	r3, #1
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	b21b      	sxth	r3, r3
 80010c6:	4313      	orrs	r3, r2
 80010c8:	83fb      	strh	r3, [r7, #30]
	             int16_t accY = (RxData[2] << 8) | RxData[3];
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	b21b      	sxth	r3, r3
 80010d2:	021b      	lsls	r3, r3, #8
 80010d4:	b21a      	sxth	r2, r3
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	3303      	adds	r3, #3
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	b21b      	sxth	r3, r3
 80010de:	4313      	orrs	r3, r2
 80010e0:	83bb      	strh	r3, [r7, #28]
	             int16_t accZ = (RxData[4] << 8) | RxData[5];
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	3304      	adds	r3, #4
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	b21b      	sxth	r3, r3
 80010ea:	021b      	lsls	r3, r3, #8
 80010ec:	b21a      	sxth	r2, r3
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	3305      	adds	r3, #5
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	b21b      	sxth	r3, r3
 80010f6:	4313      	orrs	r3, r2
 80010f8:	837b      	strh	r3, [r7, #26]

	             angles.accx = accX * 0.0039;
 80010fa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fa38 	bl	8000574 <__aeabi_i2d>
 8001104:	a358      	add	r3, pc, #352	@ (adr r3, 8001268 <Handleimumessage+0x330>)
 8001106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110a:	f7ff fa9d 	bl	8000648 <__aeabi_dmul>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	4610      	mov	r0, r2
 8001114:	4619      	mov	r1, r3
 8001116:	f7ff fd6f 	bl	8000bf8 <__aeabi_d2f>
 800111a:	4603      	mov	r3, r0
 800111c:	4a59      	ldr	r2, [pc, #356]	@ (8001284 <Handleimumessage+0x34c>)
 800111e:	60d3      	str	r3, [r2, #12]
	             angles.accy = accY * 0.0039;
 8001120:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff fa25 	bl	8000574 <__aeabi_i2d>
 800112a:	a34f      	add	r3, pc, #316	@ (adr r3, 8001268 <Handleimumessage+0x330>)
 800112c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001130:	f7ff fa8a 	bl	8000648 <__aeabi_dmul>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	4610      	mov	r0, r2
 800113a:	4619      	mov	r1, r3
 800113c:	f7ff fd5c 	bl	8000bf8 <__aeabi_d2f>
 8001140:	4603      	mov	r3, r0
 8001142:	4a50      	ldr	r2, [pc, #320]	@ (8001284 <Handleimumessage+0x34c>)
 8001144:	6113      	str	r3, [r2, #16]
	             angles.accz = accZ * 0.0039;
 8001146:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff fa12 	bl	8000574 <__aeabi_i2d>
 8001150:	a345      	add	r3, pc, #276	@ (adr r3, 8001268 <Handleimumessage+0x330>)
 8001152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001156:	f7ff fa77 	bl	8000648 <__aeabi_dmul>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	4610      	mov	r0, r2
 8001160:	4619      	mov	r1, r3
 8001162:	f7ff fd49 	bl	8000bf8 <__aeabi_d2f>
 8001166:	4603      	mov	r3, r0
 8001168:	4a46      	ldr	r2, [pc, #280]	@ (8001284 <Handleimumessage+0x34c>)
 800116a:	6153      	str	r3, [r2, #20]

	             break;
 800116c:	e063      	b.n	8001236 <Handleimumessage+0x2fe>

			case 0x11:
			    angles.roll = bytesToFloat(&RxData[4]);
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	3304      	adds	r3, #4
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff fece 	bl	8000f14 <bytesToFloat>
 8001178:	eef0 7a40 	vmov.f32	s15, s0
 800117c:	4b41      	ldr	r3, [pc, #260]	@ (8001284 <Handleimumessage+0x34c>)
 800117e:	edc3 7a00 	vstr	s15, [r3]
			    angles.pitch = bytesToFloat(&RxData[0]);
 8001182:	6838      	ldr	r0, [r7, #0]
 8001184:	f7ff fec6 	bl	8000f14 <bytesToFloat>
 8001188:	eef0 7a40 	vmov.f32	s15, s0
 800118c:	4b3d      	ldr	r3, [pc, #244]	@ (8001284 <Handleimumessage+0x34c>)
 800118e:	edc3 7a01 	vstr	s15, [r3, #4]
	            break;
 8001192:	e050      	b.n	8001236 <Handleimumessage+0x2fe>

		    case 0x12:
			    angles.yaw = bytesToFloat(&RxData[0]);
 8001194:	6838      	ldr	r0, [r7, #0]
 8001196:	f7ff febd 	bl	8000f14 <bytesToFloat>
 800119a:	eef0 7a40 	vmov.f32	s15, s0
 800119e:	4b39      	ldr	r3, [pc, #228]	@ (8001284 <Handleimumessage+0x34c>)
 80011a0:	edc3 7a02 	vstr	s15, [r3, #8]
			    float ACCY= bytesToFloat(&RxData[4]);
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	3304      	adds	r3, #4
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff feb3 	bl	8000f14 <bytesToFloat>
 80011ae:	ed87 0a02 	vstr	s0, [r7, #8]
			    angles.accy = ACCY * (-9.81);
 80011b2:	68b8      	ldr	r0, [r7, #8]
 80011b4:	f7ff f9f0 	bl	8000598 <__aeabi_f2d>
 80011b8:	a32d      	add	r3, pc, #180	@ (adr r3, 8001270 <Handleimumessage+0x338>)
 80011ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011be:	f7ff fa43 	bl	8000648 <__aeabi_dmul>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	4610      	mov	r0, r2
 80011c8:	4619      	mov	r1, r3
 80011ca:	f7ff fd15 	bl	8000bf8 <__aeabi_d2f>
 80011ce:	4603      	mov	r3, r0
 80011d0:	4a2c      	ldr	r2, [pc, #176]	@ (8001284 <Handleimumessage+0x34c>)
 80011d2:	6113      	str	r3, [r2, #16]
			    break;
 80011d4:	e02f      	b.n	8001236 <Handleimumessage+0x2fe>

			case 0x13:
			    float ACCX=bytesToFloat(&RxData[0]);
 80011d6:	6838      	ldr	r0, [r7, #0]
 80011d8:	f7ff fe9c 	bl	8000f14 <bytesToFloat>
 80011dc:	ed87 0a04 	vstr	s0, [r7, #16]
			    angles.accx = ACCX * 9.81;
 80011e0:	6938      	ldr	r0, [r7, #16]
 80011e2:	f7ff f9d9 	bl	8000598 <__aeabi_f2d>
 80011e6:	a324      	add	r3, pc, #144	@ (adr r3, 8001278 <Handleimumessage+0x340>)
 80011e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ec:	f7ff fa2c 	bl	8000648 <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4610      	mov	r0, r2
 80011f6:	4619      	mov	r1, r3
 80011f8:	f7ff fcfe 	bl	8000bf8 <__aeabi_d2f>
 80011fc:	4603      	mov	r3, r0
 80011fe:	4a21      	ldr	r2, [pc, #132]	@ (8001284 <Handleimumessage+0x34c>)
 8001200:	60d3      	str	r3, [r2, #12]
			    float ACCZ=bytesToFloat(&RxData[4]);
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	3304      	adds	r3, #4
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff fe84 	bl	8000f14 <bytesToFloat>
 800120c:	ed87 0a03 	vstr	s0, [r7, #12]
			    angles.accz = ACCZ * 9.81;
 8001210:	68f8      	ldr	r0, [r7, #12]
 8001212:	f7ff f9c1 	bl	8000598 <__aeabi_f2d>
 8001216:	a318      	add	r3, pc, #96	@ (adr r3, 8001278 <Handleimumessage+0x340>)
 8001218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121c:	f7ff fa14 	bl	8000648 <__aeabi_dmul>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4610      	mov	r0, r2
 8001226:	4619      	mov	r1, r3
 8001228:	f7ff fce6 	bl	8000bf8 <__aeabi_d2f>
 800122c:	4603      	mov	r3, r0
 800122e:	4a15      	ldr	r2, [pc, #84]	@ (8001284 <Handleimumessage+0x34c>)
 8001230:	6153      	str	r3, [r2, #20]
			    break;
 8001232:	e000      	b.n	8001236 <Handleimumessage+0x2fe>
	             break;
 8001234:	bf00      	nop

	}

	angles.timestamp = HAL_GetTick();
 8001236:	f002 fbef 	bl	8003a18 <HAL_GetTick>
 800123a:	4603      	mov	r3, r0
 800123c:	4a11      	ldr	r2, [pc, #68]	@ (8001284 <Handleimumessage+0x34c>)
 800123e:	6193      	str	r3, [r2, #24]
    last_angles = angles;
 8001240:	4a11      	ldr	r2, [pc, #68]	@ (8001288 <Handleimumessage+0x350>)
 8001242:	4b10      	ldr	r3, [pc, #64]	@ (8001284 <Handleimumessage+0x34c>)
 8001244:	4614      	mov	r4, r2
 8001246:	461d      	mov	r5, r3
 8001248:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800124a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800124c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001250:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    Imu_message = true;
 8001254:	4b0d      	ldr	r3, [pc, #52]	@ (800128c <Handleimumessage+0x354>)
 8001256:	2201      	movs	r2, #1
 8001258:	701a      	strb	r2, [r3, #0]
}
 800125a:	bf00      	nop
 800125c:	3720      	adds	r7, #32
 800125e:	46bd      	mov	sp, r7
 8001260:	bdb0      	pop	{r4, r5, r7, pc}
 8001262:	bf00      	nop
 8001264:	f3af 8000 	nop.w
 8001268:	8e8a71de 	.word	0x8e8a71de
 800126c:	3f6ff2e4 	.word	0x3f6ff2e4
 8001270:	51eb851f 	.word	0x51eb851f
 8001274:	c0239eb8 	.word	0xc0239eb8
 8001278:	51eb851f 	.word	0x51eb851f
 800127c:	40239eb8 	.word	0x40239eb8
 8001280:	3bff9724 	.word	0x3bff9724
 8001284:	20000364 	.word	0x20000364
 8001288:	20000380 	.word	0x20000380
 800128c:	2000035c 	.word	0x2000035c

08001290 <sendimudata>:
void sendimudata(void) {
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0

	uint32_t now = __HAL_TIM_GET_COUNTER(&htim3);
 8001296:	4b36      	ldr	r3, [pc, #216]	@ (8001370 <sendimudata+0xe0>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800129c:	60fb      	str	r3, [r7, #12]
    if (Imu_message) {
 800129e:	4b35      	ldr	r3, [pc, #212]	@ (8001374 <sendimudata+0xe4>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d05f      	beq.n	8001366 <sendimudata+0xd6>

        if (buffer_index < MAX_MESSAGES) {
 80012a6:	4b34      	ldr	r3, [pc, #208]	@ (8001378 <sendimudata+0xe8>)
 80012a8:	881b      	ldrh	r3, [r3, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d113      	bne.n	80012d6 <sendimudata+0x46>
            memcpy(&txBuffer[buffer_index], (void*)&last_angles, sizeof(EulerAngles));
 80012ae:	4b32      	ldr	r3, [pc, #200]	@ (8001378 <sendimudata+0xe8>)
 80012b0:	881b      	ldrh	r3, [r3, #0]
 80012b2:	461a      	mov	r2, r3
 80012b4:	4613      	mov	r3, r2
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	1a9b      	subs	r3, r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4a2f      	ldr	r2, [pc, #188]	@ (800137c <sendimudata+0xec>)
 80012be:	4413      	add	r3, r2
 80012c0:	221c      	movs	r2, #28
 80012c2:	492f      	ldr	r1, [pc, #188]	@ (8001380 <sendimudata+0xf0>)
 80012c4:	4618      	mov	r0, r3
 80012c6:	f007 fc9c 	bl	8008c02 <memcpy>
            buffer_index++;
 80012ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001378 <sendimudata+0xe8>)
 80012cc:	881b      	ldrh	r3, [r3, #0]
 80012ce:	3301      	adds	r3, #1
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	4b29      	ldr	r3, [pc, #164]	@ (8001378 <sendimudata+0xe8>)
 80012d4:	801a      	strh	r2, [r3, #0]
        }

        if (buffer_index >= MAX_MESSAGES) {
 80012d6:	4b28      	ldr	r3, [pc, #160]	@ (8001378 <sendimudata+0xe8>)
 80012d8:	881b      	ldrh	r3, [r3, #0]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d040      	beq.n	8001360 <sendimudata+0xd0>
            total_size = buffer_index * sizeof(EulerAngles);
 80012de:	4b26      	ldr	r3, [pc, #152]	@ (8001378 <sendimudata+0xe8>)
 80012e0:	881b      	ldrh	r3, [r3, #0]
 80012e2:	461a      	mov	r2, r3
 80012e4:	4613      	mov	r3, r2
 80012e6:	00db      	lsls	r3, r3, #3
 80012e8:	1a9b      	subs	r3, r3, r2
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	461a      	mov	r2, r3
 80012ee:	4b25      	ldr	r3, [pc, #148]	@ (8001384 <sendimudata+0xf4>)
 80012f0:	601a      	str	r2, [r3, #0]
            memcpy(large_buffer, txBuffer, total_size);
 80012f2:	4b24      	ldr	r3, [pc, #144]	@ (8001384 <sendimudata+0xf4>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	4920      	ldr	r1, [pc, #128]	@ (800137c <sendimudata+0xec>)
 80012fa:	4823      	ldr	r0, [pc, #140]	@ (8001388 <sendimudata+0xf8>)
 80012fc:	f007 fc81 	bl	8008c02 <memcpy>

        if (now - last_imu_time >= 1 && getSn_SR(TCP_SOCKET) == SOCK_ESTABLISHED) {
 8001300:	4b22      	ldr	r3, [pc, #136]	@ (800138c <sendimudata+0xfc>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	68fa      	ldr	r2, [r7, #12]
 8001306:	429a      	cmp	r2, r3
 8001308:	d027      	beq.n	800135a <sendimudata+0xca>
 800130a:	f44f 704a 	mov.w	r0, #808	@ 0x328
 800130e:	f001 fe5b 	bl	8002fc8 <WIZCHIP_READ>
 8001312:	4603      	mov	r3, r0
 8001314:	2b17      	cmp	r3, #23
 8001316:	d120      	bne.n	800135a <sendimudata+0xca>
            int32_t sent = send(TCP_SOCKET, large_buffer, total_size);
 8001318:	4b1a      	ldr	r3, [pc, #104]	@ (8001384 <sendimudata+0xf4>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	b29b      	uxth	r3, r3
 800131e:	461a      	mov	r2, r3
 8001320:	4919      	ldr	r1, [pc, #100]	@ (8001388 <sendimudata+0xf8>)
 8001322:	2001      	movs	r0, #1
 8001324:	f001 f94e 	bl	80025c4 <send>
 8001328:	60b8      	str	r0, [r7, #8]

        if (sent > 0) {
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	2b00      	cmp	r3, #0
 800132e:	dd14      	ble.n	800135a <sendimudata+0xca>
           	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8001330:	2101      	movs	r1, #1
 8001332:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001336:	f003 fe69 	bl	800500c <HAL_GPIO_TogglePin>
           	last_imu_time = now;
 800133a:	4a14      	ldr	r2, [pc, #80]	@ (800138c <sendimudata+0xfc>)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	6013      	str	r3, [r2, #0]
           	uint16_t rec = getSn_RX_RSR(TCP_SOCKET);
 8001340:	2001      	movs	r0, #1
 8001342:	f001 ffe4 	bl	800330e <getSn_RX_RSR>
 8001346:	4603      	mov	r3, r0
 8001348:	80fb      	strh	r3, [r7, #6]
        if(rec >=2){
 800134a:	88fb      	ldrh	r3, [r7, #6]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d904      	bls.n	800135a <sendimudata+0xca>
           	recv(TCP_SOCKET,accept,sizeof(accept));
 8001350:	2228      	movs	r2, #40	@ 0x28
 8001352:	490f      	ldr	r1, [pc, #60]	@ (8001390 <sendimudata+0x100>)
 8001354:	2001      	movs	r0, #1
 8001356:	f001 fa2d 	bl	80027b4 <recv>
           	}
           }
         }
            buffer_index = 0;
 800135a:	4b07      	ldr	r3, [pc, #28]	@ (8001378 <sendimudata+0xe8>)
 800135c:	2200      	movs	r2, #0
 800135e:	801a      	strh	r2, [r3, #0]
        }
            Imu_message = false;
 8001360:	4b04      	ldr	r3, [pc, #16]	@ (8001374 <sendimudata+0xe4>)
 8001362:	2200      	movs	r2, #0
 8001364:	701a      	strb	r2, [r3, #0]
    }

}
 8001366:	bf00      	nop
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	2000055c 	.word	0x2000055c
 8001374:	2000035c 	.word	0x2000035c
 8001378:	2000035e 	.word	0x2000035e
 800137c:	2000039c 	.word	0x2000039c
 8001380:	20000380 	.word	0x20000380
 8001384:	20000358 	.word	0x20000358
 8001388:	200003b8 	.word	0x200003b8
 800138c:	20000360 	.word	0x20000360
 8001390:	20000330 	.word	0x20000330

08001394 <Unpack_APP_flag_error_bms_can>:
}

#endif // BMS_CAN_USE_CANSTRUCT

uint32_t Unpack_APP_flag_error_bms_can(APP_flag_error_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	4613      	mov	r3, r2
 80013a0:	71fb      	strb	r3, [r7, #7]
  (void)dlc_;
  _m->APP_flag_undervolt = (_d[0] & (0x01U));
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	701a      	strb	r2, [r3, #0]
  _m->APP_flag_overvolt = (_d[1] & (0x01U));
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	3301      	adds	r3, #1
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	705a      	strb	r2, [r3, #1]
  _m->APP_flag_scd_error = (_d[2] & (0x01U));
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	3302      	adds	r3, #2
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	709a      	strb	r2, [r3, #2]
  _m->APP_flag_highCurrent = (_d[3] & (0x01U));
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	3303      	adds	r3, #3
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	70da      	strb	r2, [r3, #3]
  _m->APP_flag_bat_lowTemp = (_d[4] & (0x01U));
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	3304      	adds	r3, #4
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	711a      	strb	r2, [r3, #4]
  _m->APP_flag_bat_highTemp = (_d[5] & (0x01U));
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	3305      	adds	r3, #5
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	715a      	strb	r2, [r3, #5]
  _m->APP_flag_bms_lowTemp = (_d[6] & (0x01U));
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	3306      	adds	r3, #6
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	b2da      	uxtb	r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	719a      	strb	r2, [r3, #6]
  _m->APP_flag_bms_highTemp = (_d[7] & (0x01U));
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	3307      	adds	r3, #7
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	b2da      	uxtb	r2, r3
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	71da      	strb	r2, [r3, #7]
  _m->mon1.frame_cnt++;

  FMon_APP_flag_error_bms_can(&_m->mon1, APP_flag_error_CANID);
#endif // BMS_CAN_USE_DIAG_MONITORS

  return APP_flag_error_CANID;
 8001420:	f44f 7388 	mov.w	r3, #272	@ 0x110
}
 8001424:	4618      	mov	r0, r3
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <Unpack_BMS_Temp_Sensor_Present_bms_can>:
}

#endif // BMS_CAN_USE_CANSTRUCT

uint32_t Unpack_BMS_Temp_Sensor_Present_bms_can(BMS_Temp_Sensor_Present_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	4613      	mov	r3, r2
 800143c:	71fb      	strb	r3, [r7, #7]
  (void)dlc_;
  _m->BMS_ambient_temp_sensor_present = (_d[0] & (0x01U));
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	b2da      	uxtb	r2, r3
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	701a      	strb	r2, [r3, #0]
  _m->BMS_Fet_temp_sensor_present = (_d[1] & (0x01U));
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	3301      	adds	r3, #1
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	b2da      	uxtb	r2, r3
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	705a      	strb	r2, [r3, #1]
  _m->BMS_ext_adc1_temp_sensor_present = (_d[2] & (0x01U));
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	3302      	adds	r3, #2
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	b2da      	uxtb	r2, r3
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	709a      	strb	r2, [r3, #2]
  _m->BMS_ext_adc2_temp_sensor_present = (_d[3] & (0x01U));
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	3303      	adds	r3, #3
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	b2da      	uxtb	r2, r3
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	70da      	strb	r2, [r3, #3]
  _m->BMS_afe_ts1_temp_sensor_present = (_d[4] & (0x01U));
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	3304      	adds	r3, #4
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	b2da      	uxtb	r2, r3
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	711a      	strb	r2, [r3, #4]
  _m->BMS_afe_ts3_temp_sensor_present = (_d[5] & (0x01U));
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	3305      	adds	r3, #5
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	b2da      	uxtb	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	715a      	strb	r2, [r3, #5]
  _m->BMS_gauge_temp_sensor_present = (_d[6] & (0x01U));
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	3306      	adds	r3, #6
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	b2da      	uxtb	r2, r3
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	719a      	strb	r2, [r3, #6]
  _m->mon1.frame_cnt++;

  FMon_BMS_Temp_Sensor_Present_bms_can(&_m->mon1, BMS_Temp_Sensor_Present_CANID);
#endif // BMS_CAN_USE_DIAG_MONITORS

  return BMS_Temp_Sensor_Present_CANID;
 80014ac:	4b03      	ldr	r3, [pc, #12]	@ (80014bc <Unpack_BMS_Temp_Sensor_Present_bms_can+0x8c>)
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3714      	adds	r7, #20
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	001ff110 	.word	0x001ff110

080014c0 <Unpack_BAT_AFE_Fet_Status_bms_can>:
}

#endif // BMS_CAN_USE_CANSTRUCT

uint32_t Unpack_BAT_AFE_Fet_Status_bms_can(BAT_AFE_Fet_Status_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	4613      	mov	r3, r2
 80014cc:	71fb      	strb	r3, [r7, #7]
  (void)dlc_;
  _m->BAT_afe_chg = (_d[0] & (0x01U));
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	701a      	strb	r2, [r3, #0]
  _m->BAT_afe_dsg = (_d[1] & (0x01U));
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	3301      	adds	r3, #1
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	705a      	strb	r2, [r3, #1]
  _m->BAT_afe_pchg = (_d[2] & (0x01U));
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	3302      	adds	r3, #2
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	b2da      	uxtb	r2, r3
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	709a      	strb	r2, [r3, #2]
  _m->BAT_afe_pdsg = (_d[3] & (0x01U));
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	3303      	adds	r3, #3
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	b2da      	uxtb	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	70da      	strb	r2, [r3, #3]
  _m->BAT_afe_dchg = (_d[4] & (0x01U));
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	3304      	adds	r3, #4
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	b2da      	uxtb	r2, r3
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	711a      	strb	r2, [r3, #4]
  _m->BAT_afe_ddsg = (_d[5] & (0x01U));
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	3305      	adds	r3, #5
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	b2da      	uxtb	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	715a      	strb	r2, [r3, #5]
  _m->mon1.frame_cnt++;

  FMon_BAT_AFE_Fet_Status_bms_can(&_m->mon1, BAT_AFE_Fet_Status_CANID);
#endif // BMS_CAN_USE_DIAG_MONITORS

  return BAT_AFE_Fet_Status_CANID;
 800152c:	4b03      	ldr	r3, [pc, #12]	@ (800153c <Unpack_BAT_AFE_Fet_Status_bms_can+0x7c>)
}
 800152e:	4618      	mov	r0, r3
 8001530:	3714      	adds	r7, #20
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	001ff310 	.word	0x001ff310

08001540 <Unpack_BAT_BMS_ExtTemp_bms_can>:
}

#endif // BMS_CAN_USE_CANSTRUCT

uint32_t Unpack_BAT_BMS_ExtTemp_bms_can(BAT_BMS_ExtTemp_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	4613      	mov	r3, r2
 800154c:	71fb      	strb	r3, [r7, #7]
  (void)dlc_;
  _m->BAT_bms_afe_temp1_ro = ((_d[1] & (0xFFU)) << 8) | (_d[0] & (0xFFU));
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	3301      	adds	r3, #1
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	021b      	lsls	r3, r3, #8
 8001556:	b29b      	uxth	r3, r3
 8001558:	68ba      	ldr	r2, [r7, #8]
 800155a:	7812      	ldrb	r2, [r2, #0]
 800155c:	4313      	orrs	r3, r2
 800155e:	b29a      	uxth	r2, r3
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	801a      	strh	r2, [r3, #0]
#ifdef BMS_CAN_USE_SIGFLOAT
  _m->BAT_bms_afe_temp1_phys = (sigfloat_t)(BMS_CAN_BAT_bms_afe_temp1_ro_fromS(_m->BAT_bms_afe_temp1_ro));
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	881b      	ldrh	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff f803 	bl	8000574 <__aeabi_i2d>
 800156e:	a32d      	add	r3, pc, #180	@ (adr r3, 8001624 <Unpack_BAT_BMS_ExtTemp_bms_can+0xe4>)
 8001570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001574:	f7ff f868 	bl	8000648 <__aeabi_dmul>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4610      	mov	r0, r2
 800157e:	4619      	mov	r1, r3
 8001580:	f04f 0200 	mov.w	r2, #0
 8001584:	f04f 0300 	mov.w	r3, #0
 8001588:	f7fe fea8 	bl	80002dc <__adddf3>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	68f9      	ldr	r1, [r7, #12]
 8001592:	e9c1 2302 	strd	r2, r3, [r1, #8]
#endif // BMS_CAN_USE_SIGFLOAT

  _m->BAT_bms_afe_temp2_ro = ((_d[3] & (0xFFU)) << 8) | (_d[2] & (0xFFU));
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	3303      	adds	r3, #3
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	021b      	lsls	r3, r3, #8
 800159e:	b29b      	uxth	r3, r3
 80015a0:	68ba      	ldr	r2, [r7, #8]
 80015a2:	3202      	adds	r2, #2
 80015a4:	7812      	ldrb	r2, [r2, #0]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	821a      	strh	r2, [r3, #16]
#ifdef BMS_CAN_USE_SIGFLOAT
  _m->BAT_bms_afe_temp2_phys = (sigfloat_t)(BMS_CAN_BAT_bms_afe_temp2_ro_fromS(_m->BAT_bms_afe_temp2_ro));
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	8a1b      	ldrh	r3, [r3, #16]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7fe ffde 	bl	8000574 <__aeabi_i2d>
 80015b8:	a31a      	add	r3, pc, #104	@ (adr r3, 8001624 <Unpack_BAT_BMS_ExtTemp_bms_can+0xe4>)
 80015ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015be:	f7ff f843 	bl	8000648 <__aeabi_dmul>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4610      	mov	r0, r2
 80015c8:	4619      	mov	r1, r3
 80015ca:	f04f 0200 	mov.w	r2, #0
 80015ce:	f04f 0300 	mov.w	r3, #0
 80015d2:	f7fe fe83 	bl	80002dc <__adddf3>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	68f9      	ldr	r1, [r7, #12]
 80015dc:	e9c1 2306 	strd	r2, r3, [r1, #24]
#endif // BMS_CAN_USE_SIGFLOAT

  _m->BAT_bms_ext_temp1 = ((_d[5] & (0xFFU)) << 8) | (_d[4] & (0xFFU));
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	3305      	adds	r3, #5
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	021b      	lsls	r3, r3, #8
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	68ba      	ldr	r2, [r7, #8]
 80015ec:	3204      	adds	r2, #4
 80015ee:	7812      	ldrb	r2, [r2, #0]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	b21a      	sxth	r2, r3
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	841a      	strh	r2, [r3, #32]
  _m->BAT_bms_ext_temp2 = ((_d[7] & (0xFFU)) << 8) | (_d[6] & (0xFFU));
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	3307      	adds	r3, #7
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	021b      	lsls	r3, r3, #8
 8001602:	b29b      	uxth	r3, r3
 8001604:	68ba      	ldr	r2, [r7, #8]
 8001606:	3206      	adds	r2, #6
 8001608:	7812      	ldrb	r2, [r2, #0]
 800160a:	4313      	orrs	r3, r2
 800160c:	b29b      	uxth	r3, r3
 800160e:	b21a      	sxth	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	845a      	strh	r2, [r3, #34]	@ 0x22
  _m->mon1.frame_cnt++;

  FMon_BAT_BMS_ExtTemp_bms_can(&_m->mon1, BAT_BMS_ExtTemp_CANID);
#endif // BMS_CAN_USE_DIAG_MONITORS

  return BAT_BMS_ExtTemp_CANID;
 8001614:	4b02      	ldr	r3, [pc, #8]	@ (8001620 <Unpack_BAT_BMS_ExtTemp_bms_can+0xe0>)
}
 8001616:	4618      	mov	r0, r3
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	001ff611 	.word	0x001ff611
 8001624:	47ae147b 	.word	0x47ae147b
 8001628:	3f847ae1 	.word	0x3f847ae1
 800162c:	00000000 	.word	0x00000000

08001630 <Unpack_BAT_BMS_IntTemp_bms_can>:
}

#endif // BMS_CAN_USE_CANSTRUCT

uint32_t Unpack_BAT_BMS_IntTemp_bms_can(BAT_BMS_IntTemp_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	4613      	mov	r3, r2
 800163c:	71fb      	strb	r3, [r7, #7]
  (void)dlc_;
  _m->BAT_bms_ambient_temp_ro = ((_d[1] & (0xFFU)) << 8) | (_d[0] & (0xFFU));
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	3301      	adds	r3, #1
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	021b      	lsls	r3, r3, #8
 8001646:	b29b      	uxth	r3, r3
 8001648:	68ba      	ldr	r2, [r7, #8]
 800164a:	7812      	ldrb	r2, [r2, #0]
 800164c:	4313      	orrs	r3, r2
 800164e:	b29b      	uxth	r3, r3
 8001650:	b21a      	sxth	r2, r3
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	801a      	strh	r2, [r3, #0]
#ifdef BMS_CAN_USE_SIGFLOAT
  _m->BAT_bms_ambient_temp_phys = (sigfloat_t)(BMS_CAN_BAT_bms_ambient_temp_ro_fromS(_m->BAT_bms_ambient_temp_ro));
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f9b3 3000 	ldrsh.w	r3, [r3]
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe ff89 	bl	8000574 <__aeabi_i2d>
 8001662:	a322      	add	r3, pc, #136	@ (adr r3, 80016ec <Unpack_BAT_BMS_IntTemp_bms_can+0xbc>)
 8001664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001668:	f7fe ffee 	bl	8000648 <__aeabi_dmul>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	4610      	mov	r0, r2
 8001672:	4619      	mov	r1, r3
 8001674:	f04f 0200 	mov.w	r2, #0
 8001678:	f04f 0300 	mov.w	r3, #0
 800167c:	f7fe fe2e 	bl	80002dc <__adddf3>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	68f9      	ldr	r1, [r7, #12]
 8001686:	e9c1 2302 	strd	r2, r3, [r1, #8]
#endif // BMS_CAN_USE_SIGFLOAT

  _m->BAT_bms_fets_temp_ro = ((_d[3] & (0xFFU)) << 8) | (_d[2] & (0xFFU));
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	3303      	adds	r3, #3
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	021b      	lsls	r3, r3, #8
 8001692:	b29b      	uxth	r3, r3
 8001694:	68ba      	ldr	r2, [r7, #8]
 8001696:	3202      	adds	r2, #2
 8001698:	7812      	ldrb	r2, [r2, #0]
 800169a:	4313      	orrs	r3, r2
 800169c:	b29b      	uxth	r3, r3
 800169e:	b21a      	sxth	r2, r3
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	821a      	strh	r2, [r3, #16]
#ifdef BMS_CAN_USE_SIGFLOAT
  _m->BAT_bms_fets_temp_phys = (sigfloat_t)(BMS_CAN_BAT_bms_fets_temp_ro_fromS(_m->BAT_bms_fets_temp_ro));
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7fe ff62 	bl	8000574 <__aeabi_i2d>
 80016b0:	a30e      	add	r3, pc, #56	@ (adr r3, 80016ec <Unpack_BAT_BMS_IntTemp_bms_can+0xbc>)
 80016b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b6:	f7fe ffc7 	bl	8000648 <__aeabi_dmul>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4610      	mov	r0, r2
 80016c0:	4619      	mov	r1, r3
 80016c2:	f04f 0200 	mov.w	r2, #0
 80016c6:	f04f 0300 	mov.w	r3, #0
 80016ca:	f7fe fe07 	bl	80002dc <__adddf3>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	68f9      	ldr	r1, [r7, #12]
 80016d4:	e9c1 2306 	strd	r2, r3, [r1, #24]
  _m->mon1.frame_cnt++;

  FMon_BAT_BMS_IntTemp_bms_can(&_m->mon1, BAT_BMS_IntTemp_CANID);
#endif // BMS_CAN_USE_DIAG_MONITORS

  return BAT_BMS_IntTemp_CANID;
 80016d8:	4b03      	ldr	r3, [pc, #12]	@ (80016e8 <Unpack_BAT_BMS_IntTemp_bms_can+0xb8>)
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	f3af 8000 	nop.w
 80016e8:	001ff612 	.word	0x001ff612
 80016ec:	47ae147b 	.word	0x47ae147b
 80016f0:	3f847ae1 	.word	0x3f847ae1

080016f4 <Unpack_BAT_BMS_Charger_Load_Status_bms_can>:
}

#endif // BMS_CAN_USE_CANSTRUCT

uint32_t Unpack_BAT_BMS_Charger_Load_Status_bms_can(BAT_BMS_Charger_Load_Status_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	4613      	mov	r3, r2
 8001700:	71fb      	strb	r3, [r7, #7]
  (void)dlc_;
  _m->APP_bms_load_detect = (_d[0] & (0x01U));
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	b2da      	uxtb	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	701a      	strb	r2, [r3, #0]
  _m->APP_bms_charger_detect = (_d[1] & (0x01U));
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	3301      	adds	r3, #1
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	b2da      	uxtb	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	705a      	strb	r2, [r3, #1]
  _m->mon1.frame_cnt++;

  FMon_BAT_BMS_Charger_Load_Status_bms_can(&_m->mon1, BAT_BMS_Charger_Load_Status_CANID);
#endif // BMS_CAN_USE_DIAG_MONITORS

  return BAT_BMS_Charger_Load_Status_CANID;
 8001720:	4b03      	ldr	r3, [pc, #12]	@ (8001730 <Unpack_BAT_BMS_Charger_Load_Status_bms_can+0x3c>)
}
 8001722:	4618      	mov	r0, r3
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	001ff615 	.word	0x001ff615
 8001734:	00000000 	.word	0x00000000

08001738 <Unpack_BAT_GAUGE_OvrVIEW_bms_can>:
}

#endif // BMS_CAN_USE_CANSTRUCT

uint32_t Unpack_BAT_GAUGE_OvrVIEW_bms_can(BAT_GAUGE_OvrVIEW_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	4613      	mov	r3, r2
 8001744:	71fb      	strb	r3, [r7, #7]
  (void)dlc_;
  _m->BAT_gauge_SoC = (_d[0] & (0xFFU));
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	781a      	ldrb	r2, [r3, #0]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	701a      	strb	r2, [r3, #0]
  _m->BAT_gaige_SoH = (_d[1] & (0xFFU));
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	3301      	adds	r3, #1
 8001752:	781a      	ldrb	r2, [r3, #0]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	705a      	strb	r2, [r3, #1]
  _m->BAT_gauge_cycleCount = ((_d[3] & (0xFFU)) << 8) | (_d[2] & (0xFFU));
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	3303      	adds	r3, #3
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	021b      	lsls	r3, r3, #8
 8001760:	b29b      	uxth	r3, r3
 8001762:	68ba      	ldr	r2, [r7, #8]
 8001764:	3202      	adds	r2, #2
 8001766:	7812      	ldrb	r2, [r2, #0]
 8001768:	4313      	orrs	r3, r2
 800176a:	b29a      	uxth	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	805a      	strh	r2, [r3, #2]
  _m->BAT_gauge_remainingCap_ro = ((_d[5] & (0xFFU)) << 8) | (_d[4] & (0xFFU));
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	3305      	adds	r3, #5
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	021b      	lsls	r3, r3, #8
 8001778:	b29b      	uxth	r3, r3
 800177a:	68ba      	ldr	r2, [r7, #8]
 800177c:	3204      	adds	r2, #4
 800177e:	7812      	ldrb	r2, [r2, #0]
 8001780:	4313      	orrs	r3, r2
 8001782:	b29a      	uxth	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	809a      	strh	r2, [r3, #4]
#ifdef BMS_CAN_USE_SIGFLOAT
  _m->BAT_gauge_remainingCap_phys = (sigfloat_t)(BMS_CAN_BAT_gauge_remainingCap_ro_fromS(_m->BAT_gauge_remainingCap_ro));
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	889b      	ldrh	r3, [r3, #4]
 800178c:	4618      	mov	r0, r3
 800178e:	f7fe fef1 	bl	8000574 <__aeabi_i2d>
 8001792:	a30e      	add	r3, pc, #56	@ (adr r3, 80017cc <Unpack_BAT_GAUGE_OvrVIEW_bms_can+0x94>)
 8001794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001798:	f7fe ff56 	bl	8000648 <__aeabi_dmul>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4610      	mov	r0, r2
 80017a2:	4619      	mov	r1, r3
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	f04f 0300 	mov.w	r3, #0
 80017ac:	f7fe fd96 	bl	80002dc <__adddf3>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	68f9      	ldr	r1, [r7, #12]
 80017b6:	e9c1 2302 	strd	r2, r3, [r1, #8]
  _m->mon1.frame_cnt++;

  FMon_BAT_GAUGE_OvrVIEW_bms_can(&_m->mon1, BAT_GAUGE_OvrVIEW_CANID);
#endif // BMS_CAN_USE_DIAG_MONITORS

  return BAT_GAUGE_OvrVIEW_CANID;
 80017ba:	4b03      	ldr	r3, [pc, #12]	@ (80017c8 <Unpack_BAT_GAUGE_OvrVIEW_bms_can+0x90>)
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	f3af 8000 	nop.w
 80017c8:	001ff810 	.word	0x001ff810
 80017cc:	d2f1a9fc 	.word	0xd2f1a9fc
 80017d0:	3f50624d 	.word	0x3f50624d
 80017d4:	00000000 	.word	0x00000000

080017d8 <Unpack_BAT_GAUGE_ViT_bms_can>:
}

#endif // BMS_CAN_USE_CANSTRUCT

uint32_t Unpack_BAT_GAUGE_ViT_bms_can(BAT_GAUGE_ViT_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	4613      	mov	r3, r2
 80017e4:	71fb      	strb	r3, [r7, #7]
  (void)dlc_;
  _m->BAT_gauge_vPack_ro = ((_d[1] & (0xFFU)) << 8) | (_d[0] & (0xFFU));
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	3301      	adds	r3, #1
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	021b      	lsls	r3, r3, #8
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	68ba      	ldr	r2, [r7, #8]
 80017f2:	7812      	ldrb	r2, [r2, #0]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	801a      	strh	r2, [r3, #0]
#ifdef BMS_CAN_USE_SIGFLOAT
  _m->BAT_gauge_vPack_phys = (sigfloat_t)(BMS_CAN_BAT_gauge_vPack_ro_fromS(_m->BAT_gauge_vPack_ro));
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	881b      	ldrh	r3, [r3, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f7fe feb7 	bl	8000574 <__aeabi_i2d>
 8001806:	a333      	add	r3, pc, #204	@ (adr r3, 80018d4 <Unpack_BAT_GAUGE_ViT_bms_can+0xfc>)
 8001808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180c:	f7fe ff1c 	bl	8000648 <__aeabi_dmul>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	4610      	mov	r0, r2
 8001816:	4619      	mov	r1, r3
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	f7fe fd5c 	bl	80002dc <__adddf3>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	68f9      	ldr	r1, [r7, #12]
 800182a:	e9c1 2302 	strd	r2, r3, [r1, #8]
#endif // BMS_CAN_USE_SIGFLOAT

  _m->BAT_gauge_iPack_ro = ((_d[3] & (0xFFU)) << 8) | (_d[2] & (0xFFU));
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	3303      	adds	r3, #3
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	021b      	lsls	r3, r3, #8
 8001836:	b29b      	uxth	r3, r3
 8001838:	68ba      	ldr	r2, [r7, #8]
 800183a:	3202      	adds	r2, #2
 800183c:	7812      	ldrb	r2, [r2, #0]
 800183e:	4313      	orrs	r3, r2
 8001840:	b29b      	uxth	r3, r3
 8001842:	b21a      	sxth	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	821a      	strh	r2, [r3, #16]
#ifdef BMS_CAN_USE_SIGFLOAT
  _m->BAT_gauge_iPack_phys = (sigfloat_t)(BMS_CAN_BAT_gauge_iPack_ro_fromS(_m->BAT_gauge_iPack_ro));
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800184e:	4618      	mov	r0, r3
 8001850:	f7fe fe90 	bl	8000574 <__aeabi_i2d>
 8001854:	a321      	add	r3, pc, #132	@ (adr r3, 80018dc <Unpack_BAT_GAUGE_ViT_bms_can+0x104>)
 8001856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185a:	f7fe fef5 	bl	8000648 <__aeabi_dmul>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	4610      	mov	r0, r2
 8001864:	4619      	mov	r1, r3
 8001866:	f04f 0200 	mov.w	r2, #0
 800186a:	f04f 0300 	mov.w	r3, #0
 800186e:	f7fe fd35 	bl	80002dc <__adddf3>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	68f9      	ldr	r1, [r7, #12]
 8001878:	e9c1 2306 	strd	r2, r3, [r1, #24]
#endif // BMS_CAN_USE_SIGFLOAT

  _m->BAT_gauge_tPack_ro = ((_d[5] & (0xFFU)) << 8) | (_d[4] & (0xFFU));
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	3305      	adds	r3, #5
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	021b      	lsls	r3, r3, #8
 8001884:	b29b      	uxth	r3, r3
 8001886:	68ba      	ldr	r2, [r7, #8]
 8001888:	3204      	adds	r2, #4
 800188a:	7812      	ldrb	r2, [r2, #0]
 800188c:	4313      	orrs	r3, r2
 800188e:	b29a      	uxth	r2, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	841a      	strh	r2, [r3, #32]
#ifdef BMS_CAN_USE_SIGFLOAT
  _m->BAT_gauge_tPack_phys = (sigfloat_t)(BMS_CAN_BAT_gauge_tPack_ro_fromS(_m->BAT_gauge_tPack_ro));
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	8c1b      	ldrh	r3, [r3, #32]
 8001898:	4618      	mov	r0, r3
 800189a:	f7fe fe6b 	bl	8000574 <__aeabi_i2d>
 800189e:	a30f      	add	r3, pc, #60	@ (adr r3, 80018dc <Unpack_BAT_GAUGE_ViT_bms_can+0x104>)
 80018a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a4:	f7fe fed0 	bl	8000648 <__aeabi_dmul>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	4610      	mov	r0, r2
 80018ae:	4619      	mov	r1, r3
 80018b0:	f04f 0200 	mov.w	r2, #0
 80018b4:	f04f 0300 	mov.w	r3, #0
 80018b8:	f7fe fd10 	bl	80002dc <__adddf3>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	68f9      	ldr	r1, [r7, #12]
 80018c2:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
  _m->mon1.frame_cnt++;

  FMon_BAT_GAUGE_ViT_bms_can(&_m->mon1, BAT_GAUGE_ViT_CANID);
#endif // BMS_CAN_USE_DIAG_MONITORS

  return BAT_GAUGE_ViT_CANID;
 80018c6:	4b02      	ldr	r3, [pc, #8]	@ (80018d0 <Unpack_BAT_GAUGE_ViT_bms_can+0xf8>)
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	001ff820 	.word	0x001ff820
 80018d4:	d2f1a9fc 	.word	0xd2f1a9fc
 80018d8:	3f50624d 	.word	0x3f50624d
 80018dc:	47ae147b 	.word	0x47ae147b
 80018e0:	3f847ae1 	.word	0x3f847ae1

080018e4 <Handlebmsmessage_wrapper>:
typedef struct {
    uint32_t can_id;
    CAN_HandlerFunc handler;
} CAN_ID_HandlerMap;

void Handlebmsmessage_wrapper(uint32_t id, uint8_t* data, uint8_t dlc) {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	4613      	mov	r3, r2
 80018f0:	71fb      	strb	r3, [r7, #7]
    Handlebmsmessage(id, data, dlc);
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	461a      	mov	r2, r3
 80018f6:	68b9      	ldr	r1, [r7, #8]
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f7ff f9cd 	bl	8000c98 <Handlebmsmessage>
}
 80018fe:	bf00      	nop
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <Handleimumessage_wrapper>:

void Handleimumessage_wrapper(uint32_t id, uint8_t* data, uint8_t dlc) {
 8001906:	b580      	push	{r7, lr}
 8001908:	b084      	sub	sp, #16
 800190a:	af00      	add	r7, sp, #0
 800190c:	60f8      	str	r0, [r7, #12]
 800190e:	60b9      	str	r1, [r7, #8]
 8001910:	4613      	mov	r3, r2
 8001912:	71fb      	strb	r3, [r7, #7]
    Handleimumessage(id, data);
 8001914:	68b9      	ldr	r1, [r7, #8]
 8001916:	68f8      	ldr	r0, [r7, #12]
 8001918:	f7ff fb0e 	bl	8000f38 <Handleimumessage>
}
 800191c:	bf00      	nop
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <HAL_FDCAN_RxFifo0Callback>:
};

typedef uint8_t Commandtype;
Commandtype received_cmd;

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]

    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 800192e:	4b17      	ldr	r3, [pc, #92]	@ (800198c <HAL_FDCAN_RxFifo0Callback+0x68>)
 8001930:	4a17      	ldr	r2, [pc, #92]	@ (8001990 <HAL_FDCAN_RxFifo0Callback+0x6c>)
 8001932:	2140      	movs	r1, #64	@ 0x40
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f002 fdd9 	bl	80044ec <HAL_FDCAN_GetRxMessage>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d120      	bne.n	8001982 <HAL_FDCAN_RxFifo0Callback+0x5e>

        uint32_t id = RxHeader.Identifier;
 8001940:	4b13      	ldr	r3, [pc, #76]	@ (8001990 <HAL_FDCAN_RxFifo0Callback+0x6c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	613b      	str	r3, [r7, #16]
        uint8_t dlc = RxHeader.DataLength;
 8001946:	4b12      	ldr	r3, [pc, #72]	@ (8001990 <HAL_FDCAN_RxFifo0Callback+0x6c>)
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	73fb      	strb	r3, [r7, #15]

        for (int i = 0; i < sizeof(can_handlers)/sizeof(can_handlers[0]); i++) {
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]
 8001950:	e014      	b.n	800197c <HAL_FDCAN_RxFifo0Callback+0x58>
            if (can_handlers[i].can_id == id) {
 8001952:	4a10      	ldr	r2, [pc, #64]	@ (8001994 <HAL_FDCAN_RxFifo0Callback+0x70>)
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	429a      	cmp	r2, r3
 800195e:	d10a      	bne.n	8001976 <HAL_FDCAN_RxFifo0Callback+0x52>
                can_handlers[i].handler(id, RxData, dlc);
 8001960:	4a0c      	ldr	r2, [pc, #48]	@ (8001994 <HAL_FDCAN_RxFifo0Callback+0x70>)
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	4413      	add	r3, r2
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	7bfa      	ldrb	r2, [r7, #15]
 800196c:	4907      	ldr	r1, [pc, #28]	@ (800198c <HAL_FDCAN_RxFifo0Callback+0x68>)
 800196e:	6938      	ldr	r0, [r7, #16]
 8001970:	4798      	blx	r3
                break;
 8001972:	bf00      	nop

            }
        }
    }
}
 8001974:	e005      	b.n	8001982 <HAL_FDCAN_RxFifo0Callback+0x5e>
        for (int i = 0; i < sizeof(can_handlers)/sizeof(can_handlers[0]); i++) {
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	3301      	adds	r3, #1
 800197a:	617b      	str	r3, [r7, #20]
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	2b0c      	cmp	r3, #12
 8001980:	d9e7      	bls.n	8001952 <HAL_FDCAN_RxFifo0Callback+0x2e>
}
 8001982:	bf00      	nop
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	200005a8 	.word	0x200005a8
 8001990:	200005b0 	.word	0x200005b0
 8001994:	0800a978 	.word	0x0800a978

08001998 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800199e:	f001 ffd6 	bl	800394e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019a2:	f000 f8f3 	bl	8001b8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019a6:	f000 fad3 	bl	8001f50 <MX_GPIO_Init>
  MX_DMA_Init();
 80019aa:	f000 fa9f 	bl	8001eec <MX_DMA_Init>
  MX_FDCAN1_Init();
 80019ae:	f000 f939 	bl	8001c24 <MX_FDCAN1_Init>
  MX_TIM3_Init();
 80019b2:	f000 fa4d 	bl	8001e50 <MX_TIM3_Init>
  MX_SPI1_Init();
 80019b6:	f000 fa0d 	bl	8001dd4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 80019ba:	486b      	ldr	r0, [pc, #428]	@ (8001b68 <main+0x1d0>)
 80019bc:	f005 ffd2 	bl	8007964 <HAL_TIM_Base_Start_IT>

  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK) Error_Handler();
 80019c0:	486a      	ldr	r0, [pc, #424]	@ (8001b6c <main+0x1d4>)
 80019c2:	f002 fd6b 	bl	800449c <HAL_FDCAN_Start>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <main+0x38>
 80019cc:	f000 fb20 	bl	8002010 <Error_Handler>

  if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)  Error_Handler();
 80019d0:	2200      	movs	r2, #0
 80019d2:	2101      	movs	r1, #1
 80019d4:	4865      	ldr	r0, [pc, #404]	@ (8001b6c <main+0x1d4>)
 80019d6:	f002 fe91 	bl	80046fc <HAL_FDCAN_ActivateNotification>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <main+0x4c>
 80019e0:	f000 fb16 	bl	8002010 <Error_Handler>

 W5500_Init();
 80019e4:	f001 fabc 	bl	8002f60 <W5500_Init>
 wizchip_setnetinfo(&netInfo);
 80019e8:	4861      	ldr	r0, [pc, #388]	@ (8001b70 <main+0x1d8>)
 80019ea:	f001 ff47 	bl	800387c <wizchip_setnetinfo>

// tcp_server_host();
 uint8_t SOCKET = socket(TCP_SOCKET,Sn_MR_TCP,LOCAL_PORT,0);
 80019ee:	2300      	movs	r3, #0
 80019f0:	f241 52b3 	movw	r2, #5555	@ 0x15b3
 80019f4:	2101      	movs	r1, #1
 80019f6:	2001      	movs	r0, #1
 80019f8:	f000 fb10 	bl	800201c <socket>
 80019fc:	4603      	mov	r3, r0
 80019fe:	73fb      	strb	r3, [r7, #15]
 if(SOCKET == TCP_SOCKET){
 8001a00:	7bfb      	ldrb	r3, [r7, #15]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d11b      	bne.n	8001a3e <main+0xa6>

	  int mode = getSn_MR(TCP_SOCKET);
 8001a06:	2028      	movs	r0, #40	@ 0x28
 8001a08:	f001 fade 	bl	8002fc8 <WIZCHIP_READ>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	60bb      	str	r3, [r7, #8]
	  mode |= Sn_MR_ND;
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	f043 0320 	orr.w	r3, r3, #32
 8001a16:	60bb      	str	r3, [r7, #8]
	  setSn_MR(TCP_SOCKET, mode);
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	2028      	movs	r0, #40	@ 0x28
 8001a20:	f001 fb1e 	bl	8003060 <WIZCHIP_WRITE>
	  connect(TCP_SOCKET, S_ADDR, S_PORT);
 8001a24:	4b53      	ldr	r3, [pc, #332]	@ (8001b74 <main+0x1dc>)
 8001a26:	881b      	ldrh	r3, [r3, #0]
 8001a28:	461a      	mov	r2, r3
 8001a2a:	4953      	ldr	r1, [pc, #332]	@ (8001b78 <main+0x1e0>)
 8001a2c:	2001      	movs	r0, #1
 8001a2e:	f000 fc77 	bl	8002320 <connect>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0,GPIO_PIN_SET);
 8001a32:	2201      	movs	r2, #1
 8001a34:	2101      	movs	r1, #1
 8001a36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a3a:	f003 facf 	bl	8004fdc <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch (getSn_SR(TCP_SOCKET)) {
 8001a3e:	f44f 704a 	mov.w	r0, #808	@ 0x328
 8001a42:	f001 fac1 	bl	8002fc8 <WIZCHIP_READ>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b1c      	cmp	r3, #28
 8001a4a:	d05d      	beq.n	8001b08 <main+0x170>
 8001a4c:	2b1c      	cmp	r3, #28
 8001a4e:	dc77      	bgt.n	8001b40 <main+0x1a8>
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d05d      	beq.n	8001b10 <main+0x178>
 8001a54:	2b17      	cmp	r3, #23
 8001a56:	d173      	bne.n	8001b40 <main+0x1a8>
	          case SOCK_ESTABLISHED:
	              if (getSn_IR(TCP_SOCKET) & Sn_IR_CON) {
 8001a58:	f44f 700a 	mov.w	r0, #552	@ 0x228
 8001a5c:	f001 fab4 	bl	8002fc8 <WIZCHIP_READ>
 8001a60:	4603      	mov	r3, r0
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d00a      	beq.n	8001a80 <main+0xe8>
	                  setSn_IR(TCP_SOCKET, Sn_IR_CON);
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	f44f 700a 	mov.w	r0, #552	@ 0x228
 8001a70:	f001 faf6 	bl	8003060 <WIZCHIP_WRITE>
	                  Newmessage1 = false;
 8001a74:	4b41      	ldr	r3, [pc, #260]	@ (8001b7c <main+0x1e4>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	701a      	strb	r2, [r3, #0]
	                  Nextmessage1 = false;
 8001a7a:	4b41      	ldr	r3, [pc, #260]	@ (8001b80 <main+0x1e8>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	701a      	strb	r2, [r3, #0]
	              }

	              uint16_t rxSize = getSn_RX_RSR(TCP_SOCKET);
 8001a80:	2001      	movs	r0, #1
 8001a82:	f001 fc44 	bl	800330e <getSn_RX_RSR>
 8001a86:	4603      	mov	r3, r0
 8001a88:	80fb      	strh	r3, [r7, #6]
	              if (rxSize >= sizeof(Commandtype)) {
 8001a8a:	88fb      	ldrh	r3, [r7, #6]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d027      	beq.n	8001ae0 <main+0x148>
	                  int32_t received = recv(TCP_SOCKET, &received_cmd, sizeof(received_cmd));
 8001a90:	2201      	movs	r2, #1
 8001a92:	493c      	ldr	r1, [pc, #240]	@ (8001b84 <main+0x1ec>)
 8001a94:	2001      	movs	r0, #1
 8001a96:	f000 fe8d 	bl	80027b4 <recv>
 8001a9a:	6038      	str	r0, [r7, #0]
	                  if (received == sizeof(received_cmd)) {
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d11e      	bne.n	8001ae0 <main+0x148>

	                      if (received_cmd == Send_IMU_Data) {
 8001aa2:	4b38      	ldr	r3, [pc, #224]	@ (8001b84 <main+0x1ec>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d10b      	bne.n	8001ac2 <main+0x12a>
	                          Newmessage1 = true;
 8001aaa:	4b34      	ldr	r3, [pc, #208]	@ (8001b7c <main+0x1e4>)
 8001aac:	2201      	movs	r2, #1
 8001aae:	701a      	strb	r2, [r3, #0]
	                          Nextmessage1 = false;
 8001ab0:	4b33      	ldr	r3, [pc, #204]	@ (8001b80 <main+0x1e8>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	701a      	strb	r2, [r3, #0]
	                          HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001abc:	f003 faa6 	bl	800500c <HAL_GPIO_TogglePin>
 8001ac0:	e00e      	b.n	8001ae0 <main+0x148>
	                      } else if (received_cmd == Send_BMS_Data) {
 8001ac2:	4b30      	ldr	r3, [pc, #192]	@ (8001b84 <main+0x1ec>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d10a      	bne.n	8001ae0 <main+0x148>
	                          Newmessage1 = false;
 8001aca:	4b2c      	ldr	r3, [pc, #176]	@ (8001b7c <main+0x1e4>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	701a      	strb	r2, [r3, #0]
	                          Nextmessage1 = true;
 8001ad0:	4b2b      	ldr	r3, [pc, #172]	@ (8001b80 <main+0x1e8>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	701a      	strb	r2, [r3, #0]
	                          HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001adc:	f003 fa96 	bl	800500c <HAL_GPIO_TogglePin>
	                      }
	                  }
	              }
	              if (Newmessage1 && getSn_SR(TCP_SOCKET) == SOCK_ESTABLISHED){
 8001ae0:	4b26      	ldr	r3, [pc, #152]	@ (8001b7c <main+0x1e4>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d008      	beq.n	8001afa <main+0x162>
 8001ae8:	f44f 704a 	mov.w	r0, #808	@ 0x328
 8001aec:	f001 fa6c 	bl	8002fc8 <WIZCHIP_READ>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b17      	cmp	r3, #23
 8001af4:	d101      	bne.n	8001afa <main+0x162>
	                  sendimudata();
 8001af6:	f7ff fbcb 	bl	8001290 <sendimudata>
	              }
	              if (Nextmessage1) {
 8001afa:	4b21      	ldr	r3, [pc, #132]	@ (8001b80 <main+0x1e8>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d01b      	beq.n	8001b3a <main+0x1a2>
	                  sendbmsdata();
 8001b02:	f7ff f9db 	bl	8000ebc <sendbmsdata>
	              }
	              break;
 8001b06:	e018      	b.n	8001b3a <main+0x1a2>

	          case SOCK_CLOSE_WAIT:
	              disconnect(TCP_SOCKET);
 8001b08:	2001      	movs	r0, #1
 8001b0a:	f000 fce5 	bl	80024d8 <disconnect>

	              break;
 8001b0e:	e017      	b.n	8001b40 <main+0x1a8>

	          case SOCK_CLOSED:
	              if (socket(TCP_SOCKET, Sn_MR_TCP, LOCAL_PORT, 0) == TCP_SOCKET) {
 8001b10:	2300      	movs	r3, #0
 8001b12:	f241 52b3 	movw	r2, #5555	@ 0x15b3
 8001b16:	2101      	movs	r1, #1
 8001b18:	2001      	movs	r0, #1
 8001b1a:	f000 fa7f 	bl	800201c <socket>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d10c      	bne.n	8001b3e <main+0x1a6>
	                  connect(TCP_SOCKET, S_ADDR, S_PORT);
 8001b24:	4b13      	ldr	r3, [pc, #76]	@ (8001b74 <main+0x1dc>)
 8001b26:	881b      	ldrh	r3, [r3, #0]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4913      	ldr	r1, [pc, #76]	@ (8001b78 <main+0x1e0>)
 8001b2c:	2001      	movs	r0, #1
 8001b2e:	f000 fbf7 	bl	8002320 <connect>
	                  total_size = 0;
 8001b32:	4b15      	ldr	r3, [pc, #84]	@ (8001b88 <main+0x1f0>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]

	              }
	              break;
 8001b38:	e001      	b.n	8001b3e <main+0x1a6>
	              break;
 8001b3a:	bf00      	nop
 8001b3c:	e000      	b.n	8001b40 <main+0x1a8>
	              break;
 8001b3e:	bf00      	nop
	           }
	      if (getSn_IR(TCP_SOCKET) & Sn_IR_TIMEOUT) {
 8001b40:	f44f 700a 	mov.w	r0, #552	@ 0x228
 8001b44:	f001 fa40 	bl	8002fc8 <WIZCHIP_READ>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	f003 0308 	and.w	r3, r3, #8
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f43f af75 	beq.w	8001a3e <main+0xa6>
	          setSn_IR(TCP_SOCKET, Sn_IR_TIMEOUT);
 8001b54:	2108      	movs	r1, #8
 8001b56:	f44f 700a 	mov.w	r0, #552	@ 0x228
 8001b5a:	f001 fa81 	bl	8003060 <WIZCHIP_WRITE>
	          disconnect(TCP_SOCKET);
 8001b5e:	2001      	movs	r0, #1
 8001b60:	f000 fcba 	bl	80024d8 <disconnect>
	  switch (getSn_SR(TCP_SOCKET)) {
 8001b64:	e76b      	b.n	8001a3e <main+0xa6>
 8001b66:	bf00      	nop
 8001b68:	2000055c 	.word	0x2000055c
 8001b6c:	200003d4 	.word	0x200003d4
 8001b70:	20000014 	.word	0x20000014
 8001b74:	20000010 	.word	0x20000010
 8001b78:	2000000c 	.word	0x2000000c
 8001b7c:	200005d8 	.word	0x200005d8
 8001b80:	200005d9 	.word	0x200005d9
 8001b84:	200005da 	.word	0x200005da
 8001b88:	20000358 	.word	0x20000358

08001b8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b094      	sub	sp, #80	@ 0x50
 8001b90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b92:	f107 0318 	add.w	r3, r7, #24
 8001b96:	2238      	movs	r2, #56	@ 0x38
 8001b98:	2100      	movs	r1, #0
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f006 ffb1 	bl	8008b02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ba0:	1d3b      	adds	r3, r7, #4
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	605a      	str	r2, [r3, #4]
 8001ba8:	609a      	str	r2, [r3, #8]
 8001baa:	60da      	str	r2, [r3, #12]
 8001bac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001bae:	2000      	movs	r0, #0
 8001bb0:	f003 fa46 	bl	8005040 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bb8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bbc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bbe:	2340      	movs	r3, #64	@ 0x40
 8001bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001bce:	2314      	movs	r3, #20
 8001bd0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001bd6:	2304      	movs	r3, #4
 8001bd8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bde:	f107 0318 	add.w	r3, r7, #24
 8001be2:	4618      	mov	r0, r3
 8001be4:	f003 fae0 	bl	80051a8 <HAL_RCC_OscConfig>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001bee:	f000 fa0f 	bl	8002010 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bf2:	230f      	movs	r3, #15
 8001bf4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c02:	2300      	movs	r3, #0
 8001c04:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c06:	1d3b      	adds	r3, r7, #4
 8001c08:	2104      	movs	r1, #4
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f003 fdde 	bl	80057cc <HAL_RCC_ClockConfig>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001c16:	f000 f9fb 	bl	8002010 <Error_Handler>
  }
}
 8001c1a:	bf00      	nop
 8001c1c:	3750      	adds	r7, #80	@ 0x50
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08c      	sub	sp, #48	@ 0x30
 8001c28:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001c2a:	4b61      	ldr	r3, [pc, #388]	@ (8001db0 <MX_FDCAN1_Init+0x18c>)
 8001c2c:	4a61      	ldr	r2, [pc, #388]	@ (8001db4 <MX_FDCAN1_Init+0x190>)
 8001c2e:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001c30:	4b5f      	ldr	r3, [pc, #380]	@ (8001db0 <MX_FDCAN1_Init+0x18c>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001c36:	4b5e      	ldr	r3, [pc, #376]	@ (8001db0 <MX_FDCAN1_Init+0x18c>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001c3c:	4b5c      	ldr	r3, [pc, #368]	@ (8001db0 <MX_FDCAN1_Init+0x18c>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8001c42:	4b5b      	ldr	r3, [pc, #364]	@ (8001db0 <MX_FDCAN1_Init+0x18c>)
 8001c44:	2201      	movs	r2, #1
 8001c46:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001c48:	4b59      	ldr	r3, [pc, #356]	@ (8001db0 <MX_FDCAN1_Init+0x18c>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001c4e:	4b58      	ldr	r3, [pc, #352]	@ (8001db0 <MX_FDCAN1_Init+0x18c>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8001c54:	4b56      	ldr	r3, [pc, #344]	@ (8001db0 <MX_FDCAN1_Init+0x18c>)
 8001c56:	2201      	movs	r2, #1
 8001c58:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 16;
 8001c5a:	4b55      	ldr	r3, [pc, #340]	@ (8001db0 <MX_FDCAN1_Init+0x18c>)
 8001c5c:	2210      	movs	r2, #16
 8001c5e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 63;
 8001c60:	4b53      	ldr	r3, [pc, #332]	@ (8001db0 <MX_FDCAN1_Init+0x18c>)
 8001c62:	223f      	movs	r2, #63	@ 0x3f
 8001c64:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 16;
 8001c66:	4b52      	ldr	r3, [pc, #328]	@ (8001db0 <MX_FDCAN1_Init+0x18c>)
 8001c68:	2210      	movs	r2, #16
 8001c6a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 8001c6c:	4b50      	ldr	r3, [pc, #320]	@ (8001db0 <MX_FDCAN1_Init+0x18c>)
 8001c6e:	2202      	movs	r2, #2
 8001c70:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8001c72:	4b4f      	ldr	r3, [pc, #316]	@ (8001db0 <MX_FDCAN1_Init+0x18c>)
 8001c74:	2204      	movs	r2, #4
 8001c76:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 8001c78:	4b4d      	ldr	r3, [pc, #308]	@ (8001db0 <MX_FDCAN1_Init+0x18c>)
 8001c7a:	2205      	movs	r2, #5
 8001c7c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 8001c7e:	4b4c      	ldr	r3, [pc, #304]	@ (8001db0 <MX_FDCAN1_Init+0x18c>)
 8001c80:	2205      	movs	r2, #5
 8001c82:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 3;
 8001c84:	4b4a      	ldr	r3, [pc, #296]	@ (8001db0 <MX_FDCAN1_Init+0x18c>)
 8001c86:	2203      	movs	r2, #3
 8001c88:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 4;
 8001c8a:	4b49      	ldr	r3, [pc, #292]	@ (8001db0 <MX_FDCAN1_Init+0x18c>)
 8001c8c:	2204      	movs	r2, #4
 8001c8e:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001c90:	4b47      	ldr	r3, [pc, #284]	@ (8001db0 <MX_FDCAN1_Init+0x18c>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001c96:	4846      	ldr	r0, [pc, #280]	@ (8001db0 <MX_FDCAN1_Init+0x18c>)
 8001c98:	f002 fa4c 	bl	8004134 <HAL_FDCAN_Init>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8001ca2:	f000 f9b5 	bl	8002010 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef s;

        s.FilterConfig = FDCAN_FILTER_TO_RXFIFO0 ;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	627b      	str	r3, [r7, #36]	@ 0x24
        s.FilterType = FDCAN_FILTER_DUAL ;
 8001caa:	2301      	movs	r3, #1
 8001cac:	623b      	str	r3, [r7, #32]
        s.IdType= FDCAN_STANDARD_ID;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61bb      	str	r3, [r7, #24]
        s.FilterID1 = 0x110;
 8001cb2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
        s.FilterID2 = 0x11;
 8001cb8:	2311      	movs	r3, #17
 8001cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        s.FilterIndex = 0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	61fb      	str	r3, [r7, #28]
    if(HAL_FDCAN_ConfigFilter(&hfdcan1,&s)!= HAL_OK){
 8001cc0:	f107 0318 	add.w	r3, r7, #24
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	483a      	ldr	r0, [pc, #232]	@ (8001db0 <MX_FDCAN1_Init+0x18c>)
 8001cc8:	f002 fb8e 	bl	80043e8 <HAL_FDCAN_ConfigFilter>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_FDCAN1_Init+0xb2>

         Error_Handler();
 8001cd2:	f000 f99d 	bl	8002010 <Error_Handler>

        }
        s.FilterID1 = 0x12;
 8001cd6:	2312      	movs	r3, #18
 8001cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
        s.FilterID2 = 0x13;
 8001cda:	2313      	movs	r3, #19
 8001cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        s.FilterIndex = 1;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	61fb      	str	r3, [r7, #28]

    if(HAL_FDCAN_ConfigFilter(&hfdcan1,&s)!= HAL_OK){
 8001ce2:	f107 0318 	add.w	r3, r7, #24
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4831      	ldr	r0, [pc, #196]	@ (8001db0 <MX_FDCAN1_Init+0x18c>)
 8001cea:	f002 fb7d 	bl	80043e8 <HAL_FDCAN_ConfigFilter>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_FDCAN1_Init+0xd4>

      	 Error_Handler();
 8001cf4:	f000 f98c 	bl	8002010 <Error_Handler>
        }
        s.FilterID1 = 0x22;
 8001cf8:	2322      	movs	r3, #34	@ 0x22
 8001cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
        s.FilterID2 = 0x34;
 8001cfc:	2334      	movs	r3, #52	@ 0x34
 8001cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        s.FilterIndex = 2;
 8001d00:	2302      	movs	r3, #2
 8001d02:	61fb      	str	r3, [r7, #28]

    if(HAL_FDCAN_ConfigFilter(&hfdcan1,&s)!= HAL_OK){
 8001d04:	f107 0318 	add.w	r3, r7, #24
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4829      	ldr	r0, [pc, #164]	@ (8001db0 <MX_FDCAN1_Init+0x18c>)
 8001d0c:	f002 fb6c 	bl	80043e8 <HAL_FDCAN_ConfigFilter>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_FDCAN1_Init+0xf6>

  	     Error_Handler();
 8001d16:	f000 f97b 	bl	8002010 <Error_Handler>
        }
  FDCAN_FilterTypeDef Filterconfigure;

        Filterconfigure.FilterConfig = FDCAN_FILTER_TO_RXFIFO0 ;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	60fb      	str	r3, [r7, #12]
        Filterconfigure.FilterType = FDCAN_FILTER_DUAL;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	60bb      	str	r3, [r7, #8]
        Filterconfigure.IdType= FDCAN_EXTENDED_ID;
 8001d22:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d26:	603b      	str	r3, [r7, #0]
        Filterconfigure.FilterIndex = 0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	607b      	str	r3, [r7, #4]
        Filterconfigure.FilterID1 = 0x1FF310;
 8001d2c:	4b22      	ldr	r3, [pc, #136]	@ (8001db8 <MX_FDCAN1_Init+0x194>)
 8001d2e:	613b      	str	r3, [r7, #16]
        Filterconfigure.FilterID2 = 0x1FF310;
 8001d30:	4b21      	ldr	r3, [pc, #132]	@ (8001db8 <MX_FDCAN1_Init+0x194>)
 8001d32:	617b      	str	r3, [r7, #20]
     if(HAL_FDCAN_ConfigFilter(&hfdcan1,&Filterconfigure)!= HAL_OK){
 8001d34:	463b      	mov	r3, r7
 8001d36:	4619      	mov	r1, r3
 8001d38:	481d      	ldr	r0, [pc, #116]	@ (8001db0 <MX_FDCAN1_Init+0x18c>)
 8001d3a:	f002 fb55 	bl	80043e8 <HAL_FDCAN_ConfigFilter>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_FDCAN1_Init+0x124>

         Error_Handler();
 8001d44:	f000 f964 	bl	8002010 <Error_Handler>

        }

        Filterconfigure.FilterIndex = 1;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	607b      	str	r3, [r7, #4]
        Filterconfigure.FilterID1 = 0x1FF615;
 8001d4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001dbc <MX_FDCAN1_Init+0x198>)
 8001d4e:	613b      	str	r3, [r7, #16]
        Filterconfigure.FilterID2 = 0x1FF110;
 8001d50:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc0 <MX_FDCAN1_Init+0x19c>)
 8001d52:	617b      	str	r3, [r7, #20]
     if(HAL_FDCAN_ConfigFilter(&hfdcan1,&Filterconfigure)!= HAL_OK){
 8001d54:	463b      	mov	r3, r7
 8001d56:	4619      	mov	r1, r3
 8001d58:	4815      	ldr	r0, [pc, #84]	@ (8001db0 <MX_FDCAN1_Init+0x18c>)
 8001d5a:	f002 fb45 	bl	80043e8 <HAL_FDCAN_ConfigFilter>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_FDCAN1_Init+0x144>

         Error_Handler();
 8001d64:	f000 f954 	bl	8002010 <Error_Handler>

        }

        Filterconfigure.FilterIndex = 2;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	607b      	str	r3, [r7, #4]
        Filterconfigure.FilterID1 = 0x1FF611;
 8001d6c:	4b15      	ldr	r3, [pc, #84]	@ (8001dc4 <MX_FDCAN1_Init+0x1a0>)
 8001d6e:	613b      	str	r3, [r7, #16]
        Filterconfigure.FilterID2 = 0x1FF612;
 8001d70:	4b15      	ldr	r3, [pc, #84]	@ (8001dc8 <MX_FDCAN1_Init+0x1a4>)
 8001d72:	617b      	str	r3, [r7, #20]
     if(HAL_FDCAN_ConfigFilter(&hfdcan1,&Filterconfigure)!= HAL_OK){
 8001d74:	463b      	mov	r3, r7
 8001d76:	4619      	mov	r1, r3
 8001d78:	480d      	ldr	r0, [pc, #52]	@ (8001db0 <MX_FDCAN1_Init+0x18c>)
 8001d7a:	f002 fb35 	bl	80043e8 <HAL_FDCAN_ConfigFilter>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <MX_FDCAN1_Init+0x164>

         Error_Handler();
 8001d84:	f000 f944 	bl	8002010 <Error_Handler>

        }

        Filterconfigure.FilterIndex = 3;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	607b      	str	r3, [r7, #4]
        Filterconfigure.FilterID1 = 0x1FF810;
 8001d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001dcc <MX_FDCAN1_Init+0x1a8>)
 8001d8e:	613b      	str	r3, [r7, #16]
        Filterconfigure.FilterID2 = 0x1FF820;
 8001d90:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd0 <MX_FDCAN1_Init+0x1ac>)
 8001d92:	617b      	str	r3, [r7, #20]
     if(HAL_FDCAN_ConfigFilter(&hfdcan1,&Filterconfigure)!= HAL_OK){
 8001d94:	463b      	mov	r3, r7
 8001d96:	4619      	mov	r1, r3
 8001d98:	4805      	ldr	r0, [pc, #20]	@ (8001db0 <MX_FDCAN1_Init+0x18c>)
 8001d9a:	f002 fb25 	bl	80043e8 <HAL_FDCAN_ConfigFilter>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_FDCAN1_Init+0x184>

      	 Error_Handler();
 8001da4:	f000 f934 	bl	8002010 <Error_Handler>

        }
  /* USER CODE END FDCAN1_Init 2 */

}
 8001da8:	bf00      	nop
 8001daa:	3730      	adds	r7, #48	@ 0x30
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	200003d4 	.word	0x200003d4
 8001db4:	40006400 	.word	0x40006400
 8001db8:	001ff310 	.word	0x001ff310
 8001dbc:	001ff615 	.word	0x001ff615
 8001dc0:	001ff110 	.word	0x001ff110
 8001dc4:	001ff611 	.word	0x001ff611
 8001dc8:	001ff612 	.word	0x001ff612
 8001dcc:	001ff810 	.word	0x001ff810
 8001dd0:	001ff820 	.word	0x001ff820

08001dd4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e48 <MX_SPI1_Init+0x74>)
 8001dda:	4a1c      	ldr	r2, [pc, #112]	@ (8001e4c <MX_SPI1_Init+0x78>)
 8001ddc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001dde:	4b1a      	ldr	r3, [pc, #104]	@ (8001e48 <MX_SPI1_Init+0x74>)
 8001de0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001de4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001de6:	4b18      	ldr	r3, [pc, #96]	@ (8001e48 <MX_SPI1_Init+0x74>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dec:	4b16      	ldr	r3, [pc, #88]	@ (8001e48 <MX_SPI1_Init+0x74>)
 8001dee:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001df2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001df4:	4b14      	ldr	r3, [pc, #80]	@ (8001e48 <MX_SPI1_Init+0x74>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dfa:	4b13      	ldr	r3, [pc, #76]	@ (8001e48 <MX_SPI1_Init+0x74>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e00:	4b11      	ldr	r3, [pc, #68]	@ (8001e48 <MX_SPI1_Init+0x74>)
 8001e02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e06:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001e08:	4b0f      	ldr	r3, [pc, #60]	@ (8001e48 <MX_SPI1_Init+0x74>)
 8001e0a:	2210      	movs	r2, #16
 8001e0c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e48 <MX_SPI1_Init+0x74>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e14:	4b0c      	ldr	r3, [pc, #48]	@ (8001e48 <MX_SPI1_Init+0x74>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e48 <MX_SPI1_Init+0x74>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001e20:	4b09      	ldr	r3, [pc, #36]	@ (8001e48 <MX_SPI1_Init+0x74>)
 8001e22:	2207      	movs	r2, #7
 8001e24:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e26:	4b08      	ldr	r3, [pc, #32]	@ (8001e48 <MX_SPI1_Init+0x74>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e2c:	4b06      	ldr	r3, [pc, #24]	@ (8001e48 <MX_SPI1_Init+0x74>)
 8001e2e:	2208      	movs	r2, #8
 8001e30:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e32:	4805      	ldr	r0, [pc, #20]	@ (8001e48 <MX_SPI1_Init+0x74>)
 8001e34:	f004 f8fc 	bl	8006030 <HAL_SPI_Init>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001e3e:	f000 f8e7 	bl	8002010 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000438 	.word	0x20000438
 8001e4c:	40013000 	.word	0x40013000

08001e50 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b088      	sub	sp, #32
 8001e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e56:	f107 0310 	add.w	r3, r7, #16
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	605a      	str	r2, [r3, #4]
 8001e60:	609a      	str	r2, [r3, #8]
 8001e62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e64:	1d3b      	adds	r3, r7, #4
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	605a      	str	r2, [r3, #4]
 8001e6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee4 <MX_TIM3_Init+0x94>)
 8001e70:	4a1d      	ldr	r2, [pc, #116]	@ (8001ee8 <MX_TIM3_Init+0x98>)
 8001e72:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 159;
 8001e74:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee4 <MX_TIM3_Init+0x94>)
 8001e76:	229f      	movs	r2, #159	@ 0x9f
 8001e78:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee4 <MX_TIM3_Init+0x94>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001e80:	4b18      	ldr	r3, [pc, #96]	@ (8001ee4 <MX_TIM3_Init+0x94>)
 8001e82:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001e86:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e88:	4b16      	ldr	r3, [pc, #88]	@ (8001ee4 <MX_TIM3_Init+0x94>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ee4 <MX_TIM3_Init+0x94>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e94:	4813      	ldr	r0, [pc, #76]	@ (8001ee4 <MX_TIM3_Init+0x94>)
 8001e96:	f005 fd0d 	bl	80078b4 <HAL_TIM_Base_Init>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001ea0:	f000 f8b6 	bl	8002010 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ea4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ea8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001eaa:	f107 0310 	add.w	r3, r7, #16
 8001eae:	4619      	mov	r1, r3
 8001eb0:	480c      	ldr	r0, [pc, #48]	@ (8001ee4 <MX_TIM3_Init+0x94>)
 8001eb2:	f005 fdcf 	bl	8007a54 <HAL_TIM_ConfigClockSource>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001ebc:	f000 f8a8 	bl	8002010 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ec8:	1d3b      	adds	r3, r7, #4
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4805      	ldr	r0, [pc, #20]	@ (8001ee4 <MX_TIM3_Init+0x94>)
 8001ece:	f006 f827 	bl	8007f20 <HAL_TIMEx_MasterConfigSynchronization>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001ed8:	f000 f89a 	bl	8002010 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001edc:	bf00      	nop
 8001ede:	3720      	adds	r7, #32
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	2000055c 	.word	0x2000055c
 8001ee8:	40000400 	.word	0x40000400

08001eec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001ef2:	4b16      	ldr	r3, [pc, #88]	@ (8001f4c <MX_DMA_Init+0x60>)
 8001ef4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ef6:	4a15      	ldr	r2, [pc, #84]	@ (8001f4c <MX_DMA_Init+0x60>)
 8001ef8:	f043 0304 	orr.w	r3, r3, #4
 8001efc:	6493      	str	r3, [r2, #72]	@ 0x48
 8001efe:	4b13      	ldr	r3, [pc, #76]	@ (8001f4c <MX_DMA_Init+0x60>)
 8001f00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f02:	f003 0304 	and.w	r3, r3, #4
 8001f06:	607b      	str	r3, [r7, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f0a:	4b10      	ldr	r3, [pc, #64]	@ (8001f4c <MX_DMA_Init+0x60>)
 8001f0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f0e:	4a0f      	ldr	r2, [pc, #60]	@ (8001f4c <MX_DMA_Init+0x60>)
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	6493      	str	r3, [r2, #72]	@ 0x48
 8001f16:	4b0d      	ldr	r3, [pc, #52]	@ (8001f4c <MX_DMA_Init+0x60>)
 8001f18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	603b      	str	r3, [r7, #0]
 8001f20:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f22:	2200      	movs	r2, #0
 8001f24:	2100      	movs	r1, #0
 8001f26:	200b      	movs	r0, #11
 8001f28:	f001 fe5d 	bl	8003be6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f2c:	200b      	movs	r0, #11
 8001f2e:	f001 fe74 	bl	8003c1a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001f32:	2200      	movs	r2, #0
 8001f34:	2100      	movs	r1, #0
 8001f36:	200c      	movs	r0, #12
 8001f38:	f001 fe55 	bl	8003be6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001f3c:	200c      	movs	r0, #12
 8001f3e:	f001 fe6c 	bl	8003c1a <HAL_NVIC_EnableIRQ>

}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40021000 	.word	0x40021000

08001f50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b088      	sub	sp, #32
 8001f54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f56:	f107 030c 	add.w	r3, r7, #12
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	605a      	str	r2, [r3, #4]
 8001f60:	609a      	str	r2, [r3, #8]
 8001f62:	60da      	str	r2, [r3, #12]
 8001f64:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f66:	4b28      	ldr	r3, [pc, #160]	@ (8002008 <MX_GPIO_Init+0xb8>)
 8001f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f6a:	4a27      	ldr	r2, [pc, #156]	@ (8002008 <MX_GPIO_Init+0xb8>)
 8001f6c:	f043 0320 	orr.w	r3, r3, #32
 8001f70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f72:	4b25      	ldr	r3, [pc, #148]	@ (8002008 <MX_GPIO_Init+0xb8>)
 8001f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f76:	f003 0320 	and.w	r3, r3, #32
 8001f7a:	60bb      	str	r3, [r7, #8]
 8001f7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7e:	4b22      	ldr	r3, [pc, #136]	@ (8002008 <MX_GPIO_Init+0xb8>)
 8001f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f82:	4a21      	ldr	r2, [pc, #132]	@ (8002008 <MX_GPIO_Init+0xb8>)
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f8a:	4b1f      	ldr	r3, [pc, #124]	@ (8002008 <MX_GPIO_Init+0xb8>)
 8001f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	607b      	str	r3, [r7, #4]
 8001f94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f96:	4b1c      	ldr	r3, [pc, #112]	@ (8002008 <MX_GPIO_Init+0xb8>)
 8001f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f9a:	4a1b      	ldr	r2, [pc, #108]	@ (8002008 <MX_GPIO_Init+0xb8>)
 8001f9c:	f043 0302 	orr.w	r3, r3, #2
 8001fa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fa2:	4b19      	ldr	r3, [pc, #100]	@ (8002008 <MX_GPIO_Init+0xb8>)
 8001fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	603b      	str	r3, [r7, #0]
 8001fac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2103      	movs	r1, #3
 8001fb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fb6:	f003 f811 	bl	8004fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_RESET);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2140      	movs	r1, #64	@ 0x40
 8001fbe:	4813      	ldr	r0, [pc, #76]	@ (800200c <MX_GPIO_Init+0xbc>)
 8001fc0:	f003 f80c 	bl	8004fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd4:	f107 030c 	add.w	r3, r7, #12
 8001fd8:	4619      	mov	r1, r3
 8001fda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fde:	f002 fe7b 	bl	8004cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_PIN_Pin */
  GPIO_InitStruct.Pin = CS_PIN_Pin;
 8001fe2:	2340      	movs	r3, #64	@ 0x40
 8001fe4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_PIN_GPIO_Port, &GPIO_InitStruct);
 8001ff2:	f107 030c 	add.w	r3, r7, #12
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4804      	ldr	r0, [pc, #16]	@ (800200c <MX_GPIO_Init+0xbc>)
 8001ffa:	f002 fe6d 	bl	8004cd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001ffe:	bf00      	nop
 8002000:	3720      	adds	r7, #32
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40021000 	.word	0x40021000
 800200c:	48000400 	.word	0x48000400

08002010 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002014:	b672      	cpsid	i
}
 8002016:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002018:	bf00      	nop
 800201a:	e7fd      	b.n	8002018 <Error_Handler+0x8>

0800201c <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 800201c:	b590      	push	{r4, r7, lr}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	4604      	mov	r4, r0
 8002024:	4608      	mov	r0, r1
 8002026:	4611      	mov	r1, r2
 8002028:	461a      	mov	r2, r3
 800202a:	4623      	mov	r3, r4
 800202c:	71fb      	strb	r3, [r7, #7]
 800202e:	4603      	mov	r3, r0
 8002030:	71bb      	strb	r3, [r7, #6]
 8002032:	460b      	mov	r3, r1
 8002034:	80bb      	strh	r3, [r7, #4]
 8002036:	4613      	mov	r3, r2
 8002038:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	2b08      	cmp	r3, #8
 800203e:	d902      	bls.n	8002046 <socket+0x2a>
 8002040:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002044:	e0ef      	b.n	8002226 <socket+0x20a>
	switch(protocol)
 8002046:	79bb      	ldrb	r3, [r7, #6]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d005      	beq.n	8002058 <socket+0x3c>
 800204c:	2b00      	cmp	r3, #0
 800204e:	dd11      	ble.n	8002074 <socket+0x58>
 8002050:	3b02      	subs	r3, #2
 8002052:	2b02      	cmp	r3, #2
 8002054:	d80e      	bhi.n	8002074 <socket+0x58>
            if(taddr == 0) return SOCKERR_SOCKINIT;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8002056:	e010      	b.n	800207a <socket+0x5e>
            getSIPR((uint8_t*)&taddr);
 8002058:	f107 030c 	add.w	r3, r7, #12
 800205c:	2204      	movs	r2, #4
 800205e:	4619      	mov	r1, r3
 8002060:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8002064:	f001 f84a 	bl	80030fc <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d105      	bne.n	800207a <socket+0x5e>
 800206e:	f06f 0302 	mvn.w	r3, #2
 8002072:	e0d8      	b.n	8002226 <socket+0x20a>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8002074:	f06f 0304 	mvn.w	r3, #4
 8002078:	e0d5      	b.n	8002226 <socket+0x20a>
         break;
 800207a:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 800207c:	78fb      	ldrb	r3, [r7, #3]
 800207e:	f003 0304 	and.w	r3, r3, #4
 8002082:	2b00      	cmp	r3, #0
 8002084:	d002      	beq.n	800208c <socket+0x70>
 8002086:	f06f 0305 	mvn.w	r3, #5
 800208a:	e0cc      	b.n	8002226 <socket+0x20a>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 800208c:	78fb      	ldrb	r3, [r7, #3]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d028      	beq.n	80020e4 <socket+0xc8>
	{
   	switch(protocol)
 8002092:	79bb      	ldrb	r3, [r7, #6]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d002      	beq.n	800209e <socket+0x82>
 8002098:	2b02      	cmp	r3, #2
 800209a:	d008      	beq.n	80020ae <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 800209c:	e022      	b.n	80020e4 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 800209e:	78fb      	ldrb	r3, [r7, #3]
 80020a0:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d11a      	bne.n	80020de <socket+0xc2>
 80020a8:	f06f 0305 	mvn.w	r3, #5
 80020ac:	e0bb      	b.n	8002226 <socket+0x20a>
   	      if(flag & SF_IGMP_VER2)
 80020ae:	78fb      	ldrb	r3, [r7, #3]
 80020b0:	f003 0320 	and.w	r3, r3, #32
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d006      	beq.n	80020c6 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 80020b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	db02      	blt.n	80020c6 <socket+0xaa>
 80020c0:	f06f 0305 	mvn.w	r3, #5
 80020c4:	e0af      	b.n	8002226 <socket+0x20a>
      	      if(flag & SF_UNI_BLOCK)
 80020c6:	78fb      	ldrb	r3, [r7, #3]
 80020c8:	f003 0310 	and.w	r3, r3, #16
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d008      	beq.n	80020e2 <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 80020d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	db04      	blt.n	80020e2 <socket+0xc6>
 80020d8:	f06f 0305 	mvn.w	r3, #5
 80020dc:	e0a3      	b.n	8002226 <socket+0x20a>
   	      break;
 80020de:	bf00      	nop
 80020e0:	e000      	b.n	80020e4 <socket+0xc8>
   	      break;
 80020e2:	bf00      	nop
   	}
   }
	close(sn);
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f000 f8ac 	bl	8002244 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	3301      	adds	r3, #1
 80020f2:	00d8      	lsls	r0, r3, #3
 80020f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020f8:	f023 030f 	bic.w	r3, r3, #15
 80020fc:	b25a      	sxtb	r2, r3
 80020fe:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002102:	4313      	orrs	r3, r2
 8002104:	b25b      	sxtb	r3, r3
 8002106:	b2db      	uxtb	r3, r3
 8002108:	4619      	mov	r1, r3
 800210a:	f000 ffa9 	bl	8003060 <WIZCHIP_WRITE>
    #endif
	if(!port)
 800210e:	88bb      	ldrh	r3, [r7, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d110      	bne.n	8002136 <socket+0x11a>
	{
	   port = sock_any_port++;
 8002114:	4b46      	ldr	r3, [pc, #280]	@ (8002230 <socket+0x214>)
 8002116:	881b      	ldrh	r3, [r3, #0]
 8002118:	1c5a      	adds	r2, r3, #1
 800211a:	b291      	uxth	r1, r2
 800211c:	4a44      	ldr	r2, [pc, #272]	@ (8002230 <socket+0x214>)
 800211e:	8011      	strh	r1, [r2, #0]
 8002120:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8002122:	4b43      	ldr	r3, [pc, #268]	@ (8002230 <socket+0x214>)
 8002124:	881b      	ldrh	r3, [r3, #0]
 8002126:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 800212a:	4293      	cmp	r3, r2
 800212c:	d103      	bne.n	8002136 <socket+0x11a>
 800212e:	4b40      	ldr	r3, [pc, #256]	@ (8002230 <socket+0x214>)
 8002130:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8002134:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8002136:	79fb      	ldrb	r3, [r7, #7]
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	3301      	adds	r3, #1
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002142:	461a      	mov	r2, r3
 8002144:	88bb      	ldrh	r3, [r7, #4]
 8002146:	0a1b      	lsrs	r3, r3, #8
 8002148:	b29b      	uxth	r3, r3
 800214a:	b2db      	uxtb	r3, r3
 800214c:	4619      	mov	r1, r3
 800214e:	4610      	mov	r0, r2
 8002150:	f000 ff86 	bl	8003060 <WIZCHIP_WRITE>
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	3301      	adds	r3, #1
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002160:	461a      	mov	r2, r3
 8002162:	88bb      	ldrh	r3, [r7, #4]
 8002164:	b2db      	uxtb	r3, r3
 8002166:	4619      	mov	r1, r3
 8002168:	4610      	mov	r0, r2
 800216a:	f000 ff79 	bl	8003060 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 800216e:	79fb      	ldrb	r3, [r7, #7]
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	3301      	adds	r3, #1
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800217a:	2101      	movs	r1, #1
 800217c:	4618      	mov	r0, r3
 800217e:	f000 ff6f 	bl	8003060 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002182:	bf00      	nop
 8002184:	79fb      	ldrb	r3, [r7, #7]
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	3301      	adds	r3, #1
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002190:	4618      	mov	r0, r3
 8002192:	f000 ff19 	bl	8002fc8 <WIZCHIP_READ>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1f3      	bne.n	8002184 <socket+0x168>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 800219c:	79fb      	ldrb	r3, [r7, #7]
 800219e:	2201      	movs	r2, #1
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	b21b      	sxth	r3, r3
 80021a6:	43db      	mvns	r3, r3
 80021a8:	b21a      	sxth	r2, r3
 80021aa:	4b22      	ldr	r3, [pc, #136]	@ (8002234 <socket+0x218>)
 80021ac:	881b      	ldrh	r3, [r3, #0]
 80021ae:	b21b      	sxth	r3, r3
 80021b0:	4013      	ands	r3, r2
 80021b2:	b21b      	sxth	r3, r3
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	4b1f      	ldr	r3, [pc, #124]	@ (8002234 <socket+0x218>)
 80021b8:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 80021ba:	78fb      	ldrb	r3, [r7, #3]
 80021bc:	f003 0201 	and.w	r2, r3, #1
 80021c0:	79fb      	ldrb	r3, [r7, #7]
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	b21a      	sxth	r2, r3
 80021c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002234 <socket+0x218>)
 80021ca:	881b      	ldrh	r3, [r3, #0]
 80021cc:	b21b      	sxth	r3, r3
 80021ce:	4313      	orrs	r3, r2
 80021d0:	b21b      	sxth	r3, r3
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	4b17      	ldr	r3, [pc, #92]	@ (8002234 <socket+0x218>)
 80021d6:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 80021d8:	79fb      	ldrb	r3, [r7, #7]
 80021da:	2201      	movs	r2, #1
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	b21b      	sxth	r3, r3
 80021e2:	43db      	mvns	r3, r3
 80021e4:	b21a      	sxth	r2, r3
 80021e6:	4b14      	ldr	r3, [pc, #80]	@ (8002238 <socket+0x21c>)
 80021e8:	881b      	ldrh	r3, [r3, #0]
 80021ea:	b21b      	sxth	r3, r3
 80021ec:	4013      	ands	r3, r2
 80021ee:	b21b      	sxth	r3, r3
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	4b11      	ldr	r3, [pc, #68]	@ (8002238 <socket+0x21c>)
 80021f4:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 80021f6:	79fb      	ldrb	r3, [r7, #7]
 80021f8:	4a10      	ldr	r2, [pc, #64]	@ (800223c <socket+0x220>)
 80021fa:	2100      	movs	r1, #0
 80021fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8002200:	79fb      	ldrb	r3, [r7, #7]
 8002202:	4a0f      	ldr	r2, [pc, #60]	@ (8002240 <socket+0x224>)
 8002204:	2100      	movs	r1, #0
 8002206:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8002208:	bf00      	nop
 800220a:	79fb      	ldrb	r3, [r7, #7]
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	3301      	adds	r3, #1
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002216:	4618      	mov	r0, r3
 8002218:	f000 fed6 	bl	8002fc8 <WIZCHIP_READ>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d0f3      	beq.n	800220a <socket+0x1ee>
   return (int8_t)sn;
 8002222:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8002226:	4618      	mov	r0, r3
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	bd90      	pop	{r4, r7, pc}
 800222e:	bf00      	nop
 8002230:	20000000 	.word	0x20000000
 8002234:	200005dc 	.word	0x200005dc
 8002238:	200005de 	.word	0x200005de
 800223c:	200005e0 	.word	0x200005e0
 8002240:	200005f0 	.word	0x200005f0

08002244 <close>:

int8_t close(uint8_t sn)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 800224e:	79fb      	ldrb	r3, [r7, #7]
 8002250:	2b08      	cmp	r3, #8
 8002252:	d902      	bls.n	800225a <close+0x16>
 8002254:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002258:	e055      	b.n	8002306 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 800225a:	79fb      	ldrb	r3, [r7, #7]
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	3301      	adds	r3, #1
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002266:	2110      	movs	r1, #16
 8002268:	4618      	mov	r0, r3
 800226a:	f000 fef9 	bl	8003060 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 800226e:	bf00      	nop
 8002270:	79fb      	ldrb	r3, [r7, #7]
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	3301      	adds	r3, #1
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800227c:	4618      	mov	r0, r3
 800227e:	f000 fea3 	bl	8002fc8 <WIZCHIP_READ>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1f3      	bne.n	8002270 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	3301      	adds	r3, #1
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002294:	211f      	movs	r1, #31
 8002296:	4618      	mov	r0, r3
 8002298:	f000 fee2 	bl	8003060 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 800229c:	79fb      	ldrb	r3, [r7, #7]
 800229e:	2201      	movs	r2, #1
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	b21b      	sxth	r3, r3
 80022a6:	43db      	mvns	r3, r3
 80022a8:	b21a      	sxth	r2, r3
 80022aa:	4b19      	ldr	r3, [pc, #100]	@ (8002310 <close+0xcc>)
 80022ac:	881b      	ldrh	r3, [r3, #0]
 80022ae:	b21b      	sxth	r3, r3
 80022b0:	4013      	ands	r3, r2
 80022b2:	b21b      	sxth	r3, r3
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	4b16      	ldr	r3, [pc, #88]	@ (8002310 <close+0xcc>)
 80022b8:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 80022ba:	79fb      	ldrb	r3, [r7, #7]
 80022bc:	2201      	movs	r2, #1
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	b21b      	sxth	r3, r3
 80022c4:	43db      	mvns	r3, r3
 80022c6:	b21a      	sxth	r2, r3
 80022c8:	4b12      	ldr	r3, [pc, #72]	@ (8002314 <close+0xd0>)
 80022ca:	881b      	ldrh	r3, [r3, #0]
 80022cc:	b21b      	sxth	r3, r3
 80022ce:	4013      	ands	r3, r2
 80022d0:	b21b      	sxth	r3, r3
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002314 <close+0xd0>)
 80022d6:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 80022d8:	79fb      	ldrb	r3, [r7, #7]
 80022da:	4a0f      	ldr	r2, [pc, #60]	@ (8002318 <close+0xd4>)
 80022dc:	2100      	movs	r1, #0
 80022de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	4a0d      	ldr	r2, [pc, #52]	@ (800231c <close+0xd8>)
 80022e6:	2100      	movs	r1, #0
 80022e8:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 80022ea:	bf00      	nop
 80022ec:	79fb      	ldrb	r3, [r7, #7]
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	3301      	adds	r3, #1
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80022f8:	4618      	mov	r0, r3
 80022fa:	f000 fe65 	bl	8002fc8 <WIZCHIP_READ>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1f3      	bne.n	80022ec <close+0xa8>
	return SOCK_OK;
 8002304:	2301      	movs	r3, #1
}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	200005dc 	.word	0x200005dc
 8002314:	200005de 	.word	0x200005de
 8002318:	200005e0 	.word	0x200005e0
 800231c:	200005f0 	.word	0x200005f0

08002320 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	6039      	str	r1, [r7, #0]
 800232a:	71fb      	strb	r3, [r7, #7]
 800232c:	4613      	mov	r3, r2
 800232e:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8002330:	79fb      	ldrb	r3, [r7, #7]
 8002332:	2b08      	cmp	r3, #8
 8002334:	d902      	bls.n	800233c <connect+0x1c>
 8002336:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800233a:	e0c6      	b.n	80024ca <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800233c:	79fb      	ldrb	r3, [r7, #7]
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	3301      	adds	r3, #1
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	4618      	mov	r0, r3
 8002346:	f000 fe3f 	bl	8002fc8 <WIZCHIP_READ>
 800234a:	4603      	mov	r3, r0
 800234c:	f003 030f 	and.w	r3, r3, #15
 8002350:	2b01      	cmp	r3, #1
 8002352:	d002      	beq.n	800235a <connect+0x3a>
 8002354:	f06f 0304 	mvn.w	r3, #4
 8002358:	e0b7      	b.n	80024ca <connect+0x1aa>
   CHECK_SOCKINIT();
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	3301      	adds	r3, #1
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002366:	4618      	mov	r0, r3
 8002368:	f000 fe2e 	bl	8002fc8 <WIZCHIP_READ>
 800236c:	4603      	mov	r3, r0
 800236e:	2b13      	cmp	r3, #19
 8002370:	d002      	beq.n	8002378 <connect+0x58>
 8002372:	f06f 0302 	mvn.w	r3, #2
 8002376:	e0a8      	b.n	80024ca <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	021b      	lsls	r3, r3, #8
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	3201      	adds	r2, #1
 8002386:	7812      	ldrb	r2, [r2, #0]
 8002388:	4413      	add	r3, r2
 800238a:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	021b      	lsls	r3, r3, #8
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	3202      	adds	r2, #2
 8002394:	7812      	ldrb	r2, [r2, #0]
 8002396:	4413      	add	r3, r2
 8002398:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	021b      	lsls	r3, r3, #8
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	3203      	adds	r2, #3
 80023a2:	7812      	ldrb	r2, [r2, #0]
 80023a4:	4413      	add	r3, r2
 80023a6:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80023ae:	d002      	beq.n	80023b6 <connect+0x96>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d102      	bne.n	80023bc <connect+0x9c>
 80023b6:	f06f 030b 	mvn.w	r3, #11
 80023ba:	e086      	b.n	80024ca <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 80023bc:	88bb      	ldrh	r3, [r7, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d102      	bne.n	80023c8 <connect+0xa8>
 80023c2:	f06f 030a 	mvn.w	r3, #10
 80023c6:	e080      	b.n	80024ca <connect+0x1aa>
	setSn_DIPR(sn,addr);
 80023c8:	79fb      	ldrb	r3, [r7, #7]
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	3301      	adds	r3, #1
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 80023d4:	2204      	movs	r2, #4
 80023d6:	6839      	ldr	r1, [r7, #0]
 80023d8:	4618      	mov	r0, r3
 80023da:	f000 feef 	bl	80031bc <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 80023de:	79fb      	ldrb	r3, [r7, #7]
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	3301      	adds	r3, #1
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023ea:	461a      	mov	r2, r3
 80023ec:	88bb      	ldrh	r3, [r7, #4]
 80023ee:	0a1b      	lsrs	r3, r3, #8
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	4619      	mov	r1, r3
 80023f6:	4610      	mov	r0, r2
 80023f8:	f000 fe32 	bl	8003060 <WIZCHIP_WRITE>
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	3301      	adds	r3, #1
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 8002408:	461a      	mov	r2, r3
 800240a:	88bb      	ldrh	r3, [r7, #4]
 800240c:	b2db      	uxtb	r3, r3
 800240e:	4619      	mov	r1, r3
 8002410:	4610      	mov	r0, r2
 8002412:	f000 fe25 	bl	8003060 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	3301      	adds	r3, #1
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002422:	2104      	movs	r1, #4
 8002424:	4618      	mov	r0, r3
 8002426:	f000 fe1b 	bl	8003060 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800242a:	bf00      	nop
 800242c:	79fb      	ldrb	r3, [r7, #7]
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	3301      	adds	r3, #1
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002438:	4618      	mov	r0, r3
 800243a:	f000 fdc5 	bl	8002fc8 <WIZCHIP_READ>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d1f3      	bne.n	800242c <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8002444:	4b23      	ldr	r3, [pc, #140]	@ (80024d4 <connect+0x1b4>)
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	461a      	mov	r2, r3
 800244a:	79fb      	ldrb	r3, [r7, #7]
 800244c:	fa42 f303 	asr.w	r3, r2, r3
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	2b00      	cmp	r3, #0
 8002456:	d02b      	beq.n	80024b0 <connect+0x190>
 8002458:	2300      	movs	r3, #0
 800245a:	e036      	b.n	80024ca <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 800245c:	79fb      	ldrb	r3, [r7, #7]
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	3301      	adds	r3, #1
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002468:	4618      	mov	r0, r3
 800246a:	f000 fdad 	bl	8002fc8 <WIZCHIP_READ>
 800246e:	4603      	mov	r3, r0
 8002470:	f003 0308 	and.w	r3, r3, #8
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00c      	beq.n	8002492 <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8002478:	79fb      	ldrb	r3, [r7, #7]
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	3301      	adds	r3, #1
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002484:	2108      	movs	r1, #8
 8002486:	4618      	mov	r0, r3
 8002488:	f000 fdea 	bl	8003060 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 800248c:	f06f 030c 	mvn.w	r3, #12
 8002490:	e01b      	b.n	80024ca <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 8002492:	79fb      	ldrb	r3, [r7, #7]
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	3301      	adds	r3, #1
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800249e:	4618      	mov	r0, r3
 80024a0:	f000 fd92 	bl	8002fc8 <WIZCHIP_READ>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d102      	bne.n	80024b0 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 80024aa:	f06f 0303 	mvn.w	r3, #3
 80024ae:	e00c      	b.n	80024ca <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 80024b0:	79fb      	ldrb	r3, [r7, #7]
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	3301      	adds	r3, #1
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80024bc:	4618      	mov	r0, r3
 80024be:	f000 fd83 	bl	8002fc8 <WIZCHIP_READ>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b17      	cmp	r3, #23
 80024c6:	d1c9      	bne.n	800245c <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 80024c8:	2301      	movs	r3, #1
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	200005dc 	.word	0x200005dc

080024d8 <disconnect>:

int8_t disconnect(uint8_t sn)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 80024e2:	79fb      	ldrb	r3, [r7, #7]
 80024e4:	2b08      	cmp	r3, #8
 80024e6:	d902      	bls.n	80024ee <disconnect+0x16>
 80024e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80024ec:	e062      	b.n	80025b4 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80024ee:	79fb      	ldrb	r3, [r7, #7]
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	3301      	adds	r3, #1
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 fd66 	bl	8002fc8 <WIZCHIP_READ>
 80024fc:	4603      	mov	r3, r0
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	2b01      	cmp	r3, #1
 8002504:	d002      	beq.n	800250c <disconnect+0x34>
 8002506:	f06f 0304 	mvn.w	r3, #4
 800250a:	e053      	b.n	80025b4 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 800250c:	79fb      	ldrb	r3, [r7, #7]
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	3301      	adds	r3, #1
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002518:	2108      	movs	r1, #8
 800251a:	4618      	mov	r0, r3
 800251c:	f000 fda0 	bl	8003060 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8002520:	bf00      	nop
 8002522:	79fb      	ldrb	r3, [r7, #7]
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	3301      	adds	r3, #1
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800252e:	4618      	mov	r0, r3
 8002530:	f000 fd4a 	bl	8002fc8 <WIZCHIP_READ>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1f3      	bne.n	8002522 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 800253a:	79fb      	ldrb	r3, [r7, #7]
 800253c:	2201      	movs	r2, #1
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	b21b      	sxth	r3, r3
 8002544:	43db      	mvns	r3, r3
 8002546:	b21a      	sxth	r2, r3
 8002548:	4b1c      	ldr	r3, [pc, #112]	@ (80025bc <disconnect+0xe4>)
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	b21b      	sxth	r3, r3
 800254e:	4013      	ands	r3, r2
 8002550:	b21b      	sxth	r3, r3
 8002552:	b29a      	uxth	r2, r3
 8002554:	4b19      	ldr	r3, [pc, #100]	@ (80025bc <disconnect+0xe4>)
 8002556:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8002558:	4b19      	ldr	r3, [pc, #100]	@ (80025c0 <disconnect+0xe8>)
 800255a:	881b      	ldrh	r3, [r3, #0]
 800255c:	461a      	mov	r2, r3
 800255e:	79fb      	ldrb	r3, [r7, #7]
 8002560:	fa42 f303 	asr.w	r3, r2, r3
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	2b00      	cmp	r3, #0
 800256a:	d016      	beq.n	800259a <disconnect+0xc2>
 800256c:	2300      	movs	r3, #0
 800256e:	e021      	b.n	80025b4 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8002570:	79fb      	ldrb	r3, [r7, #7]
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	3301      	adds	r3, #1
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800257c:	4618      	mov	r0, r3
 800257e:	f000 fd23 	bl	8002fc8 <WIZCHIP_READ>
 8002582:	4603      	mov	r3, r0
 8002584:	f003 0308 	and.w	r3, r3, #8
 8002588:	2b00      	cmp	r3, #0
 800258a:	d006      	beq.n	800259a <disconnect+0xc2>
	   {
	      close(sn);
 800258c:	79fb      	ldrb	r3, [r7, #7]
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff fe58 	bl	8002244 <close>
	      return SOCKERR_TIMEOUT;
 8002594:	f06f 030c 	mvn.w	r3, #12
 8002598:	e00c      	b.n	80025b4 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 800259a:	79fb      	ldrb	r3, [r7, #7]
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	3301      	adds	r3, #1
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 fd0e 	bl	8002fc8 <WIZCHIP_READ>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1de      	bne.n	8002570 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 80025b2:	2301      	movs	r3, #1
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	200005de 	.word	0x200005de
 80025c0:	200005dc 	.word	0x200005dc

080025c4 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	4603      	mov	r3, r0
 80025cc:	6039      	str	r1, [r7, #0]
 80025ce:	71fb      	strb	r3, [r7, #7]
 80025d0:	4613      	mov	r3, r2
 80025d2:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 80025d4:	2300      	movs	r3, #0
 80025d6:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 80025d8:	2300      	movs	r3, #0
 80025da:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 80025dc:	79fb      	ldrb	r3, [r7, #7]
 80025de:	2b08      	cmp	r3, #8
 80025e0:	d902      	bls.n	80025e8 <send+0x24>
 80025e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80025e6:	e0dd      	b.n	80027a4 <send+0x1e0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80025e8:	79fb      	ldrb	r3, [r7, #7]
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	3301      	adds	r3, #1
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	4618      	mov	r0, r3
 80025f2:	f000 fce9 	bl	8002fc8 <WIZCHIP_READ>
 80025f6:	4603      	mov	r3, r0
 80025f8:	f003 030f 	and.w	r3, r3, #15
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d002      	beq.n	8002606 <send+0x42>
 8002600:	f06f 0304 	mvn.w	r3, #4
 8002604:	e0ce      	b.n	80027a4 <send+0x1e0>
   CHECK_SOCKDATA();
 8002606:	88bb      	ldrh	r3, [r7, #4]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d102      	bne.n	8002612 <send+0x4e>
 800260c:	f06f 030d 	mvn.w	r3, #13
 8002610:	e0c8      	b.n	80027a4 <send+0x1e0>
   tmp = getSn_SR(sn);
 8002612:	79fb      	ldrb	r3, [r7, #7]
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	3301      	adds	r3, #1
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800261e:	4618      	mov	r0, r3
 8002620:	f000 fcd2 	bl	8002fc8 <WIZCHIP_READ>
 8002624:	4603      	mov	r3, r0
 8002626:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8002628:	7bfb      	ldrb	r3, [r7, #15]
 800262a:	2b17      	cmp	r3, #23
 800262c:	d005      	beq.n	800263a <send+0x76>
 800262e:	7bfb      	ldrb	r3, [r7, #15]
 8002630:	2b1c      	cmp	r3, #28
 8002632:	d002      	beq.n	800263a <send+0x76>
 8002634:	f06f 0306 	mvn.w	r3, #6
 8002638:	e0b4      	b.n	80027a4 <send+0x1e0>
   if( sock_is_sending & (1<<sn) )
 800263a:	4b5c      	ldr	r3, [pc, #368]	@ (80027ac <send+0x1e8>)
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	461a      	mov	r2, r3
 8002640:	79fb      	ldrb	r3, [r7, #7]
 8002642:	fa42 f303 	asr.w	r3, r2, r3
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b00      	cmp	r3, #0
 800264c:	d039      	beq.n	80026c2 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 800264e:	79fb      	ldrb	r3, [r7, #7]
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	3301      	adds	r3, #1
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800265a:	4618      	mov	r0, r3
 800265c:	f000 fcb4 	bl	8002fc8 <WIZCHIP_READ>
 8002660:	4603      	mov	r3, r0
 8002662:	f003 031f 	and.w	r3, r3, #31
 8002666:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8002668:	7bfb      	ldrb	r3, [r7, #15]
 800266a:	f003 0310 	and.w	r3, r3, #16
 800266e:	2b00      	cmp	r3, #0
 8002670:	d019      	beq.n	80026a6 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8002672:	79fb      	ldrb	r3, [r7, #7]
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	3301      	adds	r3, #1
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800267e:	2110      	movs	r1, #16
 8002680:	4618      	mov	r0, r3
 8002682:	f000 fced 	bl	8003060 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8002686:	79fb      	ldrb	r3, [r7, #7]
 8002688:	2201      	movs	r2, #1
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	b21b      	sxth	r3, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	b21a      	sxth	r2, r3
 8002694:	4b45      	ldr	r3, [pc, #276]	@ (80027ac <send+0x1e8>)
 8002696:	881b      	ldrh	r3, [r3, #0]
 8002698:	b21b      	sxth	r3, r3
 800269a:	4013      	ands	r3, r2
 800269c:	b21b      	sxth	r3, r3
 800269e:	b29a      	uxth	r2, r3
 80026a0:	4b42      	ldr	r3, [pc, #264]	@ (80027ac <send+0x1e8>)
 80026a2:	801a      	strh	r2, [r3, #0]
 80026a4:	e00d      	b.n	80026c2 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 80026a6:	7bfb      	ldrb	r3, [r7, #15]
 80026a8:	f003 0308 	and.w	r3, r3, #8
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d006      	beq.n	80026be <send+0xfa>
      {
         close(sn);
 80026b0:	79fb      	ldrb	r3, [r7, #7]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff fdc6 	bl	8002244 <close>
         return SOCKERR_TIMEOUT;
 80026b8:	f06f 030c 	mvn.w	r3, #12
 80026bc:	e072      	b.n	80027a4 <send+0x1e0>
      }
      else return SOCK_BUSY;
 80026be:	2300      	movs	r3, #0
 80026c0:	e070      	b.n	80027a4 <send+0x1e0>
   }
   freesize = getSn_TxMAX(sn);
 80026c2:	79fb      	ldrb	r3, [r7, #7]
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	3301      	adds	r3, #1
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 fc7a 	bl	8002fc8 <WIZCHIP_READ>
 80026d4:	4603      	mov	r3, r0
 80026d6:	029b      	lsls	r3, r3, #10
 80026d8:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80026da:	88ba      	ldrh	r2, [r7, #4]
 80026dc:	89bb      	ldrh	r3, [r7, #12]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d901      	bls.n	80026e6 <send+0x122>
 80026e2:	89bb      	ldrh	r3, [r7, #12]
 80026e4:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80026e6:	79fb      	ldrb	r3, [r7, #7]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f000 fdc7 	bl	800327c <getSn_TX_FSR>
 80026ee:	4603      	mov	r3, r0
 80026f0:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 80026f2:	79fb      	ldrb	r3, [r7, #7]
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	3301      	adds	r3, #1
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80026fe:	4618      	mov	r0, r3
 8002700:	f000 fc62 	bl	8002fc8 <WIZCHIP_READ>
 8002704:	4603      	mov	r3, r0
 8002706:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8002708:	7bfb      	ldrb	r3, [r7, #15]
 800270a:	2b17      	cmp	r3, #23
 800270c:	d009      	beq.n	8002722 <send+0x15e>
 800270e:	7bfb      	ldrb	r3, [r7, #15]
 8002710:	2b1c      	cmp	r3, #28
 8002712:	d006      	beq.n	8002722 <send+0x15e>
      {
         close(sn);
 8002714:	79fb      	ldrb	r3, [r7, #7]
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff fd94 	bl	8002244 <close>
         return SOCKERR_SOCKSTATUS;
 800271c:	f06f 0306 	mvn.w	r3, #6
 8002720:	e040      	b.n	80027a4 <send+0x1e0>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8002722:	4b23      	ldr	r3, [pc, #140]	@ (80027b0 <send+0x1ec>)
 8002724:	881b      	ldrh	r3, [r3, #0]
 8002726:	461a      	mov	r2, r3
 8002728:	79fb      	ldrb	r3, [r7, #7]
 800272a:	fa42 f303 	asr.w	r3, r2, r3
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d005      	beq.n	8002742 <send+0x17e>
 8002736:	88ba      	ldrh	r2, [r7, #4]
 8002738:	89bb      	ldrh	r3, [r7, #12]
 800273a:	429a      	cmp	r2, r3
 800273c:	d901      	bls.n	8002742 <send+0x17e>
 800273e:	2300      	movs	r3, #0
 8002740:	e030      	b.n	80027a4 <send+0x1e0>
      if(len <= freesize) break;
 8002742:	88ba      	ldrh	r2, [r7, #4]
 8002744:	89bb      	ldrh	r3, [r7, #12]
 8002746:	429a      	cmp	r2, r3
 8002748:	d900      	bls.n	800274c <send+0x188>
      freesize = getSn_TX_FSR(sn);
 800274a:	e7cc      	b.n	80026e6 <send+0x122>
      if(len <= freesize) break;
 800274c:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 800274e:	88ba      	ldrh	r2, [r7, #4]
 8002750:	79fb      	ldrb	r3, [r7, #7]
 8002752:	6839      	ldr	r1, [r7, #0]
 8002754:	4618      	mov	r0, r3
 8002756:	f000 fe23 	bl	80033a0 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 800275a:	79fb      	ldrb	r3, [r7, #7]
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	3301      	adds	r3, #1
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002766:	2120      	movs	r1, #32
 8002768:	4618      	mov	r0, r3
 800276a:	f000 fc79 	bl	8003060 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 800276e:	bf00      	nop
 8002770:	79fb      	ldrb	r3, [r7, #7]
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	3301      	adds	r3, #1
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800277c:	4618      	mov	r0, r3
 800277e:	f000 fc23 	bl	8002fc8 <WIZCHIP_READ>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1f3      	bne.n	8002770 <send+0x1ac>
   sock_is_sending |= (1 << sn);
 8002788:	79fb      	ldrb	r3, [r7, #7]
 800278a:	2201      	movs	r2, #1
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	b21a      	sxth	r2, r3
 8002792:	4b06      	ldr	r3, [pc, #24]	@ (80027ac <send+0x1e8>)
 8002794:	881b      	ldrh	r3, [r3, #0]
 8002796:	b21b      	sxth	r3, r3
 8002798:	4313      	orrs	r3, r2
 800279a:	b21b      	sxth	r3, r3
 800279c:	b29a      	uxth	r2, r3
 800279e:	4b03      	ldr	r3, [pc, #12]	@ (80027ac <send+0x1e8>)
 80027a0:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80027a2:	88bb      	ldrh	r3, [r7, #4]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	200005de 	.word	0x200005de
 80027b0:	200005dc 	.word	0x200005dc

080027b4 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80027b4:	b590      	push	{r4, r7, lr}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4603      	mov	r3, r0
 80027bc:	6039      	str	r1, [r7, #0]
 80027be:	71fb      	strb	r3, [r7, #7]
 80027c0:	4613      	mov	r3, r2
 80027c2:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 80027c4:	2300      	movs	r3, #0
 80027c6:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 80027c8:	2300      	movs	r3, #0
 80027ca:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	2b08      	cmp	r3, #8
 80027d0:	d902      	bls.n	80027d8 <recv+0x24>
 80027d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80027d6:	e09b      	b.n	8002910 <recv+0x15c>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80027d8:	79fb      	ldrb	r3, [r7, #7]
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	3301      	adds	r3, #1
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	4618      	mov	r0, r3
 80027e2:	f000 fbf1 	bl	8002fc8 <WIZCHIP_READ>
 80027e6:	4603      	mov	r3, r0
 80027e8:	f003 030f 	and.w	r3, r3, #15
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d002      	beq.n	80027f6 <recv+0x42>
 80027f0:	f06f 0304 	mvn.w	r3, #4
 80027f4:	e08c      	b.n	8002910 <recv+0x15c>
   CHECK_SOCKDATA();
 80027f6:	88bb      	ldrh	r3, [r7, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d102      	bne.n	8002802 <recv+0x4e>
 80027fc:	f06f 030d 	mvn.w	r3, #13
 8002800:	e086      	b.n	8002910 <recv+0x15c>
   
   recvsize = getSn_RxMAX(sn);
 8002802:	79fb      	ldrb	r3, [r7, #7]
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	3301      	adds	r3, #1
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 800280e:	4618      	mov	r0, r3
 8002810:	f000 fbda 	bl	8002fc8 <WIZCHIP_READ>
 8002814:	4603      	mov	r3, r0
 8002816:	029b      	lsls	r3, r3, #10
 8002818:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 800281a:	89ba      	ldrh	r2, [r7, #12]
 800281c:	88bb      	ldrh	r3, [r7, #4]
 800281e:	429a      	cmp	r2, r3
 8002820:	d201      	bcs.n	8002826 <recv+0x72>
 8002822:	89bb      	ldrh	r3, [r7, #12]
 8002824:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8002826:	79fb      	ldrb	r3, [r7, #7]
 8002828:	4618      	mov	r0, r3
 800282a:	f000 fd70 	bl	800330e <getSn_RX_RSR>
 800282e:	4603      	mov	r3, r0
 8002830:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8002832:	79fb      	ldrb	r3, [r7, #7]
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	3301      	adds	r3, #1
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800283e:	4618      	mov	r0, r3
 8002840:	f000 fbc2 	bl	8002fc8 <WIZCHIP_READ>
 8002844:	4603      	mov	r3, r0
 8002846:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8002848:	7bfb      	ldrb	r3, [r7, #15]
 800284a:	2b17      	cmp	r3, #23
 800284c:	d026      	beq.n	800289c <recv+0xe8>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 800284e:	7bfb      	ldrb	r3, [r7, #15]
 8002850:	2b1c      	cmp	r3, #28
 8002852:	d11c      	bne.n	800288e <recv+0xda>
            {
               if(recvsize != 0) break;
 8002854:	89bb      	ldrh	r3, [r7, #12]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d133      	bne.n	80028c2 <recv+0x10e>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 800285a:	79fb      	ldrb	r3, [r7, #7]
 800285c:	4618      	mov	r0, r3
 800285e:	f000 fd0d 	bl	800327c <getSn_TX_FSR>
 8002862:	4603      	mov	r3, r0
 8002864:	461c      	mov	r4, r3
 8002866:	79fb      	ldrb	r3, [r7, #7]
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	3301      	adds	r3, #1
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8002872:	4618      	mov	r0, r3
 8002874:	f000 fba8 	bl	8002fc8 <WIZCHIP_READ>
 8002878:	4603      	mov	r3, r0
 800287a:	029b      	lsls	r3, r3, #10
 800287c:	429c      	cmp	r4, r3
 800287e:	d10d      	bne.n	800289c <recv+0xe8>
               {
                  close(sn);
 8002880:	79fb      	ldrb	r3, [r7, #7]
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff fcde 	bl	8002244 <close>
                  return SOCKERR_SOCKSTATUS;
 8002888:	f06f 0306 	mvn.w	r3, #6
 800288c:	e040      	b.n	8002910 <recv+0x15c>
               }
            }
            else
            {
               close(sn);
 800288e:	79fb      	ldrb	r3, [r7, #7]
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff fcd7 	bl	8002244 <close>
               return SOCKERR_SOCKSTATUS;
 8002896:	f06f 0306 	mvn.w	r3, #6
 800289a:	e039      	b.n	8002910 <recv+0x15c>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 800289c:	4b1e      	ldr	r3, [pc, #120]	@ (8002918 <recv+0x164>)
 800289e:	881b      	ldrh	r3, [r3, #0]
 80028a0:	461a      	mov	r2, r3
 80028a2:	79fb      	ldrb	r3, [r7, #7]
 80028a4:	fa42 f303 	asr.w	r3, r2, r3
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d004      	beq.n	80028ba <recv+0x106>
 80028b0:	89bb      	ldrh	r3, [r7, #12]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <recv+0x106>
 80028b6:	2300      	movs	r3, #0
 80028b8:	e02a      	b.n	8002910 <recv+0x15c>
         if(recvsize != 0) break;
 80028ba:	89bb      	ldrh	r3, [r7, #12]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d102      	bne.n	80028c6 <recv+0x112>
         recvsize = getSn_RX_RSR(sn);
 80028c0:	e7b1      	b.n	8002826 <recv+0x72>
               if(recvsize != 0) break;
 80028c2:	bf00      	nop
 80028c4:	e000      	b.n	80028c8 <recv+0x114>
         if(recvsize != 0) break;
 80028c6:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 80028c8:	89ba      	ldrh	r2, [r7, #12]
 80028ca:	88bb      	ldrh	r3, [r7, #4]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d201      	bcs.n	80028d4 <recv+0x120>
 80028d0:	89bb      	ldrh	r3, [r7, #12]
 80028d2:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 80028d4:	88ba      	ldrh	r2, [r7, #4]
 80028d6:	79fb      	ldrb	r3, [r7, #7]
 80028d8:	6839      	ldr	r1, [r7, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 fdba 	bl	8003454 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 80028e0:	79fb      	ldrb	r3, [r7, #7]
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	3301      	adds	r3, #1
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80028ec:	2140      	movs	r1, #64	@ 0x40
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 fbb6 	bl	8003060 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80028f4:	bf00      	nop
 80028f6:	79fb      	ldrb	r3, [r7, #7]
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	3301      	adds	r3, #1
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002902:	4618      	mov	r0, r3
 8002904:	f000 fb60 	bl	8002fc8 <WIZCHIP_READ>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1f3      	bne.n	80028f6 <recv+0x142>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800290e:	88bb      	ldrh	r3, [r7, #4]
}
 8002910:	4618      	mov	r0, r3
 8002912:	3714      	adds	r7, #20
 8002914:	46bd      	mov	sp, r7
 8002916:	bd90      	pop	{r4, r7, pc}
 8002918:	200005dc 	.word	0x200005dc

0800291c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002922:	4b0f      	ldr	r3, [pc, #60]	@ (8002960 <HAL_MspInit+0x44>)
 8002924:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002926:	4a0e      	ldr	r2, [pc, #56]	@ (8002960 <HAL_MspInit+0x44>)
 8002928:	f043 0301 	orr.w	r3, r3, #1
 800292c:	6613      	str	r3, [r2, #96]	@ 0x60
 800292e:	4b0c      	ldr	r3, [pc, #48]	@ (8002960 <HAL_MspInit+0x44>)
 8002930:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	607b      	str	r3, [r7, #4]
 8002938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800293a:	4b09      	ldr	r3, [pc, #36]	@ (8002960 <HAL_MspInit+0x44>)
 800293c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800293e:	4a08      	ldr	r2, [pc, #32]	@ (8002960 <HAL_MspInit+0x44>)
 8002940:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002944:	6593      	str	r3, [r2, #88]	@ 0x58
 8002946:	4b06      	ldr	r3, [pc, #24]	@ (8002960 <HAL_MspInit+0x44>)
 8002948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800294a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800294e:	603b      	str	r3, [r7, #0]
 8002950:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002952:	f002 fc19 	bl	8005188 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002956:	bf00      	nop
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40021000 	.word	0x40021000

08002964 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b09e      	sub	sp, #120	@ 0x78
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800296c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	605a      	str	r2, [r3, #4]
 8002976:	609a      	str	r2, [r3, #8]
 8002978:	60da      	str	r2, [r3, #12]
 800297a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800297c:	f107 0310 	add.w	r3, r7, #16
 8002980:	2254      	movs	r2, #84	@ 0x54
 8002982:	2100      	movs	r1, #0
 8002984:	4618      	mov	r0, r3
 8002986:	f006 f8bc 	bl	8008b02 <memset>
  if(hfdcan->Instance==FDCAN1)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a24      	ldr	r2, [pc, #144]	@ (8002a20 <HAL_FDCAN_MspInit+0xbc>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d141      	bne.n	8002a18 <HAL_FDCAN_MspInit+0xb4>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002994:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002998:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800299a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800299e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029a0:	f107 0310 	add.w	r3, r7, #16
 80029a4:	4618      	mov	r0, r3
 80029a6:	f003 f8f5 	bl	8005b94 <HAL_RCCEx_PeriphCLKConfig>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80029b0:	f7ff fb2e 	bl	8002010 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80029b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a24 <HAL_FDCAN_MspInit+0xc0>)
 80029b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b8:	4a1a      	ldr	r2, [pc, #104]	@ (8002a24 <HAL_FDCAN_MspInit+0xc0>)
 80029ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80029be:	6593      	str	r3, [r2, #88]	@ 0x58
 80029c0:	4b18      	ldr	r3, [pc, #96]	@ (8002a24 <HAL_FDCAN_MspInit+0xc0>)
 80029c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029cc:	4b15      	ldr	r3, [pc, #84]	@ (8002a24 <HAL_FDCAN_MspInit+0xc0>)
 80029ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029d0:	4a14      	ldr	r2, [pc, #80]	@ (8002a24 <HAL_FDCAN_MspInit+0xc0>)
 80029d2:	f043 0301 	orr.w	r3, r3, #1
 80029d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029d8:	4b12      	ldr	r3, [pc, #72]	@ (8002a24 <HAL_FDCAN_MspInit+0xc0>)
 80029da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	60bb      	str	r3, [r7, #8]
 80029e2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80029e4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80029e8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ea:	2302      	movs	r3, #2
 80029ec:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ee:	2300      	movs	r3, #0
 80029f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f2:	2303      	movs	r3, #3
 80029f4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80029f6:	2309      	movs	r3, #9
 80029f8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029fa:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80029fe:	4619      	mov	r1, r3
 8002a00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a04:	f002 f968 	bl	8004cd8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8002a08:	2200      	movs	r2, #0
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	2015      	movs	r0, #21
 8002a0e:	f001 f8ea 	bl	8003be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002a12:	2015      	movs	r0, #21
 8002a14:	f001 f901 	bl	8003c1a <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8002a18:	bf00      	nop
 8002a1a:	3778      	adds	r7, #120	@ 0x78
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40006400 	.word	0x40006400
 8002a24:	40021000 	.word	0x40021000

08002a28 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b08a      	sub	sp, #40	@ 0x28
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a30:	f107 0314 	add.w	r3, r7, #20
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	605a      	str	r2, [r3, #4]
 8002a3a:	609a      	str	r2, [r3, #8]
 8002a3c:	60da      	str	r2, [r3, #12]
 8002a3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a49      	ldr	r2, [pc, #292]	@ (8002b6c <HAL_SPI_MspInit+0x144>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	f040 808c 	bne.w	8002b64 <HAL_SPI_MspInit+0x13c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a4c:	4b48      	ldr	r3, [pc, #288]	@ (8002b70 <HAL_SPI_MspInit+0x148>)
 8002a4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a50:	4a47      	ldr	r2, [pc, #284]	@ (8002b70 <HAL_SPI_MspInit+0x148>)
 8002a52:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002a56:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a58:	4b45      	ldr	r3, [pc, #276]	@ (8002b70 <HAL_SPI_MspInit+0x148>)
 8002a5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a60:	613b      	str	r3, [r7, #16]
 8002a62:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a64:	4b42      	ldr	r3, [pc, #264]	@ (8002b70 <HAL_SPI_MspInit+0x148>)
 8002a66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a68:	4a41      	ldr	r2, [pc, #260]	@ (8002b70 <HAL_SPI_MspInit+0x148>)
 8002a6a:	f043 0301 	orr.w	r3, r3, #1
 8002a6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a70:	4b3f      	ldr	r3, [pc, #252]	@ (8002b70 <HAL_SPI_MspInit+0x148>)
 8002a72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	60fb      	str	r3, [r7, #12]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002a7c:	2320      	movs	r3, #32
 8002a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a80:	2302      	movs	r3, #2
 8002a82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a84:	2300      	movs	r3, #0
 8002a86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a8c:	2305      	movs	r3, #5
 8002a8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a90:	f107 0314 	add.w	r3, r7, #20
 8002a94:	4619      	mov	r1, r3
 8002a96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a9a:	f002 f91d 	bl	8004cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a9e:	23c0      	movs	r3, #192	@ 0xc0
 8002aa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002aae:	2305      	movs	r3, #5
 8002ab0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab2:	f107 0314 	add.w	r3, r7, #20
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002abc:	f002 f90c 	bl	8004cd8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel1;
 8002ac0:	4b2c      	ldr	r3, [pc, #176]	@ (8002b74 <HAL_SPI_MspInit+0x14c>)
 8002ac2:	4a2d      	ldr	r2, [pc, #180]	@ (8002b78 <HAL_SPI_MspInit+0x150>)
 8002ac4:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8002ac6:	4b2b      	ldr	r3, [pc, #172]	@ (8002b74 <HAL_SPI_MspInit+0x14c>)
 8002ac8:	220a      	movs	r2, #10
 8002aca:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002acc:	4b29      	ldr	r3, [pc, #164]	@ (8002b74 <HAL_SPI_MspInit+0x14c>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ad2:	4b28      	ldr	r3, [pc, #160]	@ (8002b74 <HAL_SPI_MspInit+0x14c>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ad8:	4b26      	ldr	r3, [pc, #152]	@ (8002b74 <HAL_SPI_MspInit+0x14c>)
 8002ada:	2280      	movs	r2, #128	@ 0x80
 8002adc:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ade:	4b25      	ldr	r3, [pc, #148]	@ (8002b74 <HAL_SPI_MspInit+0x14c>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ae4:	4b23      	ldr	r3, [pc, #140]	@ (8002b74 <HAL_SPI_MspInit+0x14c>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002aea:	4b22      	ldr	r3, [pc, #136]	@ (8002b74 <HAL_SPI_MspInit+0x14c>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002af0:	4b20      	ldr	r3, [pc, #128]	@ (8002b74 <HAL_SPI_MspInit+0x14c>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002af6:	481f      	ldr	r0, [pc, #124]	@ (8002b74 <HAL_SPI_MspInit+0x14c>)
 8002af8:	f001 f8aa 	bl	8003c50 <HAL_DMA_Init>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <HAL_SPI_MspInit+0xde>
    {
      Error_Handler();
 8002b02:	f7ff fa85 	bl	8002010 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a1a      	ldr	r2, [pc, #104]	@ (8002b74 <HAL_SPI_MspInit+0x14c>)
 8002b0a:	659a      	str	r2, [r3, #88]	@ 0x58
 8002b0c:	4a19      	ldr	r2, [pc, #100]	@ (8002b74 <HAL_SPI_MspInit+0x14c>)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel2;
 8002b12:	4b1a      	ldr	r3, [pc, #104]	@ (8002b7c <HAL_SPI_MspInit+0x154>)
 8002b14:	4a1a      	ldr	r2, [pc, #104]	@ (8002b80 <HAL_SPI_MspInit+0x158>)
 8002b16:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8002b18:	4b18      	ldr	r3, [pc, #96]	@ (8002b7c <HAL_SPI_MspInit+0x154>)
 8002b1a:	220b      	movs	r2, #11
 8002b1c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b1e:	4b17      	ldr	r3, [pc, #92]	@ (8002b7c <HAL_SPI_MspInit+0x154>)
 8002b20:	2210      	movs	r2, #16
 8002b22:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b24:	4b15      	ldr	r3, [pc, #84]	@ (8002b7c <HAL_SPI_MspInit+0x154>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b2a:	4b14      	ldr	r3, [pc, #80]	@ (8002b7c <HAL_SPI_MspInit+0x154>)
 8002b2c:	2280      	movs	r2, #128	@ 0x80
 8002b2e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b30:	4b12      	ldr	r3, [pc, #72]	@ (8002b7c <HAL_SPI_MspInit+0x154>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b36:	4b11      	ldr	r3, [pc, #68]	@ (8002b7c <HAL_SPI_MspInit+0x154>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8002b7c <HAL_SPI_MspInit+0x154>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b42:	4b0e      	ldr	r3, [pc, #56]	@ (8002b7c <HAL_SPI_MspInit+0x154>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002b48:	480c      	ldr	r0, [pc, #48]	@ (8002b7c <HAL_SPI_MspInit+0x154>)
 8002b4a:	f001 f881 	bl	8003c50 <HAL_DMA_Init>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <HAL_SPI_MspInit+0x130>
    {
      Error_Handler();
 8002b54:	f7ff fa5c 	bl	8002010 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a08      	ldr	r2, [pc, #32]	@ (8002b7c <HAL_SPI_MspInit+0x154>)
 8002b5c:	655a      	str	r2, [r3, #84]	@ 0x54
 8002b5e:	4a07      	ldr	r2, [pc, #28]	@ (8002b7c <HAL_SPI_MspInit+0x154>)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002b64:	bf00      	nop
 8002b66:	3728      	adds	r7, #40	@ 0x28
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40013000 	.word	0x40013000
 8002b70:	40021000 	.word	0x40021000
 8002b74:	2000049c 	.word	0x2000049c
 8002b78:	40020008 	.word	0x40020008
 8002b7c:	200004fc 	.word	0x200004fc
 8002b80:	4002001c 	.word	0x4002001c

08002b84 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a0a      	ldr	r2, [pc, #40]	@ (8002bbc <HAL_TIM_Base_MspInit+0x38>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d10b      	bne.n	8002bae <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b96:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc0 <HAL_TIM_Base_MspInit+0x3c>)
 8002b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b9a:	4a09      	ldr	r2, [pc, #36]	@ (8002bc0 <HAL_TIM_Base_MspInit+0x3c>)
 8002b9c:	f043 0302 	orr.w	r3, r3, #2
 8002ba0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ba2:	4b07      	ldr	r3, [pc, #28]	@ (8002bc0 <HAL_TIM_Base_MspInit+0x3c>)
 8002ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002bae:	bf00      	nop
 8002bb0:	3714      	adds	r7, #20
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	40000400 	.word	0x40000400
 8002bc0:	40021000 	.word	0x40021000

08002bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002bc8:	bf00      	nop
 8002bca:	e7fd      	b.n	8002bc8 <NMI_Handler+0x4>

08002bcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bd0:	bf00      	nop
 8002bd2:	e7fd      	b.n	8002bd0 <HardFault_Handler+0x4>

08002bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bd8:	bf00      	nop
 8002bda:	e7fd      	b.n	8002bd8 <MemManage_Handler+0x4>

08002bdc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002be0:	bf00      	nop
 8002be2:	e7fd      	b.n	8002be0 <BusFault_Handler+0x4>

08002be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002be8:	bf00      	nop
 8002bea:	e7fd      	b.n	8002be8 <UsageFault_Handler+0x4>

08002bec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bf0:	bf00      	nop
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bfe:	bf00      	nop
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c0c:	bf00      	nop
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c1a:	f000 feeb 	bl	80039f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c1e:	bf00      	nop
 8002c20:	bd80      	pop	{r7, pc}
	...

08002c24 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002c28:	4802      	ldr	r0, [pc, #8]	@ (8002c34 <DMA1_Channel1_IRQHandler+0x10>)
 8002c2a:	f001 f934 	bl	8003e96 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002c2e:	bf00      	nop
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	2000049c 	.word	0x2000049c

08002c38 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002c3c:	4802      	ldr	r0, [pc, #8]	@ (8002c48 <DMA1_Channel2_IRQHandler+0x10>)
 8002c3e:	f001 f92a 	bl	8003e96 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002c42:	bf00      	nop
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	200004fc 	.word	0x200004fc

08002c4c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002c50:	4802      	ldr	r0, [pc, #8]	@ (8002c5c <FDCAN1_IT0_IRQHandler+0x10>)
 8002c52:	f001 fe39 	bl	80048c8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002c56:	bf00      	nop
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	200003d4 	.word	0x200003d4

08002c60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  return 1;
 8002c64:	2301      	movs	r3, #1
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <_kill>:

int _kill(int pid, int sig)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c7a:	f005 ff95 	bl	8008ba8 <__errno>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2216      	movs	r2, #22
 8002c82:	601a      	str	r2, [r3, #0]
  return -1;
 8002c84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <_exit>:

void _exit (int status)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c98:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f7ff ffe7 	bl	8002c70 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ca2:	bf00      	nop
 8002ca4:	e7fd      	b.n	8002ca2 <_exit+0x12>

08002ca6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b086      	sub	sp, #24
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	60f8      	str	r0, [r7, #12]
 8002cae:	60b9      	str	r1, [r7, #8]
 8002cb0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	617b      	str	r3, [r7, #20]
 8002cb6:	e00a      	b.n	8002cce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002cb8:	f3af 8000 	nop.w
 8002cbc:	4601      	mov	r1, r0
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	1c5a      	adds	r2, r3, #1
 8002cc2:	60ba      	str	r2, [r7, #8]
 8002cc4:	b2ca      	uxtb	r2, r1
 8002cc6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	3301      	adds	r3, #1
 8002ccc:	617b      	str	r3, [r7, #20]
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	dbf0      	blt.n	8002cb8 <_read+0x12>
  }

  return len;
 8002cd6:	687b      	ldr	r3, [r7, #4]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3718      	adds	r7, #24
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cec:	2300      	movs	r3, #0
 8002cee:	617b      	str	r3, [r7, #20]
 8002cf0:	e009      	b.n	8002d06 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	1c5a      	adds	r2, r3, #1
 8002cf6:	60ba      	str	r2, [r7, #8]
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	3301      	adds	r3, #1
 8002d04:	617b      	str	r3, [r7, #20]
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	dbf1      	blt.n	8002cf2 <_write+0x12>
  }
  return len;
 8002d0e:	687b      	ldr	r3, [r7, #4]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3718      	adds	r7, #24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <_close>:

int _close(int file)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d20:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d40:	605a      	str	r2, [r3, #4]
  return 0;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <_isatty>:

int _isatty(int file)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d58:	2301      	movs	r3, #1
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b085      	sub	sp, #20
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	60f8      	str	r0, [r7, #12]
 8002d6e:	60b9      	str	r1, [r7, #8]
 8002d70:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3714      	adds	r7, #20
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d88:	4a14      	ldr	r2, [pc, #80]	@ (8002ddc <_sbrk+0x5c>)
 8002d8a:	4b15      	ldr	r3, [pc, #84]	@ (8002de0 <_sbrk+0x60>)
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d94:	4b13      	ldr	r3, [pc, #76]	@ (8002de4 <_sbrk+0x64>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d102      	bne.n	8002da2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d9c:	4b11      	ldr	r3, [pc, #68]	@ (8002de4 <_sbrk+0x64>)
 8002d9e:	4a12      	ldr	r2, [pc, #72]	@ (8002de8 <_sbrk+0x68>)
 8002da0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002da2:	4b10      	ldr	r3, [pc, #64]	@ (8002de4 <_sbrk+0x64>)
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4413      	add	r3, r2
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d207      	bcs.n	8002dc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002db0:	f005 fefa 	bl	8008ba8 <__errno>
 8002db4:	4603      	mov	r3, r0
 8002db6:	220c      	movs	r2, #12
 8002db8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002dbe:	e009      	b.n	8002dd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dc0:	4b08      	ldr	r3, [pc, #32]	@ (8002de4 <_sbrk+0x64>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dc6:	4b07      	ldr	r3, [pc, #28]	@ (8002de4 <_sbrk+0x64>)
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4413      	add	r3, r2
 8002dce:	4a05      	ldr	r2, [pc, #20]	@ (8002de4 <_sbrk+0x64>)
 8002dd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3718      	adds	r7, #24
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	20020000 	.word	0x20020000
 8002de0:	00000400 	.word	0x00000400
 8002de4:	200005f8 	.word	0x200005f8
 8002de8:	20000758 	.word	0x20000758

08002dec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002df0:	4b06      	ldr	r3, [pc, #24]	@ (8002e0c <SystemInit+0x20>)
 8002df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002df6:	4a05      	ldr	r2, [pc, #20]	@ (8002e0c <SystemInit+0x20>)
 8002df8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002dfc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e00:	bf00      	nop
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	e000ed00 	.word	0xe000ed00

08002e10 <W5500_Select>:
//    printf("Connected to server\n");
//
//
//}
void W5500_Select(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PIN_GPIO_Port,CS_PIN_Pin,GPIO_PIN_RESET);
 8002e14:	2200      	movs	r2, #0
 8002e16:	2140      	movs	r1, #64	@ 0x40
 8002e18:	4802      	ldr	r0, [pc, #8]	@ (8002e24 <W5500_Select+0x14>)
 8002e1a:	f002 f8df 	bl	8004fdc <HAL_GPIO_WritePin>
}
 8002e1e:	bf00      	nop
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	48000400 	.word	0x48000400

08002e28 <W5500_Unselect>:

void W5500_Unselect(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_SET);
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	2140      	movs	r1, #64	@ 0x40
 8002e30:	4802      	ldr	r0, [pc, #8]	@ (8002e3c <W5500_Unselect+0x14>)
 8002e32:	f002 f8d3 	bl	8004fdc <HAL_GPIO_WritePin>
}
 8002e36:	bf00      	nop
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	48000400 	.word	0x48000400

08002e40 <W5500_ReadByte>:

uint8_t W5500_ReadByte(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
    uint8_t byte;
    HAL_SPI_Receive(&hspi1, &byte, 1, HAL_MAX_DELAY);
 8002e46:	1df9      	adds	r1, r7, #7
 8002e48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	4804      	ldr	r0, [pc, #16]	@ (8002e60 <W5500_ReadByte+0x20>)
 8002e50:	f003 fb0f 	bl	8006472 <HAL_SPI_Receive>
    return byte;
 8002e54:	79fb      	ldrb	r3, [r7, #7]
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	20000438 	.word	0x20000438

08002e64 <W5500_WriteByte>:
void W5500_WriteByte(uint8_t byte)

{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi1, &byte, 1, HAL_MAX_DELAY);
 8002e6e:	1df9      	adds	r1, r7, #7
 8002e70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002e74:	2201      	movs	r2, #1
 8002e76:	4803      	ldr	r0, [pc, #12]	@ (8002e84 <W5500_WriteByte+0x20>)
 8002e78:	f003 f985 	bl	8006186 <HAL_SPI_Transmit>
}
 8002e7c:	bf00      	nop
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	20000438 	.word	0x20000438

08002e88 <W5500_ReadBuff>:

void W5500_ReadBuff(uint8_t* buff, uint16_t len)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	460b      	mov	r3, r1
 8002e92:	807b      	strh	r3, [r7, #2]
	 spiRxComplete = 0;
 8002e94:	4b0a      	ldr	r3, [pc, #40]	@ (8002ec0 <W5500_ReadBuff+0x38>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Receive_DMA(&hspi1, buff, len);
 8002e9a:	887b      	ldrh	r3, [r7, #2]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	4808      	ldr	r0, [pc, #32]	@ (8002ec4 <W5500_ReadBuff+0x3c>)
 8002ea2:	f003 ff2b 	bl	8006cfc <HAL_SPI_Receive_DMA>
    while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8002ea6:	bf00      	nop
 8002ea8:	4806      	ldr	r0, [pc, #24]	@ (8002ec4 <W5500_ReadBuff+0x3c>)
 8002eaa:	f004 f9ff 	bl	80072ac <HAL_SPI_GetState>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d1f9      	bne.n	8002ea8 <W5500_ReadBuff+0x20>

}
 8002eb4:	bf00      	nop
 8002eb6:	bf00      	nop
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	20000009 	.word	0x20000009
 8002ec4:	20000438 	.word	0x20000438

08002ec8 <W5500_WriteBuff>:
void W5500_WriteBuff(uint8_t* buff, uint16_t len)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	807b      	strh	r3, [r7, #2]
	 spiTxComplete = 0;
 8002ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8002f00 <W5500_WriteBuff+0x38>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit_DMA(&hspi1, buff, len);
 8002eda:	887b      	ldrh	r3, [r7, #2]
 8002edc:	461a      	mov	r2, r3
 8002ede:	6879      	ldr	r1, [r7, #4]
 8002ee0:	4808      	ldr	r0, [pc, #32]	@ (8002f04 <W5500_WriteBuff+0x3c>)
 8002ee2:	f003 fe1d 	bl	8006b20 <HAL_SPI_Transmit_DMA>
    while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8002ee6:	bf00      	nop
 8002ee8:	4806      	ldr	r0, [pc, #24]	@ (8002f04 <W5500_WriteBuff+0x3c>)
 8002eea:	f004 f9df 	bl	80072ac <HAL_SPI_GetState>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d1f9      	bne.n	8002ee8 <W5500_WriteBuff+0x20>

}
 8002ef4:	bf00      	nop
 8002ef6:	bf00      	nop
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	20000008 	.word	0x20000008
 8002f04:	20000438 	.word	0x20000438

08002f08 <HAL_SPI_TxCpltCallback>:
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
    if(hspi->Instance == SPI1)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a05      	ldr	r2, [pc, #20]	@ (8002f2c <HAL_SPI_TxCpltCallback+0x24>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d102      	bne.n	8002f20 <HAL_SPI_TxCpltCallback+0x18>
    {
    	 spiTxComplete = 1;
 8002f1a:	4b05      	ldr	r3, [pc, #20]	@ (8002f30 <HAL_SPI_TxCpltCallback+0x28>)
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	701a      	strb	r2, [r3, #0]
    }
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr
 8002f2c:	40013000 	.word	0x40013000
 8002f30:	20000008 	.word	0x20000008

08002f34 <HAL_SPI_RxCpltCallback>:
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
    if(hspi->Instance == SPI1)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a05      	ldr	r2, [pc, #20]	@ (8002f58 <HAL_SPI_RxCpltCallback+0x24>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d102      	bne.n	8002f4c <HAL_SPI_RxCpltCallback+0x18>
    {
    	 spiRxComplete = 1;
 8002f46:	4b05      	ldr	r3, [pc, #20]	@ (8002f5c <HAL_SPI_RxCpltCallback+0x28>)
 8002f48:	2201      	movs	r2, #1
 8002f4a:	701a      	strb	r2, [r3, #0]
    }
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	40013000 	.word	0x40013000
 8002f5c:	20000009 	.word	0x20000009

08002f60 <W5500_Init>:
void W5500_Init(){
 8002f60:	b590      	push	{r4, r7, lr}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0

    reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 8002f66:	4911      	ldr	r1, [pc, #68]	@ (8002fac <W5500_Init+0x4c>)
 8002f68:	4811      	ldr	r0, [pc, #68]	@ (8002fb0 <W5500_Init+0x50>)
 8002f6a:	f000 fb31 	bl	80035d0 <reg_wizchip_cs_cbfunc>
    reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 8002f6e:	4911      	ldr	r1, [pc, #68]	@ (8002fb4 <W5500_Init+0x54>)
 8002f70:	4811      	ldr	r0, [pc, #68]	@ (8002fb8 <W5500_Init+0x58>)
 8002f72:	f000 fb53 	bl	800361c <reg_wizchip_spi_cbfunc>
    reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 8002f76:	4911      	ldr	r1, [pc, #68]	@ (8002fbc <W5500_Init+0x5c>)
 8002f78:	4811      	ldr	r0, [pc, #68]	@ (8002fc0 <W5500_Init+0x60>)
 8002f7a:	f000 fb7b 	bl	8003674 <reg_wizchip_spiburst_cbfunc>

    uint8_t memsize[2][8] = {{2,2,2,2,2,2,2,2}, {2,2,2,2,2,2,2,2}};
 8002f7e:	4b11      	ldr	r3, [pc, #68]	@ (8002fc4 <W5500_Init+0x64>)
 8002f80:	463c      	mov	r4, r7
 8002f82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if(wizchip_init(memsize[0], memsize[1]) < 0)
 8002f88:	463b      	mov	r3, r7
 8002f8a:	f103 0208 	add.w	r2, r3, #8
 8002f8e:	463b      	mov	r3, r7
 8002f90:	4611      	mov	r1, r2
 8002f92:	4618      	mov	r0, r3
 8002f94:	f000 fbe6 	bl	8003764 <wizchip_init>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	da01      	bge.n	8002fa2 <W5500_Init+0x42>
    {
    	Error_Handler();
 8002f9e:	f7ff f837 	bl	8002010 <Error_Handler>
    }

}
 8002fa2:	bf00      	nop
 8002fa4:	3714      	adds	r7, #20
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd90      	pop	{r4, r7, pc}
 8002faa:	bf00      	nop
 8002fac:	08002e29 	.word	0x08002e29
 8002fb0:	08002e11 	.word	0x08002e11
 8002fb4:	08002e65 	.word	0x08002e65
 8002fb8:	08002e41 	.word	0x08002e41
 8002fbc:	08002ec9 	.word	0x08002ec9
 8002fc0:	08002e89 	.word	0x08002e89
 8002fc4:	0800a968 	.word	0x0800a968

08002fc8 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8002fd0:	4b22      	ldr	r3, [pc, #136]	@ (800305c <WIZCHIP_READ+0x94>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002fd6:	4b21      	ldr	r3, [pc, #132]	@ (800305c <WIZCHIP_READ+0x94>)
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002fdc:	4b1f      	ldr	r3, [pc, #124]	@ (800305c <WIZCHIP_READ+0x94>)
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d003      	beq.n	8002fec <WIZCHIP_READ+0x24>
 8002fe4:	4b1d      	ldr	r3, [pc, #116]	@ (800305c <WIZCHIP_READ+0x94>)
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d114      	bne.n	8003016 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002fec:	4b1b      	ldr	r3, [pc, #108]	@ (800305c <WIZCHIP_READ+0x94>)
 8002fee:	69db      	ldr	r3, [r3, #28]
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	0c12      	lsrs	r2, r2, #16
 8002ff4:	b2d2      	uxtb	r2, r2
 8002ff6:	4610      	mov	r0, r2
 8002ff8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002ffa:	4b18      	ldr	r3, [pc, #96]	@ (800305c <WIZCHIP_READ+0x94>)
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	0a12      	lsrs	r2, r2, #8
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	4610      	mov	r0, r2
 8003006:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003008:	4b14      	ldr	r3, [pc, #80]	@ (800305c <WIZCHIP_READ+0x94>)
 800300a:	69db      	ldr	r3, [r3, #28]
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	b2d2      	uxtb	r2, r2
 8003010:	4610      	mov	r0, r2
 8003012:	4798      	blx	r3
 8003014:	e011      	b.n	800303a <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	0c1b      	lsrs	r3, r3, #16
 800301a:	b2db      	uxtb	r3, r3
 800301c:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	0a1b      	lsrs	r3, r3, #8
 8003022:	b2db      	uxtb	r3, r3
 8003024:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	b2db      	uxtb	r3, r3
 800302a:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800302c:	4b0b      	ldr	r3, [pc, #44]	@ (800305c <WIZCHIP_READ+0x94>)
 800302e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003030:	f107 020c 	add.w	r2, r7, #12
 8003034:	2103      	movs	r1, #3
 8003036:	4610      	mov	r0, r2
 8003038:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 800303a:	4b08      	ldr	r3, [pc, #32]	@ (800305c <WIZCHIP_READ+0x94>)
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	4798      	blx	r3
 8003040:	4603      	mov	r3, r0
 8003042:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8003044:	4b05      	ldr	r3, [pc, #20]	@ (800305c <WIZCHIP_READ+0x94>)
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800304a:	4b04      	ldr	r3, [pc, #16]	@ (800305c <WIZCHIP_READ+0x94>)
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	4798      	blx	r3
   return ret;
 8003050:	7bfb      	ldrb	r3, [r7, #15]
}
 8003052:	4618      	mov	r0, r3
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	2000002c 	.word	0x2000002c

08003060 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	460b      	mov	r3, r1
 800306a:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 800306c:	4b22      	ldr	r3, [pc, #136]	@ (80030f8 <WIZCHIP_WRITE+0x98>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003072:	4b21      	ldr	r3, [pc, #132]	@ (80030f8 <WIZCHIP_WRITE+0x98>)
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f043 0304 	orr.w	r3, r3, #4
 800307e:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003080:	4b1d      	ldr	r3, [pc, #116]	@ (80030f8 <WIZCHIP_WRITE+0x98>)
 8003082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003084:	2b00      	cmp	r3, #0
 8003086:	d119      	bne.n	80030bc <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003088:	4b1b      	ldr	r3, [pc, #108]	@ (80030f8 <WIZCHIP_WRITE+0x98>)
 800308a:	69db      	ldr	r3, [r3, #28]
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	0c12      	lsrs	r2, r2, #16
 8003090:	b2d2      	uxtb	r2, r2
 8003092:	4610      	mov	r0, r2
 8003094:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003096:	4b18      	ldr	r3, [pc, #96]	@ (80030f8 <WIZCHIP_WRITE+0x98>)
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	0a12      	lsrs	r2, r2, #8
 800309e:	b2d2      	uxtb	r2, r2
 80030a0:	4610      	mov	r0, r2
 80030a2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80030a4:	4b14      	ldr	r3, [pc, #80]	@ (80030f8 <WIZCHIP_WRITE+0x98>)
 80030a6:	69db      	ldr	r3, [r3, #28]
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	b2d2      	uxtb	r2, r2
 80030ac:	4610      	mov	r0, r2
 80030ae:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 80030b0:	4b11      	ldr	r3, [pc, #68]	@ (80030f8 <WIZCHIP_WRITE+0x98>)
 80030b2:	69db      	ldr	r3, [r3, #28]
 80030b4:	78fa      	ldrb	r2, [r7, #3]
 80030b6:	4610      	mov	r0, r2
 80030b8:	4798      	blx	r3
 80030ba:	e013      	b.n	80030e4 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	0c1b      	lsrs	r3, r3, #16
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	0a1b      	lsrs	r3, r3, #8
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 80030d2:	78fb      	ldrb	r3, [r7, #3]
 80030d4:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 80030d6:	4b08      	ldr	r3, [pc, #32]	@ (80030f8 <WIZCHIP_WRITE+0x98>)
 80030d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030da:	f107 020c 	add.w	r2, r7, #12
 80030de:	2104      	movs	r1, #4
 80030e0:	4610      	mov	r0, r2
 80030e2:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80030e4:	4b04      	ldr	r3, [pc, #16]	@ (80030f8 <WIZCHIP_WRITE+0x98>)
 80030e6:	695b      	ldr	r3, [r3, #20]
 80030e8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80030ea:	4b03      	ldr	r3, [pc, #12]	@ (80030f8 <WIZCHIP_WRITE+0x98>)
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	4798      	blx	r3
}
 80030f0:	bf00      	nop
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	2000002c 	.word	0x2000002c

080030fc <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80030fc:	b590      	push	{r4, r7, lr}
 80030fe:	b087      	sub	sp, #28
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	4613      	mov	r3, r2
 8003108:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800310a:	4b2b      	ldr	r3, [pc, #172]	@ (80031b8 <WIZCHIP_READ_BUF+0xbc>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003110:	4b29      	ldr	r3, [pc, #164]	@ (80031b8 <WIZCHIP_READ_BUF+0xbc>)
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003116:	4b28      	ldr	r3, [pc, #160]	@ (80031b8 <WIZCHIP_READ_BUF+0xbc>)
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <WIZCHIP_READ_BUF+0x2a>
 800311e:	4b26      	ldr	r3, [pc, #152]	@ (80031b8 <WIZCHIP_READ_BUF+0xbc>)
 8003120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003122:	2b00      	cmp	r3, #0
 8003124:	d126      	bne.n	8003174 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003126:	4b24      	ldr	r3, [pc, #144]	@ (80031b8 <WIZCHIP_READ_BUF+0xbc>)
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	0c12      	lsrs	r2, r2, #16
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	4610      	mov	r0, r2
 8003132:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003134:	4b20      	ldr	r3, [pc, #128]	@ (80031b8 <WIZCHIP_READ_BUF+0xbc>)
 8003136:	69db      	ldr	r3, [r3, #28]
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	0a12      	lsrs	r2, r2, #8
 800313c:	b2d2      	uxtb	r2, r2
 800313e:	4610      	mov	r0, r2
 8003140:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003142:	4b1d      	ldr	r3, [pc, #116]	@ (80031b8 <WIZCHIP_READ_BUF+0xbc>)
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	b2d2      	uxtb	r2, r2
 800314a:	4610      	mov	r0, r2
 800314c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800314e:	2300      	movs	r3, #0
 8003150:	82fb      	strh	r3, [r7, #22]
 8003152:	e00a      	b.n	800316a <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8003154:	4b18      	ldr	r3, [pc, #96]	@ (80031b8 <WIZCHIP_READ_BUF+0xbc>)
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	8afa      	ldrh	r2, [r7, #22]
 800315a:	68b9      	ldr	r1, [r7, #8]
 800315c:	188c      	adds	r4, r1, r2
 800315e:	4798      	blx	r3
 8003160:	4603      	mov	r3, r0
 8003162:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8003164:	8afb      	ldrh	r3, [r7, #22]
 8003166:	3301      	adds	r3, #1
 8003168:	82fb      	strh	r3, [r7, #22]
 800316a:	8afa      	ldrh	r2, [r7, #22]
 800316c:	88fb      	ldrh	r3, [r7, #6]
 800316e:	429a      	cmp	r2, r3
 8003170:	d3f0      	bcc.n	8003154 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003172:	e017      	b.n	80031a4 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	0c1b      	lsrs	r3, r3, #16
 8003178:	b2db      	uxtb	r3, r3
 800317a:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	0a1b      	lsrs	r3, r3, #8
 8003180:	b2db      	uxtb	r3, r3
 8003182:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	b2db      	uxtb	r3, r3
 8003188:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800318a:	4b0b      	ldr	r3, [pc, #44]	@ (80031b8 <WIZCHIP_READ_BUF+0xbc>)
 800318c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800318e:	f107 0210 	add.w	r2, r7, #16
 8003192:	2103      	movs	r1, #3
 8003194:	4610      	mov	r0, r2
 8003196:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8003198:	4b07      	ldr	r3, [pc, #28]	@ (80031b8 <WIZCHIP_READ_BUF+0xbc>)
 800319a:	6a1b      	ldr	r3, [r3, #32]
 800319c:	88fa      	ldrh	r2, [r7, #6]
 800319e:	4611      	mov	r1, r2
 80031a0:	68b8      	ldr	r0, [r7, #8]
 80031a2:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80031a4:	4b04      	ldr	r3, [pc, #16]	@ (80031b8 <WIZCHIP_READ_BUF+0xbc>)
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80031aa:	4b03      	ldr	r3, [pc, #12]	@ (80031b8 <WIZCHIP_READ_BUF+0xbc>)
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	4798      	blx	r3
}
 80031b0:	bf00      	nop
 80031b2:	371c      	adds	r7, #28
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd90      	pop	{r4, r7, pc}
 80031b8:	2000002c 	.word	0x2000002c

080031bc <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	4613      	mov	r3, r2
 80031c8:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80031ca:	4b2b      	ldr	r3, [pc, #172]	@ (8003278 <WIZCHIP_WRITE_BUF+0xbc>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	4798      	blx	r3
   WIZCHIP.CS._select();
 80031d0:	4b29      	ldr	r3, [pc, #164]	@ (8003278 <WIZCHIP_WRITE_BUF+0xbc>)
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f043 0304 	orr.w	r3, r3, #4
 80031dc:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80031de:	4b26      	ldr	r3, [pc, #152]	@ (8003278 <WIZCHIP_WRITE_BUF+0xbc>)
 80031e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d126      	bne.n	8003234 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80031e6:	4b24      	ldr	r3, [pc, #144]	@ (8003278 <WIZCHIP_WRITE_BUF+0xbc>)
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	0c12      	lsrs	r2, r2, #16
 80031ee:	b2d2      	uxtb	r2, r2
 80031f0:	4610      	mov	r0, r2
 80031f2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80031f4:	4b20      	ldr	r3, [pc, #128]	@ (8003278 <WIZCHIP_WRITE_BUF+0xbc>)
 80031f6:	69db      	ldr	r3, [r3, #28]
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	0a12      	lsrs	r2, r2, #8
 80031fc:	b2d2      	uxtb	r2, r2
 80031fe:	4610      	mov	r0, r2
 8003200:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003202:	4b1d      	ldr	r3, [pc, #116]	@ (8003278 <WIZCHIP_WRITE_BUF+0xbc>)
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	b2d2      	uxtb	r2, r2
 800320a:	4610      	mov	r0, r2
 800320c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800320e:	2300      	movs	r3, #0
 8003210:	82fb      	strh	r3, [r7, #22]
 8003212:	e00a      	b.n	800322a <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8003214:	4b18      	ldr	r3, [pc, #96]	@ (8003278 <WIZCHIP_WRITE_BUF+0xbc>)
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	8afa      	ldrh	r2, [r7, #22]
 800321a:	68b9      	ldr	r1, [r7, #8]
 800321c:	440a      	add	r2, r1
 800321e:	7812      	ldrb	r2, [r2, #0]
 8003220:	4610      	mov	r0, r2
 8003222:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8003224:	8afb      	ldrh	r3, [r7, #22]
 8003226:	3301      	adds	r3, #1
 8003228:	82fb      	strh	r3, [r7, #22]
 800322a:	8afa      	ldrh	r2, [r7, #22]
 800322c:	88fb      	ldrh	r3, [r7, #6]
 800322e:	429a      	cmp	r2, r3
 8003230:	d3f0      	bcc.n	8003214 <WIZCHIP_WRITE_BUF+0x58>
 8003232:	e017      	b.n	8003264 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	0c1b      	lsrs	r3, r3, #16
 8003238:	b2db      	uxtb	r3, r3
 800323a:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	0a1b      	lsrs	r3, r3, #8
 8003240:	b2db      	uxtb	r3, r3
 8003242:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	b2db      	uxtb	r3, r3
 8003248:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800324a:	4b0b      	ldr	r3, [pc, #44]	@ (8003278 <WIZCHIP_WRITE_BUF+0xbc>)
 800324c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324e:	f107 0210 	add.w	r2, r7, #16
 8003252:	2103      	movs	r1, #3
 8003254:	4610      	mov	r0, r2
 8003256:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8003258:	4b07      	ldr	r3, [pc, #28]	@ (8003278 <WIZCHIP_WRITE_BUF+0xbc>)
 800325a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325c:	88fa      	ldrh	r2, [r7, #6]
 800325e:	4611      	mov	r1, r2
 8003260:	68b8      	ldr	r0, [r7, #8]
 8003262:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8003264:	4b04      	ldr	r3, [pc, #16]	@ (8003278 <WIZCHIP_WRITE_BUF+0xbc>)
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800326a:	4b03      	ldr	r3, [pc, #12]	@ (8003278 <WIZCHIP_WRITE_BUF+0xbc>)
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	4798      	blx	r3
}
 8003270:	bf00      	nop
 8003272:	3718      	adds	r7, #24
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	2000002c 	.word	0x2000002c

0800327c <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 800327c:	b590      	push	{r4, r7, lr}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	4603      	mov	r3, r0
 8003284:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8003286:	2300      	movs	r3, #0
 8003288:	81fb      	strh	r3, [r7, #14]
 800328a:	2300      	movs	r3, #0
 800328c:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 800328e:	79fb      	ldrb	r3, [r7, #7]
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	3301      	adds	r3, #1
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff fe94 	bl	8002fc8 <WIZCHIP_READ>
 80032a0:	4603      	mov	r3, r0
 80032a2:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80032a4:	89bb      	ldrh	r3, [r7, #12]
 80032a6:	021b      	lsls	r3, r3, #8
 80032a8:	b29c      	uxth	r4, r3
 80032aa:	79fb      	ldrb	r3, [r7, #7]
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	3301      	adds	r3, #1
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff fe86 	bl	8002fc8 <WIZCHIP_READ>
 80032bc:	4603      	mov	r3, r0
 80032be:	4423      	add	r3, r4
 80032c0:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80032c2:	89bb      	ldrh	r3, [r7, #12]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d019      	beq.n	80032fc <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 80032c8:	79fb      	ldrb	r3, [r7, #7]
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	3301      	adds	r3, #1
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff fe77 	bl	8002fc8 <WIZCHIP_READ>
 80032da:	4603      	mov	r3, r0
 80032dc:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80032de:	89fb      	ldrh	r3, [r7, #14]
 80032e0:	021b      	lsls	r3, r3, #8
 80032e2:	b29c      	uxth	r4, r3
 80032e4:	79fb      	ldrb	r3, [r7, #7]
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	3301      	adds	r3, #1
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff fe69 	bl	8002fc8 <WIZCHIP_READ>
 80032f6:	4603      	mov	r3, r0
 80032f8:	4423      	add	r3, r4
 80032fa:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80032fc:	89fa      	ldrh	r2, [r7, #14]
 80032fe:	89bb      	ldrh	r3, [r7, #12]
 8003300:	429a      	cmp	r2, r3
 8003302:	d1c4      	bne.n	800328e <getSn_TX_FSR+0x12>
   return val;
 8003304:	89fb      	ldrh	r3, [r7, #14]
}
 8003306:	4618      	mov	r0, r3
 8003308:	3714      	adds	r7, #20
 800330a:	46bd      	mov	sp, r7
 800330c:	bd90      	pop	{r4, r7, pc}

0800330e <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 800330e:	b590      	push	{r4, r7, lr}
 8003310:	b085      	sub	sp, #20
 8003312:	af00      	add	r7, sp, #0
 8003314:	4603      	mov	r3, r0
 8003316:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8003318:	2300      	movs	r3, #0
 800331a:	81fb      	strh	r3, [r7, #14]
 800331c:	2300      	movs	r3, #0
 800331e:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8003320:	79fb      	ldrb	r3, [r7, #7]
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	3301      	adds	r3, #1
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 800332c:	4618      	mov	r0, r3
 800332e:	f7ff fe4b 	bl	8002fc8 <WIZCHIP_READ>
 8003332:	4603      	mov	r3, r0
 8003334:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8003336:	89bb      	ldrh	r3, [r7, #12]
 8003338:	021b      	lsls	r3, r3, #8
 800333a:	b29c      	uxth	r4, r3
 800333c:	79fb      	ldrb	r3, [r7, #7]
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	3301      	adds	r3, #1
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff fe3d 	bl	8002fc8 <WIZCHIP_READ>
 800334e:	4603      	mov	r3, r0
 8003350:	4423      	add	r3, r4
 8003352:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8003354:	89bb      	ldrh	r3, [r7, #12]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d019      	beq.n	800338e <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 800335a:	79fb      	ldrb	r3, [r7, #7]
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	3301      	adds	r3, #1
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8003366:	4618      	mov	r0, r3
 8003368:	f7ff fe2e 	bl	8002fc8 <WIZCHIP_READ>
 800336c:	4603      	mov	r3, r0
 800336e:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8003370:	89fb      	ldrh	r3, [r7, #14]
 8003372:	021b      	lsls	r3, r3, #8
 8003374:	b29c      	uxth	r4, r3
 8003376:	79fb      	ldrb	r3, [r7, #7]
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	3301      	adds	r3, #1
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8003382:	4618      	mov	r0, r3
 8003384:	f7ff fe20 	bl	8002fc8 <WIZCHIP_READ>
 8003388:	4603      	mov	r3, r0
 800338a:	4423      	add	r3, r4
 800338c:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800338e:	89fa      	ldrh	r2, [r7, #14]
 8003390:	89bb      	ldrh	r3, [r7, #12]
 8003392:	429a      	cmp	r2, r3
 8003394:	d1c4      	bne.n	8003320 <getSn_RX_RSR+0x12>
   return val;
 8003396:	89fb      	ldrh	r3, [r7, #14]
}
 8003398:	4618      	mov	r0, r3
 800339a:	3714      	adds	r7, #20
 800339c:	46bd      	mov	sp, r7
 800339e:	bd90      	pop	{r4, r7, pc}

080033a0 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80033a0:	b590      	push	{r4, r7, lr}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	4603      	mov	r3, r0
 80033a8:	6039      	str	r1, [r7, #0]
 80033aa:	71fb      	strb	r3, [r7, #7]
 80033ac:	4613      	mov	r3, r2
 80033ae:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80033b0:	2300      	movs	r3, #0
 80033b2:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80033b4:	2300      	movs	r3, #0
 80033b6:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 80033b8:	88bb      	ldrh	r3, [r7, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d046      	beq.n	800344c <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 80033be:	79fb      	ldrb	r3, [r7, #7]
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	3301      	adds	r3, #1
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7ff fdfc 	bl	8002fc8 <WIZCHIP_READ>
 80033d0:	4603      	mov	r3, r0
 80033d2:	021b      	lsls	r3, r3, #8
 80033d4:	b29c      	uxth	r4, r3
 80033d6:	79fb      	ldrb	r3, [r7, #7]
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	3301      	adds	r3, #1
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7ff fdf0 	bl	8002fc8 <WIZCHIP_READ>
 80033e8:	4603      	mov	r3, r0
 80033ea:	4423      	add	r3, r4
 80033ec:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 80033ee:	89fb      	ldrh	r3, [r7, #14]
 80033f0:	021a      	lsls	r2, r3, #8
 80033f2:	79fb      	ldrb	r3, [r7, #7]
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	3302      	adds	r3, #2
 80033f8:	00db      	lsls	r3, r3, #3
 80033fa:	4413      	add	r3, r2
 80033fc:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80033fe:	88bb      	ldrh	r3, [r7, #4]
 8003400:	461a      	mov	r2, r3
 8003402:	6839      	ldr	r1, [r7, #0]
 8003404:	68b8      	ldr	r0, [r7, #8]
 8003406:	f7ff fed9 	bl	80031bc <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 800340a:	89fa      	ldrh	r2, [r7, #14]
 800340c:	88bb      	ldrh	r3, [r7, #4]
 800340e:	4413      	add	r3, r2
 8003410:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8003412:	79fb      	ldrb	r3, [r7, #7]
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	3301      	adds	r3, #1
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 800341e:	461a      	mov	r2, r3
 8003420:	89fb      	ldrh	r3, [r7, #14]
 8003422:	0a1b      	lsrs	r3, r3, #8
 8003424:	b29b      	uxth	r3, r3
 8003426:	b2db      	uxtb	r3, r3
 8003428:	4619      	mov	r1, r3
 800342a:	4610      	mov	r0, r2
 800342c:	f7ff fe18 	bl	8003060 <WIZCHIP_WRITE>
 8003430:	79fb      	ldrb	r3, [r7, #7]
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	3301      	adds	r3, #1
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 800343c:	461a      	mov	r2, r3
 800343e:	89fb      	ldrh	r3, [r7, #14]
 8003440:	b2db      	uxtb	r3, r3
 8003442:	4619      	mov	r1, r3
 8003444:	4610      	mov	r0, r2
 8003446:	f7ff fe0b 	bl	8003060 <WIZCHIP_WRITE>
 800344a:	e000      	b.n	800344e <wiz_send_data+0xae>
   if(len == 0)  return;
 800344c:	bf00      	nop
}
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	bd90      	pop	{r4, r7, pc}

08003454 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8003454:	b590      	push	{r4, r7, lr}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	4603      	mov	r3, r0
 800345c:	6039      	str	r1, [r7, #0]
 800345e:	71fb      	strb	r3, [r7, #7]
 8003460:	4613      	mov	r3, r2
 8003462:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8003464:	2300      	movs	r3, #0
 8003466:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8003468:	2300      	movs	r3, #0
 800346a:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 800346c:	88bb      	ldrh	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d046      	beq.n	8003500 <wiz_recv_data+0xac>
   ptr = getSn_RX_RD(sn);
 8003472:	79fb      	ldrb	r3, [r7, #7]
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	3301      	adds	r3, #1
 8003478:	00db      	lsls	r3, r3, #3
 800347a:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 800347e:	4618      	mov	r0, r3
 8003480:	f7ff fda2 	bl	8002fc8 <WIZCHIP_READ>
 8003484:	4603      	mov	r3, r0
 8003486:	021b      	lsls	r3, r3, #8
 8003488:	b29c      	uxth	r4, r3
 800348a:	79fb      	ldrb	r3, [r7, #7]
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	3301      	adds	r3, #1
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8003496:	4618      	mov	r0, r3
 8003498:	f7ff fd96 	bl	8002fc8 <WIZCHIP_READ>
 800349c:	4603      	mov	r3, r0
 800349e:	4423      	add	r3, r4
 80034a0:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 80034a2:	89fb      	ldrh	r3, [r7, #14]
 80034a4:	021a      	lsls	r2, r3, #8
 80034a6:	79fb      	ldrb	r3, [r7, #7]
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	3303      	adds	r3, #3
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	4413      	add	r3, r2
 80034b0:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 80034b2:	88bb      	ldrh	r3, [r7, #4]
 80034b4:	461a      	mov	r2, r3
 80034b6:	6839      	ldr	r1, [r7, #0]
 80034b8:	68b8      	ldr	r0, [r7, #8]
 80034ba:	f7ff fe1f 	bl	80030fc <WIZCHIP_READ_BUF>
   ptr += len;
 80034be:	89fa      	ldrh	r2, [r7, #14]
 80034c0:	88bb      	ldrh	r3, [r7, #4]
 80034c2:	4413      	add	r3, r2
 80034c4:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 80034c6:	79fb      	ldrb	r3, [r7, #7]
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	3301      	adds	r3, #1
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 80034d2:	461a      	mov	r2, r3
 80034d4:	89fb      	ldrh	r3, [r7, #14]
 80034d6:	0a1b      	lsrs	r3, r3, #8
 80034d8:	b29b      	uxth	r3, r3
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	4619      	mov	r1, r3
 80034de:	4610      	mov	r0, r2
 80034e0:	f7ff fdbe 	bl	8003060 <WIZCHIP_WRITE>
 80034e4:	79fb      	ldrb	r3, [r7, #7]
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	3301      	adds	r3, #1
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 80034f0:	461a      	mov	r2, r3
 80034f2:	89fb      	ldrh	r3, [r7, #14]
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	4619      	mov	r1, r3
 80034f8:	4610      	mov	r0, r2
 80034fa:	f7ff fdb1 	bl	8003060 <WIZCHIP_WRITE>
 80034fe:	e000      	b.n	8003502 <wiz_recv_data+0xae>
   if(len == 0) return;
 8003500:	bf00      	nop
}
 8003502:	3714      	adds	r7, #20
 8003504:	46bd      	mov	sp, r7
 8003506:	bd90      	pop	{r4, r7, pc}

08003508 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void       wizchip_cris_enter(void)           {};
void       wizchip_cris_enter(void)           {}
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
 800350c:	bf00      	nop
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr

08003516 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void       wizchip_cris_exit(void)          {};
void       wizchip_cris_exit(void)          {}
 8003516:	b480      	push	{r7}
 8003518:	af00      	add	r7, sp, #0
 800351a:	bf00      	nop
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <wizchip_cs_select>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_select(void)            {};

void wizchip_cs_select(void) {}
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
 8003528:	bf00      	nop
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_deselect(void)          {};
void wizchip_cs_deselect(void) { }
 8003532:	b480      	push	{r7}
 8003534:	af00      	add	r7, sp, #0
 8003536:	bf00      	nop
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	b2db      	uxtb	r3, r3
 800354e:	4618      	mov	r0, r3
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr

0800355a <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void     wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void     wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 800355a:	b480      	push	{r7}
 800355c:	b083      	sub	sp, #12
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
 8003562:	460b      	mov	r3, r1
 8003564:	70fb      	strb	r3, [r7, #3]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	78fa      	ldrb	r2, [r7, #3]
 800356a:	701a      	strb	r2, [r3, #0]
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
 800357c:	2300      	movs	r3, #0
 800357e:	4618      	mov	r0, r3
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writebyte(uint8_t wb) {};
void     wizchip_spi_writebyte(uint8_t wb) {}
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	4603      	mov	r3, r0
 8003590:	71fb      	strb	r3, [r7, #7]
 8003592:	bf00      	nop
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)     {}; 
void     wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)     {}
 800359e:	b480      	push	{r7}
 80035a0:	b083      	sub	sp, #12
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
 80035a6:	460b      	mov	r3, r1
 80035a8:	807b      	strh	r3, [r7, #2]
 80035aa:	bf00      	nop
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 80035b6:	b480      	push	{r7}
 80035b8:	b083      	sub	sp, #12
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
 80035be:	460b      	mov	r3, r1
 80035c0:	807b      	strh	r3, [r7, #2]
 80035c2:	bf00      	nop
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
	...

080035d0 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d002      	beq.n	80035e6 <reg_wizchip_cs_cbfunc+0x16>
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d106      	bne.n	80035f4 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 80035e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003610 <reg_wizchip_cs_cbfunc+0x40>)
 80035e8:	4a0a      	ldr	r2, [pc, #40]	@ (8003614 <reg_wizchip_cs_cbfunc+0x44>)
 80035ea:	611a      	str	r2, [r3, #16]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 80035ec:	4b08      	ldr	r3, [pc, #32]	@ (8003610 <reg_wizchip_cs_cbfunc+0x40>)
 80035ee:	4a0a      	ldr	r2, [pc, #40]	@ (8003618 <reg_wizchip_cs_cbfunc+0x48>)
 80035f0:	615a      	str	r2, [r3, #20]
 80035f2:	e006      	b.n	8003602 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 80035f4:	4a06      	ldr	r2, [pc, #24]	@ (8003610 <reg_wizchip_cs_cbfunc+0x40>)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6113      	str	r3, [r2, #16]
      WIZCHIP.CS._deselect = cs_desel;
 80035fa:	4a05      	ldr	r2, [pc, #20]	@ (8003610 <reg_wizchip_cs_cbfunc+0x40>)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	6153      	str	r3, [r2, #20]
   }
}
 8003600:	bf00      	nop
 8003602:	bf00      	nop
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	2000002c 	.word	0x2000002c
 8003614:	08003525 	.word	0x08003525
 8003618:	08003533 	.word	0x08003533

0800361c <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8003626:	bf00      	nop
 8003628:	4b0f      	ldr	r3, [pc, #60]	@ (8003668 <reg_wizchip_spi_cbfunc+0x4c>)
 800362a:	881b      	ldrh	r3, [r3, #0]
 800362c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003630:	2b00      	cmp	r3, #0
 8003632:	d0f9      	beq.n	8003628 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d002      	beq.n	8003640 <reg_wizchip_spi_cbfunc+0x24>
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d106      	bne.n	800364e <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8003640:	4b09      	ldr	r3, [pc, #36]	@ (8003668 <reg_wizchip_spi_cbfunc+0x4c>)
 8003642:	4a0a      	ldr	r2, [pc, #40]	@ (800366c <reg_wizchip_spi_cbfunc+0x50>)
 8003644:	619a      	str	r2, [r3, #24]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8003646:	4b08      	ldr	r3, [pc, #32]	@ (8003668 <reg_wizchip_spi_cbfunc+0x4c>)
 8003648:	4a09      	ldr	r2, [pc, #36]	@ (8003670 <reg_wizchip_spi_cbfunc+0x54>)
 800364a:	61da      	str	r2, [r3, #28]
 800364c:	e006      	b.n	800365c <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 800364e:	4a06      	ldr	r2, [pc, #24]	@ (8003668 <reg_wizchip_spi_cbfunc+0x4c>)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6193      	str	r3, [r2, #24]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8003654:	4a04      	ldr	r2, [pc, #16]	@ (8003668 <reg_wizchip_spi_cbfunc+0x4c>)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	61d3      	str	r3, [r2, #28]
   }
}
 800365a:	bf00      	nop
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr
 8003668:	2000002c 	.word	0x2000002c
 800366c:	08003579 	.word	0x08003579
 8003670:	08003589 	.word	0x08003589

08003674 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800367e:	bf00      	nop
 8003680:	4b0f      	ldr	r3, [pc, #60]	@ (80036c0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003682:	881b      	ldrh	r3, [r3, #0]
 8003684:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0f9      	beq.n	8003680 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d002      	beq.n	8003698 <reg_wizchip_spiburst_cbfunc+0x24>
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d106      	bne.n	80036a6 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8003698:	4b09      	ldr	r3, [pc, #36]	@ (80036c0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800369a:	4a0a      	ldr	r2, [pc, #40]	@ (80036c4 <reg_wizchip_spiburst_cbfunc+0x50>)
 800369c:	621a      	str	r2, [r3, #32]
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 800369e:	4b08      	ldr	r3, [pc, #32]	@ (80036c0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80036a0:	4a09      	ldr	r2, [pc, #36]	@ (80036c8 <reg_wizchip_spiburst_cbfunc+0x54>)
 80036a2:	625a      	str	r2, [r3, #36]	@ 0x24
 80036a4:	e006      	b.n	80036b4 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 80036a6:	4a06      	ldr	r2, [pc, #24]	@ (80036c0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6213      	str	r3, [r2, #32]
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 80036ac:	4a04      	ldr	r2, [pc, #16]	@ (80036c0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	6253      	str	r3, [r2, #36]	@ 0x24
   }
}
 80036b2:	bf00      	nop
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr
 80036c0:	2000002c 	.word	0x2000002c
 80036c4:	0800359f 	.word	0x0800359f
 80036c8:	080035b7 	.word	0x080035b7

080036cc <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 80036d2:	1d3b      	adds	r3, r7, #4
 80036d4:	2206      	movs	r2, #6
 80036d6:	4619      	mov	r1, r3
 80036d8:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80036dc:	f7ff fd0e 	bl	80030fc <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80036e0:	f107 0314 	add.w	r3, r7, #20
 80036e4:	2204      	movs	r2, #4
 80036e6:	4619      	mov	r1, r3
 80036e8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80036ec:	f7ff fd06 	bl	80030fc <WIZCHIP_READ_BUF>
 80036f0:	f107 0310 	add.w	r3, r7, #16
 80036f4:	2204      	movs	r2, #4
 80036f6:	4619      	mov	r1, r3
 80036f8:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80036fc:	f7ff fcfe 	bl	80030fc <WIZCHIP_READ_BUF>
 8003700:	f107 030c 	add.w	r3, r7, #12
 8003704:	2204      	movs	r2, #4
 8003706:	4619      	mov	r1, r3
 8003708:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 800370c:	f7ff fcf6 	bl	80030fc <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8003710:	2180      	movs	r1, #128	@ 0x80
 8003712:	2000      	movs	r0, #0
 8003714:	f7ff fca4 	bl	8003060 <WIZCHIP_WRITE>
   getMR(); // for delay
 8003718:	2000      	movs	r0, #0
 800371a:	f7ff fc55 	bl	8002fc8 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 800371e:	1d3b      	adds	r3, r7, #4
 8003720:	2206      	movs	r2, #6
 8003722:	4619      	mov	r1, r3
 8003724:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8003728:	f7ff fd48 	bl	80031bc <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 800372c:	f107 0314 	add.w	r3, r7, #20
 8003730:	2204      	movs	r2, #4
 8003732:	4619      	mov	r1, r3
 8003734:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003738:	f7ff fd40 	bl	80031bc <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 800373c:	f107 0310 	add.w	r3, r7, #16
 8003740:	2204      	movs	r2, #4
 8003742:	4619      	mov	r1, r3
 8003744:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8003748:	f7ff fd38 	bl	80031bc <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 800374c:	f107 030c 	add.w	r3, r7, #12
 8003750:	2204      	movs	r2, #4
 8003752:	4619      	mov	r1, r3
 8003754:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8003758:	f7ff fd30 	bl	80031bc <WIZCHIP_WRITE_BUF>
}
 800375c:	bf00      	nop
 800375e:	3718      	adds	r7, #24
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800376e:	2300      	movs	r3, #0
 8003770:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8003772:	f7ff ffab 	bl	80036cc <wizchip_sw_reset>
   if(txsize)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d03b      	beq.n	80037f4 <wizchip_init+0x90>
   {
      tmp = 0;
 800377c:	2300      	movs	r3, #0
 800377e:	73bb      	strb	r3, [r7, #14]
            tmp += txsize[i];
            if(tmp > 128) return -1;
        }
        if(tmp % 8) return -1;
   #else
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003780:	2300      	movs	r3, #0
 8003782:	73fb      	strb	r3, [r7, #15]
 8003784:	e015      	b.n	80037b2 <wizchip_init+0x4e>
        {
            tmp += txsize[i];
 8003786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	4413      	add	r3, r2
 800378e:	781a      	ldrb	r2, [r3, #0]
 8003790:	7bbb      	ldrb	r3, [r7, #14]
 8003792:	4413      	add	r3, r2
 8003794:	b2db      	uxtb	r3, r3
 8003796:	73bb      	strb	r3, [r7, #14]

        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100 and w5100s
            if(tmp > 8) return -1;
        #else
            if(tmp > 16) return -1;
 8003798:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800379c:	2b10      	cmp	r3, #16
 800379e:	dd02      	ble.n	80037a6 <wizchip_init+0x42>
 80037a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80037a4:	e066      	b.n	8003874 <wizchip_init+0x110>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80037a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	3301      	adds	r3, #1
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	73fb      	strb	r3, [r7, #15]
 80037b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037b6:	2b07      	cmp	r3, #7
 80037b8:	dde5      	ble.n	8003786 <wizchip_init+0x22>
        #endif
        }
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80037ba:	2300      	movs	r3, #0
 80037bc:	73fb      	strb	r3, [r7, #15]
 80037be:	e015      	b.n	80037ec <wizchip_init+0x88>
        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100
            j = 0;
            while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
            setSn_TXBUF_SIZE(i, j);
        #else
            setSn_TXBUF_SIZE(i, txsize[i]);
 80037c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	3301      	adds	r3, #1
 80037c8:	00db      	lsls	r3, r3, #3
 80037ca:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 80037ce:	4618      	mov	r0, r3
 80037d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	4413      	add	r3, r2
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	4619      	mov	r1, r3
 80037dc:	f7ff fc40 	bl	8003060 <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80037e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	3301      	adds	r3, #1
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	73fb      	strb	r3, [r7, #15]
 80037ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037f0:	2b07      	cmp	r3, #7
 80037f2:	dde5      	ble.n	80037c0 <wizchip_init+0x5c>
        }

    #endif
   }

   if(rxsize)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d03b      	beq.n	8003872 <wizchip_init+0x10e>
   {
      tmp = 0;
 80037fa:	2300      	movs	r3, #0
 80037fc:	73bb      	strb	r3, [r7, #14]
            tmp += rxsize[i];
            if(tmp > 128) return -1;
        }
        if(tmp % 8) return -1;
   #else
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80037fe:	2300      	movs	r3, #0
 8003800:	73fb      	strb	r3, [r7, #15]
 8003802:	e015      	b.n	8003830 <wizchip_init+0xcc>
        {
            tmp += rxsize[i];
 8003804:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	4413      	add	r3, r2
 800380c:	781a      	ldrb	r2, [r3, #0]
 800380e:	7bbb      	ldrb	r3, [r7, #14]
 8003810:	4413      	add	r3, r2
 8003812:	b2db      	uxtb	r3, r3
 8003814:	73bb      	strb	r3, [r7, #14]
        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100 and w5100s
            if(tmp > 8) return -1;
        #else
            if(tmp > 16) return -1;
 8003816:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800381a:	2b10      	cmp	r3, #16
 800381c:	dd02      	ble.n	8003824 <wizchip_init+0xc0>
 800381e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003822:	e027      	b.n	8003874 <wizchip_init+0x110>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003824:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003828:	b2db      	uxtb	r3, r3
 800382a:	3301      	adds	r3, #1
 800382c:	b2db      	uxtb	r3, r3
 800382e:	73fb      	strb	r3, [r7, #15]
 8003830:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003834:	2b07      	cmp	r3, #7
 8003836:	dde5      	ble.n	8003804 <wizchip_init+0xa0>
        #endif
        }

        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003838:	2300      	movs	r3, #0
 800383a:	73fb      	strb	r3, [r7, #15]
 800383c:	e015      	b.n	800386a <wizchip_init+0x106>
        #if _WIZCHIP_ < W5200    // add condition for w5100
            j = 0;
            while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
            setSn_RXBUF_SIZE(i, j);
        #else
            setSn_RXBUF_SIZE(i, rxsize[i]);
 800383e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	3301      	adds	r3, #1
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 800384c:	4618      	mov	r0, r3
 800384e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	4413      	add	r3, r2
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	4619      	mov	r1, r3
 800385a:	f7ff fc01 	bl	8003060 <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800385e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003862:	b2db      	uxtb	r3, r3
 8003864:	3301      	adds	r3, #1
 8003866:	b2db      	uxtb	r3, r3
 8003868:	73fb      	strb	r3, [r7, #15]
 800386a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800386e:	2b07      	cmp	r3, #7
 8003870:	dde5      	ble.n	800383e <wizchip_init+0xda>
        #endif
        }
    #endif
   }
   return 0;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2206      	movs	r2, #6
 8003888:	4619      	mov	r1, r3
 800388a:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 800388e:	f7ff fc95 	bl	80031bc <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	330e      	adds	r3, #14
 8003896:	2204      	movs	r2, #4
 8003898:	4619      	mov	r1, r3
 800389a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800389e:	f7ff fc8d 	bl	80031bc <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	330a      	adds	r3, #10
 80038a6:	2204      	movs	r2, #4
 80038a8:	4619      	mov	r1, r3
 80038aa:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80038ae:	f7ff fc85 	bl	80031bc <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	3306      	adds	r3, #6
 80038b6:	2204      	movs	r2, #4
 80038b8:	4619      	mov	r1, r3
 80038ba:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80038be:	f7ff fc7d 	bl	80031bc <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	7c9a      	ldrb	r2, [r3, #18]
 80038c6:	4b0b      	ldr	r3, [pc, #44]	@ (80038f4 <wizchip_setnetinfo+0x78>)
 80038c8:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	7cda      	ldrb	r2, [r3, #19]
 80038ce:	4b09      	ldr	r3, [pc, #36]	@ (80038f4 <wizchip_setnetinfo+0x78>)
 80038d0:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	7d1a      	ldrb	r2, [r3, #20]
 80038d6:	4b07      	ldr	r3, [pc, #28]	@ (80038f4 <wizchip_setnetinfo+0x78>)
 80038d8:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	7d5a      	ldrb	r2, [r3, #21]
 80038de:	4b05      	ldr	r3, [pc, #20]	@ (80038f4 <wizchip_setnetinfo+0x78>)
 80038e0:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	7d9a      	ldrb	r2, [r3, #22]
 80038e6:	4b04      	ldr	r3, [pc, #16]	@ (80038f8 <wizchip_setnetinfo+0x7c>)
 80038e8:	701a      	strb	r2, [r3, #0]
}
 80038ea:	bf00      	nop
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	200005fc 	.word	0x200005fc
 80038f8:	20000600 	.word	0x20000600

080038fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80038fc:	480d      	ldr	r0, [pc, #52]	@ (8003934 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80038fe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003900:	f7ff fa74 	bl	8002dec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003904:	480c      	ldr	r0, [pc, #48]	@ (8003938 <LoopForever+0x6>)
  ldr r1, =_edata
 8003906:	490d      	ldr	r1, [pc, #52]	@ (800393c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003908:	4a0d      	ldr	r2, [pc, #52]	@ (8003940 <LoopForever+0xe>)
  movs r3, #0
 800390a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800390c:	e002      	b.n	8003914 <LoopCopyDataInit>

0800390e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800390e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003912:	3304      	adds	r3, #4

08003914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003918:	d3f9      	bcc.n	800390e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800391a:	4a0a      	ldr	r2, [pc, #40]	@ (8003944 <LoopForever+0x12>)
  ldr r4, =_ebss
 800391c:	4c0a      	ldr	r4, [pc, #40]	@ (8003948 <LoopForever+0x16>)
  movs r3, #0
 800391e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003920:	e001      	b.n	8003926 <LoopFillZerobss>

08003922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003924:	3204      	adds	r2, #4

08003926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003928:	d3fb      	bcc.n	8003922 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800392a:	f005 f943 	bl	8008bb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800392e:	f7fe f833 	bl	8001998 <main>

08003932 <LoopForever>:

LoopForever:
    b LoopForever
 8003932:	e7fe      	b.n	8003932 <LoopForever>
  ldr   r0, =_estack
 8003934:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800393c:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 8003940:	0800ad84 	.word	0x0800ad84
  ldr r2, =_sbss
 8003944:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8003948:	20000754 	.word	0x20000754

0800394c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800394c:	e7fe      	b.n	800394c <ADC1_2_IRQHandler>

0800394e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b082      	sub	sp, #8
 8003952:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003954:	2300      	movs	r3, #0
 8003956:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003958:	2003      	movs	r0, #3
 800395a:	f000 f939 	bl	8003bd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800395e:	2000      	movs	r0, #0
 8003960:	f000 f80e 	bl	8003980 <HAL_InitTick>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d002      	beq.n	8003970 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	71fb      	strb	r3, [r7, #7]
 800396e:	e001      	b.n	8003974 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003970:	f7fe ffd4 	bl	800291c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003974:	79fb      	ldrb	r3, [r7, #7]

}
 8003976:	4618      	mov	r0, r3
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
	...

08003980 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003988:	2300      	movs	r3, #0
 800398a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800398c:	4b16      	ldr	r3, [pc, #88]	@ (80039e8 <HAL_InitTick+0x68>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d022      	beq.n	80039da <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003994:	4b15      	ldr	r3, [pc, #84]	@ (80039ec <HAL_InitTick+0x6c>)
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	4b13      	ldr	r3, [pc, #76]	@ (80039e8 <HAL_InitTick+0x68>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80039a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80039a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a8:	4618      	mov	r0, r3
 80039aa:	f000 f944 	bl	8003c36 <HAL_SYSTICK_Config>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10f      	bne.n	80039d4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b0f      	cmp	r3, #15
 80039b8:	d809      	bhi.n	80039ce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039ba:	2200      	movs	r2, #0
 80039bc:	6879      	ldr	r1, [r7, #4]
 80039be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80039c2:	f000 f910 	bl	8003be6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80039c6:	4a0a      	ldr	r2, [pc, #40]	@ (80039f0 <HAL_InitTick+0x70>)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6013      	str	r3, [r2, #0]
 80039cc:	e007      	b.n	80039de <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	73fb      	strb	r3, [r7, #15]
 80039d2:	e004      	b.n	80039de <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	73fb      	strb	r3, [r7, #15]
 80039d8:	e001      	b.n	80039de <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80039de:	7bfb      	ldrb	r3, [r7, #15]
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	20000058 	.word	0x20000058
 80039ec:	20000004 	.word	0x20000004
 80039f0:	20000054 	.word	0x20000054

080039f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039f4:	b480      	push	{r7}
 80039f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039f8:	4b05      	ldr	r3, [pc, #20]	@ (8003a10 <HAL_IncTick+0x1c>)
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	4b05      	ldr	r3, [pc, #20]	@ (8003a14 <HAL_IncTick+0x20>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4413      	add	r3, r2
 8003a02:	4a03      	ldr	r2, [pc, #12]	@ (8003a10 <HAL_IncTick+0x1c>)
 8003a04:	6013      	str	r3, [r2, #0]
}
 8003a06:	bf00      	nop
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	20000604 	.word	0x20000604
 8003a14:	20000058 	.word	0x20000058

08003a18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8003a1c:	4b03      	ldr	r3, [pc, #12]	@ (8003a2c <HAL_GetTick+0x14>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	20000604 	.word	0x20000604

08003a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f003 0307 	and.w	r3, r3, #7
 8003a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a40:	4b0c      	ldr	r3, [pc, #48]	@ (8003a74 <__NVIC_SetPriorityGrouping+0x44>)
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a62:	4a04      	ldr	r2, [pc, #16]	@ (8003a74 <__NVIC_SetPriorityGrouping+0x44>)
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	60d3      	str	r3, [r2, #12]
}
 8003a68:	bf00      	nop
 8003a6a:	3714      	adds	r7, #20
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr
 8003a74:	e000ed00 	.word	0xe000ed00

08003a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a7c:	4b04      	ldr	r3, [pc, #16]	@ (8003a90 <__NVIC_GetPriorityGrouping+0x18>)
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	0a1b      	lsrs	r3, r3, #8
 8003a82:	f003 0307 	and.w	r3, r3, #7
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr
 8003a90:	e000ed00 	.word	0xe000ed00

08003a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	db0b      	blt.n	8003abe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003aa6:	79fb      	ldrb	r3, [r7, #7]
 8003aa8:	f003 021f 	and.w	r2, r3, #31
 8003aac:	4907      	ldr	r1, [pc, #28]	@ (8003acc <__NVIC_EnableIRQ+0x38>)
 8003aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab2:	095b      	lsrs	r3, r3, #5
 8003ab4:	2001      	movs	r0, #1
 8003ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8003aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003abe:	bf00      	nop
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	e000e100 	.word	0xe000e100

08003ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	6039      	str	r1, [r7, #0]
 8003ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	db0a      	blt.n	8003afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	b2da      	uxtb	r2, r3
 8003ae8:	490c      	ldr	r1, [pc, #48]	@ (8003b1c <__NVIC_SetPriority+0x4c>)
 8003aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aee:	0112      	lsls	r2, r2, #4
 8003af0:	b2d2      	uxtb	r2, r2
 8003af2:	440b      	add	r3, r1
 8003af4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003af8:	e00a      	b.n	8003b10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	b2da      	uxtb	r2, r3
 8003afe:	4908      	ldr	r1, [pc, #32]	@ (8003b20 <__NVIC_SetPriority+0x50>)
 8003b00:	79fb      	ldrb	r3, [r7, #7]
 8003b02:	f003 030f 	and.w	r3, r3, #15
 8003b06:	3b04      	subs	r3, #4
 8003b08:	0112      	lsls	r2, r2, #4
 8003b0a:	b2d2      	uxtb	r2, r2
 8003b0c:	440b      	add	r3, r1
 8003b0e:	761a      	strb	r2, [r3, #24]
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr
 8003b1c:	e000e100 	.word	0xe000e100
 8003b20:	e000ed00 	.word	0xe000ed00

08003b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b089      	sub	sp, #36	@ 0x24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f003 0307 	and.w	r3, r3, #7
 8003b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	f1c3 0307 	rsb	r3, r3, #7
 8003b3e:	2b04      	cmp	r3, #4
 8003b40:	bf28      	it	cs
 8003b42:	2304      	movcs	r3, #4
 8003b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	3304      	adds	r3, #4
 8003b4a:	2b06      	cmp	r3, #6
 8003b4c:	d902      	bls.n	8003b54 <NVIC_EncodePriority+0x30>
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	3b03      	subs	r3, #3
 8003b52:	e000      	b.n	8003b56 <NVIC_EncodePriority+0x32>
 8003b54:	2300      	movs	r3, #0
 8003b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b58:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b62:	43da      	mvns	r2, r3
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	401a      	ands	r2, r3
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b6c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	fa01 f303 	lsl.w	r3, r1, r3
 8003b76:	43d9      	mvns	r1, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b7c:	4313      	orrs	r3, r2
         );
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3724      	adds	r7, #36	@ 0x24
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
	...

08003b8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	3b01      	subs	r3, #1
 8003b98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b9c:	d301      	bcc.n	8003ba2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e00f      	b.n	8003bc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8003bcc <SysTick_Config+0x40>)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003baa:	210f      	movs	r1, #15
 8003bac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003bb0:	f7ff ff8e 	bl	8003ad0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bb4:	4b05      	ldr	r3, [pc, #20]	@ (8003bcc <SysTick_Config+0x40>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bba:	4b04      	ldr	r3, [pc, #16]	@ (8003bcc <SysTick_Config+0x40>)
 8003bbc:	2207      	movs	r2, #7
 8003bbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	e000e010 	.word	0xe000e010

08003bd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f7ff ff29 	bl	8003a30 <__NVIC_SetPriorityGrouping>
}
 8003bde:	bf00      	nop
 8003be0:	3708      	adds	r7, #8
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b086      	sub	sp, #24
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	4603      	mov	r3, r0
 8003bee:	60b9      	str	r1, [r7, #8]
 8003bf0:	607a      	str	r2, [r7, #4]
 8003bf2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003bf4:	f7ff ff40 	bl	8003a78 <__NVIC_GetPriorityGrouping>
 8003bf8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	68b9      	ldr	r1, [r7, #8]
 8003bfe:	6978      	ldr	r0, [r7, #20]
 8003c00:	f7ff ff90 	bl	8003b24 <NVIC_EncodePriority>
 8003c04:	4602      	mov	r2, r0
 8003c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c0a:	4611      	mov	r1, r2
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7ff ff5f 	bl	8003ad0 <__NVIC_SetPriority>
}
 8003c12:	bf00      	nop
 8003c14:	3718      	adds	r7, #24
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b082      	sub	sp, #8
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	4603      	mov	r3, r0
 8003c22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7ff ff33 	bl	8003a94 <__NVIC_EnableIRQ>
}
 8003c2e:	bf00      	nop
 8003c30:	3708      	adds	r7, #8
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b082      	sub	sp, #8
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7ff ffa4 	bl	8003b8c <SysTick_Config>
 8003c44:	4603      	mov	r3, r0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
	...

08003c50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e08d      	b.n	8003d7e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	461a      	mov	r2, r3
 8003c68:	4b47      	ldr	r3, [pc, #284]	@ (8003d88 <HAL_DMA_Init+0x138>)
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d80f      	bhi.n	8003c8e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	461a      	mov	r2, r3
 8003c74:	4b45      	ldr	r3, [pc, #276]	@ (8003d8c <HAL_DMA_Init+0x13c>)
 8003c76:	4413      	add	r3, r2
 8003c78:	4a45      	ldr	r2, [pc, #276]	@ (8003d90 <HAL_DMA_Init+0x140>)
 8003c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7e:	091b      	lsrs	r3, r3, #4
 8003c80:	009a      	lsls	r2, r3, #2
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a42      	ldr	r2, [pc, #264]	@ (8003d94 <HAL_DMA_Init+0x144>)
 8003c8a:	641a      	str	r2, [r3, #64]	@ 0x40
 8003c8c:	e00e      	b.n	8003cac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	461a      	mov	r2, r3
 8003c94:	4b40      	ldr	r3, [pc, #256]	@ (8003d98 <HAL_DMA_Init+0x148>)
 8003c96:	4413      	add	r3, r2
 8003c98:	4a3d      	ldr	r2, [pc, #244]	@ (8003d90 <HAL_DMA_Init+0x140>)
 8003c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9e:	091b      	lsrs	r3, r3, #4
 8003ca0:	009a      	lsls	r2, r3, #2
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a3c      	ldr	r2, [pc, #240]	@ (8003d9c <HAL_DMA_Init+0x14c>)
 8003caa:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2202      	movs	r2, #2
 8003cb0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003cc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cc6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003cd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ce8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f9b6 	bl	8004070 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d0c:	d102      	bne.n	8003d14 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d1c:	b2d2      	uxtb	r2, r2
 8003d1e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003d28:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d010      	beq.n	8003d54 <HAL_DMA_Init+0x104>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	2b04      	cmp	r3, #4
 8003d38:	d80c      	bhi.n	8003d54 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 f9d6 	bl	80040ec <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d44:	2200      	movs	r2, #0
 8003d46:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003d50:	605a      	str	r2, [r3, #4]
 8003d52:	e008      	b.n	8003d66 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	40020407 	.word	0x40020407
 8003d8c:	bffdfff8 	.word	0xbffdfff8
 8003d90:	cccccccd 	.word	0xcccccccd
 8003d94:	40020000 	.word	0x40020000
 8003d98:	bffdfbf8 	.word	0xbffdfbf8
 8003d9c:	40020400 	.word	0x40020400

08003da0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
 8003dac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dae:	2300      	movs	r3, #0
 8003db0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d101      	bne.n	8003dc0 <HAL_DMA_Start_IT+0x20>
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	e066      	b.n	8003e8e <HAL_DMA_Start_IT+0xee>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d155      	bne.n	8003e80 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 0201 	bic.w	r2, r2, #1
 8003df0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	68b9      	ldr	r1, [r7, #8]
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f000 f8fb 	bl	8003ff4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d008      	beq.n	8003e18 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f042 020e 	orr.w	r2, r2, #14
 8003e14:	601a      	str	r2, [r3, #0]
 8003e16:	e00f      	b.n	8003e38 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f022 0204 	bic.w	r2, r2, #4
 8003e26:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f042 020a 	orr.w	r2, r2, #10
 8003e36:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d007      	beq.n	8003e56 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e54:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d007      	beq.n	8003e6e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e6c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f042 0201 	orr.w	r2, r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]
 8003e7e:	e005      	b.n	8003e8c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003e88:	2302      	movs	r3, #2
 8003e8a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003e8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3718      	adds	r7, #24
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b084      	sub	sp, #16
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb2:	f003 031f 	and.w	r3, r3, #31
 8003eb6:	2204      	movs	r2, #4
 8003eb8:	409a      	lsls	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d026      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x7a>
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	f003 0304 	and.w	r3, r3, #4
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d021      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0320 	and.w	r3, r3, #32
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d107      	bne.n	8003eea <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f022 0204 	bic.w	r2, r2, #4
 8003ee8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eee:	f003 021f 	and.w	r2, r3, #31
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef6:	2104      	movs	r1, #4
 8003ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8003efc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d071      	beq.n	8003fea <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003f0e:	e06c      	b.n	8003fea <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f14:	f003 031f 	and.w	r3, r3, #31
 8003f18:	2202      	movs	r2, #2
 8003f1a:	409a      	lsls	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d02e      	beq.n	8003f82 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d029      	beq.n	8003f82 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0320 	and.w	r3, r3, #32
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d10b      	bne.n	8003f54 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 020a 	bic.w	r2, r2, #10
 8003f4a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f58:	f003 021f 	and.w	r2, r3, #31
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f60:	2102      	movs	r1, #2
 8003f62:	fa01 f202 	lsl.w	r2, r1, r2
 8003f66:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d038      	beq.n	8003fea <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003f80:	e033      	b.n	8003fea <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f86:	f003 031f 	and.w	r3, r3, #31
 8003f8a:	2208      	movs	r2, #8
 8003f8c:	409a      	lsls	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	4013      	ands	r3, r2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d02a      	beq.n	8003fec <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	f003 0308 	and.w	r3, r3, #8
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d025      	beq.n	8003fec <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f022 020e 	bic.w	r2, r2, #14
 8003fae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fb4:	f003 021f 	and.w	r2, r3, #31
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	fa01 f202 	lsl.w	r2, r1, r2
 8003fc2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d004      	beq.n	8003fec <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003fea:	bf00      	nop
 8003fec:	bf00      	nop
}
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
 8004000:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800400a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004010:	2b00      	cmp	r3, #0
 8004012:	d004      	beq.n	800401e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800401c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004022:	f003 021f 	and.w	r2, r3, #31
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800402a:	2101      	movs	r1, #1
 800402c:	fa01 f202 	lsl.w	r2, r1, r2
 8004030:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	2b10      	cmp	r3, #16
 8004040:	d108      	bne.n	8004054 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68ba      	ldr	r2, [r7, #8]
 8004050:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004052:	e007      	b.n	8004064 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68ba      	ldr	r2, [r7, #8]
 800405a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	60da      	str	r2, [r3, #12]
}
 8004064:	bf00      	nop
 8004066:	3714      	adds	r7, #20
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004070:	b480      	push	{r7}
 8004072:	b087      	sub	sp, #28
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	461a      	mov	r2, r3
 800407e:	4b16      	ldr	r3, [pc, #88]	@ (80040d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004080:	429a      	cmp	r2, r3
 8004082:	d802      	bhi.n	800408a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004084:	4b15      	ldr	r3, [pc, #84]	@ (80040dc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004086:	617b      	str	r3, [r7, #20]
 8004088:	e001      	b.n	800408e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800408a:	4b15      	ldr	r3, [pc, #84]	@ (80040e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800408c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	b2db      	uxtb	r3, r3
 8004098:	3b08      	subs	r3, #8
 800409a:	4a12      	ldr	r2, [pc, #72]	@ (80040e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800409c:	fba2 2303 	umull	r2, r3, r2, r3
 80040a0:	091b      	lsrs	r3, r3, #4
 80040a2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040a8:	089b      	lsrs	r3, r3, #2
 80040aa:	009a      	lsls	r2, r3, #2
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	4413      	add	r3, r2
 80040b0:	461a      	mov	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a0b      	ldr	r2, [pc, #44]	@ (80040e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80040ba:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f003 031f 	and.w	r3, r3, #31
 80040c2:	2201      	movs	r2, #1
 80040c4:	409a      	lsls	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80040ca:	bf00      	nop
 80040cc:	371c      	adds	r7, #28
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	40020407 	.word	0x40020407
 80040dc:	40020800 	.word	0x40020800
 80040e0:	40020820 	.word	0x40020820
 80040e4:	cccccccd 	.word	0xcccccccd
 80040e8:	40020880 	.word	0x40020880

080040ec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	4b0b      	ldr	r3, [pc, #44]	@ (800412c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004100:	4413      	add	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	461a      	mov	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a08      	ldr	r2, [pc, #32]	@ (8004130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800410e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	3b01      	subs	r3, #1
 8004114:	f003 031f 	and.w	r3, r3, #31
 8004118:	2201      	movs	r2, #1
 800411a:	409a      	lsls	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004120:	bf00      	nop
 8004122:	3714      	adds	r7, #20
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr
 800412c:	1000823f 	.word	0x1000823f
 8004130:	40020940 	.word	0x40020940

08004134 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e147      	b.n	80043d6 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d106      	bne.n	8004160 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7fe fc02 	bl	8002964 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	699a      	ldr	r2, [r3, #24]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 0210 	bic.w	r2, r2, #16
 800416e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004170:	f7ff fc52 	bl	8003a18 <HAL_GetTick>
 8004174:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004176:	e012      	b.n	800419e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004178:	f7ff fc4e 	bl	8003a18 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b0a      	cmp	r3, #10
 8004184:	d90b      	bls.n	800419e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800418a:	f043 0201 	orr.w	r2, r3, #1
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2203      	movs	r2, #3
 8004196:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e11b      	b.n	80043d6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	f003 0308 	and.w	r3, r3, #8
 80041a8:	2b08      	cmp	r3, #8
 80041aa:	d0e5      	beq.n	8004178 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	699a      	ldr	r2, [r3, #24]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f042 0201 	orr.w	r2, r2, #1
 80041ba:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041bc:	f7ff fc2c 	bl	8003a18 <HAL_GetTick>
 80041c0:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80041c2:	e012      	b.n	80041ea <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80041c4:	f7ff fc28 	bl	8003a18 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b0a      	cmp	r3, #10
 80041d0:	d90b      	bls.n	80041ea <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041d6:	f043 0201 	orr.w	r2, r3, #1
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2203      	movs	r2, #3
 80041e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e0f5      	b.n	80043d6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d0e5      	beq.n	80041c4 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	699a      	ldr	r2, [r3, #24]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f042 0202 	orr.w	r2, r2, #2
 8004206:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a74      	ldr	r2, [pc, #464]	@ (80043e0 <HAL_FDCAN_Init+0x2ac>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d103      	bne.n	800421a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8004212:	4a74      	ldr	r2, [pc, #464]	@ (80043e4 <HAL_FDCAN_Init+0x2b0>)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	7c1b      	ldrb	r3, [r3, #16]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d108      	bne.n	8004234 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	699a      	ldr	r2, [r3, #24]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004230:	619a      	str	r2, [r3, #24]
 8004232:	e007      	b.n	8004244 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	699a      	ldr	r2, [r3, #24]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004242:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	7c5b      	ldrb	r3, [r3, #17]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d108      	bne.n	800425e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	699a      	ldr	r2, [r3, #24]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800425a:	619a      	str	r2, [r3, #24]
 800425c:	e007      	b.n	800426e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	699a      	ldr	r2, [r3, #24]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800426c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	7c9b      	ldrb	r3, [r3, #18]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d108      	bne.n	8004288 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	699a      	ldr	r2, [r3, #24]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004284:	619a      	str	r2, [r3, #24]
 8004286:	e007      	b.n	8004298 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	699a      	ldr	r2, [r3, #24]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004296:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	689a      	ldr	r2, [r3, #8]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	430a      	orrs	r2, r1
 80042ac:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	699a      	ldr	r2, [r3, #24]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80042bc:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	691a      	ldr	r2, [r3, #16]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 0210 	bic.w	r2, r2, #16
 80042cc:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d108      	bne.n	80042e8 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	699a      	ldr	r2, [r3, #24]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f042 0204 	orr.w	r2, r2, #4
 80042e4:	619a      	str	r2, [r3, #24]
 80042e6:	e02c      	b.n	8004342 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d028      	beq.n	8004342 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d01c      	beq.n	8004332 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	699a      	ldr	r2, [r3, #24]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004306:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	691a      	ldr	r2, [r3, #16]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f042 0210 	orr.w	r2, r2, #16
 8004316:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	2b03      	cmp	r3, #3
 800431e:	d110      	bne.n	8004342 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	699a      	ldr	r2, [r3, #24]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f042 0220 	orr.w	r2, r2, #32
 800432e:	619a      	str	r2, [r3, #24]
 8004330:	e007      	b.n	8004342 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	699a      	ldr	r2, [r3, #24]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f042 0220 	orr.w	r2, r2, #32
 8004340:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	3b01      	subs	r3, #1
 8004348:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	69db      	ldr	r3, [r3, #28]
 800434e:	3b01      	subs	r3, #1
 8004350:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004352:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800435a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	3b01      	subs	r3, #1
 8004364:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800436a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800436c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004376:	d115      	bne.n	80043a4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800437c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004382:	3b01      	subs	r3, #1
 8004384:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004386:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800438c:	3b01      	subs	r3, #1
 800438e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004390:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004398:	3b01      	subs	r3, #1
 800439a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80043a0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80043a2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	430a      	orrs	r2, r1
 80043b6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 fc20 	bl	8004c00 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	40006400 	.word	0x40006400
 80043e4:	40006500 	.word	0x40006500

080043e8 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b087      	sub	sp, #28
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80043f8:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80043fa:	7dfb      	ldrb	r3, [r7, #23]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d002      	beq.n	8004406 <HAL_FDCAN_ConfigFilter+0x1e>
 8004400:	7dfb      	ldrb	r3, [r7, #23]
 8004402:	2b02      	cmp	r3, #2
 8004404:	d13d      	bne.n	8004482 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d119      	bne.n	8004442 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800441a:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8004422:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004428:	4313      	orrs	r3, r2
 800442a:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	4413      	add	r3, r2
 8004438:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	601a      	str	r2, [r3, #0]
 8004440:	e01d      	b.n	800447e <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	075a      	lsls	r2, r3, #29
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	4313      	orrs	r3, r2
 800444e:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	079a      	lsls	r2, r3, #30
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	4313      	orrs	r3, r2
 800445c:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	00db      	lsls	r3, r3, #3
 8004468:	4413      	add	r3, r2
 800446a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	3304      	adds	r3, #4
 8004476:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800447e:	2300      	movs	r3, #0
 8004480:	e006      	b.n	8004490 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004486:	f043 0202 	orr.w	r2, r3, #2
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
  }
}
 8004490:	4618      	mov	r0, r3
 8004492:	371c      	adds	r7, #28
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d110      	bne.n	80044d2 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2202      	movs	r2, #2
 80044b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	699a      	ldr	r2, [r3, #24]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f022 0201 	bic.w	r2, r2, #1
 80044c6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80044ce:	2300      	movs	r3, #0
 80044d0:	e006      	b.n	80044e0 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044d6:	f043 0204 	orr.w	r2, r3, #4
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
  }
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b08b      	sub	sp, #44	@ 0x2c
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
 80044f8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80044fa:	2300      	movs	r3, #0
 80044fc:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004504:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8004506:	7efb      	ldrb	r3, [r7, #27]
 8004508:	2b02      	cmp	r3, #2
 800450a:	f040 80e8 	bne.w	80046de <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	2b40      	cmp	r3, #64	@ 0x40
 8004512:	d137      	bne.n	8004584 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800451c:	f003 030f 	and.w	r3, r3, #15
 8004520:	2b00      	cmp	r3, #0
 8004522:	d107      	bne.n	8004534 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004528:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e0db      	b.n	80046ec <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800453c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004540:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004544:	d10a      	bne.n	800455c <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800454e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004552:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004556:	d101      	bne.n	800455c <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004558:	2301      	movs	r3, #1
 800455a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004564:	0a1b      	lsrs	r3, r3, #8
 8004566:	f003 0303 	and.w	r3, r3, #3
 800456a:	69fa      	ldr	r2, [r7, #28]
 800456c:	4413      	add	r3, r2
 800456e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8004574:	69fa      	ldr	r2, [r7, #28]
 8004576:	4613      	mov	r3, r2
 8004578:	00db      	lsls	r3, r3, #3
 800457a:	4413      	add	r3, r2
 800457c:	00db      	lsls	r3, r3, #3
 800457e:	440b      	add	r3, r1
 8004580:	627b      	str	r3, [r7, #36]	@ 0x24
 8004582:	e036      	b.n	80045f2 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800458c:	f003 030f 	and.w	r3, r3, #15
 8004590:	2b00      	cmp	r3, #0
 8004592:	d107      	bne.n	80045a4 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004598:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e0a3      	b.n	80046ec <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045b4:	d10a      	bne.n	80045cc <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045c6:	d101      	bne.n	80045cc <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80045c8:	2301      	movs	r3, #1
 80045ca:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045d4:	0a1b      	lsrs	r3, r3, #8
 80045d6:	f003 0303 	and.w	r3, r3, #3
 80045da:	69fa      	ldr	r2, [r7, #28]
 80045dc:	4413      	add	r3, r2
 80045de:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80045e4:	69fa      	ldr	r2, [r7, #28]
 80045e6:	4613      	mov	r3, r2
 80045e8:	00db      	lsls	r3, r3, #3
 80045ea:	4413      	add	r3, r2
 80045ec:	00db      	lsls	r3, r3, #3
 80045ee:	440b      	add	r3, r1
 80045f0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80045f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d107      	bne.n	8004616 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8004606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	0c9b      	lsrs	r3, r3, #18
 800460c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	601a      	str	r2, [r3, #0]
 8004614:	e005      	b.n	8004622 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8004616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8004622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800462e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800463a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463c:	3304      	adds	r3, #4
 800463e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8004640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	b29a      	uxth	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800464a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	0c1b      	lsrs	r3, r3, #16
 8004650:	f003 020f 	and.w	r2, r3, #15
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8004658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8004664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8004670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	0e1b      	lsrs	r3, r3, #24
 8004676:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800467e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	0fda      	lsrs	r2, r3, #31
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8004688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800468a:	3304      	adds	r3, #4
 800468c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800468e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004690:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8004692:	2300      	movs	r3, #0
 8004694:	623b      	str	r3, [r7, #32]
 8004696:	e00a      	b.n	80046ae <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	6a3b      	ldr	r3, [r7, #32]
 800469c:	441a      	add	r2, r3
 800469e:	6839      	ldr	r1, [r7, #0]
 80046a0:	6a3b      	ldr	r3, [r7, #32]
 80046a2:	440b      	add	r3, r1
 80046a4:	7812      	ldrb	r2, [r2, #0]
 80046a6:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80046a8:	6a3b      	ldr	r3, [r7, #32]
 80046aa:	3301      	adds	r3, #1
 80046ac:	623b      	str	r3, [r7, #32]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	4a11      	ldr	r2, [pc, #68]	@ (80046f8 <HAL_FDCAN_GetRxMessage+0x20c>)
 80046b4:	5cd3      	ldrb	r3, [r2, r3]
 80046b6:	461a      	mov	r2, r3
 80046b8:	6a3b      	ldr	r3, [r7, #32]
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d3ec      	bcc.n	8004698 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	2b40      	cmp	r3, #64	@ 0x40
 80046c2:	d105      	bne.n	80046d0 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	69fa      	ldr	r2, [r7, #28]
 80046ca:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80046ce:	e004      	b.n	80046da <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	69fa      	ldr	r2, [r7, #28]
 80046d6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80046da:	2300      	movs	r3, #0
 80046dc:	e006      	b.n	80046ec <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046e2:	f043 0208 	orr.w	r2, r3, #8
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
  }
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	372c      	adds	r7, #44	@ 0x2c
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr
 80046f8:	0800a9f0 	.word	0x0800a9f0

080046fc <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b087      	sub	sp, #28
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800470e:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004710:	7dfb      	ldrb	r3, [r7, #23]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d003      	beq.n	800471e <HAL_FDCAN_ActivateNotification+0x22>
 8004716:	7dfb      	ldrb	r3, [r7, #23]
 8004718:	2b02      	cmp	r3, #2
 800471a:	f040 80c8 	bne.w	80048ae <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004724:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	f003 0307 	and.w	r3, r3, #7
 800472c:	2b00      	cmp	r3, #0
 800472e:	d004      	beq.n	800473a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	d03b      	beq.n	80047b2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8004740:	2b00      	cmp	r3, #0
 8004742:	d004      	beq.n	800474e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d031      	beq.n	80047b2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8004754:	2b00      	cmp	r3, #0
 8004756:	d004      	beq.n	8004762 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	f003 0304 	and.w	r3, r3, #4
 800475e:	2b00      	cmp	r3, #0
 8004760:	d027      	beq.n	80047b2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8004768:	2b00      	cmp	r3, #0
 800476a:	d004      	beq.n	8004776 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	f003 0308 	and.w	r3, r3, #8
 8004772:	2b00      	cmp	r3, #0
 8004774:	d01d      	beq.n	80047b2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800477c:	2b00      	cmp	r3, #0
 800477e:	d004      	beq.n	800478a <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	f003 0310 	and.w	r3, r3, #16
 8004786:	2b00      	cmp	r3, #0
 8004788:	d013      	beq.n	80047b2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8004790:	2b00      	cmp	r3, #0
 8004792:	d004      	beq.n	800479e <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	f003 0320 	and.w	r3, r3, #32
 800479a:	2b00      	cmp	r3, #0
 800479c:	d009      	beq.n	80047b2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00c      	beq.n	80047c2 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d107      	bne.n	80047c2 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f042 0201 	orr.w	r2, r2, #1
 80047c0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	f003 0307 	and.w	r3, r3, #7
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d004      	beq.n	80047d6 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d13b      	bne.n	800484e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d004      	beq.n	80047ea <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d131      	bne.n	800484e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d004      	beq.n	80047fe <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	f003 0304 	and.w	r3, r3, #4
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d127      	bne.n	800484e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8004804:	2b00      	cmp	r3, #0
 8004806:	d004      	beq.n	8004812 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	f003 0308 	and.w	r3, r3, #8
 800480e:	2b00      	cmp	r3, #0
 8004810:	d11d      	bne.n	800484e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8004818:	2b00      	cmp	r3, #0
 800481a:	d004      	beq.n	8004826 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	f003 0310 	and.w	r3, r3, #16
 8004822:	2b00      	cmp	r3, #0
 8004824:	d113      	bne.n	800484e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800482c:	2b00      	cmp	r3, #0
 800482e:	d004      	beq.n	800483a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	f003 0320 	and.w	r3, r3, #32
 8004836:	2b00      	cmp	r3, #0
 8004838:	d109      	bne.n	800484e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00c      	beq.n	800485e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800484a:	2b00      	cmp	r3, #0
 800484c:	d007      	beq.n	800485e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f042 0202 	orr.w	r2, r2, #2
 800485c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004864:	2b00      	cmp	r3, #0
 8004866:	d009      	beq.n	800487c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	430a      	orrs	r2, r1
 8004878:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004882:	2b00      	cmp	r3, #0
 8004884:	d009      	beq.n	800489a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	430a      	orrs	r2, r1
 8004896:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	430a      	orrs	r2, r1
 80048a8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 80048aa:	2300      	movs	r3, #0
 80048ac:	e006      	b.n	80048bc <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048b2:	f043 0202 	orr.w	r2, r3, #2
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
  }
}
 80048bc:	4618      	mov	r0, r3
 80048be:	371c      	adds	r7, #28
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b08c      	sub	sp, #48	@ 0x30
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048d6:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80048da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048e4:	4013      	ands	r3, r2
 80048e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048ee:	f003 0307 	and.w	r3, r3, #7
 80048f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048fc:	4013      	ands	r3, r2
 80048fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004906:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800490a:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004912:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004914:	4013      	ands	r3, r2
 8004916:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800491e:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8004922:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800492a:	6a3a      	ldr	r2, [r7, #32]
 800492c:	4013      	ands	r3, r2
 800492e:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004936:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800493a:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004942:	69fa      	ldr	r2, [r7, #28]
 8004944:	4013      	ands	r3, r2
 8004946:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800494e:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004956:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	099b      	lsrs	r3, r3, #6
 800495c:	f003 0301 	and.w	r3, r3, #1
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00c      	beq.n	800497e <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	099b      	lsrs	r3, r3, #6
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	2b00      	cmp	r3, #0
 800496e:	d006      	beq.n	800497e <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2240      	movs	r2, #64	@ 0x40
 8004976:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 f922 	bl	8004bc2 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	0a1b      	lsrs	r3, r3, #8
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d01a      	beq.n	80049c0 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	0a1b      	lsrs	r3, r3, #8
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	2b00      	cmp	r3, #0
 8004994:	d014      	beq.n	80049c0 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800499e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	4013      	ands	r3, r2
 80049ac:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80049b6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80049b8:	6939      	ldr	r1, [r7, #16]
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f8e2 	bl	8004b84 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80049c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d007      	beq.n	80049d6 <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049cc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80049ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 f8ac 	bl	8004b2e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80049d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d007      	beq.n	80049ec <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80049e2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80049e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f7fc ff9c 	bl	8001924 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80049ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d007      	beq.n	8004a02 <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049f8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80049fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 f8a1 	bl	8004b44 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	0a5b      	lsrs	r3, r3, #9
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00d      	beq.n	8004a2a <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	0a5b      	lsrs	r3, r3, #9
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d007      	beq.n	8004a2a <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a22:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 f898 	bl	8004b5a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	09db      	lsrs	r3, r3, #7
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d019      	beq.n	8004a6a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	09db      	lsrs	r3, r3, #7
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d013      	beq.n	8004a6a <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004a4a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	4013      	ands	r3, r2
 8004a58:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2280      	movs	r2, #128	@ 0x80
 8004a60:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004a62:	68f9      	ldr	r1, [r7, #12]
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 f882 	bl	8004b6e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	0b5b      	lsrs	r3, r3, #13
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00d      	beq.n	8004a92 <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	0b5b      	lsrs	r3, r3, #13
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d007      	beq.n	8004a92 <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004a8a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 f884 	bl	8004b9a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	0bdb      	lsrs	r3, r3, #15
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00d      	beq.n	8004aba <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	0bdb      	lsrs	r3, r3, #15
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d007      	beq.n	8004aba <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004ab2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 f87a 	bl	8004bae <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	0b9b      	lsrs	r3, r3, #14
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d010      	beq.n	8004ae8 <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	0b9b      	lsrs	r3, r3, #14
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00a      	beq.n	8004ae8 <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004ada:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ae0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d007      	beq.n	8004afe <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	69fa      	ldr	r2, [r7, #28]
 8004af4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004af6:	69f9      	ldr	r1, [r7, #28]
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 f876 	bl	8004bea <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004afe:	6a3b      	ldr	r3, [r7, #32]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d009      	beq.n	8004b18 <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6a3a      	ldr	r2, [r7, #32]
 8004b0a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004b10:	6a3b      	ldr	r3, [r7, #32]
 8004b12:	431a      	orrs	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d002      	beq.n	8004b26 <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 f858 	bl	8004bd6 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8004b26:	bf00      	nop
 8004b28:	3730      	adds	r7, #48	@ 0x30
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b083      	sub	sp, #12
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
 8004b36:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8004b4e:	bf00      	nop
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b083      	sub	sp, #12
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004b62:	bf00      	nop
 8004b64:	370c      	adds	r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr

08004b6e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004b6e:	b480      	push	{r7}
 8004b70:	b083      	sub	sp, #12
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
 8004b76:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004b8e:	bf00      	nop
 8004b90:	370c      	adds	r7, #12
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b083      	sub	sp, #12
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004ba2:	bf00      	nop
 8004ba4:	370c      	adds	r7, #12
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr

08004bae <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b083      	sub	sp, #12
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b083      	sub	sp, #12
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004bca:	bf00      	nop
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b083      	sub	sp, #12
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004bde:	bf00      	nop
 8004be0:	370c      	adds	r7, #12
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr

08004bea <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004bea:	b480      	push	{r7}
 8004bec:	b083      	sub	sp, #12
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
 8004bf2:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004c08:	4b30      	ldr	r3, [pc, #192]	@ (8004ccc <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8004c0a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a2f      	ldr	r2, [pc, #188]	@ (8004cd0 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d103      	bne.n	8004c1e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004c1c:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a2c      	ldr	r2, [pc, #176]	@ (8004cd4 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d103      	bne.n	8004c30 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8004c2e:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	68ba      	ldr	r2, [r7, #8]
 8004c34:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c3e:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c46:	041a      	lsls	r2, r3, #16
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c64:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c6c:	061a      	lsls	r2, r3, #24
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	60fb      	str	r3, [r7, #12]
 8004ca4:	e005      	b.n	8004cb2 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	3304      	adds	r3, #4
 8004cb0:	60fb      	str	r3, [r7, #12]
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d3f3      	bcc.n	8004ca6 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8004cbe:	bf00      	nop
 8004cc0:	bf00      	nop
 8004cc2:	3714      	adds	r7, #20
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr
 8004ccc:	4000a400 	.word	0x4000a400
 8004cd0:	40006800 	.word	0x40006800
 8004cd4:	40006c00 	.word	0x40006c00

08004cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b087      	sub	sp, #28
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004ce6:	e15a      	b.n	8004f9e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	2101      	movs	r1, #1
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	f000 814c 	beq.w	8004f98 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f003 0303 	and.w	r3, r3, #3
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d005      	beq.n	8004d18 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d130      	bne.n	8004d7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	2203      	movs	r2, #3
 8004d24:	fa02 f303 	lsl.w	r3, r2, r3
 8004d28:	43db      	mvns	r3, r3
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	68da      	ldr	r2, [r3, #12]
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	005b      	lsls	r3, r3, #1
 8004d38:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d4e:	2201      	movs	r2, #1
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	fa02 f303 	lsl.w	r3, r2, r3
 8004d56:	43db      	mvns	r3, r3
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	091b      	lsrs	r3, r3, #4
 8004d64:	f003 0201 	and.w	r2, r3, #1
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f003 0303 	and.w	r3, r3, #3
 8004d82:	2b03      	cmp	r3, #3
 8004d84:	d017      	beq.n	8004db6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	005b      	lsls	r3, r3, #1
 8004d90:	2203      	movs	r2, #3
 8004d92:	fa02 f303 	lsl.w	r3, r2, r3
 8004d96:	43db      	mvns	r3, r3
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	689a      	ldr	r2, [r3, #8]
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	005b      	lsls	r3, r3, #1
 8004da6:	fa02 f303 	lsl.w	r3, r2, r3
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f003 0303 	and.w	r3, r3, #3
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d123      	bne.n	8004e0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	08da      	lsrs	r2, r3, #3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	3208      	adds	r2, #8
 8004dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	f003 0307 	and.w	r3, r3, #7
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	220f      	movs	r2, #15
 8004dda:	fa02 f303 	lsl.w	r3, r2, r3
 8004dde:	43db      	mvns	r3, r3
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	4013      	ands	r3, r2
 8004de4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	691a      	ldr	r2, [r3, #16]
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	f003 0307 	and.w	r3, r3, #7
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	fa02 f303 	lsl.w	r3, r2, r3
 8004df6:	693a      	ldr	r2, [r7, #16]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	08da      	lsrs	r2, r3, #3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	3208      	adds	r2, #8
 8004e04:	6939      	ldr	r1, [r7, #16]
 8004e06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	005b      	lsls	r3, r3, #1
 8004e14:	2203      	movs	r2, #3
 8004e16:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1a:	43db      	mvns	r3, r3
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	4013      	ands	r3, r2
 8004e20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f003 0203 	and.w	r2, r3, #3
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	005b      	lsls	r3, r3, #1
 8004e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	f000 80a6 	beq.w	8004f98 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e4c:	4b5b      	ldr	r3, [pc, #364]	@ (8004fbc <HAL_GPIO_Init+0x2e4>)
 8004e4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e50:	4a5a      	ldr	r2, [pc, #360]	@ (8004fbc <HAL_GPIO_Init+0x2e4>)
 8004e52:	f043 0301 	orr.w	r3, r3, #1
 8004e56:	6613      	str	r3, [r2, #96]	@ 0x60
 8004e58:	4b58      	ldr	r3, [pc, #352]	@ (8004fbc <HAL_GPIO_Init+0x2e4>)
 8004e5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	60bb      	str	r3, [r7, #8]
 8004e62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e64:	4a56      	ldr	r2, [pc, #344]	@ (8004fc0 <HAL_GPIO_Init+0x2e8>)
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	089b      	lsrs	r3, r3, #2
 8004e6a:	3302      	adds	r3, #2
 8004e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	f003 0303 	and.w	r3, r3, #3
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	220f      	movs	r2, #15
 8004e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e80:	43db      	mvns	r3, r3
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	4013      	ands	r3, r2
 8004e86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004e8e:	d01f      	beq.n	8004ed0 <HAL_GPIO_Init+0x1f8>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a4c      	ldr	r2, [pc, #304]	@ (8004fc4 <HAL_GPIO_Init+0x2ec>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d019      	beq.n	8004ecc <HAL_GPIO_Init+0x1f4>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a4b      	ldr	r2, [pc, #300]	@ (8004fc8 <HAL_GPIO_Init+0x2f0>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d013      	beq.n	8004ec8 <HAL_GPIO_Init+0x1f0>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a4a      	ldr	r2, [pc, #296]	@ (8004fcc <HAL_GPIO_Init+0x2f4>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d00d      	beq.n	8004ec4 <HAL_GPIO_Init+0x1ec>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a49      	ldr	r2, [pc, #292]	@ (8004fd0 <HAL_GPIO_Init+0x2f8>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d007      	beq.n	8004ec0 <HAL_GPIO_Init+0x1e8>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a48      	ldr	r2, [pc, #288]	@ (8004fd4 <HAL_GPIO_Init+0x2fc>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d101      	bne.n	8004ebc <HAL_GPIO_Init+0x1e4>
 8004eb8:	2305      	movs	r3, #5
 8004eba:	e00a      	b.n	8004ed2 <HAL_GPIO_Init+0x1fa>
 8004ebc:	2306      	movs	r3, #6
 8004ebe:	e008      	b.n	8004ed2 <HAL_GPIO_Init+0x1fa>
 8004ec0:	2304      	movs	r3, #4
 8004ec2:	e006      	b.n	8004ed2 <HAL_GPIO_Init+0x1fa>
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e004      	b.n	8004ed2 <HAL_GPIO_Init+0x1fa>
 8004ec8:	2302      	movs	r3, #2
 8004eca:	e002      	b.n	8004ed2 <HAL_GPIO_Init+0x1fa>
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e000      	b.n	8004ed2 <HAL_GPIO_Init+0x1fa>
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	f002 0203 	and.w	r2, r2, #3
 8004ed8:	0092      	lsls	r2, r2, #2
 8004eda:	4093      	lsls	r3, r2
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ee2:	4937      	ldr	r1, [pc, #220]	@ (8004fc0 <HAL_GPIO_Init+0x2e8>)
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	089b      	lsrs	r3, r3, #2
 8004ee8:	3302      	adds	r3, #2
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ef0:	4b39      	ldr	r3, [pc, #228]	@ (8004fd8 <HAL_GPIO_Init+0x300>)
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	43db      	mvns	r3, r3
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	4013      	ands	r3, r2
 8004efe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d003      	beq.n	8004f14 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004f14:	4a30      	ldr	r2, [pc, #192]	@ (8004fd8 <HAL_GPIO_Init+0x300>)
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004f1a:	4b2f      	ldr	r3, [pc, #188]	@ (8004fd8 <HAL_GPIO_Init+0x300>)
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	43db      	mvns	r3, r3
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	4013      	ands	r3, r2
 8004f28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d003      	beq.n	8004f3e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004f3e:	4a26      	ldr	r2, [pc, #152]	@ (8004fd8 <HAL_GPIO_Init+0x300>)
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004f44:	4b24      	ldr	r3, [pc, #144]	@ (8004fd8 <HAL_GPIO_Init+0x300>)
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	43db      	mvns	r3, r3
 8004f4e:	693a      	ldr	r2, [r7, #16]
 8004f50:	4013      	ands	r3, r2
 8004f52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d003      	beq.n	8004f68 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004f68:	4a1b      	ldr	r2, [pc, #108]	@ (8004fd8 <HAL_GPIO_Init+0x300>)
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004f6e:	4b1a      	ldr	r3, [pc, #104]	@ (8004fd8 <HAL_GPIO_Init+0x300>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	43db      	mvns	r3, r3
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d003      	beq.n	8004f92 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004f92:	4a11      	ldr	r2, [pc, #68]	@ (8004fd8 <HAL_GPIO_Init+0x300>)
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f47f ae9d 	bne.w	8004ce8 <HAL_GPIO_Init+0x10>
  }
}
 8004fae:	bf00      	nop
 8004fb0:	bf00      	nop
 8004fb2:	371c      	adds	r7, #28
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr
 8004fbc:	40021000 	.word	0x40021000
 8004fc0:	40010000 	.word	0x40010000
 8004fc4:	48000400 	.word	0x48000400
 8004fc8:	48000800 	.word	0x48000800
 8004fcc:	48000c00 	.word	0x48000c00
 8004fd0:	48001000 	.word	0x48001000
 8004fd4:	48001400 	.word	0x48001400
 8004fd8:	40010400 	.word	0x40010400

08004fdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	807b      	strh	r3, [r7, #2]
 8004fe8:	4613      	mov	r3, r2
 8004fea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004fec:	787b      	ldrb	r3, [r7, #1]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d003      	beq.n	8004ffa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ff2:	887a      	ldrh	r2, [r7, #2]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ff8:	e002      	b.n	8005000 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ffa:	887a      	ldrh	r2, [r7, #2]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	460b      	mov	r3, r1
 8005016:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	695b      	ldr	r3, [r3, #20]
 800501c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800501e:	887a      	ldrh	r2, [r7, #2]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	4013      	ands	r3, r2
 8005024:	041a      	lsls	r2, r3, #16
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	43d9      	mvns	r1, r3
 800502a:	887b      	ldrh	r3, [r7, #2]
 800502c:	400b      	ands	r3, r1
 800502e:	431a      	orrs	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	619a      	str	r2, [r3, #24]
}
 8005034:	bf00      	nop
 8005036:	3714      	adds	r7, #20
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d141      	bne.n	80050d2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800504e:	4b4b      	ldr	r3, [pc, #300]	@ (800517c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005056:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800505a:	d131      	bne.n	80050c0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800505c:	4b47      	ldr	r3, [pc, #284]	@ (800517c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800505e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005062:	4a46      	ldr	r2, [pc, #280]	@ (800517c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005064:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005068:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800506c:	4b43      	ldr	r3, [pc, #268]	@ (800517c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005074:	4a41      	ldr	r2, [pc, #260]	@ (800517c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005076:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800507a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800507c:	4b40      	ldr	r3, [pc, #256]	@ (8005180 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2232      	movs	r2, #50	@ 0x32
 8005082:	fb02 f303 	mul.w	r3, r2, r3
 8005086:	4a3f      	ldr	r2, [pc, #252]	@ (8005184 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005088:	fba2 2303 	umull	r2, r3, r2, r3
 800508c:	0c9b      	lsrs	r3, r3, #18
 800508e:	3301      	adds	r3, #1
 8005090:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005092:	e002      	b.n	800509a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	3b01      	subs	r3, #1
 8005098:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800509a:	4b38      	ldr	r3, [pc, #224]	@ (800517c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050a6:	d102      	bne.n	80050ae <HAL_PWREx_ControlVoltageScaling+0x6e>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d1f2      	bne.n	8005094 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80050ae:	4b33      	ldr	r3, [pc, #204]	@ (800517c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050ba:	d158      	bne.n	800516e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e057      	b.n	8005170 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050c0:	4b2e      	ldr	r3, [pc, #184]	@ (800517c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050c6:	4a2d      	ldr	r2, [pc, #180]	@ (800517c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80050d0:	e04d      	b.n	800516e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050d8:	d141      	bne.n	800515e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80050da:	4b28      	ldr	r3, [pc, #160]	@ (800517c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80050e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050e6:	d131      	bne.n	800514c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050e8:	4b24      	ldr	r3, [pc, #144]	@ (800517c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050ee:	4a23      	ldr	r2, [pc, #140]	@ (800517c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80050f8:	4b20      	ldr	r3, [pc, #128]	@ (800517c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005100:	4a1e      	ldr	r2, [pc, #120]	@ (800517c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005102:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005106:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005108:	4b1d      	ldr	r3, [pc, #116]	@ (8005180 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2232      	movs	r2, #50	@ 0x32
 800510e:	fb02 f303 	mul.w	r3, r2, r3
 8005112:	4a1c      	ldr	r2, [pc, #112]	@ (8005184 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005114:	fba2 2303 	umull	r2, r3, r2, r3
 8005118:	0c9b      	lsrs	r3, r3, #18
 800511a:	3301      	adds	r3, #1
 800511c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800511e:	e002      	b.n	8005126 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	3b01      	subs	r3, #1
 8005124:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005126:	4b15      	ldr	r3, [pc, #84]	@ (800517c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800512e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005132:	d102      	bne.n	800513a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1f2      	bne.n	8005120 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800513a:	4b10      	ldr	r3, [pc, #64]	@ (800517c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005142:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005146:	d112      	bne.n	800516e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e011      	b.n	8005170 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800514c:	4b0b      	ldr	r3, [pc, #44]	@ (800517c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800514e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005152:	4a0a      	ldr	r2, [pc, #40]	@ (800517c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005154:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005158:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800515c:	e007      	b.n	800516e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800515e:	4b07      	ldr	r3, [pc, #28]	@ (800517c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005166:	4a05      	ldr	r2, [pc, #20]	@ (800517c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005168:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800516c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3714      	adds	r7, #20
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	40007000 	.word	0x40007000
 8005180:	20000004 	.word	0x20000004
 8005184:	431bde83 	.word	0x431bde83

08005188 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005188:	b480      	push	{r7}
 800518a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800518c:	4b05      	ldr	r3, [pc, #20]	@ (80051a4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	4a04      	ldr	r2, [pc, #16]	@ (80051a4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005192:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005196:	6093      	str	r3, [r2, #8]
}
 8005198:	bf00      	nop
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	40007000 	.word	0x40007000

080051a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b088      	sub	sp, #32
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d101      	bne.n	80051ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e2fe      	b.n	80057b8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d075      	beq.n	80052b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051c6:	4b97      	ldr	r3, [pc, #604]	@ (8005424 <HAL_RCC_OscConfig+0x27c>)
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f003 030c 	and.w	r3, r3, #12
 80051ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051d0:	4b94      	ldr	r3, [pc, #592]	@ (8005424 <HAL_RCC_OscConfig+0x27c>)
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	f003 0303 	and.w	r3, r3, #3
 80051d8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	2b0c      	cmp	r3, #12
 80051de:	d102      	bne.n	80051e6 <HAL_RCC_OscConfig+0x3e>
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	2b03      	cmp	r3, #3
 80051e4:	d002      	beq.n	80051ec <HAL_RCC_OscConfig+0x44>
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	2b08      	cmp	r3, #8
 80051ea:	d10b      	bne.n	8005204 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051ec:	4b8d      	ldr	r3, [pc, #564]	@ (8005424 <HAL_RCC_OscConfig+0x27c>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d05b      	beq.n	80052b0 <HAL_RCC_OscConfig+0x108>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d157      	bne.n	80052b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e2d9      	b.n	80057b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800520c:	d106      	bne.n	800521c <HAL_RCC_OscConfig+0x74>
 800520e:	4b85      	ldr	r3, [pc, #532]	@ (8005424 <HAL_RCC_OscConfig+0x27c>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a84      	ldr	r2, [pc, #528]	@ (8005424 <HAL_RCC_OscConfig+0x27c>)
 8005214:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005218:	6013      	str	r3, [r2, #0]
 800521a:	e01d      	b.n	8005258 <HAL_RCC_OscConfig+0xb0>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005224:	d10c      	bne.n	8005240 <HAL_RCC_OscConfig+0x98>
 8005226:	4b7f      	ldr	r3, [pc, #508]	@ (8005424 <HAL_RCC_OscConfig+0x27c>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a7e      	ldr	r2, [pc, #504]	@ (8005424 <HAL_RCC_OscConfig+0x27c>)
 800522c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005230:	6013      	str	r3, [r2, #0]
 8005232:	4b7c      	ldr	r3, [pc, #496]	@ (8005424 <HAL_RCC_OscConfig+0x27c>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a7b      	ldr	r2, [pc, #492]	@ (8005424 <HAL_RCC_OscConfig+0x27c>)
 8005238:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800523c:	6013      	str	r3, [r2, #0]
 800523e:	e00b      	b.n	8005258 <HAL_RCC_OscConfig+0xb0>
 8005240:	4b78      	ldr	r3, [pc, #480]	@ (8005424 <HAL_RCC_OscConfig+0x27c>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a77      	ldr	r2, [pc, #476]	@ (8005424 <HAL_RCC_OscConfig+0x27c>)
 8005246:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800524a:	6013      	str	r3, [r2, #0]
 800524c:	4b75      	ldr	r3, [pc, #468]	@ (8005424 <HAL_RCC_OscConfig+0x27c>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a74      	ldr	r2, [pc, #464]	@ (8005424 <HAL_RCC_OscConfig+0x27c>)
 8005252:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005256:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d013      	beq.n	8005288 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005260:	f7fe fbda 	bl	8003a18 <HAL_GetTick>
 8005264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005266:	e008      	b.n	800527a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005268:	f7fe fbd6 	bl	8003a18 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b64      	cmp	r3, #100	@ 0x64
 8005274:	d901      	bls.n	800527a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e29e      	b.n	80057b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800527a:	4b6a      	ldr	r3, [pc, #424]	@ (8005424 <HAL_RCC_OscConfig+0x27c>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d0f0      	beq.n	8005268 <HAL_RCC_OscConfig+0xc0>
 8005286:	e014      	b.n	80052b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005288:	f7fe fbc6 	bl	8003a18 <HAL_GetTick>
 800528c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800528e:	e008      	b.n	80052a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005290:	f7fe fbc2 	bl	8003a18 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	2b64      	cmp	r3, #100	@ 0x64
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e28a      	b.n	80057b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80052a2:	4b60      	ldr	r3, [pc, #384]	@ (8005424 <HAL_RCC_OscConfig+0x27c>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1f0      	bne.n	8005290 <HAL_RCC_OscConfig+0xe8>
 80052ae:	e000      	b.n	80052b2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d075      	beq.n	80053aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052be:	4b59      	ldr	r3, [pc, #356]	@ (8005424 <HAL_RCC_OscConfig+0x27c>)
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f003 030c 	and.w	r3, r3, #12
 80052c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052c8:	4b56      	ldr	r3, [pc, #344]	@ (8005424 <HAL_RCC_OscConfig+0x27c>)
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	f003 0303 	and.w	r3, r3, #3
 80052d0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	2b0c      	cmp	r3, #12
 80052d6:	d102      	bne.n	80052de <HAL_RCC_OscConfig+0x136>
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d002      	beq.n	80052e4 <HAL_RCC_OscConfig+0x13c>
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	2b04      	cmp	r3, #4
 80052e2:	d11f      	bne.n	8005324 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052e4:	4b4f      	ldr	r3, [pc, #316]	@ (8005424 <HAL_RCC_OscConfig+0x27c>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d005      	beq.n	80052fc <HAL_RCC_OscConfig+0x154>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d101      	bne.n	80052fc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e25d      	b.n	80057b8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052fc:	4b49      	ldr	r3, [pc, #292]	@ (8005424 <HAL_RCC_OscConfig+0x27c>)
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	061b      	lsls	r3, r3, #24
 800530a:	4946      	ldr	r1, [pc, #280]	@ (8005424 <HAL_RCC_OscConfig+0x27c>)
 800530c:	4313      	orrs	r3, r2
 800530e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005310:	4b45      	ldr	r3, [pc, #276]	@ (8005428 <HAL_RCC_OscConfig+0x280>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4618      	mov	r0, r3
 8005316:	f7fe fb33 	bl	8003980 <HAL_InitTick>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d043      	beq.n	80053a8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e249      	b.n	80057b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d023      	beq.n	8005374 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800532c:	4b3d      	ldr	r3, [pc, #244]	@ (8005424 <HAL_RCC_OscConfig+0x27c>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a3c      	ldr	r2, [pc, #240]	@ (8005424 <HAL_RCC_OscConfig+0x27c>)
 8005332:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005336:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005338:	f7fe fb6e 	bl	8003a18 <HAL_GetTick>
 800533c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800533e:	e008      	b.n	8005352 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005340:	f7fe fb6a 	bl	8003a18 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	2b02      	cmp	r3, #2
 800534c:	d901      	bls.n	8005352 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e232      	b.n	80057b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005352:	4b34      	ldr	r3, [pc, #208]	@ (8005424 <HAL_RCC_OscConfig+0x27c>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800535a:	2b00      	cmp	r3, #0
 800535c:	d0f0      	beq.n	8005340 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800535e:	4b31      	ldr	r3, [pc, #196]	@ (8005424 <HAL_RCC_OscConfig+0x27c>)
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	061b      	lsls	r3, r3, #24
 800536c:	492d      	ldr	r1, [pc, #180]	@ (8005424 <HAL_RCC_OscConfig+0x27c>)
 800536e:	4313      	orrs	r3, r2
 8005370:	604b      	str	r3, [r1, #4]
 8005372:	e01a      	b.n	80053aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005374:	4b2b      	ldr	r3, [pc, #172]	@ (8005424 <HAL_RCC_OscConfig+0x27c>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a2a      	ldr	r2, [pc, #168]	@ (8005424 <HAL_RCC_OscConfig+0x27c>)
 800537a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800537e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005380:	f7fe fb4a 	bl	8003a18 <HAL_GetTick>
 8005384:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005386:	e008      	b.n	800539a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005388:	f7fe fb46 	bl	8003a18 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	2b02      	cmp	r3, #2
 8005394:	d901      	bls.n	800539a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e20e      	b.n	80057b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800539a:	4b22      	ldr	r3, [pc, #136]	@ (8005424 <HAL_RCC_OscConfig+0x27c>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1f0      	bne.n	8005388 <HAL_RCC_OscConfig+0x1e0>
 80053a6:	e000      	b.n	80053aa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053a8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0308 	and.w	r3, r3, #8
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d041      	beq.n	800543a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d01c      	beq.n	80053f8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053be:	4b19      	ldr	r3, [pc, #100]	@ (8005424 <HAL_RCC_OscConfig+0x27c>)
 80053c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053c4:	4a17      	ldr	r2, [pc, #92]	@ (8005424 <HAL_RCC_OscConfig+0x27c>)
 80053c6:	f043 0301 	orr.w	r3, r3, #1
 80053ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053ce:	f7fe fb23 	bl	8003a18 <HAL_GetTick>
 80053d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053d4:	e008      	b.n	80053e8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053d6:	f7fe fb1f 	bl	8003a18 <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d901      	bls.n	80053e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e1e7      	b.n	80057b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053e8:	4b0e      	ldr	r3, [pc, #56]	@ (8005424 <HAL_RCC_OscConfig+0x27c>)
 80053ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053ee:	f003 0302 	and.w	r3, r3, #2
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d0ef      	beq.n	80053d6 <HAL_RCC_OscConfig+0x22e>
 80053f6:	e020      	b.n	800543a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053f8:	4b0a      	ldr	r3, [pc, #40]	@ (8005424 <HAL_RCC_OscConfig+0x27c>)
 80053fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053fe:	4a09      	ldr	r2, [pc, #36]	@ (8005424 <HAL_RCC_OscConfig+0x27c>)
 8005400:	f023 0301 	bic.w	r3, r3, #1
 8005404:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005408:	f7fe fb06 	bl	8003a18 <HAL_GetTick>
 800540c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800540e:	e00d      	b.n	800542c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005410:	f7fe fb02 	bl	8003a18 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	2b02      	cmp	r3, #2
 800541c:	d906      	bls.n	800542c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e1ca      	b.n	80057b8 <HAL_RCC_OscConfig+0x610>
 8005422:	bf00      	nop
 8005424:	40021000 	.word	0x40021000
 8005428:	20000054 	.word	0x20000054
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800542c:	4b8c      	ldr	r3, [pc, #560]	@ (8005660 <HAL_RCC_OscConfig+0x4b8>)
 800542e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1ea      	bne.n	8005410 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0304 	and.w	r3, r3, #4
 8005442:	2b00      	cmp	r3, #0
 8005444:	f000 80a6 	beq.w	8005594 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005448:	2300      	movs	r3, #0
 800544a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800544c:	4b84      	ldr	r3, [pc, #528]	@ (8005660 <HAL_RCC_OscConfig+0x4b8>)
 800544e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005450:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d101      	bne.n	800545c <HAL_RCC_OscConfig+0x2b4>
 8005458:	2301      	movs	r3, #1
 800545a:	e000      	b.n	800545e <HAL_RCC_OscConfig+0x2b6>
 800545c:	2300      	movs	r3, #0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00d      	beq.n	800547e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005462:	4b7f      	ldr	r3, [pc, #508]	@ (8005660 <HAL_RCC_OscConfig+0x4b8>)
 8005464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005466:	4a7e      	ldr	r2, [pc, #504]	@ (8005660 <HAL_RCC_OscConfig+0x4b8>)
 8005468:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800546c:	6593      	str	r3, [r2, #88]	@ 0x58
 800546e:	4b7c      	ldr	r3, [pc, #496]	@ (8005660 <HAL_RCC_OscConfig+0x4b8>)
 8005470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005472:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005476:	60fb      	str	r3, [r7, #12]
 8005478:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800547a:	2301      	movs	r3, #1
 800547c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800547e:	4b79      	ldr	r3, [pc, #484]	@ (8005664 <HAL_RCC_OscConfig+0x4bc>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005486:	2b00      	cmp	r3, #0
 8005488:	d118      	bne.n	80054bc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800548a:	4b76      	ldr	r3, [pc, #472]	@ (8005664 <HAL_RCC_OscConfig+0x4bc>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a75      	ldr	r2, [pc, #468]	@ (8005664 <HAL_RCC_OscConfig+0x4bc>)
 8005490:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005494:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005496:	f7fe fabf 	bl	8003a18 <HAL_GetTick>
 800549a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800549c:	e008      	b.n	80054b0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800549e:	f7fe fabb 	bl	8003a18 <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d901      	bls.n	80054b0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e183      	b.n	80057b8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054b0:	4b6c      	ldr	r3, [pc, #432]	@ (8005664 <HAL_RCC_OscConfig+0x4bc>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d0f0      	beq.n	800549e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d108      	bne.n	80054d6 <HAL_RCC_OscConfig+0x32e>
 80054c4:	4b66      	ldr	r3, [pc, #408]	@ (8005660 <HAL_RCC_OscConfig+0x4b8>)
 80054c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054ca:	4a65      	ldr	r2, [pc, #404]	@ (8005660 <HAL_RCC_OscConfig+0x4b8>)
 80054cc:	f043 0301 	orr.w	r3, r3, #1
 80054d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054d4:	e024      	b.n	8005520 <HAL_RCC_OscConfig+0x378>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	2b05      	cmp	r3, #5
 80054dc:	d110      	bne.n	8005500 <HAL_RCC_OscConfig+0x358>
 80054de:	4b60      	ldr	r3, [pc, #384]	@ (8005660 <HAL_RCC_OscConfig+0x4b8>)
 80054e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054e4:	4a5e      	ldr	r2, [pc, #376]	@ (8005660 <HAL_RCC_OscConfig+0x4b8>)
 80054e6:	f043 0304 	orr.w	r3, r3, #4
 80054ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054ee:	4b5c      	ldr	r3, [pc, #368]	@ (8005660 <HAL_RCC_OscConfig+0x4b8>)
 80054f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054f4:	4a5a      	ldr	r2, [pc, #360]	@ (8005660 <HAL_RCC_OscConfig+0x4b8>)
 80054f6:	f043 0301 	orr.w	r3, r3, #1
 80054fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054fe:	e00f      	b.n	8005520 <HAL_RCC_OscConfig+0x378>
 8005500:	4b57      	ldr	r3, [pc, #348]	@ (8005660 <HAL_RCC_OscConfig+0x4b8>)
 8005502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005506:	4a56      	ldr	r2, [pc, #344]	@ (8005660 <HAL_RCC_OscConfig+0x4b8>)
 8005508:	f023 0301 	bic.w	r3, r3, #1
 800550c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005510:	4b53      	ldr	r3, [pc, #332]	@ (8005660 <HAL_RCC_OscConfig+0x4b8>)
 8005512:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005516:	4a52      	ldr	r2, [pc, #328]	@ (8005660 <HAL_RCC_OscConfig+0x4b8>)
 8005518:	f023 0304 	bic.w	r3, r3, #4
 800551c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d016      	beq.n	8005556 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005528:	f7fe fa76 	bl	8003a18 <HAL_GetTick>
 800552c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800552e:	e00a      	b.n	8005546 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005530:	f7fe fa72 	bl	8003a18 <HAL_GetTick>
 8005534:	4602      	mov	r2, r0
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800553e:	4293      	cmp	r3, r2
 8005540:	d901      	bls.n	8005546 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e138      	b.n	80057b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005546:	4b46      	ldr	r3, [pc, #280]	@ (8005660 <HAL_RCC_OscConfig+0x4b8>)
 8005548:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800554c:	f003 0302 	and.w	r3, r3, #2
 8005550:	2b00      	cmp	r3, #0
 8005552:	d0ed      	beq.n	8005530 <HAL_RCC_OscConfig+0x388>
 8005554:	e015      	b.n	8005582 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005556:	f7fe fa5f 	bl	8003a18 <HAL_GetTick>
 800555a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800555c:	e00a      	b.n	8005574 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800555e:	f7fe fa5b 	bl	8003a18 <HAL_GetTick>
 8005562:	4602      	mov	r2, r0
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	f241 3288 	movw	r2, #5000	@ 0x1388
 800556c:	4293      	cmp	r3, r2
 800556e:	d901      	bls.n	8005574 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e121      	b.n	80057b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005574:	4b3a      	ldr	r3, [pc, #232]	@ (8005660 <HAL_RCC_OscConfig+0x4b8>)
 8005576:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800557a:	f003 0302 	and.w	r3, r3, #2
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1ed      	bne.n	800555e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005582:	7ffb      	ldrb	r3, [r7, #31]
 8005584:	2b01      	cmp	r3, #1
 8005586:	d105      	bne.n	8005594 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005588:	4b35      	ldr	r3, [pc, #212]	@ (8005660 <HAL_RCC_OscConfig+0x4b8>)
 800558a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800558c:	4a34      	ldr	r2, [pc, #208]	@ (8005660 <HAL_RCC_OscConfig+0x4b8>)
 800558e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005592:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0320 	and.w	r3, r3, #32
 800559c:	2b00      	cmp	r3, #0
 800559e:	d03c      	beq.n	800561a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d01c      	beq.n	80055e2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80055a8:	4b2d      	ldr	r3, [pc, #180]	@ (8005660 <HAL_RCC_OscConfig+0x4b8>)
 80055aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055ae:	4a2c      	ldr	r2, [pc, #176]	@ (8005660 <HAL_RCC_OscConfig+0x4b8>)
 80055b0:	f043 0301 	orr.w	r3, r3, #1
 80055b4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055b8:	f7fe fa2e 	bl	8003a18 <HAL_GetTick>
 80055bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80055be:	e008      	b.n	80055d2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055c0:	f7fe fa2a 	bl	8003a18 <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d901      	bls.n	80055d2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e0f2      	b.n	80057b8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80055d2:	4b23      	ldr	r3, [pc, #140]	@ (8005660 <HAL_RCC_OscConfig+0x4b8>)
 80055d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055d8:	f003 0302 	and.w	r3, r3, #2
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d0ef      	beq.n	80055c0 <HAL_RCC_OscConfig+0x418>
 80055e0:	e01b      	b.n	800561a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80055e2:	4b1f      	ldr	r3, [pc, #124]	@ (8005660 <HAL_RCC_OscConfig+0x4b8>)
 80055e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055e8:	4a1d      	ldr	r2, [pc, #116]	@ (8005660 <HAL_RCC_OscConfig+0x4b8>)
 80055ea:	f023 0301 	bic.w	r3, r3, #1
 80055ee:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055f2:	f7fe fa11 	bl	8003a18 <HAL_GetTick>
 80055f6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80055f8:	e008      	b.n	800560c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055fa:	f7fe fa0d 	bl	8003a18 <HAL_GetTick>
 80055fe:	4602      	mov	r2, r0
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	2b02      	cmp	r3, #2
 8005606:	d901      	bls.n	800560c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e0d5      	b.n	80057b8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800560c:	4b14      	ldr	r3, [pc, #80]	@ (8005660 <HAL_RCC_OscConfig+0x4b8>)
 800560e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1ef      	bne.n	80055fa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	69db      	ldr	r3, [r3, #28]
 800561e:	2b00      	cmp	r3, #0
 8005620:	f000 80c9 	beq.w	80057b6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005624:	4b0e      	ldr	r3, [pc, #56]	@ (8005660 <HAL_RCC_OscConfig+0x4b8>)
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f003 030c 	and.w	r3, r3, #12
 800562c:	2b0c      	cmp	r3, #12
 800562e:	f000 8083 	beq.w	8005738 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	69db      	ldr	r3, [r3, #28]
 8005636:	2b02      	cmp	r3, #2
 8005638:	d15e      	bne.n	80056f8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800563a:	4b09      	ldr	r3, [pc, #36]	@ (8005660 <HAL_RCC_OscConfig+0x4b8>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a08      	ldr	r2, [pc, #32]	@ (8005660 <HAL_RCC_OscConfig+0x4b8>)
 8005640:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005644:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005646:	f7fe f9e7 	bl	8003a18 <HAL_GetTick>
 800564a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800564c:	e00c      	b.n	8005668 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800564e:	f7fe f9e3 	bl	8003a18 <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	2b02      	cmp	r3, #2
 800565a:	d905      	bls.n	8005668 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e0ab      	b.n	80057b8 <HAL_RCC_OscConfig+0x610>
 8005660:	40021000 	.word	0x40021000
 8005664:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005668:	4b55      	ldr	r3, [pc, #340]	@ (80057c0 <HAL_RCC_OscConfig+0x618>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d1ec      	bne.n	800564e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005674:	4b52      	ldr	r3, [pc, #328]	@ (80057c0 <HAL_RCC_OscConfig+0x618>)
 8005676:	68da      	ldr	r2, [r3, #12]
 8005678:	4b52      	ldr	r3, [pc, #328]	@ (80057c4 <HAL_RCC_OscConfig+0x61c>)
 800567a:	4013      	ands	r3, r2
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	6a11      	ldr	r1, [r2, #32]
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005684:	3a01      	subs	r2, #1
 8005686:	0112      	lsls	r2, r2, #4
 8005688:	4311      	orrs	r1, r2
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800568e:	0212      	lsls	r2, r2, #8
 8005690:	4311      	orrs	r1, r2
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005696:	0852      	lsrs	r2, r2, #1
 8005698:	3a01      	subs	r2, #1
 800569a:	0552      	lsls	r2, r2, #21
 800569c:	4311      	orrs	r1, r2
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80056a2:	0852      	lsrs	r2, r2, #1
 80056a4:	3a01      	subs	r2, #1
 80056a6:	0652      	lsls	r2, r2, #25
 80056a8:	4311      	orrs	r1, r2
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80056ae:	06d2      	lsls	r2, r2, #27
 80056b0:	430a      	orrs	r2, r1
 80056b2:	4943      	ldr	r1, [pc, #268]	@ (80057c0 <HAL_RCC_OscConfig+0x618>)
 80056b4:	4313      	orrs	r3, r2
 80056b6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056b8:	4b41      	ldr	r3, [pc, #260]	@ (80057c0 <HAL_RCC_OscConfig+0x618>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a40      	ldr	r2, [pc, #256]	@ (80057c0 <HAL_RCC_OscConfig+0x618>)
 80056be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80056c2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80056c4:	4b3e      	ldr	r3, [pc, #248]	@ (80057c0 <HAL_RCC_OscConfig+0x618>)
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	4a3d      	ldr	r2, [pc, #244]	@ (80057c0 <HAL_RCC_OscConfig+0x618>)
 80056ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80056ce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056d0:	f7fe f9a2 	bl	8003a18 <HAL_GetTick>
 80056d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056d6:	e008      	b.n	80056ea <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056d8:	f7fe f99e 	bl	8003a18 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d901      	bls.n	80056ea <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e066      	b.n	80057b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056ea:	4b35      	ldr	r3, [pc, #212]	@ (80057c0 <HAL_RCC_OscConfig+0x618>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d0f0      	beq.n	80056d8 <HAL_RCC_OscConfig+0x530>
 80056f6:	e05e      	b.n	80057b6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056f8:	4b31      	ldr	r3, [pc, #196]	@ (80057c0 <HAL_RCC_OscConfig+0x618>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a30      	ldr	r2, [pc, #192]	@ (80057c0 <HAL_RCC_OscConfig+0x618>)
 80056fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005702:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005704:	f7fe f988 	bl	8003a18 <HAL_GetTick>
 8005708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800570a:	e008      	b.n	800571e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800570c:	f7fe f984 	bl	8003a18 <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	2b02      	cmp	r3, #2
 8005718:	d901      	bls.n	800571e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e04c      	b.n	80057b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800571e:	4b28      	ldr	r3, [pc, #160]	@ (80057c0 <HAL_RCC_OscConfig+0x618>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1f0      	bne.n	800570c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800572a:	4b25      	ldr	r3, [pc, #148]	@ (80057c0 <HAL_RCC_OscConfig+0x618>)
 800572c:	68da      	ldr	r2, [r3, #12]
 800572e:	4924      	ldr	r1, [pc, #144]	@ (80057c0 <HAL_RCC_OscConfig+0x618>)
 8005730:	4b25      	ldr	r3, [pc, #148]	@ (80057c8 <HAL_RCC_OscConfig+0x620>)
 8005732:	4013      	ands	r3, r2
 8005734:	60cb      	str	r3, [r1, #12]
 8005736:	e03e      	b.n	80057b6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	69db      	ldr	r3, [r3, #28]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d101      	bne.n	8005744 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e039      	b.n	80057b8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005744:	4b1e      	ldr	r3, [pc, #120]	@ (80057c0 <HAL_RCC_OscConfig+0x618>)
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	f003 0203 	and.w	r2, r3, #3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a1b      	ldr	r3, [r3, #32]
 8005754:	429a      	cmp	r2, r3
 8005756:	d12c      	bne.n	80057b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005762:	3b01      	subs	r3, #1
 8005764:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005766:	429a      	cmp	r2, r3
 8005768:	d123      	bne.n	80057b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005774:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005776:	429a      	cmp	r2, r3
 8005778:	d11b      	bne.n	80057b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005784:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005786:	429a      	cmp	r2, r3
 8005788:	d113      	bne.n	80057b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005794:	085b      	lsrs	r3, r3, #1
 8005796:	3b01      	subs	r3, #1
 8005798:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800579a:	429a      	cmp	r2, r3
 800579c:	d109      	bne.n	80057b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057a8:	085b      	lsrs	r3, r3, #1
 80057aa:	3b01      	subs	r3, #1
 80057ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d001      	beq.n	80057b6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e000      	b.n	80057b8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3720      	adds	r7, #32
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	40021000 	.word	0x40021000
 80057c4:	019f800c 	.word	0x019f800c
 80057c8:	feeefffc 	.word	0xfeeefffc

080057cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80057d6:	2300      	movs	r3, #0
 80057d8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d101      	bne.n	80057e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e11e      	b.n	8005a22 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80057e4:	4b91      	ldr	r3, [pc, #580]	@ (8005a2c <HAL_RCC_ClockConfig+0x260>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 030f 	and.w	r3, r3, #15
 80057ec:	683a      	ldr	r2, [r7, #0]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d910      	bls.n	8005814 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057f2:	4b8e      	ldr	r3, [pc, #568]	@ (8005a2c <HAL_RCC_ClockConfig+0x260>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f023 020f 	bic.w	r2, r3, #15
 80057fa:	498c      	ldr	r1, [pc, #560]	@ (8005a2c <HAL_RCC_ClockConfig+0x260>)
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	4313      	orrs	r3, r2
 8005800:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005802:	4b8a      	ldr	r3, [pc, #552]	@ (8005a2c <HAL_RCC_ClockConfig+0x260>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 030f 	and.w	r3, r3, #15
 800580a:	683a      	ldr	r2, [r7, #0]
 800580c:	429a      	cmp	r2, r3
 800580e:	d001      	beq.n	8005814 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e106      	b.n	8005a22 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0301 	and.w	r3, r3, #1
 800581c:	2b00      	cmp	r3, #0
 800581e:	d073      	beq.n	8005908 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	2b03      	cmp	r3, #3
 8005826:	d129      	bne.n	800587c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005828:	4b81      	ldr	r3, [pc, #516]	@ (8005a30 <HAL_RCC_ClockConfig+0x264>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d101      	bne.n	8005838 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e0f4      	b.n	8005a22 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005838:	f000 f966 	bl	8005b08 <RCC_GetSysClockFreqFromPLLSource>
 800583c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	4a7c      	ldr	r2, [pc, #496]	@ (8005a34 <HAL_RCC_ClockConfig+0x268>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d93f      	bls.n	80058c6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005846:	4b7a      	ldr	r3, [pc, #488]	@ (8005a30 <HAL_RCC_ClockConfig+0x264>)
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d009      	beq.n	8005866 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800585a:	2b00      	cmp	r3, #0
 800585c:	d033      	beq.n	80058c6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005862:	2b00      	cmp	r3, #0
 8005864:	d12f      	bne.n	80058c6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005866:	4b72      	ldr	r3, [pc, #456]	@ (8005a30 <HAL_RCC_ClockConfig+0x264>)
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800586e:	4a70      	ldr	r2, [pc, #448]	@ (8005a30 <HAL_RCC_ClockConfig+0x264>)
 8005870:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005874:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005876:	2380      	movs	r3, #128	@ 0x80
 8005878:	617b      	str	r3, [r7, #20]
 800587a:	e024      	b.n	80058c6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	2b02      	cmp	r3, #2
 8005882:	d107      	bne.n	8005894 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005884:	4b6a      	ldr	r3, [pc, #424]	@ (8005a30 <HAL_RCC_ClockConfig+0x264>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d109      	bne.n	80058a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e0c6      	b.n	8005a22 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005894:	4b66      	ldr	r3, [pc, #408]	@ (8005a30 <HAL_RCC_ClockConfig+0x264>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800589c:	2b00      	cmp	r3, #0
 800589e:	d101      	bne.n	80058a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e0be      	b.n	8005a22 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80058a4:	f000 f8ce 	bl	8005a44 <HAL_RCC_GetSysClockFreq>
 80058a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	4a61      	ldr	r2, [pc, #388]	@ (8005a34 <HAL_RCC_ClockConfig+0x268>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d909      	bls.n	80058c6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80058b2:	4b5f      	ldr	r3, [pc, #380]	@ (8005a30 <HAL_RCC_ClockConfig+0x264>)
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80058ba:	4a5d      	ldr	r2, [pc, #372]	@ (8005a30 <HAL_RCC_ClockConfig+0x264>)
 80058bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058c0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80058c2:	2380      	movs	r3, #128	@ 0x80
 80058c4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80058c6:	4b5a      	ldr	r3, [pc, #360]	@ (8005a30 <HAL_RCC_ClockConfig+0x264>)
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f023 0203 	bic.w	r2, r3, #3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	4957      	ldr	r1, [pc, #348]	@ (8005a30 <HAL_RCC_ClockConfig+0x264>)
 80058d4:	4313      	orrs	r3, r2
 80058d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058d8:	f7fe f89e 	bl	8003a18 <HAL_GetTick>
 80058dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058de:	e00a      	b.n	80058f6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058e0:	f7fe f89a 	bl	8003a18 <HAL_GetTick>
 80058e4:	4602      	mov	r2, r0
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d901      	bls.n	80058f6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e095      	b.n	8005a22 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058f6:	4b4e      	ldr	r3, [pc, #312]	@ (8005a30 <HAL_RCC_ClockConfig+0x264>)
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f003 020c 	and.w	r2, r3, #12
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	429a      	cmp	r2, r3
 8005906:	d1eb      	bne.n	80058e0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0302 	and.w	r3, r3, #2
 8005910:	2b00      	cmp	r3, #0
 8005912:	d023      	beq.n	800595c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0304 	and.w	r3, r3, #4
 800591c:	2b00      	cmp	r3, #0
 800591e:	d005      	beq.n	800592c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005920:	4b43      	ldr	r3, [pc, #268]	@ (8005a30 <HAL_RCC_ClockConfig+0x264>)
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	4a42      	ldr	r2, [pc, #264]	@ (8005a30 <HAL_RCC_ClockConfig+0x264>)
 8005926:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800592a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0308 	and.w	r3, r3, #8
 8005934:	2b00      	cmp	r3, #0
 8005936:	d007      	beq.n	8005948 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005938:	4b3d      	ldr	r3, [pc, #244]	@ (8005a30 <HAL_RCC_ClockConfig+0x264>)
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005940:	4a3b      	ldr	r2, [pc, #236]	@ (8005a30 <HAL_RCC_ClockConfig+0x264>)
 8005942:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005946:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005948:	4b39      	ldr	r3, [pc, #228]	@ (8005a30 <HAL_RCC_ClockConfig+0x264>)
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	4936      	ldr	r1, [pc, #216]	@ (8005a30 <HAL_RCC_ClockConfig+0x264>)
 8005956:	4313      	orrs	r3, r2
 8005958:	608b      	str	r3, [r1, #8]
 800595a:	e008      	b.n	800596e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	2b80      	cmp	r3, #128	@ 0x80
 8005960:	d105      	bne.n	800596e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005962:	4b33      	ldr	r3, [pc, #204]	@ (8005a30 <HAL_RCC_ClockConfig+0x264>)
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	4a32      	ldr	r2, [pc, #200]	@ (8005a30 <HAL_RCC_ClockConfig+0x264>)
 8005968:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800596c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800596e:	4b2f      	ldr	r3, [pc, #188]	@ (8005a2c <HAL_RCC_ClockConfig+0x260>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 030f 	and.w	r3, r3, #15
 8005976:	683a      	ldr	r2, [r7, #0]
 8005978:	429a      	cmp	r2, r3
 800597a:	d21d      	bcs.n	80059b8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800597c:	4b2b      	ldr	r3, [pc, #172]	@ (8005a2c <HAL_RCC_ClockConfig+0x260>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f023 020f 	bic.w	r2, r3, #15
 8005984:	4929      	ldr	r1, [pc, #164]	@ (8005a2c <HAL_RCC_ClockConfig+0x260>)
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	4313      	orrs	r3, r2
 800598a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800598c:	f7fe f844 	bl	8003a18 <HAL_GetTick>
 8005990:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005992:	e00a      	b.n	80059aa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005994:	f7fe f840 	bl	8003a18 <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d901      	bls.n	80059aa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e03b      	b.n	8005a22 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059aa:	4b20      	ldr	r3, [pc, #128]	@ (8005a2c <HAL_RCC_ClockConfig+0x260>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 030f 	and.w	r3, r3, #15
 80059b2:	683a      	ldr	r2, [r7, #0]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d1ed      	bne.n	8005994 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0304 	and.w	r3, r3, #4
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d008      	beq.n	80059d6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059c4:	4b1a      	ldr	r3, [pc, #104]	@ (8005a30 <HAL_RCC_ClockConfig+0x264>)
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	4917      	ldr	r1, [pc, #92]	@ (8005a30 <HAL_RCC_ClockConfig+0x264>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0308 	and.w	r3, r3, #8
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d009      	beq.n	80059f6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059e2:	4b13      	ldr	r3, [pc, #76]	@ (8005a30 <HAL_RCC_ClockConfig+0x264>)
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	00db      	lsls	r3, r3, #3
 80059f0:	490f      	ldr	r1, [pc, #60]	@ (8005a30 <HAL_RCC_ClockConfig+0x264>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80059f6:	f000 f825 	bl	8005a44 <HAL_RCC_GetSysClockFreq>
 80059fa:	4602      	mov	r2, r0
 80059fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005a30 <HAL_RCC_ClockConfig+0x264>)
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	091b      	lsrs	r3, r3, #4
 8005a02:	f003 030f 	and.w	r3, r3, #15
 8005a06:	490c      	ldr	r1, [pc, #48]	@ (8005a38 <HAL_RCC_ClockConfig+0x26c>)
 8005a08:	5ccb      	ldrb	r3, [r1, r3]
 8005a0a:	f003 031f 	and.w	r3, r3, #31
 8005a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a12:	4a0a      	ldr	r2, [pc, #40]	@ (8005a3c <HAL_RCC_ClockConfig+0x270>)
 8005a14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005a16:	4b0a      	ldr	r3, [pc, #40]	@ (8005a40 <HAL_RCC_ClockConfig+0x274>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f7fd ffb0 	bl	8003980 <HAL_InitTick>
 8005a20:	4603      	mov	r3, r0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3718      	adds	r7, #24
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	40022000 	.word	0x40022000
 8005a30:	40021000 	.word	0x40021000
 8005a34:	04c4b400 	.word	0x04c4b400
 8005a38:	0800a9e0 	.word	0x0800a9e0
 8005a3c:	20000004 	.word	0x20000004
 8005a40:	20000054 	.word	0x20000054

08005a44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b087      	sub	sp, #28
 8005a48:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005a4a:	4b2c      	ldr	r3, [pc, #176]	@ (8005afc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f003 030c 	and.w	r3, r3, #12
 8005a52:	2b04      	cmp	r3, #4
 8005a54:	d102      	bne.n	8005a5c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005a56:	4b2a      	ldr	r3, [pc, #168]	@ (8005b00 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a58:	613b      	str	r3, [r7, #16]
 8005a5a:	e047      	b.n	8005aec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005a5c:	4b27      	ldr	r3, [pc, #156]	@ (8005afc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f003 030c 	and.w	r3, r3, #12
 8005a64:	2b08      	cmp	r3, #8
 8005a66:	d102      	bne.n	8005a6e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005a68:	4b26      	ldr	r3, [pc, #152]	@ (8005b04 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a6a:	613b      	str	r3, [r7, #16]
 8005a6c:	e03e      	b.n	8005aec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005a6e:	4b23      	ldr	r3, [pc, #140]	@ (8005afc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f003 030c 	and.w	r3, r3, #12
 8005a76:	2b0c      	cmp	r3, #12
 8005a78:	d136      	bne.n	8005ae8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a7a:	4b20      	ldr	r3, [pc, #128]	@ (8005afc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	f003 0303 	and.w	r3, r3, #3
 8005a82:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a84:	4b1d      	ldr	r3, [pc, #116]	@ (8005afc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	091b      	lsrs	r3, r3, #4
 8005a8a:	f003 030f 	and.w	r3, r3, #15
 8005a8e:	3301      	adds	r3, #1
 8005a90:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2b03      	cmp	r3, #3
 8005a96:	d10c      	bne.n	8005ab2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a98:	4a1a      	ldr	r2, [pc, #104]	@ (8005b04 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa0:	4a16      	ldr	r2, [pc, #88]	@ (8005afc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005aa2:	68d2      	ldr	r2, [r2, #12]
 8005aa4:	0a12      	lsrs	r2, r2, #8
 8005aa6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005aaa:	fb02 f303 	mul.w	r3, r2, r3
 8005aae:	617b      	str	r3, [r7, #20]
      break;
 8005ab0:	e00c      	b.n	8005acc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ab2:	4a13      	ldr	r2, [pc, #76]	@ (8005b00 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aba:	4a10      	ldr	r2, [pc, #64]	@ (8005afc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005abc:	68d2      	ldr	r2, [r2, #12]
 8005abe:	0a12      	lsrs	r2, r2, #8
 8005ac0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005ac4:	fb02 f303 	mul.w	r3, r2, r3
 8005ac8:	617b      	str	r3, [r7, #20]
      break;
 8005aca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005acc:	4b0b      	ldr	r3, [pc, #44]	@ (8005afc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	0e5b      	lsrs	r3, r3, #25
 8005ad2:	f003 0303 	and.w	r3, r3, #3
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	005b      	lsls	r3, r3, #1
 8005ada:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005adc:	697a      	ldr	r2, [r7, #20]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ae4:	613b      	str	r3, [r7, #16]
 8005ae6:	e001      	b.n	8005aec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005aec:	693b      	ldr	r3, [r7, #16]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	371c      	adds	r7, #28
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop
 8005afc:	40021000 	.word	0x40021000
 8005b00:	00f42400 	.word	0x00f42400
 8005b04:	016e3600 	.word	0x016e3600

08005b08 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b087      	sub	sp, #28
 8005b0c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b0e:	4b1e      	ldr	r3, [pc, #120]	@ (8005b88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	f003 0303 	and.w	r3, r3, #3
 8005b16:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b18:	4b1b      	ldr	r3, [pc, #108]	@ (8005b88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	091b      	lsrs	r3, r3, #4
 8005b1e:	f003 030f 	and.w	r3, r3, #15
 8005b22:	3301      	adds	r3, #1
 8005b24:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	2b03      	cmp	r3, #3
 8005b2a:	d10c      	bne.n	8005b46 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b2c:	4a17      	ldr	r2, [pc, #92]	@ (8005b8c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b34:	4a14      	ldr	r2, [pc, #80]	@ (8005b88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b36:	68d2      	ldr	r2, [r2, #12]
 8005b38:	0a12      	lsrs	r2, r2, #8
 8005b3a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005b3e:	fb02 f303 	mul.w	r3, r2, r3
 8005b42:	617b      	str	r3, [r7, #20]
    break;
 8005b44:	e00c      	b.n	8005b60 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b46:	4a12      	ldr	r2, [pc, #72]	@ (8005b90 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b4e:	4a0e      	ldr	r2, [pc, #56]	@ (8005b88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b50:	68d2      	ldr	r2, [r2, #12]
 8005b52:	0a12      	lsrs	r2, r2, #8
 8005b54:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005b58:	fb02 f303 	mul.w	r3, r2, r3
 8005b5c:	617b      	str	r3, [r7, #20]
    break;
 8005b5e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b60:	4b09      	ldr	r3, [pc, #36]	@ (8005b88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	0e5b      	lsrs	r3, r3, #25
 8005b66:	f003 0303 	and.w	r3, r3, #3
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	005b      	lsls	r3, r3, #1
 8005b6e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005b70:	697a      	ldr	r2, [r7, #20]
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b78:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005b7a:	687b      	ldr	r3, [r7, #4]
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	371c      	adds	r7, #28
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr
 8005b88:	40021000 	.word	0x40021000
 8005b8c:	016e3600 	.word	0x016e3600
 8005b90:	00f42400 	.word	0x00f42400

08005b94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b086      	sub	sp, #24
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	f000 8098 	beq.w	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bb6:	4b43      	ldr	r3, [pc, #268]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d10d      	bne.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bc2:	4b40      	ldr	r3, [pc, #256]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bc6:	4a3f      	ldr	r2, [pc, #252]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bcc:	6593      	str	r3, [r2, #88]	@ 0x58
 8005bce:	4b3d      	ldr	r3, [pc, #244]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bd6:	60bb      	str	r3, [r7, #8]
 8005bd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bde:	4b3a      	ldr	r3, [pc, #232]	@ (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a39      	ldr	r2, [pc, #228]	@ (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005be4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005be8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005bea:	f7fd ff15 	bl	8003a18 <HAL_GetTick>
 8005bee:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005bf0:	e009      	b.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bf2:	f7fd ff11 	bl	8003a18 <HAL_GetTick>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	d902      	bls.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005c00:	2303      	movs	r3, #3
 8005c02:	74fb      	strb	r3, [r7, #19]
        break;
 8005c04:	e005      	b.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c06:	4b30      	ldr	r3, [pc, #192]	@ (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d0ef      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005c12:	7cfb      	ldrb	r3, [r7, #19]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d159      	bne.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c18:	4b2a      	ldr	r3, [pc, #168]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c22:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d01e      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d019      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c34:	4b23      	ldr	r3, [pc, #140]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c3e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c40:	4b20      	ldr	r3, [pc, #128]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c46:	4a1f      	ldr	r2, [pc, #124]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c50:	4b1c      	ldr	r3, [pc, #112]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c56:	4a1b      	ldr	r2, [pc, #108]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005c60:	4a18      	ldr	r2, [pc, #96]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	f003 0301 	and.w	r3, r3, #1
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d016      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c72:	f7fd fed1 	bl	8003a18 <HAL_GetTick>
 8005c76:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c78:	e00b      	b.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c7a:	f7fd fecd 	bl	8003a18 <HAL_GetTick>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d902      	bls.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	74fb      	strb	r3, [r7, #19]
            break;
 8005c90:	e006      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c92:	4b0c      	ldr	r3, [pc, #48]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c98:	f003 0302 	and.w	r3, r3, #2
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d0ec      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005ca0:	7cfb      	ldrb	r3, [r7, #19]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d10b      	bne.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ca6:	4b07      	ldr	r3, [pc, #28]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cb4:	4903      	ldr	r1, [pc, #12]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005cbc:	e008      	b.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005cbe:	7cfb      	ldrb	r3, [r7, #19]
 8005cc0:	74bb      	strb	r3, [r7, #18]
 8005cc2:	e005      	b.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005cc4:	40021000 	.word	0x40021000
 8005cc8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ccc:	7cfb      	ldrb	r3, [r7, #19]
 8005cce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005cd0:	7c7b      	ldrb	r3, [r7, #17]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d105      	bne.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cd6:	4ba7      	ldr	r3, [pc, #668]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cda:	4aa6      	ldr	r2, [pc, #664]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cdc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ce0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0301 	and.w	r3, r3, #1
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00a      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005cee:	4ba1      	ldr	r3, [pc, #644]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cf4:	f023 0203 	bic.w	r2, r3, #3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	499d      	ldr	r1, [pc, #628]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 0302 	and.w	r3, r3, #2
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00a      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d10:	4b98      	ldr	r3, [pc, #608]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d16:	f023 020c 	bic.w	r2, r3, #12
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	4995      	ldr	r1, [pc, #596]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d20:	4313      	orrs	r3, r2
 8005d22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 0304 	and.w	r3, r3, #4
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00a      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d32:	4b90      	ldr	r3, [pc, #576]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d38:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	498c      	ldr	r1, [pc, #560]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d42:	4313      	orrs	r3, r2
 8005d44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 0308 	and.w	r3, r3, #8
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d00a      	beq.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d54:	4b87      	ldr	r3, [pc, #540]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d5a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	4984      	ldr	r1, [pc, #528]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d64:	4313      	orrs	r3, r2
 8005d66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0310 	and.w	r3, r3, #16
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00a      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005d76:	4b7f      	ldr	r3, [pc, #508]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d7c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	695b      	ldr	r3, [r3, #20]
 8005d84:	497b      	ldr	r1, [pc, #492]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d86:	4313      	orrs	r3, r2
 8005d88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0320 	and.w	r3, r3, #32
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d00a      	beq.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d98:	4b76      	ldr	r3, [pc, #472]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d9e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	4973      	ldr	r1, [pc, #460]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005da8:	4313      	orrs	r3, r2
 8005daa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00a      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005dba:	4b6e      	ldr	r3, [pc, #440]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dc0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	69db      	ldr	r3, [r3, #28]
 8005dc8:	496a      	ldr	r1, [pc, #424]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00a      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ddc:	4b65      	ldr	r3, [pc, #404]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005de2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	4962      	ldr	r1, [pc, #392]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dec:	4313      	orrs	r3, r2
 8005dee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00a      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005dfe:	4b5d      	ldr	r3, [pc, #372]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e04:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e0c:	4959      	ldr	r1, [pc, #356]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00a      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005e20:	4b54      	ldr	r3, [pc, #336]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e22:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e26:	f023 0203 	bic.w	r2, r3, #3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e2e:	4951      	ldr	r1, [pc, #324]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e30:	4313      	orrs	r3, r2
 8005e32:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00a      	beq.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e42:	4b4c      	ldr	r3, [pc, #304]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e48:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e50:	4948      	ldr	r1, [pc, #288]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e52:	4313      	orrs	r3, r2
 8005e54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d015      	beq.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e64:	4b43      	ldr	r3, [pc, #268]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e6a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e72:	4940      	ldr	r1, [pc, #256]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e82:	d105      	bne.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e84:	4b3b      	ldr	r3, [pc, #236]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	4a3a      	ldr	r2, [pc, #232]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e8e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d015      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005e9c:	4b35      	ldr	r3, [pc, #212]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ea2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eaa:	4932      	ldr	r1, [pc, #200]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eac:	4313      	orrs	r3, r2
 8005eae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eb6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005eba:	d105      	bne.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ebc:	4b2d      	ldr	r3, [pc, #180]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	4a2c      	ldr	r2, [pc, #176]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ec2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ec6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d015      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005ed4:	4b27      	ldr	r3, [pc, #156]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eda:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ee2:	4924      	ldr	r1, [pc, #144]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ef2:	d105      	bne.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ef4:	4b1f      	ldr	r3, [pc, #124]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	4a1e      	ldr	r2, [pc, #120]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005efa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005efe:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d015      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f0c:	4b19      	ldr	r3, [pc, #100]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f12:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f1a:	4916      	ldr	r1, [pc, #88]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f2a:	d105      	bne.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f2c:	4b11      	ldr	r3, [pc, #68]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	4a10      	ldr	r2, [pc, #64]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f36:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d019      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f44:	4b0b      	ldr	r3, [pc, #44]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f4a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f52:	4908      	ldr	r1, [pc, #32]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f54:	4313      	orrs	r3, r2
 8005f56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f62:	d109      	bne.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f64:	4b03      	ldr	r3, [pc, #12]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	4a02      	ldr	r2, [pc, #8]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f6e:	60d3      	str	r3, [r2, #12]
 8005f70:	e002      	b.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005f72:	bf00      	nop
 8005f74:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d015      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005f84:	4b29      	ldr	r3, [pc, #164]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f8a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f92:	4926      	ldr	r1, [pc, #152]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f94:	4313      	orrs	r3, r2
 8005f96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fa2:	d105      	bne.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005fa4:	4b21      	ldr	r3, [pc, #132]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	4a20      	ldr	r2, [pc, #128]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005faa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fae:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d015      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005fbc:	4b1b      	ldr	r3, [pc, #108]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fc2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fca:	4918      	ldr	r1, [pc, #96]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fda:	d105      	bne.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005fdc:	4b13      	ldr	r3, [pc, #76]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	4a12      	ldr	r2, [pc, #72]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005fe2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fe6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d015      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005ff4:	4b0d      	ldr	r3, [pc, #52]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ff6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ffa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006002:	490a      	ldr	r1, [pc, #40]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006004:	4313      	orrs	r3, r2
 8006006:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800600e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006012:	d105      	bne.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006014:	4b05      	ldr	r3, [pc, #20]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	4a04      	ldr	r2, [pc, #16]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800601a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800601e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006020:	7cbb      	ldrb	r3, [r7, #18]
}
 8006022:	4618      	mov	r0, r3
 8006024:	3718      	adds	r7, #24
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	40021000 	.word	0x40021000

08006030 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d101      	bne.n	8006042 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e09d      	b.n	800617e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006046:	2b00      	cmp	r3, #0
 8006048:	d108      	bne.n	800605c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006052:	d009      	beq.n	8006068 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	61da      	str	r2, [r3, #28]
 800605a:	e005      	b.n	8006068 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b00      	cmp	r3, #0
 8006078:	d106      	bne.n	8006088 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f7fc fcd0 	bl	8002a28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2202      	movs	r2, #2
 800608c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800609e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80060a8:	d902      	bls.n	80060b0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80060aa:	2300      	movs	r3, #0
 80060ac:	60fb      	str	r3, [r7, #12]
 80060ae:	e002      	b.n	80060b6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80060b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80060b4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80060be:	d007      	beq.n	80060d0 <HAL_SPI_Init+0xa0>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80060c8:	d002      	beq.n	80060d0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80060e0:	431a      	orrs	r2, r3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	f003 0302 	and.w	r3, r3, #2
 80060ea:	431a      	orrs	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	695b      	ldr	r3, [r3, #20]
 80060f0:	f003 0301 	and.w	r3, r3, #1
 80060f4:	431a      	orrs	r2, r3
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	699b      	ldr	r3, [r3, #24]
 80060fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060fe:	431a      	orrs	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	69db      	ldr	r3, [r3, #28]
 8006104:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006108:	431a      	orrs	r2, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a1b      	ldr	r3, [r3, #32]
 800610e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006112:	ea42 0103 	orr.w	r1, r2, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800611a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	430a      	orrs	r2, r1
 8006124:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	0c1b      	lsrs	r3, r3, #16
 800612c:	f003 0204 	and.w	r2, r3, #4
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006134:	f003 0310 	and.w	r3, r3, #16
 8006138:	431a      	orrs	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800613e:	f003 0308 	and.w	r3, r3, #8
 8006142:	431a      	orrs	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800614c:	ea42 0103 	orr.w	r1, r2, r3
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	430a      	orrs	r2, r1
 800615c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	69da      	ldr	r2, [r3, #28]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800616c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3710      	adds	r7, #16
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006186:	b580      	push	{r7, lr}
 8006188:	b088      	sub	sp, #32
 800618a:	af00      	add	r7, sp, #0
 800618c:	60f8      	str	r0, [r7, #12]
 800618e:	60b9      	str	r1, [r7, #8]
 8006190:	603b      	str	r3, [r7, #0]
 8006192:	4613      	mov	r3, r2
 8006194:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006196:	f7fd fc3f 	bl	8003a18 <HAL_GetTick>
 800619a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800619c:	88fb      	ldrh	r3, [r7, #6]
 800619e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d001      	beq.n	80061b0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80061ac:	2302      	movs	r3, #2
 80061ae:	e15c      	b.n	800646a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d002      	beq.n	80061bc <HAL_SPI_Transmit+0x36>
 80061b6:	88fb      	ldrh	r3, [r7, #6]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d101      	bne.n	80061c0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e154      	b.n	800646a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d101      	bne.n	80061ce <HAL_SPI_Transmit+0x48>
 80061ca:	2302      	movs	r3, #2
 80061cc:	e14d      	b.n	800646a <HAL_SPI_Transmit+0x2e4>
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2201      	movs	r2, #1
 80061d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2203      	movs	r2, #3
 80061da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	68ba      	ldr	r2, [r7, #8]
 80061e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	88fa      	ldrh	r2, [r7, #6]
 80061ee:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	88fa      	ldrh	r2, [r7, #6]
 80061f4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2200      	movs	r2, #0
 80061fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2200      	movs	r2, #0
 8006208:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2200      	movs	r2, #0
 8006210:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2200      	movs	r2, #0
 8006216:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006220:	d10f      	bne.n	8006242 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006230:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006240:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800624c:	2b40      	cmp	r3, #64	@ 0x40
 800624e:	d007      	beq.n	8006260 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800625e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006268:	d952      	bls.n	8006310 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d002      	beq.n	8006278 <HAL_SPI_Transmit+0xf2>
 8006272:	8b7b      	ldrh	r3, [r7, #26]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d145      	bne.n	8006304 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800627c:	881a      	ldrh	r2, [r3, #0]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006288:	1c9a      	adds	r2, r3, #2
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006292:	b29b      	uxth	r3, r3
 8006294:	3b01      	subs	r3, #1
 8006296:	b29a      	uxth	r2, r3
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800629c:	e032      	b.n	8006304 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	f003 0302 	and.w	r3, r3, #2
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d112      	bne.n	80062d2 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062b0:	881a      	ldrh	r2, [r3, #0]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062bc:	1c9a      	adds	r2, r3, #2
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	3b01      	subs	r3, #1
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80062d0:	e018      	b.n	8006304 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062d2:	f7fd fba1 	bl	8003a18 <HAL_GetTick>
 80062d6:	4602      	mov	r2, r0
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	683a      	ldr	r2, [r7, #0]
 80062de:	429a      	cmp	r2, r3
 80062e0:	d803      	bhi.n	80062ea <HAL_SPI_Transmit+0x164>
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80062e8:	d102      	bne.n	80062f0 <HAL_SPI_Transmit+0x16a>
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d109      	bne.n	8006304 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e0b2      	b.n	800646a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006308:	b29b      	uxth	r3, r3
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1c7      	bne.n	800629e <HAL_SPI_Transmit+0x118>
 800630e:	e083      	b.n	8006418 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d002      	beq.n	800631e <HAL_SPI_Transmit+0x198>
 8006318:	8b7b      	ldrh	r3, [r7, #26]
 800631a:	2b01      	cmp	r3, #1
 800631c:	d177      	bne.n	800640e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006322:	b29b      	uxth	r3, r3
 8006324:	2b01      	cmp	r3, #1
 8006326:	d912      	bls.n	800634e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800632c:	881a      	ldrh	r2, [r3, #0]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006338:	1c9a      	adds	r2, r3, #2
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006342:	b29b      	uxth	r3, r3
 8006344:	3b02      	subs	r3, #2
 8006346:	b29a      	uxth	r2, r3
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800634c:	e05f      	b.n	800640e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	330c      	adds	r3, #12
 8006358:	7812      	ldrb	r2, [r2, #0]
 800635a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006360:	1c5a      	adds	r2, r3, #1
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800636a:	b29b      	uxth	r3, r3
 800636c:	3b01      	subs	r3, #1
 800636e:	b29a      	uxth	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006374:	e04b      	b.n	800640e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f003 0302 	and.w	r3, r3, #2
 8006380:	2b02      	cmp	r3, #2
 8006382:	d12b      	bne.n	80063dc <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006388:	b29b      	uxth	r3, r3
 800638a:	2b01      	cmp	r3, #1
 800638c:	d912      	bls.n	80063b4 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006392:	881a      	ldrh	r2, [r3, #0]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800639e:	1c9a      	adds	r2, r3, #2
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	3b02      	subs	r3, #2
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80063b2:	e02c      	b.n	800640e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	330c      	adds	r3, #12
 80063be:	7812      	ldrb	r2, [r2, #0]
 80063c0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063c6:	1c5a      	adds	r2, r3, #1
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	3b01      	subs	r3, #1
 80063d4:	b29a      	uxth	r2, r3
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80063da:	e018      	b.n	800640e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063dc:	f7fd fb1c 	bl	8003a18 <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	683a      	ldr	r2, [r7, #0]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d803      	bhi.n	80063f4 <HAL_SPI_Transmit+0x26e>
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80063f2:	d102      	bne.n	80063fa <HAL_SPI_Transmit+0x274>
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d109      	bne.n	800640e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2201      	movs	r2, #1
 80063fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	e02d      	b.n	800646a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006412:	b29b      	uxth	r3, r3
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1ae      	bne.n	8006376 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006418:	69fa      	ldr	r2, [r7, #28]
 800641a:	6839      	ldr	r1, [r7, #0]
 800641c:	68f8      	ldr	r0, [r7, #12]
 800641e:	f001 fa03 	bl	8007828 <SPI_EndRxTxTransaction>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d002      	beq.n	800642e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2220      	movs	r2, #32
 800642c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d10a      	bne.n	800644c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006436:	2300      	movs	r3, #0
 8006438:	617b      	str	r3, [r7, #20]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	617b      	str	r3, [r7, #20]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	617b      	str	r3, [r7, #20]
 800644a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2200      	movs	r2, #0
 8006458:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006460:	2b00      	cmp	r3, #0
 8006462:	d001      	beq.n	8006468 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e000      	b.n	800646a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8006468:	2300      	movs	r3, #0
  }
}
 800646a:	4618      	mov	r0, r3
 800646c:	3720      	adds	r7, #32
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}

08006472 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006472:	b580      	push	{r7, lr}
 8006474:	b088      	sub	sp, #32
 8006476:	af02      	add	r7, sp, #8
 8006478:	60f8      	str	r0, [r7, #12]
 800647a:	60b9      	str	r1, [r7, #8]
 800647c:	603b      	str	r3, [r7, #0]
 800647e:	4613      	mov	r3, r2
 8006480:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006488:	b2db      	uxtb	r3, r3
 800648a:	2b01      	cmp	r3, #1
 800648c:	d001      	beq.n	8006492 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800648e:	2302      	movs	r3, #2
 8006490:	e123      	b.n	80066da <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d002      	beq.n	800649e <HAL_SPI_Receive+0x2c>
 8006498:	88fb      	ldrh	r3, [r7, #6]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d101      	bne.n	80064a2 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e11b      	b.n	80066da <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80064aa:	d112      	bne.n	80064d2 <HAL_SPI_Receive+0x60>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d10e      	bne.n	80064d2 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2204      	movs	r2, #4
 80064b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80064bc:	88fa      	ldrh	r2, [r7, #6]
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	9300      	str	r3, [sp, #0]
 80064c2:	4613      	mov	r3, r2
 80064c4:	68ba      	ldr	r2, [r7, #8]
 80064c6:	68b9      	ldr	r1, [r7, #8]
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	f000 f90a 	bl	80066e2 <HAL_SPI_TransmitReceive>
 80064ce:	4603      	mov	r3, r0
 80064d0:	e103      	b.n	80066da <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064d2:	f7fd faa1 	bl	8003a18 <HAL_GetTick>
 80064d6:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d101      	bne.n	80064e6 <HAL_SPI_Receive+0x74>
 80064e2:	2302      	movs	r3, #2
 80064e4:	e0f9      	b.n	80066da <HAL_SPI_Receive+0x268>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2201      	movs	r2, #1
 80064ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2204      	movs	r2, #4
 80064f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	68ba      	ldr	r2, [r7, #8]
 8006500:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	88fa      	ldrh	r2, [r7, #6]
 8006506:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	88fa      	ldrh	r2, [r7, #6]
 800650e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006538:	d908      	bls.n	800654c <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	685a      	ldr	r2, [r3, #4]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006548:	605a      	str	r2, [r3, #4]
 800654a:	e007      	b.n	800655c <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	685a      	ldr	r2, [r3, #4]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800655a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006564:	d10f      	bne.n	8006586 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006574:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006584:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006590:	2b40      	cmp	r3, #64	@ 0x40
 8006592:	d007      	beq.n	80065a4 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065a2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80065ac:	d875      	bhi.n	800669a <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80065ae:	e037      	b.n	8006620 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f003 0301 	and.w	r3, r3, #1
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d117      	bne.n	80065ee <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f103 020c 	add.w	r2, r3, #12
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ca:	7812      	ldrb	r2, [r2, #0]
 80065cc:	b2d2      	uxtb	r2, r2
 80065ce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065d4:	1c5a      	adds	r2, r3, #1
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	3b01      	subs	r3, #1
 80065e4:	b29a      	uxth	r2, r3
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80065ec:	e018      	b.n	8006620 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065ee:	f7fd fa13 	bl	8003a18 <HAL_GetTick>
 80065f2:	4602      	mov	r2, r0
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	1ad3      	subs	r3, r2, r3
 80065f8:	683a      	ldr	r2, [r7, #0]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d803      	bhi.n	8006606 <HAL_SPI_Receive+0x194>
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006604:	d102      	bne.n	800660c <HAL_SPI_Receive+0x19a>
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d109      	bne.n	8006620 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2200      	movs	r2, #0
 8006618:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800661c:	2303      	movs	r3, #3
 800661e:	e05c      	b.n	80066da <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006626:	b29b      	uxth	r3, r3
 8006628:	2b00      	cmp	r3, #0
 800662a:	d1c1      	bne.n	80065b0 <HAL_SPI_Receive+0x13e>
 800662c:	e03b      	b.n	80066a6 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	f003 0301 	and.w	r3, r3, #1
 8006638:	2b01      	cmp	r3, #1
 800663a:	d115      	bne.n	8006668 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68da      	ldr	r2, [r3, #12]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006646:	b292      	uxth	r2, r2
 8006648:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800664e:	1c9a      	adds	r2, r3, #2
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800665a:	b29b      	uxth	r3, r3
 800665c:	3b01      	subs	r3, #1
 800665e:	b29a      	uxth	r2, r3
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8006666:	e018      	b.n	800669a <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006668:	f7fd f9d6 	bl	8003a18 <HAL_GetTick>
 800666c:	4602      	mov	r2, r0
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	683a      	ldr	r2, [r7, #0]
 8006674:	429a      	cmp	r2, r3
 8006676:	d803      	bhi.n	8006680 <HAL_SPI_Receive+0x20e>
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800667e:	d102      	bne.n	8006686 <HAL_SPI_Receive+0x214>
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d109      	bne.n	800669a <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006696:	2303      	movs	r3, #3
 8006698:	e01f      	b.n	80066da <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d1c3      	bne.n	800662e <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80066a6:	697a      	ldr	r2, [r7, #20]
 80066a8:	6839      	ldr	r1, [r7, #0]
 80066aa:	68f8      	ldr	r0, [r7, #12]
 80066ac:	f001 f864 	bl	8007778 <SPI_EndRxTransaction>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d002      	beq.n	80066bc <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2220      	movs	r2, #32
 80066ba:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d001      	beq.n	80066d8 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e000      	b.n	80066da <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 80066d8:	2300      	movs	r3, #0
  }
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3718      	adds	r7, #24
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}

080066e2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80066e2:	b580      	push	{r7, lr}
 80066e4:	b08a      	sub	sp, #40	@ 0x28
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	60f8      	str	r0, [r7, #12]
 80066ea:	60b9      	str	r1, [r7, #8]
 80066ec:	607a      	str	r2, [r7, #4]
 80066ee:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80066f0:	2301      	movs	r3, #1
 80066f2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066f4:	f7fd f990 	bl	8003a18 <HAL_GetTick>
 80066f8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006700:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006708:	887b      	ldrh	r3, [r7, #2]
 800670a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800670c:	887b      	ldrh	r3, [r7, #2]
 800670e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006710:	7ffb      	ldrb	r3, [r7, #31]
 8006712:	2b01      	cmp	r3, #1
 8006714:	d00c      	beq.n	8006730 <HAL_SPI_TransmitReceive+0x4e>
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800671c:	d106      	bne.n	800672c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d102      	bne.n	800672c <HAL_SPI_TransmitReceive+0x4a>
 8006726:	7ffb      	ldrb	r3, [r7, #31]
 8006728:	2b04      	cmp	r3, #4
 800672a:	d001      	beq.n	8006730 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800672c:	2302      	movs	r3, #2
 800672e:	e1f3      	b.n	8006b18 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d005      	beq.n	8006742 <HAL_SPI_TransmitReceive+0x60>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d002      	beq.n	8006742 <HAL_SPI_TransmitReceive+0x60>
 800673c:	887b      	ldrh	r3, [r7, #2]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d101      	bne.n	8006746 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e1e8      	b.n	8006b18 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800674c:	2b01      	cmp	r3, #1
 800674e:	d101      	bne.n	8006754 <HAL_SPI_TransmitReceive+0x72>
 8006750:	2302      	movs	r3, #2
 8006752:	e1e1      	b.n	8006b18 <HAL_SPI_TransmitReceive+0x436>
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006762:	b2db      	uxtb	r3, r3
 8006764:	2b04      	cmp	r3, #4
 8006766:	d003      	beq.n	8006770 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2205      	movs	r2, #5
 800676c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	887a      	ldrh	r2, [r7, #2]
 8006780:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	887a      	ldrh	r2, [r7, #2]
 8006788:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	68ba      	ldr	r2, [r7, #8]
 8006790:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	887a      	ldrh	r2, [r7, #2]
 8006796:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	887a      	ldrh	r2, [r7, #2]
 800679c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2200      	movs	r2, #0
 80067a8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80067b2:	d802      	bhi.n	80067ba <HAL_SPI_TransmitReceive+0xd8>
 80067b4:	8abb      	ldrh	r3, [r7, #20]
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d908      	bls.n	80067cc <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	685a      	ldr	r2, [r3, #4]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80067c8:	605a      	str	r2, [r3, #4]
 80067ca:	e007      	b.n	80067dc <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	685a      	ldr	r2, [r3, #4]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80067da:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067e6:	2b40      	cmp	r3, #64	@ 0x40
 80067e8:	d007      	beq.n	80067fa <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80067f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006802:	f240 8083 	bls.w	800690c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d002      	beq.n	8006814 <HAL_SPI_TransmitReceive+0x132>
 800680e:	8afb      	ldrh	r3, [r7, #22]
 8006810:	2b01      	cmp	r3, #1
 8006812:	d16f      	bne.n	80068f4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006818:	881a      	ldrh	r2, [r3, #0]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006824:	1c9a      	adds	r2, r3, #2
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800682e:	b29b      	uxth	r3, r3
 8006830:	3b01      	subs	r3, #1
 8006832:	b29a      	uxth	r2, r3
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006838:	e05c      	b.n	80068f4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	f003 0302 	and.w	r3, r3, #2
 8006844:	2b02      	cmp	r3, #2
 8006846:	d11b      	bne.n	8006880 <HAL_SPI_TransmitReceive+0x19e>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800684c:	b29b      	uxth	r3, r3
 800684e:	2b00      	cmp	r3, #0
 8006850:	d016      	beq.n	8006880 <HAL_SPI_TransmitReceive+0x19e>
 8006852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006854:	2b01      	cmp	r3, #1
 8006856:	d113      	bne.n	8006880 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800685c:	881a      	ldrh	r2, [r3, #0]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006868:	1c9a      	adds	r2, r3, #2
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006872:	b29b      	uxth	r3, r3
 8006874:	3b01      	subs	r3, #1
 8006876:	b29a      	uxth	r2, r3
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800687c:	2300      	movs	r3, #0
 800687e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	f003 0301 	and.w	r3, r3, #1
 800688a:	2b01      	cmp	r3, #1
 800688c:	d11c      	bne.n	80068c8 <HAL_SPI_TransmitReceive+0x1e6>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006894:	b29b      	uxth	r3, r3
 8006896:	2b00      	cmp	r3, #0
 8006898:	d016      	beq.n	80068c8 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68da      	ldr	r2, [r3, #12]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068a4:	b292      	uxth	r2, r2
 80068a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ac:	1c9a      	adds	r2, r3, #2
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	3b01      	subs	r3, #1
 80068bc:	b29a      	uxth	r2, r3
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80068c4:	2301      	movs	r3, #1
 80068c6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80068c8:	f7fd f8a6 	bl	8003a18 <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	6a3b      	ldr	r3, [r7, #32]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d80d      	bhi.n	80068f4 <HAL_SPI_TransmitReceive+0x212>
 80068d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80068de:	d009      	beq.n	80068f4 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80068f0:	2303      	movs	r3, #3
 80068f2:	e111      	b.n	8006b18 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d19d      	bne.n	800683a <HAL_SPI_TransmitReceive+0x158>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006904:	b29b      	uxth	r3, r3
 8006906:	2b00      	cmp	r3, #0
 8006908:	d197      	bne.n	800683a <HAL_SPI_TransmitReceive+0x158>
 800690a:	e0e5      	b.n	8006ad8 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d003      	beq.n	800691c <HAL_SPI_TransmitReceive+0x23a>
 8006914:	8afb      	ldrh	r3, [r7, #22]
 8006916:	2b01      	cmp	r3, #1
 8006918:	f040 80d1 	bne.w	8006abe <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006920:	b29b      	uxth	r3, r3
 8006922:	2b01      	cmp	r3, #1
 8006924:	d912      	bls.n	800694c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800692a:	881a      	ldrh	r2, [r3, #0]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006936:	1c9a      	adds	r2, r3, #2
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006940:	b29b      	uxth	r3, r3
 8006942:	3b02      	subs	r3, #2
 8006944:	b29a      	uxth	r2, r3
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800694a:	e0b8      	b.n	8006abe <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	330c      	adds	r3, #12
 8006956:	7812      	ldrb	r2, [r2, #0]
 8006958:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800695e:	1c5a      	adds	r2, r3, #1
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006968:	b29b      	uxth	r3, r3
 800696a:	3b01      	subs	r3, #1
 800696c:	b29a      	uxth	r2, r3
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006972:	e0a4      	b.n	8006abe <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	f003 0302 	and.w	r3, r3, #2
 800697e:	2b02      	cmp	r3, #2
 8006980:	d134      	bne.n	80069ec <HAL_SPI_TransmitReceive+0x30a>
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006986:	b29b      	uxth	r3, r3
 8006988:	2b00      	cmp	r3, #0
 800698a:	d02f      	beq.n	80069ec <HAL_SPI_TransmitReceive+0x30a>
 800698c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800698e:	2b01      	cmp	r3, #1
 8006990:	d12c      	bne.n	80069ec <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006996:	b29b      	uxth	r3, r3
 8006998:	2b01      	cmp	r3, #1
 800699a:	d912      	bls.n	80069c2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069a0:	881a      	ldrh	r2, [r3, #0]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069ac:	1c9a      	adds	r2, r3, #2
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	3b02      	subs	r3, #2
 80069ba:	b29a      	uxth	r2, r3
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80069c0:	e012      	b.n	80069e8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	330c      	adds	r3, #12
 80069cc:	7812      	ldrb	r2, [r2, #0]
 80069ce:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069d4:	1c5a      	adds	r2, r3, #1
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069de:	b29b      	uxth	r3, r3
 80069e0:	3b01      	subs	r3, #1
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80069e8:	2300      	movs	r3, #0
 80069ea:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	f003 0301 	and.w	r3, r3, #1
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d148      	bne.n	8006a8c <HAL_SPI_TransmitReceive+0x3aa>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d042      	beq.n	8006a8c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d923      	bls.n	8006a5a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68da      	ldr	r2, [r3, #12]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a1c:	b292      	uxth	r2, r2
 8006a1e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a24:	1c9a      	adds	r2, r3, #2
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	3b02      	subs	r3, #2
 8006a34:	b29a      	uxth	r2, r3
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d81f      	bhi.n	8006a88 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	685a      	ldr	r2, [r3, #4]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006a56:	605a      	str	r2, [r3, #4]
 8006a58:	e016      	b.n	8006a88 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f103 020c 	add.w	r2, r3, #12
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a66:	7812      	ldrb	r2, [r2, #0]
 8006a68:	b2d2      	uxtb	r2, r2
 8006a6a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a70:	1c5a      	adds	r2, r3, #1
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	3b01      	subs	r3, #1
 8006a80:	b29a      	uxth	r2, r3
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006a8c:	f7fc ffc4 	bl	8003a18 <HAL_GetTick>
 8006a90:	4602      	mov	r2, r0
 8006a92:	6a3b      	ldr	r3, [r7, #32]
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d803      	bhi.n	8006aa4 <HAL_SPI_TransmitReceive+0x3c2>
 8006a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006aa2:	d102      	bne.n	8006aaa <HAL_SPI_TransmitReceive+0x3c8>
 8006aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d109      	bne.n	8006abe <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2201      	movs	r2, #1
 8006aae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e02c      	b.n	8006b18 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f47f af55 	bne.w	8006974 <HAL_SPI_TransmitReceive+0x292>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	f47f af4e 	bne.w	8006974 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ad8:	6a3a      	ldr	r2, [r7, #32]
 8006ada:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006adc:	68f8      	ldr	r0, [r7, #12]
 8006ade:	f000 fea3 	bl	8007828 <SPI_EndRxTxTransaction>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d008      	beq.n	8006afa <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2220      	movs	r2, #32
 8006aec:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e00e      	b.n	8006b18 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2201      	movs	r2, #1
 8006afe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d001      	beq.n	8006b16 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e000      	b.n	8006b18 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8006b16:	2300      	movs	r3, #0
  }
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3728      	adds	r7, #40	@ 0x28
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d001      	beq.n	8006b3e <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8006b3a:	2302      	movs	r3, #2
 8006b3c:	e0d4      	b.n	8006ce8 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d002      	beq.n	8006b4a <HAL_SPI_Transmit_DMA+0x2a>
 8006b44:	88fb      	ldrh	r3, [r7, #6]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d101      	bne.n	8006b4e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e0cc      	b.n	8006ce8 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d101      	bne.n	8006b5c <HAL_SPI_Transmit_DMA+0x3c>
 8006b58:	2302      	movs	r3, #2
 8006b5a:	e0c5      	b.n	8006ce8 <HAL_SPI_Transmit_DMA+0x1c8>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2203      	movs	r2, #3
 8006b68:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	68ba      	ldr	r2, [r7, #8]
 8006b76:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	88fa      	ldrh	r2, [r7, #6]
 8006b7c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	88fa      	ldrh	r2, [r7, #6]
 8006b82:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2200      	movs	r2, #0
 8006b88:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2200      	movs	r2, #0
 8006b94:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bae:	d10f      	bne.n	8006bd0 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006bbe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006bce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bd4:	4a46      	ldr	r2, [pc, #280]	@ (8006cf0 <HAL_SPI_Transmit_DMA+0x1d0>)
 8006bd6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bdc:	4a45      	ldr	r2, [pc, #276]	@ (8006cf4 <HAL_SPI_Transmit_DMA+0x1d4>)
 8006bde:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006be4:	4a44      	ldr	r2, [pc, #272]	@ (8006cf8 <HAL_SPI_Transmit_DMA+0x1d8>)
 8006be6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bec:	2200      	movs	r2, #0
 8006bee:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	685a      	ldr	r2, [r3, #4]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006bfe:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006c08:	d82d      	bhi.n	8006c66 <HAL_SPI_Transmit_DMA+0x146>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c0e:	699b      	ldr	r3, [r3, #24]
 8006c10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c14:	d127      	bne.n	8006c66 <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	f003 0301 	and.w	r3, r3, #1
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d10f      	bne.n	8006c44 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	685a      	ldr	r2, [r3, #4]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006c32:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	085b      	lsrs	r3, r3, #1
 8006c3c:	b29a      	uxth	r2, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006c42:	e010      	b.n	8006c66 <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	685a      	ldr	r2, [r3, #4]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006c52:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	085b      	lsrs	r3, r3, #1
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	3301      	adds	r3, #1
 8006c60:	b29a      	uxth	r2, r3
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c6e:	4619      	mov	r1, r3
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	330c      	adds	r3, #12
 8006c76:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c7c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006c7e:	f7fd f88f 	bl	8003da0 <HAL_DMA_Start_IT>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d00b      	beq.n	8006ca0 <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c8c:	f043 0210 	orr.w	r2, r3, #16
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2200      	movs	r2, #0
 8006c98:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e023      	b.n	8006ce8 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006caa:	2b40      	cmp	r3, #64	@ 0x40
 8006cac:	d007      	beq.n	8006cbe <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006cbc:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	685a      	ldr	r2, [r3, #4]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f042 0220 	orr.w	r2, r2, #32
 8006cd4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	685a      	ldr	r2, [r3, #4]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f042 0202 	orr.w	r2, r2, #2
 8006ce4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006ce6:	2300      	movs	r3, #0
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3710      	adds	r7, #16
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	080074a7 	.word	0x080074a7
 8006cf4:	080072c9 	.word	0x080072c9
 8006cf8:	080074fb 	.word	0x080074fb

08006cfc <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	4613      	mov	r3, r2
 8006d08:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d001      	beq.n	8006d1a <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 8006d16:	2302      	movs	r3, #2
 8006d18:	e105      	b.n	8006f26 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d002      	beq.n	8006d26 <HAL_SPI_Receive_DMA+0x2a>
 8006d20:	88fb      	ldrh	r3, [r7, #6]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d101      	bne.n	8006d2a <HAL_SPI_Receive_DMA+0x2e>
  {
    return HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	e0fd      	b.n	8006f26 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d110      	bne.n	8006d54 <HAL_SPI_Receive_DMA+0x58>
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d3a:	d10b      	bne.n	8006d54 <HAL_SPI_Receive_DMA+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2204      	movs	r2, #4
 8006d40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8006d44:	88fb      	ldrh	r3, [r7, #6]
 8006d46:	68ba      	ldr	r2, [r7, #8]
 8006d48:	68b9      	ldr	r1, [r7, #8]
 8006d4a:	68f8      	ldr	r0, [r7, #12]
 8006d4c:	f000 f8f6 	bl	8006f3c <HAL_SPI_TransmitReceive_DMA>
 8006d50:	4603      	mov	r3, r0
 8006d52:	e0e8      	b.n	8006f26 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d101      	bne.n	8006d62 <HAL_SPI_Receive_DMA+0x66>
 8006d5e:	2302      	movs	r3, #2
 8006d60:	e0e1      	b.n	8006f26 <HAL_SPI_Receive_DMA+0x22a>
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2201      	movs	r2, #1
 8006d66:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2204      	movs	r2, #4
 8006d6e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2200      	movs	r2, #0
 8006d76:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	68ba      	ldr	r2, [r7, #8]
 8006d7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	88fa      	ldrh	r2, [r7, #6]
 8006d82:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	88fa      	ldrh	r2, [r7, #6]
 8006d8a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2200      	movs	r2, #0
 8006d92:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2200      	movs	r2, #0
 8006d98:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2200      	movs	r2, #0
 8006da4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006dae:	d10f      	bne.n	8006dd0 <HAL_SPI_Receive_DMA+0xd4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006dbe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006dce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	685a      	ldr	r2, [r3, #4]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006dde:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006de8:	d908      	bls.n	8006dfc <HAL_SPI_Receive_DMA+0x100>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	685a      	ldr	r2, [r3, #4]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006df8:	605a      	str	r2, [r3, #4]
 8006dfa:	e042      	b.n	8006e82 <HAL_SPI_Receive_DMA+0x186>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	685a      	ldr	r2, [r3, #4]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006e0a:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e16:	d134      	bne.n	8006e82 <HAL_SPI_Receive_DMA+0x186>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	685a      	ldr	r2, [r3, #4]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006e26:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	f003 0301 	and.w	r3, r3, #1
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d111      	bne.n	8006e5c <HAL_SPI_Receive_DMA+0x160>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	685a      	ldr	r2, [r3, #4]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e46:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	085b      	lsrs	r3, r3, #1
 8006e52:	b29a      	uxth	r2, r3
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8006e5a:	e012      	b.n	8006e82 <HAL_SPI_Receive_DMA+0x186>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	685a      	ldr	r2, [r3, #4]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006e6a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	085b      	lsrs	r3, r3, #1
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	3301      	adds	r3, #1
 8006e7a:	b29a      	uxth	r2, r3
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e86:	4a2a      	ldr	r2, [pc, #168]	@ (8006f30 <HAL_SPI_Receive_DMA+0x234>)
 8006e88:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e8e:	4a29      	ldr	r2, [pc, #164]	@ (8006f34 <HAL_SPI_Receive_DMA+0x238>)
 8006e90:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e96:	4a28      	ldr	r2, [pc, #160]	@ (8006f38 <HAL_SPI_Receive_DMA+0x23c>)
 8006e98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	330c      	adds	r3, #12
 8006eac:	4619      	mov	r1, r3
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eb2:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006eba:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006ebc:	f7fc ff70 	bl	8003da0 <HAL_DMA_Start_IT>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d00b      	beq.n	8006ede <HAL_SPI_Receive_DMA+0x1e2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006eca:	f043 0210 	orr.w	r2, r3, #16
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e023      	b.n	8006f26 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ee8:	2b40      	cmp	r3, #64	@ 0x40
 8006eea:	d007      	beq.n	8006efc <HAL_SPI_Receive_DMA+0x200>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006efa:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	685a      	ldr	r2, [r3, #4]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f042 0220 	orr.w	r2, r2, #32
 8006f12:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	685a      	ldr	r2, [r3, #4]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f042 0201 	orr.w	r2, r2, #1
 8006f22:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	080074c3 	.word	0x080074c3
 8006f34:	0800736f 	.word	0x0800736f
 8006f38:	080074fb 	.word	0x080074fb

08006f3c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b086      	sub	sp, #24
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	607a      	str	r2, [r7, #4]
 8006f48:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006f50:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8006f58:	7dfb      	ldrb	r3, [r7, #23]
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d00c      	beq.n	8006f78 <HAL_SPI_TransmitReceive_DMA+0x3c>
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f64:	d106      	bne.n	8006f74 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d102      	bne.n	8006f74 <HAL_SPI_TransmitReceive_DMA+0x38>
 8006f6e:	7dfb      	ldrb	r3, [r7, #23]
 8006f70:	2b04      	cmp	r3, #4
 8006f72:	d001      	beq.n	8006f78 <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006f74:	2302      	movs	r3, #2
 8006f76:	e158      	b.n	800722a <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d005      	beq.n	8006f8a <HAL_SPI_TransmitReceive_DMA+0x4e>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d002      	beq.n	8006f8a <HAL_SPI_TransmitReceive_DMA+0x4e>
 8006f84:	887b      	ldrh	r3, [r7, #2]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d101      	bne.n	8006f8e <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e14d      	b.n	800722a <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d101      	bne.n	8006f9c <HAL_SPI_TransmitReceive_DMA+0x60>
 8006f98:	2302      	movs	r3, #2
 8006f9a:	e146      	b.n	800722a <HAL_SPI_TransmitReceive_DMA+0x2ee>
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	2b04      	cmp	r3, #4
 8006fae:	d003      	beq.n	8006fb8 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2205      	movs	r2, #5
 8006fb4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	68ba      	ldr	r2, [r7, #8]
 8006fc2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	887a      	ldrh	r2, [r7, #2]
 8006fc8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	887a      	ldrh	r2, [r7, #2]
 8006fce:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	887a      	ldrh	r2, [r7, #2]
 8006fda:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	887a      	ldrh	r2, [r7, #2]
 8006fe2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	685a      	ldr	r2, [r3, #4]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8007000:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800700a:	d908      	bls.n	800701e <HAL_SPI_TransmitReceive_DMA+0xe2>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	685a      	ldr	r2, [r3, #4]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800701a:	605a      	str	r2, [r3, #4]
 800701c:	e06f      	b.n	80070fe <HAL_SPI_TransmitReceive_DMA+0x1c2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	685a      	ldr	r2, [r3, #4]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800702c:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007032:	699b      	ldr	r3, [r3, #24]
 8007034:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007038:	d126      	bne.n	8007088 <HAL_SPI_TransmitReceive_DMA+0x14c>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800703e:	f003 0301 	and.w	r3, r3, #1
 8007042:	2b00      	cmp	r3, #0
 8007044:	d10f      	bne.n	8007066 <HAL_SPI_TransmitReceive_DMA+0x12a>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	685a      	ldr	r2, [r3, #4]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007054:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800705a:	b29b      	uxth	r3, r3
 800705c:	085b      	lsrs	r3, r3, #1
 800705e:	b29a      	uxth	r2, r3
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007064:	e010      	b.n	8007088 <HAL_SPI_TransmitReceive_DMA+0x14c>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	685a      	ldr	r2, [r3, #4]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007074:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800707a:	b29b      	uxth	r3, r3
 800707c:	085b      	lsrs	r3, r3, #1
 800707e:	b29b      	uxth	r3, r3
 8007080:	3301      	adds	r3, #1
 8007082:	b29a      	uxth	r2, r3
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800708c:	699b      	ldr	r3, [r3, #24]
 800708e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007092:	d134      	bne.n	80070fe <HAL_SPI_TransmitReceive_DMA+0x1c2>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	685a      	ldr	r2, [r3, #4]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80070a2:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	f003 0301 	and.w	r3, r3, #1
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d111      	bne.n	80070d8 <HAL_SPI_TransmitReceive_DMA+0x19c>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	685a      	ldr	r2, [r3, #4]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80070c2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	085b      	lsrs	r3, r3, #1
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80070d6:	e012      	b.n	80070fe <HAL_SPI_TransmitReceive_DMA+0x1c2>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	685a      	ldr	r2, [r3, #4]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80070e6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	085b      	lsrs	r3, r3, #1
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	3301      	adds	r3, #1
 80070f6:	b29a      	uxth	r2, r3
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007104:	b2db      	uxtb	r3, r3
 8007106:	2b04      	cmp	r3, #4
 8007108:	d108      	bne.n	800711c <HAL_SPI_TransmitReceive_DMA+0x1e0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800710e:	4a49      	ldr	r2, [pc, #292]	@ (8007234 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 8007110:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007116:	4a48      	ldr	r2, [pc, #288]	@ (8007238 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 8007118:	62da      	str	r2, [r3, #44]	@ 0x2c
 800711a:	e007      	b.n	800712c <HAL_SPI_TransmitReceive_DMA+0x1f0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007120:	4a46      	ldr	r2, [pc, #280]	@ (800723c <HAL_SPI_TransmitReceive_DMA+0x300>)
 8007122:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007128:	4a45      	ldr	r2, [pc, #276]	@ (8007240 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800712a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007130:	4a44      	ldr	r2, [pc, #272]	@ (8007244 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8007132:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007138:	2200      	movs	r2, #0
 800713a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	330c      	adds	r3, #12
 8007146:	4619      	mov	r1, r3
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800714c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007154:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007156:	f7fc fe23 	bl	8003da0 <HAL_DMA_Start_IT>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d00b      	beq.n	8007178 <HAL_SPI_TransmitReceive_DMA+0x23c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007164:	f043 0210 	orr.w	r2, r3, #16
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2200      	movs	r2, #0
 8007170:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	e058      	b.n	800722a <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	685a      	ldr	r2, [r3, #4]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f042 0201 	orr.w	r2, r2, #1
 8007186:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800718c:	2200      	movs	r2, #0
 800718e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007194:	2200      	movs	r2, #0
 8007196:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800719c:	2200      	movs	r2, #0
 800719e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071a4:	2200      	movs	r2, #0
 80071a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071b0:	4619      	mov	r1, r3
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	330c      	adds	r3, #12
 80071b8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071be:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80071c0:	f7fc fdee 	bl	8003da0 <HAL_DMA_Start_IT>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d00b      	beq.n	80071e2 <HAL_SPI_TransmitReceive_DMA+0x2a6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071ce:	f043 0210 	orr.w	r2, r3, #16
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2200      	movs	r2, #0
 80071da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	e023      	b.n	800722a <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071ec:	2b40      	cmp	r3, #64	@ 0x40
 80071ee:	d007      	beq.n	8007200 <HAL_SPI_TransmitReceive_DMA+0x2c4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80071fe:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2200      	movs	r2, #0
 8007204:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	685a      	ldr	r2, [r3, #4]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f042 0220 	orr.w	r2, r2, #32
 8007216:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	685a      	ldr	r2, [r3, #4]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f042 0202 	orr.w	r2, r2, #2
 8007226:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	3718      	adds	r7, #24
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	080074c3 	.word	0x080074c3
 8007238:	0800736f 	.word	0x0800736f
 800723c:	080074df 	.word	0x080074df
 8007240:	08007417 	.word	0x08007417
 8007244:	080074fb 	.word	0x080074fb

08007248 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007250:	bf00      	nop
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007264:	bf00      	nop
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8007278:	bf00      	nop
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800728c:	bf00      	nop
 800728e:	370c      	adds	r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80072a0:	bf00      	nop
 80072a2:	370c      	adds	r7, #12
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80072ba:	b2db      	uxtb	r3, r3
}
 80072bc:	4618      	mov	r0, r3
 80072be:	370c      	adds	r7, #12
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b086      	sub	sp, #24
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072d4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072d6:	f7fc fb9f 	bl	8003a18 <HAL_GetTick>
 80072da:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f003 0320 	and.w	r3, r3, #32
 80072e6:	2b20      	cmp	r3, #32
 80072e8:	d03b      	beq.n	8007362 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	685a      	ldr	r2, [r3, #4]
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f022 0220 	bic.w	r2, r2, #32
 80072f8:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	685a      	ldr	r2, [r3, #4]
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f022 0202 	bic.w	r2, r2, #2
 8007308:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800730a:	693a      	ldr	r2, [r7, #16]
 800730c:	2164      	movs	r1, #100	@ 0x64
 800730e:	6978      	ldr	r0, [r7, #20]
 8007310:	f000 fa8a 	bl	8007828 <SPI_EndRxTxTransaction>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d005      	beq.n	8007326 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800731e:	f043 0220 	orr.w	r2, r3, #32
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d10a      	bne.n	8007344 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800732e:	2300      	movs	r3, #0
 8007330:	60fb      	str	r3, [r7, #12]
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	60fb      	str	r3, [r7, #12]
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	60fb      	str	r3, [r7, #12]
 8007342:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	2200      	movs	r2, #0
 8007348:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	2201      	movs	r2, #1
 800734e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007356:	2b00      	cmp	r3, #0
 8007358:	d003      	beq.n	8007362 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800735a:	6978      	ldr	r0, [r7, #20]
 800735c:	f7ff ff9c 	bl	8007298 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007360:	e002      	b.n	8007368 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8007362:	6978      	ldr	r0, [r7, #20]
 8007364:	f7fb fdd0 	bl	8002f08 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007368:	3718      	adds	r7, #24
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b084      	sub	sp, #16
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800737a:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800737c:	f7fc fb4c 	bl	8003a18 <HAL_GetTick>
 8007380:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 0320 	and.w	r3, r3, #32
 800738c:	2b20      	cmp	r3, #32
 800738e:	d03c      	beq.n	800740a <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	685a      	ldr	r2, [r3, #4]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f022 0220 	bic.w	r2, r2, #32
 800739e:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d10d      	bne.n	80073c4 <SPI_DMAReceiveCplt+0x56>
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80073b0:	d108      	bne.n	80073c4 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	685a      	ldr	r2, [r3, #4]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f022 0203 	bic.w	r2, r2, #3
 80073c0:	605a      	str	r2, [r3, #4]
 80073c2:	e007      	b.n	80073d4 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	685a      	ldr	r2, [r3, #4]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f022 0201 	bic.w	r2, r2, #1
 80073d2:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80073d4:	68ba      	ldr	r2, [r7, #8]
 80073d6:	2164      	movs	r1, #100	@ 0x64
 80073d8:	68f8      	ldr	r0, [r7, #12]
 80073da:	f000 f9cd 	bl	8007778 <SPI_EndRxTransaction>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d002      	beq.n	80073ea <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2220      	movs	r2, #32
 80073e8:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2201      	movs	r2, #1
 80073f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d003      	beq.n	800740a <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007402:	68f8      	ldr	r0, [r7, #12]
 8007404:	f7ff ff48 	bl	8007298 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007408:	e002      	b.n	8007410 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	f7fb fd92 	bl	8002f34 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007410:	3710      	adds	r7, #16
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}

08007416 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007416:	b580      	push	{r7, lr}
 8007418:	b084      	sub	sp, #16
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007422:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007424:	f7fc faf8 	bl	8003a18 <HAL_GetTick>
 8007428:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 0320 	and.w	r3, r3, #32
 8007434:	2b20      	cmp	r3, #32
 8007436:	d030      	beq.n	800749a <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	685a      	ldr	r2, [r3, #4]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f022 0220 	bic.w	r2, r2, #32
 8007446:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007448:	68ba      	ldr	r2, [r7, #8]
 800744a:	2164      	movs	r1, #100	@ 0x64
 800744c:	68f8      	ldr	r0, [r7, #12]
 800744e:	f000 f9eb 	bl	8007828 <SPI_EndRxTxTransaction>
 8007452:	4603      	mov	r3, r0
 8007454:	2b00      	cmp	r3, #0
 8007456:	d005      	beq.n	8007464 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800745c:	f043 0220 	orr.w	r2, r3, #32
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	685a      	ldr	r2, [r3, #4]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f022 0203 	bic.w	r2, r2, #3
 8007472:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2200      	movs	r2, #0
 8007478:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2200      	movs	r2, #0
 800747e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2201      	movs	r2, #1
 8007486:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800748e:	2b00      	cmp	r3, #0
 8007490:	d003      	beq.n	800749a <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007492:	68f8      	ldr	r0, [r7, #12]
 8007494:	f7ff ff00 	bl	8007298 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007498:	e002      	b.n	80074a0 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	f7ff fed4 	bl	8007248 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80074a0:	3710      	adds	r7, #16
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b084      	sub	sp, #16
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074b2:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f7ff fed1 	bl	800725c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80074ba:	bf00      	nop
 80074bc:	3710      	adds	r7, #16
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}

080074c2 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80074c2:	b580      	push	{r7, lr}
 80074c4:	b084      	sub	sp, #16
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074ce:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80074d0:	68f8      	ldr	r0, [r7, #12]
 80074d2:	f7ff fecd 	bl	8007270 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80074d6:	bf00      	nop
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80074de:	b580      	push	{r7, lr}
 80074e0:	b084      	sub	sp, #16
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074ea:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80074ec:	68f8      	ldr	r0, [r7, #12]
 80074ee:	f7ff fec9 	bl	8007284 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80074f2:	bf00      	nop
 80074f4:	3710      	adds	r7, #16
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}

080074fa <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80074fa:	b580      	push	{r7, lr}
 80074fc:	b084      	sub	sp, #16
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007506:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	685a      	ldr	r2, [r3, #4]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f022 0203 	bic.w	r2, r2, #3
 8007516:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800751c:	f043 0210 	orr.w	r2, r3, #16
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800752c:	68f8      	ldr	r0, [r7, #12]
 800752e:	f7ff feb3 	bl	8007298 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007532:	bf00      	nop
 8007534:	3710      	adds	r7, #16
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
	...

0800753c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b088      	sub	sp, #32
 8007540:	af00      	add	r7, sp, #0
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	60b9      	str	r1, [r7, #8]
 8007546:	603b      	str	r3, [r7, #0]
 8007548:	4613      	mov	r3, r2
 800754a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800754c:	f7fc fa64 	bl	8003a18 <HAL_GetTick>
 8007550:	4602      	mov	r2, r0
 8007552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007554:	1a9b      	subs	r3, r3, r2
 8007556:	683a      	ldr	r2, [r7, #0]
 8007558:	4413      	add	r3, r2
 800755a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800755c:	f7fc fa5c 	bl	8003a18 <HAL_GetTick>
 8007560:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007562:	4b39      	ldr	r3, [pc, #228]	@ (8007648 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	015b      	lsls	r3, r3, #5
 8007568:	0d1b      	lsrs	r3, r3, #20
 800756a:	69fa      	ldr	r2, [r7, #28]
 800756c:	fb02 f303 	mul.w	r3, r2, r3
 8007570:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007572:	e054      	b.n	800761e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800757a:	d050      	beq.n	800761e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800757c:	f7fc fa4c 	bl	8003a18 <HAL_GetTick>
 8007580:	4602      	mov	r2, r0
 8007582:	69bb      	ldr	r3, [r7, #24]
 8007584:	1ad3      	subs	r3, r2, r3
 8007586:	69fa      	ldr	r2, [r7, #28]
 8007588:	429a      	cmp	r2, r3
 800758a:	d902      	bls.n	8007592 <SPI_WaitFlagStateUntilTimeout+0x56>
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d13d      	bne.n	800760e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	685a      	ldr	r2, [r3, #4]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80075a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80075aa:	d111      	bne.n	80075d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075b4:	d004      	beq.n	80075c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075be:	d107      	bne.n	80075d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80075ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075d8:	d10f      	bne.n	80075fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80075e8:	601a      	str	r2, [r3, #0]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80075f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2201      	movs	r2, #1
 80075fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2200      	movs	r2, #0
 8007606:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800760a:	2303      	movs	r3, #3
 800760c:	e017      	b.n	800763e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d101      	bne.n	8007618 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007614:	2300      	movs	r3, #0
 8007616:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	3b01      	subs	r3, #1
 800761c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	689a      	ldr	r2, [r3, #8]
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	4013      	ands	r3, r2
 8007628:	68ba      	ldr	r2, [r7, #8]
 800762a:	429a      	cmp	r2, r3
 800762c:	bf0c      	ite	eq
 800762e:	2301      	moveq	r3, #1
 8007630:	2300      	movne	r3, #0
 8007632:	b2db      	uxtb	r3, r3
 8007634:	461a      	mov	r2, r3
 8007636:	79fb      	ldrb	r3, [r7, #7]
 8007638:	429a      	cmp	r2, r3
 800763a:	d19b      	bne.n	8007574 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3720      	adds	r7, #32
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	20000004 	.word	0x20000004

0800764c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b08a      	sub	sp, #40	@ 0x28
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	607a      	str	r2, [r7, #4]
 8007658:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800765a:	2300      	movs	r3, #0
 800765c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800765e:	f7fc f9db 	bl	8003a18 <HAL_GetTick>
 8007662:	4602      	mov	r2, r0
 8007664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007666:	1a9b      	subs	r3, r3, r2
 8007668:	683a      	ldr	r2, [r7, #0]
 800766a:	4413      	add	r3, r2
 800766c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800766e:	f7fc f9d3 	bl	8003a18 <HAL_GetTick>
 8007672:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	330c      	adds	r3, #12
 800767a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800767c:	4b3d      	ldr	r3, [pc, #244]	@ (8007774 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	4613      	mov	r3, r2
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	4413      	add	r3, r2
 8007686:	00da      	lsls	r2, r3, #3
 8007688:	1ad3      	subs	r3, r2, r3
 800768a:	0d1b      	lsrs	r3, r3, #20
 800768c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800768e:	fb02 f303 	mul.w	r3, r2, r3
 8007692:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007694:	e060      	b.n	8007758 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800769c:	d107      	bne.n	80076ae <SPI_WaitFifoStateUntilTimeout+0x62>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d104      	bne.n	80076ae <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80076ac:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80076b4:	d050      	beq.n	8007758 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80076b6:	f7fc f9af 	bl	8003a18 <HAL_GetTick>
 80076ba:	4602      	mov	r2, r0
 80076bc:	6a3b      	ldr	r3, [r7, #32]
 80076be:	1ad3      	subs	r3, r2, r3
 80076c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d902      	bls.n	80076cc <SPI_WaitFifoStateUntilTimeout+0x80>
 80076c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d13d      	bne.n	8007748 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	685a      	ldr	r2, [r3, #4]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80076da:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80076e4:	d111      	bne.n	800770a <SPI_WaitFifoStateUntilTimeout+0xbe>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076ee:	d004      	beq.n	80076fa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076f8:	d107      	bne.n	800770a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007708:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800770e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007712:	d10f      	bne.n	8007734 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007722:	601a      	str	r2, [r3, #0]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007732:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2200      	movs	r2, #0
 8007740:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007744:	2303      	movs	r3, #3
 8007746:	e010      	b.n	800776a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007748:	69bb      	ldr	r3, [r7, #24]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d101      	bne.n	8007752 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800774e:	2300      	movs	r3, #0
 8007750:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007752:	69bb      	ldr	r3, [r7, #24]
 8007754:	3b01      	subs	r3, #1
 8007756:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	689a      	ldr	r2, [r3, #8]
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	4013      	ands	r3, r2
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	429a      	cmp	r2, r3
 8007766:	d196      	bne.n	8007696 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007768:	2300      	movs	r3, #0
}
 800776a:	4618      	mov	r0, r3
 800776c:	3728      	adds	r7, #40	@ 0x28
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
 8007772:	bf00      	nop
 8007774:	20000004 	.word	0x20000004

08007778 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b086      	sub	sp, #24
 800777c:	af02      	add	r7, sp, #8
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800778c:	d111      	bne.n	80077b2 <SPI_EndRxTransaction+0x3a>
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007796:	d004      	beq.n	80077a2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077a0:	d107      	bne.n	80077b2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077b0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	9300      	str	r3, [sp, #0]
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	2200      	movs	r2, #0
 80077ba:	2180      	movs	r1, #128	@ 0x80
 80077bc:	68f8      	ldr	r0, [r7, #12]
 80077be:	f7ff febd 	bl	800753c <SPI_WaitFlagStateUntilTimeout>
 80077c2:	4603      	mov	r3, r0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d007      	beq.n	80077d8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077cc:	f043 0220 	orr.w	r2, r3, #32
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80077d4:	2303      	movs	r3, #3
 80077d6:	e023      	b.n	8007820 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80077e0:	d11d      	bne.n	800781e <SPI_EndRxTransaction+0xa6>
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077ea:	d004      	beq.n	80077f6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077f4:	d113      	bne.n	800781e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	9300      	str	r3, [sp, #0]
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007802:	68f8      	ldr	r0, [r7, #12]
 8007804:	f7ff ff22 	bl	800764c <SPI_WaitFifoStateUntilTimeout>
 8007808:	4603      	mov	r3, r0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d007      	beq.n	800781e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007812:	f043 0220 	orr.w	r2, r3, #32
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800781a:	2303      	movs	r3, #3
 800781c:	e000      	b.n	8007820 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800781e:	2300      	movs	r3, #0
}
 8007820:	4618      	mov	r0, r3
 8007822:	3710      	adds	r7, #16
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b086      	sub	sp, #24
 800782c:	af02      	add	r7, sp, #8
 800782e:	60f8      	str	r0, [r7, #12]
 8007830:	60b9      	str	r1, [r7, #8]
 8007832:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	9300      	str	r3, [sp, #0]
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	2200      	movs	r2, #0
 800783c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007840:	68f8      	ldr	r0, [r7, #12]
 8007842:	f7ff ff03 	bl	800764c <SPI_WaitFifoStateUntilTimeout>
 8007846:	4603      	mov	r3, r0
 8007848:	2b00      	cmp	r3, #0
 800784a:	d007      	beq.n	800785c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007850:	f043 0220 	orr.w	r2, r3, #32
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007858:	2303      	movs	r3, #3
 800785a:	e027      	b.n	80078ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	9300      	str	r3, [sp, #0]
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	2200      	movs	r2, #0
 8007864:	2180      	movs	r1, #128	@ 0x80
 8007866:	68f8      	ldr	r0, [r7, #12]
 8007868:	f7ff fe68 	bl	800753c <SPI_WaitFlagStateUntilTimeout>
 800786c:	4603      	mov	r3, r0
 800786e:	2b00      	cmp	r3, #0
 8007870:	d007      	beq.n	8007882 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007876:	f043 0220 	orr.w	r2, r3, #32
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800787e:	2303      	movs	r3, #3
 8007880:	e014      	b.n	80078ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	9300      	str	r3, [sp, #0]
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	2200      	movs	r2, #0
 800788a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800788e:	68f8      	ldr	r0, [r7, #12]
 8007890:	f7ff fedc 	bl	800764c <SPI_WaitFifoStateUntilTimeout>
 8007894:	4603      	mov	r3, r0
 8007896:	2b00      	cmp	r3, #0
 8007898:	d007      	beq.n	80078aa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800789e:	f043 0220 	orr.w	r2, r3, #32
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80078a6:	2303      	movs	r3, #3
 80078a8:	e000      	b.n	80078ac <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80078aa:	2300      	movs	r3, #0
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3710      	adds	r7, #16
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b082      	sub	sp, #8
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d101      	bne.n	80078c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	e049      	b.n	800795a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d106      	bne.n	80078e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2200      	movs	r2, #0
 80078d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f7fb f952 	bl	8002b84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2202      	movs	r2, #2
 80078e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	3304      	adds	r3, #4
 80078f0:	4619      	mov	r1, r3
 80078f2:	4610      	mov	r0, r2
 80078f4:	f000 f9c4 	bl	8007c80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2201      	movs	r2, #1
 8007904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2201      	movs	r2, #1
 800790c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2201      	movs	r2, #1
 8007914:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2201      	movs	r2, #1
 800791c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2201      	movs	r2, #1
 8007924:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2201      	movs	r2, #1
 800792c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2201      	movs	r2, #1
 8007954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007958:	2300      	movs	r3, #0
}
 800795a:	4618      	mov	r0, r3
 800795c:	3708      	adds	r7, #8
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
	...

08007964 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007964:	b480      	push	{r7}
 8007966:	b085      	sub	sp, #20
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007972:	b2db      	uxtb	r3, r3
 8007974:	2b01      	cmp	r3, #1
 8007976:	d001      	beq.n	800797c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007978:	2301      	movs	r3, #1
 800797a:	e054      	b.n	8007a26 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2202      	movs	r2, #2
 8007980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	68da      	ldr	r2, [r3, #12]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f042 0201 	orr.w	r2, r2, #1
 8007992:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a26      	ldr	r2, [pc, #152]	@ (8007a34 <HAL_TIM_Base_Start_IT+0xd0>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d022      	beq.n	80079e4 <HAL_TIM_Base_Start_IT+0x80>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079a6:	d01d      	beq.n	80079e4 <HAL_TIM_Base_Start_IT+0x80>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a22      	ldr	r2, [pc, #136]	@ (8007a38 <HAL_TIM_Base_Start_IT+0xd4>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d018      	beq.n	80079e4 <HAL_TIM_Base_Start_IT+0x80>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a21      	ldr	r2, [pc, #132]	@ (8007a3c <HAL_TIM_Base_Start_IT+0xd8>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d013      	beq.n	80079e4 <HAL_TIM_Base_Start_IT+0x80>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a1f      	ldr	r2, [pc, #124]	@ (8007a40 <HAL_TIM_Base_Start_IT+0xdc>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d00e      	beq.n	80079e4 <HAL_TIM_Base_Start_IT+0x80>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a1e      	ldr	r2, [pc, #120]	@ (8007a44 <HAL_TIM_Base_Start_IT+0xe0>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d009      	beq.n	80079e4 <HAL_TIM_Base_Start_IT+0x80>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a1c      	ldr	r2, [pc, #112]	@ (8007a48 <HAL_TIM_Base_Start_IT+0xe4>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d004      	beq.n	80079e4 <HAL_TIM_Base_Start_IT+0x80>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a1b      	ldr	r2, [pc, #108]	@ (8007a4c <HAL_TIM_Base_Start_IT+0xe8>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d115      	bne.n	8007a10 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	689a      	ldr	r2, [r3, #8]
 80079ea:	4b19      	ldr	r3, [pc, #100]	@ (8007a50 <HAL_TIM_Base_Start_IT+0xec>)
 80079ec:	4013      	ands	r3, r2
 80079ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2b06      	cmp	r3, #6
 80079f4:	d015      	beq.n	8007a22 <HAL_TIM_Base_Start_IT+0xbe>
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079fc:	d011      	beq.n	8007a22 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f042 0201 	orr.w	r2, r2, #1
 8007a0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a0e:	e008      	b.n	8007a22 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f042 0201 	orr.w	r2, r2, #1
 8007a1e:	601a      	str	r2, [r3, #0]
 8007a20:	e000      	b.n	8007a24 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3714      	adds	r7, #20
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr
 8007a32:	bf00      	nop
 8007a34:	40012c00 	.word	0x40012c00
 8007a38:	40000400 	.word	0x40000400
 8007a3c:	40000800 	.word	0x40000800
 8007a40:	40000c00 	.word	0x40000c00
 8007a44:	40013400 	.word	0x40013400
 8007a48:	40014000 	.word	0x40014000
 8007a4c:	40015000 	.word	0x40015000
 8007a50:	00010007 	.word	0x00010007

08007a54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d101      	bne.n	8007a70 <HAL_TIM_ConfigClockSource+0x1c>
 8007a6c:	2302      	movs	r3, #2
 8007a6e:	e0f6      	b.n	8007c5e <HAL_TIM_ConfigClockSource+0x20a>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2202      	movs	r2, #2
 8007a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007a8e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007a92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007a9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	68ba      	ldr	r2, [r7, #8]
 8007aa2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a6f      	ldr	r2, [pc, #444]	@ (8007c68 <HAL_TIM_ConfigClockSource+0x214>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	f000 80c1 	beq.w	8007c32 <HAL_TIM_ConfigClockSource+0x1de>
 8007ab0:	4a6d      	ldr	r2, [pc, #436]	@ (8007c68 <HAL_TIM_ConfigClockSource+0x214>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	f200 80c6 	bhi.w	8007c44 <HAL_TIM_ConfigClockSource+0x1f0>
 8007ab8:	4a6c      	ldr	r2, [pc, #432]	@ (8007c6c <HAL_TIM_ConfigClockSource+0x218>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	f000 80b9 	beq.w	8007c32 <HAL_TIM_ConfigClockSource+0x1de>
 8007ac0:	4a6a      	ldr	r2, [pc, #424]	@ (8007c6c <HAL_TIM_ConfigClockSource+0x218>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	f200 80be 	bhi.w	8007c44 <HAL_TIM_ConfigClockSource+0x1f0>
 8007ac8:	4a69      	ldr	r2, [pc, #420]	@ (8007c70 <HAL_TIM_ConfigClockSource+0x21c>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	f000 80b1 	beq.w	8007c32 <HAL_TIM_ConfigClockSource+0x1de>
 8007ad0:	4a67      	ldr	r2, [pc, #412]	@ (8007c70 <HAL_TIM_ConfigClockSource+0x21c>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	f200 80b6 	bhi.w	8007c44 <HAL_TIM_ConfigClockSource+0x1f0>
 8007ad8:	4a66      	ldr	r2, [pc, #408]	@ (8007c74 <HAL_TIM_ConfigClockSource+0x220>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	f000 80a9 	beq.w	8007c32 <HAL_TIM_ConfigClockSource+0x1de>
 8007ae0:	4a64      	ldr	r2, [pc, #400]	@ (8007c74 <HAL_TIM_ConfigClockSource+0x220>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	f200 80ae 	bhi.w	8007c44 <HAL_TIM_ConfigClockSource+0x1f0>
 8007ae8:	4a63      	ldr	r2, [pc, #396]	@ (8007c78 <HAL_TIM_ConfigClockSource+0x224>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	f000 80a1 	beq.w	8007c32 <HAL_TIM_ConfigClockSource+0x1de>
 8007af0:	4a61      	ldr	r2, [pc, #388]	@ (8007c78 <HAL_TIM_ConfigClockSource+0x224>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	f200 80a6 	bhi.w	8007c44 <HAL_TIM_ConfigClockSource+0x1f0>
 8007af8:	4a60      	ldr	r2, [pc, #384]	@ (8007c7c <HAL_TIM_ConfigClockSource+0x228>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	f000 8099 	beq.w	8007c32 <HAL_TIM_ConfigClockSource+0x1de>
 8007b00:	4a5e      	ldr	r2, [pc, #376]	@ (8007c7c <HAL_TIM_ConfigClockSource+0x228>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	f200 809e 	bhi.w	8007c44 <HAL_TIM_ConfigClockSource+0x1f0>
 8007b08:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007b0c:	f000 8091 	beq.w	8007c32 <HAL_TIM_ConfigClockSource+0x1de>
 8007b10:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007b14:	f200 8096 	bhi.w	8007c44 <HAL_TIM_ConfigClockSource+0x1f0>
 8007b18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b1c:	f000 8089 	beq.w	8007c32 <HAL_TIM_ConfigClockSource+0x1de>
 8007b20:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b24:	f200 808e 	bhi.w	8007c44 <HAL_TIM_ConfigClockSource+0x1f0>
 8007b28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b2c:	d03e      	beq.n	8007bac <HAL_TIM_ConfigClockSource+0x158>
 8007b2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b32:	f200 8087 	bhi.w	8007c44 <HAL_TIM_ConfigClockSource+0x1f0>
 8007b36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b3a:	f000 8086 	beq.w	8007c4a <HAL_TIM_ConfigClockSource+0x1f6>
 8007b3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b42:	d87f      	bhi.n	8007c44 <HAL_TIM_ConfigClockSource+0x1f0>
 8007b44:	2b70      	cmp	r3, #112	@ 0x70
 8007b46:	d01a      	beq.n	8007b7e <HAL_TIM_ConfigClockSource+0x12a>
 8007b48:	2b70      	cmp	r3, #112	@ 0x70
 8007b4a:	d87b      	bhi.n	8007c44 <HAL_TIM_ConfigClockSource+0x1f0>
 8007b4c:	2b60      	cmp	r3, #96	@ 0x60
 8007b4e:	d050      	beq.n	8007bf2 <HAL_TIM_ConfigClockSource+0x19e>
 8007b50:	2b60      	cmp	r3, #96	@ 0x60
 8007b52:	d877      	bhi.n	8007c44 <HAL_TIM_ConfigClockSource+0x1f0>
 8007b54:	2b50      	cmp	r3, #80	@ 0x50
 8007b56:	d03c      	beq.n	8007bd2 <HAL_TIM_ConfigClockSource+0x17e>
 8007b58:	2b50      	cmp	r3, #80	@ 0x50
 8007b5a:	d873      	bhi.n	8007c44 <HAL_TIM_ConfigClockSource+0x1f0>
 8007b5c:	2b40      	cmp	r3, #64	@ 0x40
 8007b5e:	d058      	beq.n	8007c12 <HAL_TIM_ConfigClockSource+0x1be>
 8007b60:	2b40      	cmp	r3, #64	@ 0x40
 8007b62:	d86f      	bhi.n	8007c44 <HAL_TIM_ConfigClockSource+0x1f0>
 8007b64:	2b30      	cmp	r3, #48	@ 0x30
 8007b66:	d064      	beq.n	8007c32 <HAL_TIM_ConfigClockSource+0x1de>
 8007b68:	2b30      	cmp	r3, #48	@ 0x30
 8007b6a:	d86b      	bhi.n	8007c44 <HAL_TIM_ConfigClockSource+0x1f0>
 8007b6c:	2b20      	cmp	r3, #32
 8007b6e:	d060      	beq.n	8007c32 <HAL_TIM_ConfigClockSource+0x1de>
 8007b70:	2b20      	cmp	r3, #32
 8007b72:	d867      	bhi.n	8007c44 <HAL_TIM_ConfigClockSource+0x1f0>
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d05c      	beq.n	8007c32 <HAL_TIM_ConfigClockSource+0x1de>
 8007b78:	2b10      	cmp	r3, #16
 8007b7a:	d05a      	beq.n	8007c32 <HAL_TIM_ConfigClockSource+0x1de>
 8007b7c:	e062      	b.n	8007c44 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007b8e:	f000 f9a7 	bl	8007ee0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007ba0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	68ba      	ldr	r2, [r7, #8]
 8007ba8:	609a      	str	r2, [r3, #8]
      break;
 8007baa:	e04f      	b.n	8007c4c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007bbc:	f000 f990 	bl	8007ee0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	689a      	ldr	r2, [r3, #8]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007bce:	609a      	str	r2, [r3, #8]
      break;
 8007bd0:	e03c      	b.n	8007c4c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bde:	461a      	mov	r2, r3
 8007be0:	f000 f902 	bl	8007de8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2150      	movs	r1, #80	@ 0x50
 8007bea:	4618      	mov	r0, r3
 8007bec:	f000 f95b 	bl	8007ea6 <TIM_ITRx_SetConfig>
      break;
 8007bf0:	e02c      	b.n	8007c4c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007bfe:	461a      	mov	r2, r3
 8007c00:	f000 f921 	bl	8007e46 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2160      	movs	r1, #96	@ 0x60
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f000 f94b 	bl	8007ea6 <TIM_ITRx_SetConfig>
      break;
 8007c10:	e01c      	b.n	8007c4c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c1e:	461a      	mov	r2, r3
 8007c20:	f000 f8e2 	bl	8007de8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2140      	movs	r1, #64	@ 0x40
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f000 f93b 	bl	8007ea6 <TIM_ITRx_SetConfig>
      break;
 8007c30:	e00c      	b.n	8007c4c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	4610      	mov	r0, r2
 8007c3e:	f000 f932 	bl	8007ea6 <TIM_ITRx_SetConfig>
      break;
 8007c42:	e003      	b.n	8007c4c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8007c44:	2301      	movs	r3, #1
 8007c46:	73fb      	strb	r3, [r7, #15]
      break;
 8007c48:	e000      	b.n	8007c4c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8007c4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3710      	adds	r7, #16
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	00100070 	.word	0x00100070
 8007c6c:	00100060 	.word	0x00100060
 8007c70:	00100050 	.word	0x00100050
 8007c74:	00100040 	.word	0x00100040
 8007c78:	00100030 	.word	0x00100030
 8007c7c:	00100020 	.word	0x00100020

08007c80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b085      	sub	sp, #20
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	4a4c      	ldr	r2, [pc, #304]	@ (8007dc4 <TIM_Base_SetConfig+0x144>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d017      	beq.n	8007cc8 <TIM_Base_SetConfig+0x48>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c9e:	d013      	beq.n	8007cc8 <TIM_Base_SetConfig+0x48>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	4a49      	ldr	r2, [pc, #292]	@ (8007dc8 <TIM_Base_SetConfig+0x148>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d00f      	beq.n	8007cc8 <TIM_Base_SetConfig+0x48>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	4a48      	ldr	r2, [pc, #288]	@ (8007dcc <TIM_Base_SetConfig+0x14c>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d00b      	beq.n	8007cc8 <TIM_Base_SetConfig+0x48>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	4a47      	ldr	r2, [pc, #284]	@ (8007dd0 <TIM_Base_SetConfig+0x150>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d007      	beq.n	8007cc8 <TIM_Base_SetConfig+0x48>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	4a46      	ldr	r2, [pc, #280]	@ (8007dd4 <TIM_Base_SetConfig+0x154>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d003      	beq.n	8007cc8 <TIM_Base_SetConfig+0x48>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	4a45      	ldr	r2, [pc, #276]	@ (8007dd8 <TIM_Base_SetConfig+0x158>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d108      	bne.n	8007cda <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	68fa      	ldr	r2, [r7, #12]
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4a39      	ldr	r2, [pc, #228]	@ (8007dc4 <TIM_Base_SetConfig+0x144>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d023      	beq.n	8007d2a <TIM_Base_SetConfig+0xaa>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ce8:	d01f      	beq.n	8007d2a <TIM_Base_SetConfig+0xaa>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4a36      	ldr	r2, [pc, #216]	@ (8007dc8 <TIM_Base_SetConfig+0x148>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d01b      	beq.n	8007d2a <TIM_Base_SetConfig+0xaa>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	4a35      	ldr	r2, [pc, #212]	@ (8007dcc <TIM_Base_SetConfig+0x14c>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d017      	beq.n	8007d2a <TIM_Base_SetConfig+0xaa>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	4a34      	ldr	r2, [pc, #208]	@ (8007dd0 <TIM_Base_SetConfig+0x150>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d013      	beq.n	8007d2a <TIM_Base_SetConfig+0xaa>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	4a33      	ldr	r2, [pc, #204]	@ (8007dd4 <TIM_Base_SetConfig+0x154>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d00f      	beq.n	8007d2a <TIM_Base_SetConfig+0xaa>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4a33      	ldr	r2, [pc, #204]	@ (8007ddc <TIM_Base_SetConfig+0x15c>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d00b      	beq.n	8007d2a <TIM_Base_SetConfig+0xaa>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	4a32      	ldr	r2, [pc, #200]	@ (8007de0 <TIM_Base_SetConfig+0x160>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d007      	beq.n	8007d2a <TIM_Base_SetConfig+0xaa>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	4a31      	ldr	r2, [pc, #196]	@ (8007de4 <TIM_Base_SetConfig+0x164>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d003      	beq.n	8007d2a <TIM_Base_SetConfig+0xaa>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4a2c      	ldr	r2, [pc, #176]	@ (8007dd8 <TIM_Base_SetConfig+0x158>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d108      	bne.n	8007d3c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	68db      	ldr	r3, [r3, #12]
 8007d36:	68fa      	ldr	r2, [r7, #12]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	695b      	ldr	r3, [r3, #20]
 8007d46:	4313      	orrs	r3, r2
 8007d48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	689a      	ldr	r2, [r3, #8]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	4a18      	ldr	r2, [pc, #96]	@ (8007dc4 <TIM_Base_SetConfig+0x144>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d013      	beq.n	8007d90 <TIM_Base_SetConfig+0x110>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	4a1a      	ldr	r2, [pc, #104]	@ (8007dd4 <TIM_Base_SetConfig+0x154>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d00f      	beq.n	8007d90 <TIM_Base_SetConfig+0x110>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4a1a      	ldr	r2, [pc, #104]	@ (8007ddc <TIM_Base_SetConfig+0x15c>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d00b      	beq.n	8007d90 <TIM_Base_SetConfig+0x110>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	4a19      	ldr	r2, [pc, #100]	@ (8007de0 <TIM_Base_SetConfig+0x160>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d007      	beq.n	8007d90 <TIM_Base_SetConfig+0x110>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	4a18      	ldr	r2, [pc, #96]	@ (8007de4 <TIM_Base_SetConfig+0x164>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d003      	beq.n	8007d90 <TIM_Base_SetConfig+0x110>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	4a13      	ldr	r2, [pc, #76]	@ (8007dd8 <TIM_Base_SetConfig+0x158>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d103      	bne.n	8007d98 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	691a      	ldr	r2, [r3, #16]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	691b      	ldr	r3, [r3, #16]
 8007da2:	f003 0301 	and.w	r3, r3, #1
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d105      	bne.n	8007db6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	691b      	ldr	r3, [r3, #16]
 8007dae:	f023 0201 	bic.w	r2, r3, #1
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	611a      	str	r2, [r3, #16]
  }
}
 8007db6:	bf00      	nop
 8007db8:	3714      	adds	r7, #20
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr
 8007dc2:	bf00      	nop
 8007dc4:	40012c00 	.word	0x40012c00
 8007dc8:	40000400 	.word	0x40000400
 8007dcc:	40000800 	.word	0x40000800
 8007dd0:	40000c00 	.word	0x40000c00
 8007dd4:	40013400 	.word	0x40013400
 8007dd8:	40015000 	.word	0x40015000
 8007ddc:	40014000 	.word	0x40014000
 8007de0:	40014400 	.word	0x40014400
 8007de4:	40014800 	.word	0x40014800

08007de8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b087      	sub	sp, #28
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	60b9      	str	r1, [r7, #8]
 8007df2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	6a1b      	ldr	r3, [r3, #32]
 8007df8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	6a1b      	ldr	r3, [r3, #32]
 8007dfe:	f023 0201 	bic.w	r2, r3, #1
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	699b      	ldr	r3, [r3, #24]
 8007e0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007e12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	011b      	lsls	r3, r3, #4
 8007e18:	693a      	ldr	r2, [r7, #16]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	f023 030a 	bic.w	r3, r3, #10
 8007e24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e26:	697a      	ldr	r2, [r7, #20]
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	693a      	ldr	r2, [r7, #16]
 8007e32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	697a      	ldr	r2, [r7, #20]
 8007e38:	621a      	str	r2, [r3, #32]
}
 8007e3a:	bf00      	nop
 8007e3c:	371c      	adds	r7, #28
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr

08007e46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e46:	b480      	push	{r7}
 8007e48:	b087      	sub	sp, #28
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	60f8      	str	r0, [r7, #12]
 8007e4e:	60b9      	str	r1, [r7, #8]
 8007e50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	6a1b      	ldr	r3, [r3, #32]
 8007e56:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	6a1b      	ldr	r3, [r3, #32]
 8007e5c:	f023 0210 	bic.w	r2, r3, #16
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	699b      	ldr	r3, [r3, #24]
 8007e68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007e70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	031b      	lsls	r3, r3, #12
 8007e76:	693a      	ldr	r2, [r7, #16]
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007e82:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	011b      	lsls	r3, r3, #4
 8007e88:	697a      	ldr	r2, [r7, #20]
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	693a      	ldr	r2, [r7, #16]
 8007e92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	697a      	ldr	r2, [r7, #20]
 8007e98:	621a      	str	r2, [r3, #32]
}
 8007e9a:	bf00      	nop
 8007e9c:	371c      	adds	r7, #28
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr

08007ea6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007ea6:	b480      	push	{r7}
 8007ea8:	b085      	sub	sp, #20
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
 8007eae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007ebc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ec0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ec2:	683a      	ldr	r2, [r7, #0]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	f043 0307 	orr.w	r3, r3, #7
 8007ecc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	68fa      	ldr	r2, [r7, #12]
 8007ed2:	609a      	str	r2, [r3, #8]
}
 8007ed4:	bf00      	nop
 8007ed6:	3714      	adds	r7, #20
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b087      	sub	sp, #28
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	607a      	str	r2, [r7, #4]
 8007eec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007efa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	021a      	lsls	r2, r3, #8
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	431a      	orrs	r2, r3
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	4313      	orrs	r3, r2
 8007f08:	697a      	ldr	r2, [r7, #20]
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	697a      	ldr	r2, [r7, #20]
 8007f12:	609a      	str	r2, [r3, #8]
}
 8007f14:	bf00      	nop
 8007f16:	371c      	adds	r7, #28
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b085      	sub	sp, #20
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d101      	bne.n	8007f38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f34:	2302      	movs	r3, #2
 8007f36:	e074      	b.n	8008022 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2202      	movs	r2, #2
 8007f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a34      	ldr	r2, [pc, #208]	@ (8008030 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d009      	beq.n	8007f76 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a33      	ldr	r2, [pc, #204]	@ (8008034 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d004      	beq.n	8007f76 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a31      	ldr	r2, [pc, #196]	@ (8008038 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d108      	bne.n	8007f88 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007f7c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	4313      	orrs	r3, r2
 8007f86:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007f8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	68fa      	ldr	r2, [r7, #12]
 8007fa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a21      	ldr	r2, [pc, #132]	@ (8008030 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d022      	beq.n	8007ff6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fb8:	d01d      	beq.n	8007ff6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a1f      	ldr	r2, [pc, #124]	@ (800803c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d018      	beq.n	8007ff6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a1d      	ldr	r2, [pc, #116]	@ (8008040 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d013      	beq.n	8007ff6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a1c      	ldr	r2, [pc, #112]	@ (8008044 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d00e      	beq.n	8007ff6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a15      	ldr	r2, [pc, #84]	@ (8008034 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d009      	beq.n	8007ff6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a18      	ldr	r2, [pc, #96]	@ (8008048 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d004      	beq.n	8007ff6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a11      	ldr	r2, [pc, #68]	@ (8008038 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d10c      	bne.n	8008010 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ffc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	689b      	ldr	r3, [r3, #8]
 8008002:	68ba      	ldr	r2, [r7, #8]
 8008004:	4313      	orrs	r3, r2
 8008006:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	68ba      	ldr	r2, [r7, #8]
 800800e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2201      	movs	r2, #1
 8008014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2200      	movs	r2, #0
 800801c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008020:	2300      	movs	r3, #0
}
 8008022:	4618      	mov	r0, r3
 8008024:	3714      	adds	r7, #20
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	40012c00 	.word	0x40012c00
 8008034:	40013400 	.word	0x40013400
 8008038:	40015000 	.word	0x40015000
 800803c:	40000400 	.word	0x40000400
 8008040:	40000800 	.word	0x40000800
 8008044:	40000c00 	.word	0x40000c00
 8008048:	40014000 	.word	0x40014000

0800804c <__cvt>:
 800804c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008050:	ec57 6b10 	vmov	r6, r7, d0
 8008054:	2f00      	cmp	r7, #0
 8008056:	460c      	mov	r4, r1
 8008058:	4619      	mov	r1, r3
 800805a:	463b      	mov	r3, r7
 800805c:	bfbb      	ittet	lt
 800805e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008062:	461f      	movlt	r7, r3
 8008064:	2300      	movge	r3, #0
 8008066:	232d      	movlt	r3, #45	@ 0x2d
 8008068:	700b      	strb	r3, [r1, #0]
 800806a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800806c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008070:	4691      	mov	r9, r2
 8008072:	f023 0820 	bic.w	r8, r3, #32
 8008076:	bfbc      	itt	lt
 8008078:	4632      	movlt	r2, r6
 800807a:	4616      	movlt	r6, r2
 800807c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008080:	d005      	beq.n	800808e <__cvt+0x42>
 8008082:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008086:	d100      	bne.n	800808a <__cvt+0x3e>
 8008088:	3401      	adds	r4, #1
 800808a:	2102      	movs	r1, #2
 800808c:	e000      	b.n	8008090 <__cvt+0x44>
 800808e:	2103      	movs	r1, #3
 8008090:	ab03      	add	r3, sp, #12
 8008092:	9301      	str	r3, [sp, #4]
 8008094:	ab02      	add	r3, sp, #8
 8008096:	9300      	str	r3, [sp, #0]
 8008098:	ec47 6b10 	vmov	d0, r6, r7
 800809c:	4653      	mov	r3, sl
 800809e:	4622      	mov	r2, r4
 80080a0:	f000 fe46 	bl	8008d30 <_dtoa_r>
 80080a4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80080a8:	4605      	mov	r5, r0
 80080aa:	d119      	bne.n	80080e0 <__cvt+0x94>
 80080ac:	f019 0f01 	tst.w	r9, #1
 80080b0:	d00e      	beq.n	80080d0 <__cvt+0x84>
 80080b2:	eb00 0904 	add.w	r9, r0, r4
 80080b6:	2200      	movs	r2, #0
 80080b8:	2300      	movs	r3, #0
 80080ba:	4630      	mov	r0, r6
 80080bc:	4639      	mov	r1, r7
 80080be:	f7f8 fd2b 	bl	8000b18 <__aeabi_dcmpeq>
 80080c2:	b108      	cbz	r0, 80080c8 <__cvt+0x7c>
 80080c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80080c8:	2230      	movs	r2, #48	@ 0x30
 80080ca:	9b03      	ldr	r3, [sp, #12]
 80080cc:	454b      	cmp	r3, r9
 80080ce:	d31e      	bcc.n	800810e <__cvt+0xc2>
 80080d0:	9b03      	ldr	r3, [sp, #12]
 80080d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80080d4:	1b5b      	subs	r3, r3, r5
 80080d6:	4628      	mov	r0, r5
 80080d8:	6013      	str	r3, [r2, #0]
 80080da:	b004      	add	sp, #16
 80080dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80080e4:	eb00 0904 	add.w	r9, r0, r4
 80080e8:	d1e5      	bne.n	80080b6 <__cvt+0x6a>
 80080ea:	7803      	ldrb	r3, [r0, #0]
 80080ec:	2b30      	cmp	r3, #48	@ 0x30
 80080ee:	d10a      	bne.n	8008106 <__cvt+0xba>
 80080f0:	2200      	movs	r2, #0
 80080f2:	2300      	movs	r3, #0
 80080f4:	4630      	mov	r0, r6
 80080f6:	4639      	mov	r1, r7
 80080f8:	f7f8 fd0e 	bl	8000b18 <__aeabi_dcmpeq>
 80080fc:	b918      	cbnz	r0, 8008106 <__cvt+0xba>
 80080fe:	f1c4 0401 	rsb	r4, r4, #1
 8008102:	f8ca 4000 	str.w	r4, [sl]
 8008106:	f8da 3000 	ldr.w	r3, [sl]
 800810a:	4499      	add	r9, r3
 800810c:	e7d3      	b.n	80080b6 <__cvt+0x6a>
 800810e:	1c59      	adds	r1, r3, #1
 8008110:	9103      	str	r1, [sp, #12]
 8008112:	701a      	strb	r2, [r3, #0]
 8008114:	e7d9      	b.n	80080ca <__cvt+0x7e>

08008116 <__exponent>:
 8008116:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008118:	2900      	cmp	r1, #0
 800811a:	bfba      	itte	lt
 800811c:	4249      	neglt	r1, r1
 800811e:	232d      	movlt	r3, #45	@ 0x2d
 8008120:	232b      	movge	r3, #43	@ 0x2b
 8008122:	2909      	cmp	r1, #9
 8008124:	7002      	strb	r2, [r0, #0]
 8008126:	7043      	strb	r3, [r0, #1]
 8008128:	dd29      	ble.n	800817e <__exponent+0x68>
 800812a:	f10d 0307 	add.w	r3, sp, #7
 800812e:	461d      	mov	r5, r3
 8008130:	270a      	movs	r7, #10
 8008132:	461a      	mov	r2, r3
 8008134:	fbb1 f6f7 	udiv	r6, r1, r7
 8008138:	fb07 1416 	mls	r4, r7, r6, r1
 800813c:	3430      	adds	r4, #48	@ 0x30
 800813e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008142:	460c      	mov	r4, r1
 8008144:	2c63      	cmp	r4, #99	@ 0x63
 8008146:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800814a:	4631      	mov	r1, r6
 800814c:	dcf1      	bgt.n	8008132 <__exponent+0x1c>
 800814e:	3130      	adds	r1, #48	@ 0x30
 8008150:	1e94      	subs	r4, r2, #2
 8008152:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008156:	1c41      	adds	r1, r0, #1
 8008158:	4623      	mov	r3, r4
 800815a:	42ab      	cmp	r3, r5
 800815c:	d30a      	bcc.n	8008174 <__exponent+0x5e>
 800815e:	f10d 0309 	add.w	r3, sp, #9
 8008162:	1a9b      	subs	r3, r3, r2
 8008164:	42ac      	cmp	r4, r5
 8008166:	bf88      	it	hi
 8008168:	2300      	movhi	r3, #0
 800816a:	3302      	adds	r3, #2
 800816c:	4403      	add	r3, r0
 800816e:	1a18      	subs	r0, r3, r0
 8008170:	b003      	add	sp, #12
 8008172:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008174:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008178:	f801 6f01 	strb.w	r6, [r1, #1]!
 800817c:	e7ed      	b.n	800815a <__exponent+0x44>
 800817e:	2330      	movs	r3, #48	@ 0x30
 8008180:	3130      	adds	r1, #48	@ 0x30
 8008182:	7083      	strb	r3, [r0, #2]
 8008184:	70c1      	strb	r1, [r0, #3]
 8008186:	1d03      	adds	r3, r0, #4
 8008188:	e7f1      	b.n	800816e <__exponent+0x58>
	...

0800818c <_printf_float>:
 800818c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008190:	b08d      	sub	sp, #52	@ 0x34
 8008192:	460c      	mov	r4, r1
 8008194:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008198:	4616      	mov	r6, r2
 800819a:	461f      	mov	r7, r3
 800819c:	4605      	mov	r5, r0
 800819e:	f000 fcb9 	bl	8008b14 <_localeconv_r>
 80081a2:	6803      	ldr	r3, [r0, #0]
 80081a4:	9304      	str	r3, [sp, #16]
 80081a6:	4618      	mov	r0, r3
 80081a8:	f7f8 f88a 	bl	80002c0 <strlen>
 80081ac:	2300      	movs	r3, #0
 80081ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80081b0:	f8d8 3000 	ldr.w	r3, [r8]
 80081b4:	9005      	str	r0, [sp, #20]
 80081b6:	3307      	adds	r3, #7
 80081b8:	f023 0307 	bic.w	r3, r3, #7
 80081bc:	f103 0208 	add.w	r2, r3, #8
 80081c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80081c4:	f8d4 b000 	ldr.w	fp, [r4]
 80081c8:	f8c8 2000 	str.w	r2, [r8]
 80081cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80081d0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80081d4:	9307      	str	r3, [sp, #28]
 80081d6:	f8cd 8018 	str.w	r8, [sp, #24]
 80081da:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80081de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80081e2:	4b9c      	ldr	r3, [pc, #624]	@ (8008454 <_printf_float+0x2c8>)
 80081e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80081e8:	f7f8 fcc8 	bl	8000b7c <__aeabi_dcmpun>
 80081ec:	bb70      	cbnz	r0, 800824c <_printf_float+0xc0>
 80081ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80081f2:	4b98      	ldr	r3, [pc, #608]	@ (8008454 <_printf_float+0x2c8>)
 80081f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80081f8:	f7f8 fca2 	bl	8000b40 <__aeabi_dcmple>
 80081fc:	bb30      	cbnz	r0, 800824c <_printf_float+0xc0>
 80081fe:	2200      	movs	r2, #0
 8008200:	2300      	movs	r3, #0
 8008202:	4640      	mov	r0, r8
 8008204:	4649      	mov	r1, r9
 8008206:	f7f8 fc91 	bl	8000b2c <__aeabi_dcmplt>
 800820a:	b110      	cbz	r0, 8008212 <_printf_float+0x86>
 800820c:	232d      	movs	r3, #45	@ 0x2d
 800820e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008212:	4a91      	ldr	r2, [pc, #580]	@ (8008458 <_printf_float+0x2cc>)
 8008214:	4b91      	ldr	r3, [pc, #580]	@ (800845c <_printf_float+0x2d0>)
 8008216:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800821a:	bf8c      	ite	hi
 800821c:	4690      	movhi	r8, r2
 800821e:	4698      	movls	r8, r3
 8008220:	2303      	movs	r3, #3
 8008222:	6123      	str	r3, [r4, #16]
 8008224:	f02b 0304 	bic.w	r3, fp, #4
 8008228:	6023      	str	r3, [r4, #0]
 800822a:	f04f 0900 	mov.w	r9, #0
 800822e:	9700      	str	r7, [sp, #0]
 8008230:	4633      	mov	r3, r6
 8008232:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008234:	4621      	mov	r1, r4
 8008236:	4628      	mov	r0, r5
 8008238:	f000 f9d2 	bl	80085e0 <_printf_common>
 800823c:	3001      	adds	r0, #1
 800823e:	f040 808d 	bne.w	800835c <_printf_float+0x1d0>
 8008242:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008246:	b00d      	add	sp, #52	@ 0x34
 8008248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800824c:	4642      	mov	r2, r8
 800824e:	464b      	mov	r3, r9
 8008250:	4640      	mov	r0, r8
 8008252:	4649      	mov	r1, r9
 8008254:	f7f8 fc92 	bl	8000b7c <__aeabi_dcmpun>
 8008258:	b140      	cbz	r0, 800826c <_printf_float+0xe0>
 800825a:	464b      	mov	r3, r9
 800825c:	2b00      	cmp	r3, #0
 800825e:	bfbc      	itt	lt
 8008260:	232d      	movlt	r3, #45	@ 0x2d
 8008262:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008266:	4a7e      	ldr	r2, [pc, #504]	@ (8008460 <_printf_float+0x2d4>)
 8008268:	4b7e      	ldr	r3, [pc, #504]	@ (8008464 <_printf_float+0x2d8>)
 800826a:	e7d4      	b.n	8008216 <_printf_float+0x8a>
 800826c:	6863      	ldr	r3, [r4, #4]
 800826e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008272:	9206      	str	r2, [sp, #24]
 8008274:	1c5a      	adds	r2, r3, #1
 8008276:	d13b      	bne.n	80082f0 <_printf_float+0x164>
 8008278:	2306      	movs	r3, #6
 800827a:	6063      	str	r3, [r4, #4]
 800827c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008280:	2300      	movs	r3, #0
 8008282:	6022      	str	r2, [r4, #0]
 8008284:	9303      	str	r3, [sp, #12]
 8008286:	ab0a      	add	r3, sp, #40	@ 0x28
 8008288:	e9cd a301 	strd	sl, r3, [sp, #4]
 800828c:	ab09      	add	r3, sp, #36	@ 0x24
 800828e:	9300      	str	r3, [sp, #0]
 8008290:	6861      	ldr	r1, [r4, #4]
 8008292:	ec49 8b10 	vmov	d0, r8, r9
 8008296:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800829a:	4628      	mov	r0, r5
 800829c:	f7ff fed6 	bl	800804c <__cvt>
 80082a0:	9b06      	ldr	r3, [sp, #24]
 80082a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80082a4:	2b47      	cmp	r3, #71	@ 0x47
 80082a6:	4680      	mov	r8, r0
 80082a8:	d129      	bne.n	80082fe <_printf_float+0x172>
 80082aa:	1cc8      	adds	r0, r1, #3
 80082ac:	db02      	blt.n	80082b4 <_printf_float+0x128>
 80082ae:	6863      	ldr	r3, [r4, #4]
 80082b0:	4299      	cmp	r1, r3
 80082b2:	dd41      	ble.n	8008338 <_printf_float+0x1ac>
 80082b4:	f1aa 0a02 	sub.w	sl, sl, #2
 80082b8:	fa5f fa8a 	uxtb.w	sl, sl
 80082bc:	3901      	subs	r1, #1
 80082be:	4652      	mov	r2, sl
 80082c0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80082c4:	9109      	str	r1, [sp, #36]	@ 0x24
 80082c6:	f7ff ff26 	bl	8008116 <__exponent>
 80082ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80082cc:	1813      	adds	r3, r2, r0
 80082ce:	2a01      	cmp	r2, #1
 80082d0:	4681      	mov	r9, r0
 80082d2:	6123      	str	r3, [r4, #16]
 80082d4:	dc02      	bgt.n	80082dc <_printf_float+0x150>
 80082d6:	6822      	ldr	r2, [r4, #0]
 80082d8:	07d2      	lsls	r2, r2, #31
 80082da:	d501      	bpl.n	80082e0 <_printf_float+0x154>
 80082dc:	3301      	adds	r3, #1
 80082de:	6123      	str	r3, [r4, #16]
 80082e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d0a2      	beq.n	800822e <_printf_float+0xa2>
 80082e8:	232d      	movs	r3, #45	@ 0x2d
 80082ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80082ee:	e79e      	b.n	800822e <_printf_float+0xa2>
 80082f0:	9a06      	ldr	r2, [sp, #24]
 80082f2:	2a47      	cmp	r2, #71	@ 0x47
 80082f4:	d1c2      	bne.n	800827c <_printf_float+0xf0>
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d1c0      	bne.n	800827c <_printf_float+0xf0>
 80082fa:	2301      	movs	r3, #1
 80082fc:	e7bd      	b.n	800827a <_printf_float+0xee>
 80082fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008302:	d9db      	bls.n	80082bc <_printf_float+0x130>
 8008304:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008308:	d118      	bne.n	800833c <_printf_float+0x1b0>
 800830a:	2900      	cmp	r1, #0
 800830c:	6863      	ldr	r3, [r4, #4]
 800830e:	dd0b      	ble.n	8008328 <_printf_float+0x19c>
 8008310:	6121      	str	r1, [r4, #16]
 8008312:	b913      	cbnz	r3, 800831a <_printf_float+0x18e>
 8008314:	6822      	ldr	r2, [r4, #0]
 8008316:	07d0      	lsls	r0, r2, #31
 8008318:	d502      	bpl.n	8008320 <_printf_float+0x194>
 800831a:	3301      	adds	r3, #1
 800831c:	440b      	add	r3, r1
 800831e:	6123      	str	r3, [r4, #16]
 8008320:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008322:	f04f 0900 	mov.w	r9, #0
 8008326:	e7db      	b.n	80082e0 <_printf_float+0x154>
 8008328:	b913      	cbnz	r3, 8008330 <_printf_float+0x1a4>
 800832a:	6822      	ldr	r2, [r4, #0]
 800832c:	07d2      	lsls	r2, r2, #31
 800832e:	d501      	bpl.n	8008334 <_printf_float+0x1a8>
 8008330:	3302      	adds	r3, #2
 8008332:	e7f4      	b.n	800831e <_printf_float+0x192>
 8008334:	2301      	movs	r3, #1
 8008336:	e7f2      	b.n	800831e <_printf_float+0x192>
 8008338:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800833c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800833e:	4299      	cmp	r1, r3
 8008340:	db05      	blt.n	800834e <_printf_float+0x1c2>
 8008342:	6823      	ldr	r3, [r4, #0]
 8008344:	6121      	str	r1, [r4, #16]
 8008346:	07d8      	lsls	r0, r3, #31
 8008348:	d5ea      	bpl.n	8008320 <_printf_float+0x194>
 800834a:	1c4b      	adds	r3, r1, #1
 800834c:	e7e7      	b.n	800831e <_printf_float+0x192>
 800834e:	2900      	cmp	r1, #0
 8008350:	bfd4      	ite	le
 8008352:	f1c1 0202 	rsble	r2, r1, #2
 8008356:	2201      	movgt	r2, #1
 8008358:	4413      	add	r3, r2
 800835a:	e7e0      	b.n	800831e <_printf_float+0x192>
 800835c:	6823      	ldr	r3, [r4, #0]
 800835e:	055a      	lsls	r2, r3, #21
 8008360:	d407      	bmi.n	8008372 <_printf_float+0x1e6>
 8008362:	6923      	ldr	r3, [r4, #16]
 8008364:	4642      	mov	r2, r8
 8008366:	4631      	mov	r1, r6
 8008368:	4628      	mov	r0, r5
 800836a:	47b8      	blx	r7
 800836c:	3001      	adds	r0, #1
 800836e:	d12b      	bne.n	80083c8 <_printf_float+0x23c>
 8008370:	e767      	b.n	8008242 <_printf_float+0xb6>
 8008372:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008376:	f240 80dd 	bls.w	8008534 <_printf_float+0x3a8>
 800837a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800837e:	2200      	movs	r2, #0
 8008380:	2300      	movs	r3, #0
 8008382:	f7f8 fbc9 	bl	8000b18 <__aeabi_dcmpeq>
 8008386:	2800      	cmp	r0, #0
 8008388:	d033      	beq.n	80083f2 <_printf_float+0x266>
 800838a:	4a37      	ldr	r2, [pc, #220]	@ (8008468 <_printf_float+0x2dc>)
 800838c:	2301      	movs	r3, #1
 800838e:	4631      	mov	r1, r6
 8008390:	4628      	mov	r0, r5
 8008392:	47b8      	blx	r7
 8008394:	3001      	adds	r0, #1
 8008396:	f43f af54 	beq.w	8008242 <_printf_float+0xb6>
 800839a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800839e:	4543      	cmp	r3, r8
 80083a0:	db02      	blt.n	80083a8 <_printf_float+0x21c>
 80083a2:	6823      	ldr	r3, [r4, #0]
 80083a4:	07d8      	lsls	r0, r3, #31
 80083a6:	d50f      	bpl.n	80083c8 <_printf_float+0x23c>
 80083a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083ac:	4631      	mov	r1, r6
 80083ae:	4628      	mov	r0, r5
 80083b0:	47b8      	blx	r7
 80083b2:	3001      	adds	r0, #1
 80083b4:	f43f af45 	beq.w	8008242 <_printf_float+0xb6>
 80083b8:	f04f 0900 	mov.w	r9, #0
 80083bc:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80083c0:	f104 0a1a 	add.w	sl, r4, #26
 80083c4:	45c8      	cmp	r8, r9
 80083c6:	dc09      	bgt.n	80083dc <_printf_float+0x250>
 80083c8:	6823      	ldr	r3, [r4, #0]
 80083ca:	079b      	lsls	r3, r3, #30
 80083cc:	f100 8103 	bmi.w	80085d6 <_printf_float+0x44a>
 80083d0:	68e0      	ldr	r0, [r4, #12]
 80083d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083d4:	4298      	cmp	r0, r3
 80083d6:	bfb8      	it	lt
 80083d8:	4618      	movlt	r0, r3
 80083da:	e734      	b.n	8008246 <_printf_float+0xba>
 80083dc:	2301      	movs	r3, #1
 80083de:	4652      	mov	r2, sl
 80083e0:	4631      	mov	r1, r6
 80083e2:	4628      	mov	r0, r5
 80083e4:	47b8      	blx	r7
 80083e6:	3001      	adds	r0, #1
 80083e8:	f43f af2b 	beq.w	8008242 <_printf_float+0xb6>
 80083ec:	f109 0901 	add.w	r9, r9, #1
 80083f0:	e7e8      	b.n	80083c4 <_printf_float+0x238>
 80083f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	dc39      	bgt.n	800846c <_printf_float+0x2e0>
 80083f8:	4a1b      	ldr	r2, [pc, #108]	@ (8008468 <_printf_float+0x2dc>)
 80083fa:	2301      	movs	r3, #1
 80083fc:	4631      	mov	r1, r6
 80083fe:	4628      	mov	r0, r5
 8008400:	47b8      	blx	r7
 8008402:	3001      	adds	r0, #1
 8008404:	f43f af1d 	beq.w	8008242 <_printf_float+0xb6>
 8008408:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800840c:	ea59 0303 	orrs.w	r3, r9, r3
 8008410:	d102      	bne.n	8008418 <_printf_float+0x28c>
 8008412:	6823      	ldr	r3, [r4, #0]
 8008414:	07d9      	lsls	r1, r3, #31
 8008416:	d5d7      	bpl.n	80083c8 <_printf_float+0x23c>
 8008418:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800841c:	4631      	mov	r1, r6
 800841e:	4628      	mov	r0, r5
 8008420:	47b8      	blx	r7
 8008422:	3001      	adds	r0, #1
 8008424:	f43f af0d 	beq.w	8008242 <_printf_float+0xb6>
 8008428:	f04f 0a00 	mov.w	sl, #0
 800842c:	f104 0b1a 	add.w	fp, r4, #26
 8008430:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008432:	425b      	negs	r3, r3
 8008434:	4553      	cmp	r3, sl
 8008436:	dc01      	bgt.n	800843c <_printf_float+0x2b0>
 8008438:	464b      	mov	r3, r9
 800843a:	e793      	b.n	8008364 <_printf_float+0x1d8>
 800843c:	2301      	movs	r3, #1
 800843e:	465a      	mov	r2, fp
 8008440:	4631      	mov	r1, r6
 8008442:	4628      	mov	r0, r5
 8008444:	47b8      	blx	r7
 8008446:	3001      	adds	r0, #1
 8008448:	f43f aefb 	beq.w	8008242 <_printf_float+0xb6>
 800844c:	f10a 0a01 	add.w	sl, sl, #1
 8008450:	e7ee      	b.n	8008430 <_printf_float+0x2a4>
 8008452:	bf00      	nop
 8008454:	7fefffff 	.word	0x7fefffff
 8008458:	0800aa04 	.word	0x0800aa04
 800845c:	0800aa00 	.word	0x0800aa00
 8008460:	0800aa0c 	.word	0x0800aa0c
 8008464:	0800aa08 	.word	0x0800aa08
 8008468:	0800aa10 	.word	0x0800aa10
 800846c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800846e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008472:	4553      	cmp	r3, sl
 8008474:	bfa8      	it	ge
 8008476:	4653      	movge	r3, sl
 8008478:	2b00      	cmp	r3, #0
 800847a:	4699      	mov	r9, r3
 800847c:	dc36      	bgt.n	80084ec <_printf_float+0x360>
 800847e:	f04f 0b00 	mov.w	fp, #0
 8008482:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008486:	f104 021a 	add.w	r2, r4, #26
 800848a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800848c:	9306      	str	r3, [sp, #24]
 800848e:	eba3 0309 	sub.w	r3, r3, r9
 8008492:	455b      	cmp	r3, fp
 8008494:	dc31      	bgt.n	80084fa <_printf_float+0x36e>
 8008496:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008498:	459a      	cmp	sl, r3
 800849a:	dc3a      	bgt.n	8008512 <_printf_float+0x386>
 800849c:	6823      	ldr	r3, [r4, #0]
 800849e:	07da      	lsls	r2, r3, #31
 80084a0:	d437      	bmi.n	8008512 <_printf_float+0x386>
 80084a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084a4:	ebaa 0903 	sub.w	r9, sl, r3
 80084a8:	9b06      	ldr	r3, [sp, #24]
 80084aa:	ebaa 0303 	sub.w	r3, sl, r3
 80084ae:	4599      	cmp	r9, r3
 80084b0:	bfa8      	it	ge
 80084b2:	4699      	movge	r9, r3
 80084b4:	f1b9 0f00 	cmp.w	r9, #0
 80084b8:	dc33      	bgt.n	8008522 <_printf_float+0x396>
 80084ba:	f04f 0800 	mov.w	r8, #0
 80084be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80084c2:	f104 0b1a 	add.w	fp, r4, #26
 80084c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084c8:	ebaa 0303 	sub.w	r3, sl, r3
 80084cc:	eba3 0309 	sub.w	r3, r3, r9
 80084d0:	4543      	cmp	r3, r8
 80084d2:	f77f af79 	ble.w	80083c8 <_printf_float+0x23c>
 80084d6:	2301      	movs	r3, #1
 80084d8:	465a      	mov	r2, fp
 80084da:	4631      	mov	r1, r6
 80084dc:	4628      	mov	r0, r5
 80084de:	47b8      	blx	r7
 80084e0:	3001      	adds	r0, #1
 80084e2:	f43f aeae 	beq.w	8008242 <_printf_float+0xb6>
 80084e6:	f108 0801 	add.w	r8, r8, #1
 80084ea:	e7ec      	b.n	80084c6 <_printf_float+0x33a>
 80084ec:	4642      	mov	r2, r8
 80084ee:	4631      	mov	r1, r6
 80084f0:	4628      	mov	r0, r5
 80084f2:	47b8      	blx	r7
 80084f4:	3001      	adds	r0, #1
 80084f6:	d1c2      	bne.n	800847e <_printf_float+0x2f2>
 80084f8:	e6a3      	b.n	8008242 <_printf_float+0xb6>
 80084fa:	2301      	movs	r3, #1
 80084fc:	4631      	mov	r1, r6
 80084fe:	4628      	mov	r0, r5
 8008500:	9206      	str	r2, [sp, #24]
 8008502:	47b8      	blx	r7
 8008504:	3001      	adds	r0, #1
 8008506:	f43f ae9c 	beq.w	8008242 <_printf_float+0xb6>
 800850a:	9a06      	ldr	r2, [sp, #24]
 800850c:	f10b 0b01 	add.w	fp, fp, #1
 8008510:	e7bb      	b.n	800848a <_printf_float+0x2fe>
 8008512:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008516:	4631      	mov	r1, r6
 8008518:	4628      	mov	r0, r5
 800851a:	47b8      	blx	r7
 800851c:	3001      	adds	r0, #1
 800851e:	d1c0      	bne.n	80084a2 <_printf_float+0x316>
 8008520:	e68f      	b.n	8008242 <_printf_float+0xb6>
 8008522:	9a06      	ldr	r2, [sp, #24]
 8008524:	464b      	mov	r3, r9
 8008526:	4442      	add	r2, r8
 8008528:	4631      	mov	r1, r6
 800852a:	4628      	mov	r0, r5
 800852c:	47b8      	blx	r7
 800852e:	3001      	adds	r0, #1
 8008530:	d1c3      	bne.n	80084ba <_printf_float+0x32e>
 8008532:	e686      	b.n	8008242 <_printf_float+0xb6>
 8008534:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008538:	f1ba 0f01 	cmp.w	sl, #1
 800853c:	dc01      	bgt.n	8008542 <_printf_float+0x3b6>
 800853e:	07db      	lsls	r3, r3, #31
 8008540:	d536      	bpl.n	80085b0 <_printf_float+0x424>
 8008542:	2301      	movs	r3, #1
 8008544:	4642      	mov	r2, r8
 8008546:	4631      	mov	r1, r6
 8008548:	4628      	mov	r0, r5
 800854a:	47b8      	blx	r7
 800854c:	3001      	adds	r0, #1
 800854e:	f43f ae78 	beq.w	8008242 <_printf_float+0xb6>
 8008552:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008556:	4631      	mov	r1, r6
 8008558:	4628      	mov	r0, r5
 800855a:	47b8      	blx	r7
 800855c:	3001      	adds	r0, #1
 800855e:	f43f ae70 	beq.w	8008242 <_printf_float+0xb6>
 8008562:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008566:	2200      	movs	r2, #0
 8008568:	2300      	movs	r3, #0
 800856a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800856e:	f7f8 fad3 	bl	8000b18 <__aeabi_dcmpeq>
 8008572:	b9c0      	cbnz	r0, 80085a6 <_printf_float+0x41a>
 8008574:	4653      	mov	r3, sl
 8008576:	f108 0201 	add.w	r2, r8, #1
 800857a:	4631      	mov	r1, r6
 800857c:	4628      	mov	r0, r5
 800857e:	47b8      	blx	r7
 8008580:	3001      	adds	r0, #1
 8008582:	d10c      	bne.n	800859e <_printf_float+0x412>
 8008584:	e65d      	b.n	8008242 <_printf_float+0xb6>
 8008586:	2301      	movs	r3, #1
 8008588:	465a      	mov	r2, fp
 800858a:	4631      	mov	r1, r6
 800858c:	4628      	mov	r0, r5
 800858e:	47b8      	blx	r7
 8008590:	3001      	adds	r0, #1
 8008592:	f43f ae56 	beq.w	8008242 <_printf_float+0xb6>
 8008596:	f108 0801 	add.w	r8, r8, #1
 800859a:	45d0      	cmp	r8, sl
 800859c:	dbf3      	blt.n	8008586 <_printf_float+0x3fa>
 800859e:	464b      	mov	r3, r9
 80085a0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80085a4:	e6df      	b.n	8008366 <_printf_float+0x1da>
 80085a6:	f04f 0800 	mov.w	r8, #0
 80085aa:	f104 0b1a 	add.w	fp, r4, #26
 80085ae:	e7f4      	b.n	800859a <_printf_float+0x40e>
 80085b0:	2301      	movs	r3, #1
 80085b2:	4642      	mov	r2, r8
 80085b4:	e7e1      	b.n	800857a <_printf_float+0x3ee>
 80085b6:	2301      	movs	r3, #1
 80085b8:	464a      	mov	r2, r9
 80085ba:	4631      	mov	r1, r6
 80085bc:	4628      	mov	r0, r5
 80085be:	47b8      	blx	r7
 80085c0:	3001      	adds	r0, #1
 80085c2:	f43f ae3e 	beq.w	8008242 <_printf_float+0xb6>
 80085c6:	f108 0801 	add.w	r8, r8, #1
 80085ca:	68e3      	ldr	r3, [r4, #12]
 80085cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80085ce:	1a5b      	subs	r3, r3, r1
 80085d0:	4543      	cmp	r3, r8
 80085d2:	dcf0      	bgt.n	80085b6 <_printf_float+0x42a>
 80085d4:	e6fc      	b.n	80083d0 <_printf_float+0x244>
 80085d6:	f04f 0800 	mov.w	r8, #0
 80085da:	f104 0919 	add.w	r9, r4, #25
 80085de:	e7f4      	b.n	80085ca <_printf_float+0x43e>

080085e0 <_printf_common>:
 80085e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085e4:	4616      	mov	r6, r2
 80085e6:	4698      	mov	r8, r3
 80085e8:	688a      	ldr	r2, [r1, #8]
 80085ea:	690b      	ldr	r3, [r1, #16]
 80085ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80085f0:	4293      	cmp	r3, r2
 80085f2:	bfb8      	it	lt
 80085f4:	4613      	movlt	r3, r2
 80085f6:	6033      	str	r3, [r6, #0]
 80085f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80085fc:	4607      	mov	r7, r0
 80085fe:	460c      	mov	r4, r1
 8008600:	b10a      	cbz	r2, 8008606 <_printf_common+0x26>
 8008602:	3301      	adds	r3, #1
 8008604:	6033      	str	r3, [r6, #0]
 8008606:	6823      	ldr	r3, [r4, #0]
 8008608:	0699      	lsls	r1, r3, #26
 800860a:	bf42      	ittt	mi
 800860c:	6833      	ldrmi	r3, [r6, #0]
 800860e:	3302      	addmi	r3, #2
 8008610:	6033      	strmi	r3, [r6, #0]
 8008612:	6825      	ldr	r5, [r4, #0]
 8008614:	f015 0506 	ands.w	r5, r5, #6
 8008618:	d106      	bne.n	8008628 <_printf_common+0x48>
 800861a:	f104 0a19 	add.w	sl, r4, #25
 800861e:	68e3      	ldr	r3, [r4, #12]
 8008620:	6832      	ldr	r2, [r6, #0]
 8008622:	1a9b      	subs	r3, r3, r2
 8008624:	42ab      	cmp	r3, r5
 8008626:	dc26      	bgt.n	8008676 <_printf_common+0x96>
 8008628:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800862c:	6822      	ldr	r2, [r4, #0]
 800862e:	3b00      	subs	r3, #0
 8008630:	bf18      	it	ne
 8008632:	2301      	movne	r3, #1
 8008634:	0692      	lsls	r2, r2, #26
 8008636:	d42b      	bmi.n	8008690 <_printf_common+0xb0>
 8008638:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800863c:	4641      	mov	r1, r8
 800863e:	4638      	mov	r0, r7
 8008640:	47c8      	blx	r9
 8008642:	3001      	adds	r0, #1
 8008644:	d01e      	beq.n	8008684 <_printf_common+0xa4>
 8008646:	6823      	ldr	r3, [r4, #0]
 8008648:	6922      	ldr	r2, [r4, #16]
 800864a:	f003 0306 	and.w	r3, r3, #6
 800864e:	2b04      	cmp	r3, #4
 8008650:	bf02      	ittt	eq
 8008652:	68e5      	ldreq	r5, [r4, #12]
 8008654:	6833      	ldreq	r3, [r6, #0]
 8008656:	1aed      	subeq	r5, r5, r3
 8008658:	68a3      	ldr	r3, [r4, #8]
 800865a:	bf0c      	ite	eq
 800865c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008660:	2500      	movne	r5, #0
 8008662:	4293      	cmp	r3, r2
 8008664:	bfc4      	itt	gt
 8008666:	1a9b      	subgt	r3, r3, r2
 8008668:	18ed      	addgt	r5, r5, r3
 800866a:	2600      	movs	r6, #0
 800866c:	341a      	adds	r4, #26
 800866e:	42b5      	cmp	r5, r6
 8008670:	d11a      	bne.n	80086a8 <_printf_common+0xc8>
 8008672:	2000      	movs	r0, #0
 8008674:	e008      	b.n	8008688 <_printf_common+0xa8>
 8008676:	2301      	movs	r3, #1
 8008678:	4652      	mov	r2, sl
 800867a:	4641      	mov	r1, r8
 800867c:	4638      	mov	r0, r7
 800867e:	47c8      	blx	r9
 8008680:	3001      	adds	r0, #1
 8008682:	d103      	bne.n	800868c <_printf_common+0xac>
 8008684:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800868c:	3501      	adds	r5, #1
 800868e:	e7c6      	b.n	800861e <_printf_common+0x3e>
 8008690:	18e1      	adds	r1, r4, r3
 8008692:	1c5a      	adds	r2, r3, #1
 8008694:	2030      	movs	r0, #48	@ 0x30
 8008696:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800869a:	4422      	add	r2, r4
 800869c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80086a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80086a4:	3302      	adds	r3, #2
 80086a6:	e7c7      	b.n	8008638 <_printf_common+0x58>
 80086a8:	2301      	movs	r3, #1
 80086aa:	4622      	mov	r2, r4
 80086ac:	4641      	mov	r1, r8
 80086ae:	4638      	mov	r0, r7
 80086b0:	47c8      	blx	r9
 80086b2:	3001      	adds	r0, #1
 80086b4:	d0e6      	beq.n	8008684 <_printf_common+0xa4>
 80086b6:	3601      	adds	r6, #1
 80086b8:	e7d9      	b.n	800866e <_printf_common+0x8e>
	...

080086bc <_printf_i>:
 80086bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086c0:	7e0f      	ldrb	r7, [r1, #24]
 80086c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80086c4:	2f78      	cmp	r7, #120	@ 0x78
 80086c6:	4691      	mov	r9, r2
 80086c8:	4680      	mov	r8, r0
 80086ca:	460c      	mov	r4, r1
 80086cc:	469a      	mov	sl, r3
 80086ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80086d2:	d807      	bhi.n	80086e4 <_printf_i+0x28>
 80086d4:	2f62      	cmp	r7, #98	@ 0x62
 80086d6:	d80a      	bhi.n	80086ee <_printf_i+0x32>
 80086d8:	2f00      	cmp	r7, #0
 80086da:	f000 80d1 	beq.w	8008880 <_printf_i+0x1c4>
 80086de:	2f58      	cmp	r7, #88	@ 0x58
 80086e0:	f000 80b8 	beq.w	8008854 <_printf_i+0x198>
 80086e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80086e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80086ec:	e03a      	b.n	8008764 <_printf_i+0xa8>
 80086ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80086f2:	2b15      	cmp	r3, #21
 80086f4:	d8f6      	bhi.n	80086e4 <_printf_i+0x28>
 80086f6:	a101      	add	r1, pc, #4	@ (adr r1, 80086fc <_printf_i+0x40>)
 80086f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80086fc:	08008755 	.word	0x08008755
 8008700:	08008769 	.word	0x08008769
 8008704:	080086e5 	.word	0x080086e5
 8008708:	080086e5 	.word	0x080086e5
 800870c:	080086e5 	.word	0x080086e5
 8008710:	080086e5 	.word	0x080086e5
 8008714:	08008769 	.word	0x08008769
 8008718:	080086e5 	.word	0x080086e5
 800871c:	080086e5 	.word	0x080086e5
 8008720:	080086e5 	.word	0x080086e5
 8008724:	080086e5 	.word	0x080086e5
 8008728:	08008867 	.word	0x08008867
 800872c:	08008793 	.word	0x08008793
 8008730:	08008821 	.word	0x08008821
 8008734:	080086e5 	.word	0x080086e5
 8008738:	080086e5 	.word	0x080086e5
 800873c:	08008889 	.word	0x08008889
 8008740:	080086e5 	.word	0x080086e5
 8008744:	08008793 	.word	0x08008793
 8008748:	080086e5 	.word	0x080086e5
 800874c:	080086e5 	.word	0x080086e5
 8008750:	08008829 	.word	0x08008829
 8008754:	6833      	ldr	r3, [r6, #0]
 8008756:	1d1a      	adds	r2, r3, #4
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	6032      	str	r2, [r6, #0]
 800875c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008760:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008764:	2301      	movs	r3, #1
 8008766:	e09c      	b.n	80088a2 <_printf_i+0x1e6>
 8008768:	6833      	ldr	r3, [r6, #0]
 800876a:	6820      	ldr	r0, [r4, #0]
 800876c:	1d19      	adds	r1, r3, #4
 800876e:	6031      	str	r1, [r6, #0]
 8008770:	0606      	lsls	r6, r0, #24
 8008772:	d501      	bpl.n	8008778 <_printf_i+0xbc>
 8008774:	681d      	ldr	r5, [r3, #0]
 8008776:	e003      	b.n	8008780 <_printf_i+0xc4>
 8008778:	0645      	lsls	r5, r0, #25
 800877a:	d5fb      	bpl.n	8008774 <_printf_i+0xb8>
 800877c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008780:	2d00      	cmp	r5, #0
 8008782:	da03      	bge.n	800878c <_printf_i+0xd0>
 8008784:	232d      	movs	r3, #45	@ 0x2d
 8008786:	426d      	negs	r5, r5
 8008788:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800878c:	4858      	ldr	r0, [pc, #352]	@ (80088f0 <_printf_i+0x234>)
 800878e:	230a      	movs	r3, #10
 8008790:	e011      	b.n	80087b6 <_printf_i+0xfa>
 8008792:	6821      	ldr	r1, [r4, #0]
 8008794:	6833      	ldr	r3, [r6, #0]
 8008796:	0608      	lsls	r0, r1, #24
 8008798:	f853 5b04 	ldr.w	r5, [r3], #4
 800879c:	d402      	bmi.n	80087a4 <_printf_i+0xe8>
 800879e:	0649      	lsls	r1, r1, #25
 80087a0:	bf48      	it	mi
 80087a2:	b2ad      	uxthmi	r5, r5
 80087a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80087a6:	4852      	ldr	r0, [pc, #328]	@ (80088f0 <_printf_i+0x234>)
 80087a8:	6033      	str	r3, [r6, #0]
 80087aa:	bf14      	ite	ne
 80087ac:	230a      	movne	r3, #10
 80087ae:	2308      	moveq	r3, #8
 80087b0:	2100      	movs	r1, #0
 80087b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80087b6:	6866      	ldr	r6, [r4, #4]
 80087b8:	60a6      	str	r6, [r4, #8]
 80087ba:	2e00      	cmp	r6, #0
 80087bc:	db05      	blt.n	80087ca <_printf_i+0x10e>
 80087be:	6821      	ldr	r1, [r4, #0]
 80087c0:	432e      	orrs	r6, r5
 80087c2:	f021 0104 	bic.w	r1, r1, #4
 80087c6:	6021      	str	r1, [r4, #0]
 80087c8:	d04b      	beq.n	8008862 <_printf_i+0x1a6>
 80087ca:	4616      	mov	r6, r2
 80087cc:	fbb5 f1f3 	udiv	r1, r5, r3
 80087d0:	fb03 5711 	mls	r7, r3, r1, r5
 80087d4:	5dc7      	ldrb	r7, [r0, r7]
 80087d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80087da:	462f      	mov	r7, r5
 80087dc:	42bb      	cmp	r3, r7
 80087de:	460d      	mov	r5, r1
 80087e0:	d9f4      	bls.n	80087cc <_printf_i+0x110>
 80087e2:	2b08      	cmp	r3, #8
 80087e4:	d10b      	bne.n	80087fe <_printf_i+0x142>
 80087e6:	6823      	ldr	r3, [r4, #0]
 80087e8:	07df      	lsls	r7, r3, #31
 80087ea:	d508      	bpl.n	80087fe <_printf_i+0x142>
 80087ec:	6923      	ldr	r3, [r4, #16]
 80087ee:	6861      	ldr	r1, [r4, #4]
 80087f0:	4299      	cmp	r1, r3
 80087f2:	bfde      	ittt	le
 80087f4:	2330      	movle	r3, #48	@ 0x30
 80087f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80087fa:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80087fe:	1b92      	subs	r2, r2, r6
 8008800:	6122      	str	r2, [r4, #16]
 8008802:	f8cd a000 	str.w	sl, [sp]
 8008806:	464b      	mov	r3, r9
 8008808:	aa03      	add	r2, sp, #12
 800880a:	4621      	mov	r1, r4
 800880c:	4640      	mov	r0, r8
 800880e:	f7ff fee7 	bl	80085e0 <_printf_common>
 8008812:	3001      	adds	r0, #1
 8008814:	d14a      	bne.n	80088ac <_printf_i+0x1f0>
 8008816:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800881a:	b004      	add	sp, #16
 800881c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008820:	6823      	ldr	r3, [r4, #0]
 8008822:	f043 0320 	orr.w	r3, r3, #32
 8008826:	6023      	str	r3, [r4, #0]
 8008828:	4832      	ldr	r0, [pc, #200]	@ (80088f4 <_printf_i+0x238>)
 800882a:	2778      	movs	r7, #120	@ 0x78
 800882c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008830:	6823      	ldr	r3, [r4, #0]
 8008832:	6831      	ldr	r1, [r6, #0]
 8008834:	061f      	lsls	r7, r3, #24
 8008836:	f851 5b04 	ldr.w	r5, [r1], #4
 800883a:	d402      	bmi.n	8008842 <_printf_i+0x186>
 800883c:	065f      	lsls	r7, r3, #25
 800883e:	bf48      	it	mi
 8008840:	b2ad      	uxthmi	r5, r5
 8008842:	6031      	str	r1, [r6, #0]
 8008844:	07d9      	lsls	r1, r3, #31
 8008846:	bf44      	itt	mi
 8008848:	f043 0320 	orrmi.w	r3, r3, #32
 800884c:	6023      	strmi	r3, [r4, #0]
 800884e:	b11d      	cbz	r5, 8008858 <_printf_i+0x19c>
 8008850:	2310      	movs	r3, #16
 8008852:	e7ad      	b.n	80087b0 <_printf_i+0xf4>
 8008854:	4826      	ldr	r0, [pc, #152]	@ (80088f0 <_printf_i+0x234>)
 8008856:	e7e9      	b.n	800882c <_printf_i+0x170>
 8008858:	6823      	ldr	r3, [r4, #0]
 800885a:	f023 0320 	bic.w	r3, r3, #32
 800885e:	6023      	str	r3, [r4, #0]
 8008860:	e7f6      	b.n	8008850 <_printf_i+0x194>
 8008862:	4616      	mov	r6, r2
 8008864:	e7bd      	b.n	80087e2 <_printf_i+0x126>
 8008866:	6833      	ldr	r3, [r6, #0]
 8008868:	6825      	ldr	r5, [r4, #0]
 800886a:	6961      	ldr	r1, [r4, #20]
 800886c:	1d18      	adds	r0, r3, #4
 800886e:	6030      	str	r0, [r6, #0]
 8008870:	062e      	lsls	r6, r5, #24
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	d501      	bpl.n	800887a <_printf_i+0x1be>
 8008876:	6019      	str	r1, [r3, #0]
 8008878:	e002      	b.n	8008880 <_printf_i+0x1c4>
 800887a:	0668      	lsls	r0, r5, #25
 800887c:	d5fb      	bpl.n	8008876 <_printf_i+0x1ba>
 800887e:	8019      	strh	r1, [r3, #0]
 8008880:	2300      	movs	r3, #0
 8008882:	6123      	str	r3, [r4, #16]
 8008884:	4616      	mov	r6, r2
 8008886:	e7bc      	b.n	8008802 <_printf_i+0x146>
 8008888:	6833      	ldr	r3, [r6, #0]
 800888a:	1d1a      	adds	r2, r3, #4
 800888c:	6032      	str	r2, [r6, #0]
 800888e:	681e      	ldr	r6, [r3, #0]
 8008890:	6862      	ldr	r2, [r4, #4]
 8008892:	2100      	movs	r1, #0
 8008894:	4630      	mov	r0, r6
 8008896:	f7f7 fcc3 	bl	8000220 <memchr>
 800889a:	b108      	cbz	r0, 80088a0 <_printf_i+0x1e4>
 800889c:	1b80      	subs	r0, r0, r6
 800889e:	6060      	str	r0, [r4, #4]
 80088a0:	6863      	ldr	r3, [r4, #4]
 80088a2:	6123      	str	r3, [r4, #16]
 80088a4:	2300      	movs	r3, #0
 80088a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80088aa:	e7aa      	b.n	8008802 <_printf_i+0x146>
 80088ac:	6923      	ldr	r3, [r4, #16]
 80088ae:	4632      	mov	r2, r6
 80088b0:	4649      	mov	r1, r9
 80088b2:	4640      	mov	r0, r8
 80088b4:	47d0      	blx	sl
 80088b6:	3001      	adds	r0, #1
 80088b8:	d0ad      	beq.n	8008816 <_printf_i+0x15a>
 80088ba:	6823      	ldr	r3, [r4, #0]
 80088bc:	079b      	lsls	r3, r3, #30
 80088be:	d413      	bmi.n	80088e8 <_printf_i+0x22c>
 80088c0:	68e0      	ldr	r0, [r4, #12]
 80088c2:	9b03      	ldr	r3, [sp, #12]
 80088c4:	4298      	cmp	r0, r3
 80088c6:	bfb8      	it	lt
 80088c8:	4618      	movlt	r0, r3
 80088ca:	e7a6      	b.n	800881a <_printf_i+0x15e>
 80088cc:	2301      	movs	r3, #1
 80088ce:	4632      	mov	r2, r6
 80088d0:	4649      	mov	r1, r9
 80088d2:	4640      	mov	r0, r8
 80088d4:	47d0      	blx	sl
 80088d6:	3001      	adds	r0, #1
 80088d8:	d09d      	beq.n	8008816 <_printf_i+0x15a>
 80088da:	3501      	adds	r5, #1
 80088dc:	68e3      	ldr	r3, [r4, #12]
 80088de:	9903      	ldr	r1, [sp, #12]
 80088e0:	1a5b      	subs	r3, r3, r1
 80088e2:	42ab      	cmp	r3, r5
 80088e4:	dcf2      	bgt.n	80088cc <_printf_i+0x210>
 80088e6:	e7eb      	b.n	80088c0 <_printf_i+0x204>
 80088e8:	2500      	movs	r5, #0
 80088ea:	f104 0619 	add.w	r6, r4, #25
 80088ee:	e7f5      	b.n	80088dc <_printf_i+0x220>
 80088f0:	0800aa12 	.word	0x0800aa12
 80088f4:	0800aa23 	.word	0x0800aa23

080088f8 <std>:
 80088f8:	2300      	movs	r3, #0
 80088fa:	b510      	push	{r4, lr}
 80088fc:	4604      	mov	r4, r0
 80088fe:	e9c0 3300 	strd	r3, r3, [r0]
 8008902:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008906:	6083      	str	r3, [r0, #8]
 8008908:	8181      	strh	r1, [r0, #12]
 800890a:	6643      	str	r3, [r0, #100]	@ 0x64
 800890c:	81c2      	strh	r2, [r0, #14]
 800890e:	6183      	str	r3, [r0, #24]
 8008910:	4619      	mov	r1, r3
 8008912:	2208      	movs	r2, #8
 8008914:	305c      	adds	r0, #92	@ 0x5c
 8008916:	f000 f8f4 	bl	8008b02 <memset>
 800891a:	4b0d      	ldr	r3, [pc, #52]	@ (8008950 <std+0x58>)
 800891c:	6263      	str	r3, [r4, #36]	@ 0x24
 800891e:	4b0d      	ldr	r3, [pc, #52]	@ (8008954 <std+0x5c>)
 8008920:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008922:	4b0d      	ldr	r3, [pc, #52]	@ (8008958 <std+0x60>)
 8008924:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008926:	4b0d      	ldr	r3, [pc, #52]	@ (800895c <std+0x64>)
 8008928:	6323      	str	r3, [r4, #48]	@ 0x30
 800892a:	4b0d      	ldr	r3, [pc, #52]	@ (8008960 <std+0x68>)
 800892c:	6224      	str	r4, [r4, #32]
 800892e:	429c      	cmp	r4, r3
 8008930:	d006      	beq.n	8008940 <std+0x48>
 8008932:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008936:	4294      	cmp	r4, r2
 8008938:	d002      	beq.n	8008940 <std+0x48>
 800893a:	33d0      	adds	r3, #208	@ 0xd0
 800893c:	429c      	cmp	r4, r3
 800893e:	d105      	bne.n	800894c <std+0x54>
 8008940:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008948:	f000 b958 	b.w	8008bfc <__retarget_lock_init_recursive>
 800894c:	bd10      	pop	{r4, pc}
 800894e:	bf00      	nop
 8008950:	08008a7d 	.word	0x08008a7d
 8008954:	08008a9f 	.word	0x08008a9f
 8008958:	08008ad7 	.word	0x08008ad7
 800895c:	08008afb 	.word	0x08008afb
 8008960:	20000608 	.word	0x20000608

08008964 <stdio_exit_handler>:
 8008964:	4a02      	ldr	r2, [pc, #8]	@ (8008970 <stdio_exit_handler+0xc>)
 8008966:	4903      	ldr	r1, [pc, #12]	@ (8008974 <stdio_exit_handler+0x10>)
 8008968:	4803      	ldr	r0, [pc, #12]	@ (8008978 <stdio_exit_handler+0x14>)
 800896a:	f000 b869 	b.w	8008a40 <_fwalk_sglue>
 800896e:	bf00      	nop
 8008970:	2000005c 	.word	0x2000005c
 8008974:	0800a2cd 	.word	0x0800a2cd
 8008978:	2000006c 	.word	0x2000006c

0800897c <cleanup_stdio>:
 800897c:	6841      	ldr	r1, [r0, #4]
 800897e:	4b0c      	ldr	r3, [pc, #48]	@ (80089b0 <cleanup_stdio+0x34>)
 8008980:	4299      	cmp	r1, r3
 8008982:	b510      	push	{r4, lr}
 8008984:	4604      	mov	r4, r0
 8008986:	d001      	beq.n	800898c <cleanup_stdio+0x10>
 8008988:	f001 fca0 	bl	800a2cc <_fflush_r>
 800898c:	68a1      	ldr	r1, [r4, #8]
 800898e:	4b09      	ldr	r3, [pc, #36]	@ (80089b4 <cleanup_stdio+0x38>)
 8008990:	4299      	cmp	r1, r3
 8008992:	d002      	beq.n	800899a <cleanup_stdio+0x1e>
 8008994:	4620      	mov	r0, r4
 8008996:	f001 fc99 	bl	800a2cc <_fflush_r>
 800899a:	68e1      	ldr	r1, [r4, #12]
 800899c:	4b06      	ldr	r3, [pc, #24]	@ (80089b8 <cleanup_stdio+0x3c>)
 800899e:	4299      	cmp	r1, r3
 80089a0:	d004      	beq.n	80089ac <cleanup_stdio+0x30>
 80089a2:	4620      	mov	r0, r4
 80089a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089a8:	f001 bc90 	b.w	800a2cc <_fflush_r>
 80089ac:	bd10      	pop	{r4, pc}
 80089ae:	bf00      	nop
 80089b0:	20000608 	.word	0x20000608
 80089b4:	20000670 	.word	0x20000670
 80089b8:	200006d8 	.word	0x200006d8

080089bc <global_stdio_init.part.0>:
 80089bc:	b510      	push	{r4, lr}
 80089be:	4b0b      	ldr	r3, [pc, #44]	@ (80089ec <global_stdio_init.part.0+0x30>)
 80089c0:	4c0b      	ldr	r4, [pc, #44]	@ (80089f0 <global_stdio_init.part.0+0x34>)
 80089c2:	4a0c      	ldr	r2, [pc, #48]	@ (80089f4 <global_stdio_init.part.0+0x38>)
 80089c4:	601a      	str	r2, [r3, #0]
 80089c6:	4620      	mov	r0, r4
 80089c8:	2200      	movs	r2, #0
 80089ca:	2104      	movs	r1, #4
 80089cc:	f7ff ff94 	bl	80088f8 <std>
 80089d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80089d4:	2201      	movs	r2, #1
 80089d6:	2109      	movs	r1, #9
 80089d8:	f7ff ff8e 	bl	80088f8 <std>
 80089dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80089e0:	2202      	movs	r2, #2
 80089e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089e6:	2112      	movs	r1, #18
 80089e8:	f7ff bf86 	b.w	80088f8 <std>
 80089ec:	20000740 	.word	0x20000740
 80089f0:	20000608 	.word	0x20000608
 80089f4:	08008965 	.word	0x08008965

080089f8 <__sfp_lock_acquire>:
 80089f8:	4801      	ldr	r0, [pc, #4]	@ (8008a00 <__sfp_lock_acquire+0x8>)
 80089fa:	f000 b900 	b.w	8008bfe <__retarget_lock_acquire_recursive>
 80089fe:	bf00      	nop
 8008a00:	20000749 	.word	0x20000749

08008a04 <__sfp_lock_release>:
 8008a04:	4801      	ldr	r0, [pc, #4]	@ (8008a0c <__sfp_lock_release+0x8>)
 8008a06:	f000 b8fb 	b.w	8008c00 <__retarget_lock_release_recursive>
 8008a0a:	bf00      	nop
 8008a0c:	20000749 	.word	0x20000749

08008a10 <__sinit>:
 8008a10:	b510      	push	{r4, lr}
 8008a12:	4604      	mov	r4, r0
 8008a14:	f7ff fff0 	bl	80089f8 <__sfp_lock_acquire>
 8008a18:	6a23      	ldr	r3, [r4, #32]
 8008a1a:	b11b      	cbz	r3, 8008a24 <__sinit+0x14>
 8008a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a20:	f7ff bff0 	b.w	8008a04 <__sfp_lock_release>
 8008a24:	4b04      	ldr	r3, [pc, #16]	@ (8008a38 <__sinit+0x28>)
 8008a26:	6223      	str	r3, [r4, #32]
 8008a28:	4b04      	ldr	r3, [pc, #16]	@ (8008a3c <__sinit+0x2c>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d1f5      	bne.n	8008a1c <__sinit+0xc>
 8008a30:	f7ff ffc4 	bl	80089bc <global_stdio_init.part.0>
 8008a34:	e7f2      	b.n	8008a1c <__sinit+0xc>
 8008a36:	bf00      	nop
 8008a38:	0800897d 	.word	0x0800897d
 8008a3c:	20000740 	.word	0x20000740

08008a40 <_fwalk_sglue>:
 8008a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a44:	4607      	mov	r7, r0
 8008a46:	4688      	mov	r8, r1
 8008a48:	4614      	mov	r4, r2
 8008a4a:	2600      	movs	r6, #0
 8008a4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a50:	f1b9 0901 	subs.w	r9, r9, #1
 8008a54:	d505      	bpl.n	8008a62 <_fwalk_sglue+0x22>
 8008a56:	6824      	ldr	r4, [r4, #0]
 8008a58:	2c00      	cmp	r4, #0
 8008a5a:	d1f7      	bne.n	8008a4c <_fwalk_sglue+0xc>
 8008a5c:	4630      	mov	r0, r6
 8008a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a62:	89ab      	ldrh	r3, [r5, #12]
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d907      	bls.n	8008a78 <_fwalk_sglue+0x38>
 8008a68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	d003      	beq.n	8008a78 <_fwalk_sglue+0x38>
 8008a70:	4629      	mov	r1, r5
 8008a72:	4638      	mov	r0, r7
 8008a74:	47c0      	blx	r8
 8008a76:	4306      	orrs	r6, r0
 8008a78:	3568      	adds	r5, #104	@ 0x68
 8008a7a:	e7e9      	b.n	8008a50 <_fwalk_sglue+0x10>

08008a7c <__sread>:
 8008a7c:	b510      	push	{r4, lr}
 8008a7e:	460c      	mov	r4, r1
 8008a80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a84:	f000 f86c 	bl	8008b60 <_read_r>
 8008a88:	2800      	cmp	r0, #0
 8008a8a:	bfab      	itete	ge
 8008a8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008a8e:	89a3      	ldrhlt	r3, [r4, #12]
 8008a90:	181b      	addge	r3, r3, r0
 8008a92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008a96:	bfac      	ite	ge
 8008a98:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008a9a:	81a3      	strhlt	r3, [r4, #12]
 8008a9c:	bd10      	pop	{r4, pc}

08008a9e <__swrite>:
 8008a9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aa2:	461f      	mov	r7, r3
 8008aa4:	898b      	ldrh	r3, [r1, #12]
 8008aa6:	05db      	lsls	r3, r3, #23
 8008aa8:	4605      	mov	r5, r0
 8008aaa:	460c      	mov	r4, r1
 8008aac:	4616      	mov	r6, r2
 8008aae:	d505      	bpl.n	8008abc <__swrite+0x1e>
 8008ab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ab4:	2302      	movs	r3, #2
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	f000 f840 	bl	8008b3c <_lseek_r>
 8008abc:	89a3      	ldrh	r3, [r4, #12]
 8008abe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ac2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008ac6:	81a3      	strh	r3, [r4, #12]
 8008ac8:	4632      	mov	r2, r6
 8008aca:	463b      	mov	r3, r7
 8008acc:	4628      	mov	r0, r5
 8008ace:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ad2:	f000 b857 	b.w	8008b84 <_write_r>

08008ad6 <__sseek>:
 8008ad6:	b510      	push	{r4, lr}
 8008ad8:	460c      	mov	r4, r1
 8008ada:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ade:	f000 f82d 	bl	8008b3c <_lseek_r>
 8008ae2:	1c43      	adds	r3, r0, #1
 8008ae4:	89a3      	ldrh	r3, [r4, #12]
 8008ae6:	bf15      	itete	ne
 8008ae8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008aea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008aee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008af2:	81a3      	strheq	r3, [r4, #12]
 8008af4:	bf18      	it	ne
 8008af6:	81a3      	strhne	r3, [r4, #12]
 8008af8:	bd10      	pop	{r4, pc}

08008afa <__sclose>:
 8008afa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008afe:	f000 b80d 	b.w	8008b1c <_close_r>

08008b02 <memset>:
 8008b02:	4402      	add	r2, r0
 8008b04:	4603      	mov	r3, r0
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d100      	bne.n	8008b0c <memset+0xa>
 8008b0a:	4770      	bx	lr
 8008b0c:	f803 1b01 	strb.w	r1, [r3], #1
 8008b10:	e7f9      	b.n	8008b06 <memset+0x4>
	...

08008b14 <_localeconv_r>:
 8008b14:	4800      	ldr	r0, [pc, #0]	@ (8008b18 <_localeconv_r+0x4>)
 8008b16:	4770      	bx	lr
 8008b18:	200001a8 	.word	0x200001a8

08008b1c <_close_r>:
 8008b1c:	b538      	push	{r3, r4, r5, lr}
 8008b1e:	4d06      	ldr	r5, [pc, #24]	@ (8008b38 <_close_r+0x1c>)
 8008b20:	2300      	movs	r3, #0
 8008b22:	4604      	mov	r4, r0
 8008b24:	4608      	mov	r0, r1
 8008b26:	602b      	str	r3, [r5, #0]
 8008b28:	f7fa f8f6 	bl	8002d18 <_close>
 8008b2c:	1c43      	adds	r3, r0, #1
 8008b2e:	d102      	bne.n	8008b36 <_close_r+0x1a>
 8008b30:	682b      	ldr	r3, [r5, #0]
 8008b32:	b103      	cbz	r3, 8008b36 <_close_r+0x1a>
 8008b34:	6023      	str	r3, [r4, #0]
 8008b36:	bd38      	pop	{r3, r4, r5, pc}
 8008b38:	20000744 	.word	0x20000744

08008b3c <_lseek_r>:
 8008b3c:	b538      	push	{r3, r4, r5, lr}
 8008b3e:	4d07      	ldr	r5, [pc, #28]	@ (8008b5c <_lseek_r+0x20>)
 8008b40:	4604      	mov	r4, r0
 8008b42:	4608      	mov	r0, r1
 8008b44:	4611      	mov	r1, r2
 8008b46:	2200      	movs	r2, #0
 8008b48:	602a      	str	r2, [r5, #0]
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	f7fa f90b 	bl	8002d66 <_lseek>
 8008b50:	1c43      	adds	r3, r0, #1
 8008b52:	d102      	bne.n	8008b5a <_lseek_r+0x1e>
 8008b54:	682b      	ldr	r3, [r5, #0]
 8008b56:	b103      	cbz	r3, 8008b5a <_lseek_r+0x1e>
 8008b58:	6023      	str	r3, [r4, #0]
 8008b5a:	bd38      	pop	{r3, r4, r5, pc}
 8008b5c:	20000744 	.word	0x20000744

08008b60 <_read_r>:
 8008b60:	b538      	push	{r3, r4, r5, lr}
 8008b62:	4d07      	ldr	r5, [pc, #28]	@ (8008b80 <_read_r+0x20>)
 8008b64:	4604      	mov	r4, r0
 8008b66:	4608      	mov	r0, r1
 8008b68:	4611      	mov	r1, r2
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	602a      	str	r2, [r5, #0]
 8008b6e:	461a      	mov	r2, r3
 8008b70:	f7fa f899 	bl	8002ca6 <_read>
 8008b74:	1c43      	adds	r3, r0, #1
 8008b76:	d102      	bne.n	8008b7e <_read_r+0x1e>
 8008b78:	682b      	ldr	r3, [r5, #0]
 8008b7a:	b103      	cbz	r3, 8008b7e <_read_r+0x1e>
 8008b7c:	6023      	str	r3, [r4, #0]
 8008b7e:	bd38      	pop	{r3, r4, r5, pc}
 8008b80:	20000744 	.word	0x20000744

08008b84 <_write_r>:
 8008b84:	b538      	push	{r3, r4, r5, lr}
 8008b86:	4d07      	ldr	r5, [pc, #28]	@ (8008ba4 <_write_r+0x20>)
 8008b88:	4604      	mov	r4, r0
 8008b8a:	4608      	mov	r0, r1
 8008b8c:	4611      	mov	r1, r2
 8008b8e:	2200      	movs	r2, #0
 8008b90:	602a      	str	r2, [r5, #0]
 8008b92:	461a      	mov	r2, r3
 8008b94:	f7fa f8a4 	bl	8002ce0 <_write>
 8008b98:	1c43      	adds	r3, r0, #1
 8008b9a:	d102      	bne.n	8008ba2 <_write_r+0x1e>
 8008b9c:	682b      	ldr	r3, [r5, #0]
 8008b9e:	b103      	cbz	r3, 8008ba2 <_write_r+0x1e>
 8008ba0:	6023      	str	r3, [r4, #0]
 8008ba2:	bd38      	pop	{r3, r4, r5, pc}
 8008ba4:	20000744 	.word	0x20000744

08008ba8 <__errno>:
 8008ba8:	4b01      	ldr	r3, [pc, #4]	@ (8008bb0 <__errno+0x8>)
 8008baa:	6818      	ldr	r0, [r3, #0]
 8008bac:	4770      	bx	lr
 8008bae:	bf00      	nop
 8008bb0:	20000068 	.word	0x20000068

08008bb4 <__libc_init_array>:
 8008bb4:	b570      	push	{r4, r5, r6, lr}
 8008bb6:	4d0d      	ldr	r5, [pc, #52]	@ (8008bec <__libc_init_array+0x38>)
 8008bb8:	4c0d      	ldr	r4, [pc, #52]	@ (8008bf0 <__libc_init_array+0x3c>)
 8008bba:	1b64      	subs	r4, r4, r5
 8008bbc:	10a4      	asrs	r4, r4, #2
 8008bbe:	2600      	movs	r6, #0
 8008bc0:	42a6      	cmp	r6, r4
 8008bc2:	d109      	bne.n	8008bd8 <__libc_init_array+0x24>
 8008bc4:	4d0b      	ldr	r5, [pc, #44]	@ (8008bf4 <__libc_init_array+0x40>)
 8008bc6:	4c0c      	ldr	r4, [pc, #48]	@ (8008bf8 <__libc_init_array+0x44>)
 8008bc8:	f001 fec0 	bl	800a94c <_init>
 8008bcc:	1b64      	subs	r4, r4, r5
 8008bce:	10a4      	asrs	r4, r4, #2
 8008bd0:	2600      	movs	r6, #0
 8008bd2:	42a6      	cmp	r6, r4
 8008bd4:	d105      	bne.n	8008be2 <__libc_init_array+0x2e>
 8008bd6:	bd70      	pop	{r4, r5, r6, pc}
 8008bd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bdc:	4798      	blx	r3
 8008bde:	3601      	adds	r6, #1
 8008be0:	e7ee      	b.n	8008bc0 <__libc_init_array+0xc>
 8008be2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008be6:	4798      	blx	r3
 8008be8:	3601      	adds	r6, #1
 8008bea:	e7f2      	b.n	8008bd2 <__libc_init_array+0x1e>
 8008bec:	0800ad7c 	.word	0x0800ad7c
 8008bf0:	0800ad7c 	.word	0x0800ad7c
 8008bf4:	0800ad7c 	.word	0x0800ad7c
 8008bf8:	0800ad80 	.word	0x0800ad80

08008bfc <__retarget_lock_init_recursive>:
 8008bfc:	4770      	bx	lr

08008bfe <__retarget_lock_acquire_recursive>:
 8008bfe:	4770      	bx	lr

08008c00 <__retarget_lock_release_recursive>:
 8008c00:	4770      	bx	lr

08008c02 <memcpy>:
 8008c02:	440a      	add	r2, r1
 8008c04:	4291      	cmp	r1, r2
 8008c06:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008c0a:	d100      	bne.n	8008c0e <memcpy+0xc>
 8008c0c:	4770      	bx	lr
 8008c0e:	b510      	push	{r4, lr}
 8008c10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c18:	4291      	cmp	r1, r2
 8008c1a:	d1f9      	bne.n	8008c10 <memcpy+0xe>
 8008c1c:	bd10      	pop	{r4, pc}

08008c1e <quorem>:
 8008c1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c22:	6903      	ldr	r3, [r0, #16]
 8008c24:	690c      	ldr	r4, [r1, #16]
 8008c26:	42a3      	cmp	r3, r4
 8008c28:	4607      	mov	r7, r0
 8008c2a:	db7e      	blt.n	8008d2a <quorem+0x10c>
 8008c2c:	3c01      	subs	r4, #1
 8008c2e:	f101 0814 	add.w	r8, r1, #20
 8008c32:	00a3      	lsls	r3, r4, #2
 8008c34:	f100 0514 	add.w	r5, r0, #20
 8008c38:	9300      	str	r3, [sp, #0]
 8008c3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c3e:	9301      	str	r3, [sp, #4]
 8008c40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008c44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c48:	3301      	adds	r3, #1
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008c50:	fbb2 f6f3 	udiv	r6, r2, r3
 8008c54:	d32e      	bcc.n	8008cb4 <quorem+0x96>
 8008c56:	f04f 0a00 	mov.w	sl, #0
 8008c5a:	46c4      	mov	ip, r8
 8008c5c:	46ae      	mov	lr, r5
 8008c5e:	46d3      	mov	fp, sl
 8008c60:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008c64:	b298      	uxth	r0, r3
 8008c66:	fb06 a000 	mla	r0, r6, r0, sl
 8008c6a:	0c02      	lsrs	r2, r0, #16
 8008c6c:	0c1b      	lsrs	r3, r3, #16
 8008c6e:	fb06 2303 	mla	r3, r6, r3, r2
 8008c72:	f8de 2000 	ldr.w	r2, [lr]
 8008c76:	b280      	uxth	r0, r0
 8008c78:	b292      	uxth	r2, r2
 8008c7a:	1a12      	subs	r2, r2, r0
 8008c7c:	445a      	add	r2, fp
 8008c7e:	f8de 0000 	ldr.w	r0, [lr]
 8008c82:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008c8c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008c90:	b292      	uxth	r2, r2
 8008c92:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008c96:	45e1      	cmp	r9, ip
 8008c98:	f84e 2b04 	str.w	r2, [lr], #4
 8008c9c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008ca0:	d2de      	bcs.n	8008c60 <quorem+0x42>
 8008ca2:	9b00      	ldr	r3, [sp, #0]
 8008ca4:	58eb      	ldr	r3, [r5, r3]
 8008ca6:	b92b      	cbnz	r3, 8008cb4 <quorem+0x96>
 8008ca8:	9b01      	ldr	r3, [sp, #4]
 8008caa:	3b04      	subs	r3, #4
 8008cac:	429d      	cmp	r5, r3
 8008cae:	461a      	mov	r2, r3
 8008cb0:	d32f      	bcc.n	8008d12 <quorem+0xf4>
 8008cb2:	613c      	str	r4, [r7, #16]
 8008cb4:	4638      	mov	r0, r7
 8008cb6:	f001 f97d 	bl	8009fb4 <__mcmp>
 8008cba:	2800      	cmp	r0, #0
 8008cbc:	db25      	blt.n	8008d0a <quorem+0xec>
 8008cbe:	4629      	mov	r1, r5
 8008cc0:	2000      	movs	r0, #0
 8008cc2:	f858 2b04 	ldr.w	r2, [r8], #4
 8008cc6:	f8d1 c000 	ldr.w	ip, [r1]
 8008cca:	fa1f fe82 	uxth.w	lr, r2
 8008cce:	fa1f f38c 	uxth.w	r3, ip
 8008cd2:	eba3 030e 	sub.w	r3, r3, lr
 8008cd6:	4403      	add	r3, r0
 8008cd8:	0c12      	lsrs	r2, r2, #16
 8008cda:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008cde:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ce8:	45c1      	cmp	r9, r8
 8008cea:	f841 3b04 	str.w	r3, [r1], #4
 8008cee:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008cf2:	d2e6      	bcs.n	8008cc2 <quorem+0xa4>
 8008cf4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008cf8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008cfc:	b922      	cbnz	r2, 8008d08 <quorem+0xea>
 8008cfe:	3b04      	subs	r3, #4
 8008d00:	429d      	cmp	r5, r3
 8008d02:	461a      	mov	r2, r3
 8008d04:	d30b      	bcc.n	8008d1e <quorem+0x100>
 8008d06:	613c      	str	r4, [r7, #16]
 8008d08:	3601      	adds	r6, #1
 8008d0a:	4630      	mov	r0, r6
 8008d0c:	b003      	add	sp, #12
 8008d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d12:	6812      	ldr	r2, [r2, #0]
 8008d14:	3b04      	subs	r3, #4
 8008d16:	2a00      	cmp	r2, #0
 8008d18:	d1cb      	bne.n	8008cb2 <quorem+0x94>
 8008d1a:	3c01      	subs	r4, #1
 8008d1c:	e7c6      	b.n	8008cac <quorem+0x8e>
 8008d1e:	6812      	ldr	r2, [r2, #0]
 8008d20:	3b04      	subs	r3, #4
 8008d22:	2a00      	cmp	r2, #0
 8008d24:	d1ef      	bne.n	8008d06 <quorem+0xe8>
 8008d26:	3c01      	subs	r4, #1
 8008d28:	e7ea      	b.n	8008d00 <quorem+0xe2>
 8008d2a:	2000      	movs	r0, #0
 8008d2c:	e7ee      	b.n	8008d0c <quorem+0xee>
	...

08008d30 <_dtoa_r>:
 8008d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d34:	69c7      	ldr	r7, [r0, #28]
 8008d36:	b097      	sub	sp, #92	@ 0x5c
 8008d38:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008d3c:	ec55 4b10 	vmov	r4, r5, d0
 8008d40:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008d42:	9107      	str	r1, [sp, #28]
 8008d44:	4681      	mov	r9, r0
 8008d46:	920c      	str	r2, [sp, #48]	@ 0x30
 8008d48:	9311      	str	r3, [sp, #68]	@ 0x44
 8008d4a:	b97f      	cbnz	r7, 8008d6c <_dtoa_r+0x3c>
 8008d4c:	2010      	movs	r0, #16
 8008d4e:	f000 fe09 	bl	8009964 <malloc>
 8008d52:	4602      	mov	r2, r0
 8008d54:	f8c9 001c 	str.w	r0, [r9, #28]
 8008d58:	b920      	cbnz	r0, 8008d64 <_dtoa_r+0x34>
 8008d5a:	4ba9      	ldr	r3, [pc, #676]	@ (8009000 <_dtoa_r+0x2d0>)
 8008d5c:	21ef      	movs	r1, #239	@ 0xef
 8008d5e:	48a9      	ldr	r0, [pc, #676]	@ (8009004 <_dtoa_r+0x2d4>)
 8008d60:	f001 faec 	bl	800a33c <__assert_func>
 8008d64:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008d68:	6007      	str	r7, [r0, #0]
 8008d6a:	60c7      	str	r7, [r0, #12]
 8008d6c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008d70:	6819      	ldr	r1, [r3, #0]
 8008d72:	b159      	cbz	r1, 8008d8c <_dtoa_r+0x5c>
 8008d74:	685a      	ldr	r2, [r3, #4]
 8008d76:	604a      	str	r2, [r1, #4]
 8008d78:	2301      	movs	r3, #1
 8008d7a:	4093      	lsls	r3, r2
 8008d7c:	608b      	str	r3, [r1, #8]
 8008d7e:	4648      	mov	r0, r9
 8008d80:	f000 fee6 	bl	8009b50 <_Bfree>
 8008d84:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	601a      	str	r2, [r3, #0]
 8008d8c:	1e2b      	subs	r3, r5, #0
 8008d8e:	bfb9      	ittee	lt
 8008d90:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008d94:	9305      	strlt	r3, [sp, #20]
 8008d96:	2300      	movge	r3, #0
 8008d98:	6033      	strge	r3, [r6, #0]
 8008d9a:	9f05      	ldr	r7, [sp, #20]
 8008d9c:	4b9a      	ldr	r3, [pc, #616]	@ (8009008 <_dtoa_r+0x2d8>)
 8008d9e:	bfbc      	itt	lt
 8008da0:	2201      	movlt	r2, #1
 8008da2:	6032      	strlt	r2, [r6, #0]
 8008da4:	43bb      	bics	r3, r7
 8008da6:	d112      	bne.n	8008dce <_dtoa_r+0x9e>
 8008da8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008daa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008dae:	6013      	str	r3, [r2, #0]
 8008db0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008db4:	4323      	orrs	r3, r4
 8008db6:	f000 855a 	beq.w	800986e <_dtoa_r+0xb3e>
 8008dba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008dbc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800901c <_dtoa_r+0x2ec>
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	f000 855c 	beq.w	800987e <_dtoa_r+0xb4e>
 8008dc6:	f10a 0303 	add.w	r3, sl, #3
 8008dca:	f000 bd56 	b.w	800987a <_dtoa_r+0xb4a>
 8008dce:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	ec51 0b17 	vmov	r0, r1, d7
 8008dd8:	2300      	movs	r3, #0
 8008dda:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8008dde:	f7f7 fe9b 	bl	8000b18 <__aeabi_dcmpeq>
 8008de2:	4680      	mov	r8, r0
 8008de4:	b158      	cbz	r0, 8008dfe <_dtoa_r+0xce>
 8008de6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008de8:	2301      	movs	r3, #1
 8008dea:	6013      	str	r3, [r2, #0]
 8008dec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008dee:	b113      	cbz	r3, 8008df6 <_dtoa_r+0xc6>
 8008df0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008df2:	4b86      	ldr	r3, [pc, #536]	@ (800900c <_dtoa_r+0x2dc>)
 8008df4:	6013      	str	r3, [r2, #0]
 8008df6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009020 <_dtoa_r+0x2f0>
 8008dfa:	f000 bd40 	b.w	800987e <_dtoa_r+0xb4e>
 8008dfe:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008e02:	aa14      	add	r2, sp, #80	@ 0x50
 8008e04:	a915      	add	r1, sp, #84	@ 0x54
 8008e06:	4648      	mov	r0, r9
 8008e08:	f001 f984 	bl	800a114 <__d2b>
 8008e0c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008e10:	9002      	str	r0, [sp, #8]
 8008e12:	2e00      	cmp	r6, #0
 8008e14:	d078      	beq.n	8008f08 <_dtoa_r+0x1d8>
 8008e16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e18:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8008e1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008e24:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008e28:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008e2c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008e30:	4619      	mov	r1, r3
 8008e32:	2200      	movs	r2, #0
 8008e34:	4b76      	ldr	r3, [pc, #472]	@ (8009010 <_dtoa_r+0x2e0>)
 8008e36:	f7f7 fa4f 	bl	80002d8 <__aeabi_dsub>
 8008e3a:	a36b      	add	r3, pc, #428	@ (adr r3, 8008fe8 <_dtoa_r+0x2b8>)
 8008e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e40:	f7f7 fc02 	bl	8000648 <__aeabi_dmul>
 8008e44:	a36a      	add	r3, pc, #424	@ (adr r3, 8008ff0 <_dtoa_r+0x2c0>)
 8008e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e4a:	f7f7 fa47 	bl	80002dc <__adddf3>
 8008e4e:	4604      	mov	r4, r0
 8008e50:	4630      	mov	r0, r6
 8008e52:	460d      	mov	r5, r1
 8008e54:	f7f7 fb8e 	bl	8000574 <__aeabi_i2d>
 8008e58:	a367      	add	r3, pc, #412	@ (adr r3, 8008ff8 <_dtoa_r+0x2c8>)
 8008e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5e:	f7f7 fbf3 	bl	8000648 <__aeabi_dmul>
 8008e62:	4602      	mov	r2, r0
 8008e64:	460b      	mov	r3, r1
 8008e66:	4620      	mov	r0, r4
 8008e68:	4629      	mov	r1, r5
 8008e6a:	f7f7 fa37 	bl	80002dc <__adddf3>
 8008e6e:	4604      	mov	r4, r0
 8008e70:	460d      	mov	r5, r1
 8008e72:	f7f7 fe99 	bl	8000ba8 <__aeabi_d2iz>
 8008e76:	2200      	movs	r2, #0
 8008e78:	4607      	mov	r7, r0
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	4620      	mov	r0, r4
 8008e7e:	4629      	mov	r1, r5
 8008e80:	f7f7 fe54 	bl	8000b2c <__aeabi_dcmplt>
 8008e84:	b140      	cbz	r0, 8008e98 <_dtoa_r+0x168>
 8008e86:	4638      	mov	r0, r7
 8008e88:	f7f7 fb74 	bl	8000574 <__aeabi_i2d>
 8008e8c:	4622      	mov	r2, r4
 8008e8e:	462b      	mov	r3, r5
 8008e90:	f7f7 fe42 	bl	8000b18 <__aeabi_dcmpeq>
 8008e94:	b900      	cbnz	r0, 8008e98 <_dtoa_r+0x168>
 8008e96:	3f01      	subs	r7, #1
 8008e98:	2f16      	cmp	r7, #22
 8008e9a:	d852      	bhi.n	8008f42 <_dtoa_r+0x212>
 8008e9c:	4b5d      	ldr	r3, [pc, #372]	@ (8009014 <_dtoa_r+0x2e4>)
 8008e9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008eaa:	f7f7 fe3f 	bl	8000b2c <__aeabi_dcmplt>
 8008eae:	2800      	cmp	r0, #0
 8008eb0:	d049      	beq.n	8008f46 <_dtoa_r+0x216>
 8008eb2:	3f01      	subs	r7, #1
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	9310      	str	r3, [sp, #64]	@ 0x40
 8008eb8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008eba:	1b9b      	subs	r3, r3, r6
 8008ebc:	1e5a      	subs	r2, r3, #1
 8008ebe:	bf45      	ittet	mi
 8008ec0:	f1c3 0301 	rsbmi	r3, r3, #1
 8008ec4:	9300      	strmi	r3, [sp, #0]
 8008ec6:	2300      	movpl	r3, #0
 8008ec8:	2300      	movmi	r3, #0
 8008eca:	9206      	str	r2, [sp, #24]
 8008ecc:	bf54      	ite	pl
 8008ece:	9300      	strpl	r3, [sp, #0]
 8008ed0:	9306      	strmi	r3, [sp, #24]
 8008ed2:	2f00      	cmp	r7, #0
 8008ed4:	db39      	blt.n	8008f4a <_dtoa_r+0x21a>
 8008ed6:	9b06      	ldr	r3, [sp, #24]
 8008ed8:	970d      	str	r7, [sp, #52]	@ 0x34
 8008eda:	443b      	add	r3, r7
 8008edc:	9306      	str	r3, [sp, #24]
 8008ede:	2300      	movs	r3, #0
 8008ee0:	9308      	str	r3, [sp, #32]
 8008ee2:	9b07      	ldr	r3, [sp, #28]
 8008ee4:	2b09      	cmp	r3, #9
 8008ee6:	d863      	bhi.n	8008fb0 <_dtoa_r+0x280>
 8008ee8:	2b05      	cmp	r3, #5
 8008eea:	bfc4      	itt	gt
 8008eec:	3b04      	subgt	r3, #4
 8008eee:	9307      	strgt	r3, [sp, #28]
 8008ef0:	9b07      	ldr	r3, [sp, #28]
 8008ef2:	f1a3 0302 	sub.w	r3, r3, #2
 8008ef6:	bfcc      	ite	gt
 8008ef8:	2400      	movgt	r4, #0
 8008efa:	2401      	movle	r4, #1
 8008efc:	2b03      	cmp	r3, #3
 8008efe:	d863      	bhi.n	8008fc8 <_dtoa_r+0x298>
 8008f00:	e8df f003 	tbb	[pc, r3]
 8008f04:	2b375452 	.word	0x2b375452
 8008f08:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008f0c:	441e      	add	r6, r3
 8008f0e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008f12:	2b20      	cmp	r3, #32
 8008f14:	bfc1      	itttt	gt
 8008f16:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008f1a:	409f      	lslgt	r7, r3
 8008f1c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008f20:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008f24:	bfd6      	itet	le
 8008f26:	f1c3 0320 	rsble	r3, r3, #32
 8008f2a:	ea47 0003 	orrgt.w	r0, r7, r3
 8008f2e:	fa04 f003 	lslle.w	r0, r4, r3
 8008f32:	f7f7 fb0f 	bl	8000554 <__aeabi_ui2d>
 8008f36:	2201      	movs	r2, #1
 8008f38:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008f3c:	3e01      	subs	r6, #1
 8008f3e:	9212      	str	r2, [sp, #72]	@ 0x48
 8008f40:	e776      	b.n	8008e30 <_dtoa_r+0x100>
 8008f42:	2301      	movs	r3, #1
 8008f44:	e7b7      	b.n	8008eb6 <_dtoa_r+0x186>
 8008f46:	9010      	str	r0, [sp, #64]	@ 0x40
 8008f48:	e7b6      	b.n	8008eb8 <_dtoa_r+0x188>
 8008f4a:	9b00      	ldr	r3, [sp, #0]
 8008f4c:	1bdb      	subs	r3, r3, r7
 8008f4e:	9300      	str	r3, [sp, #0]
 8008f50:	427b      	negs	r3, r7
 8008f52:	9308      	str	r3, [sp, #32]
 8008f54:	2300      	movs	r3, #0
 8008f56:	930d      	str	r3, [sp, #52]	@ 0x34
 8008f58:	e7c3      	b.n	8008ee2 <_dtoa_r+0x1b2>
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f5e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008f60:	eb07 0b03 	add.w	fp, r7, r3
 8008f64:	f10b 0301 	add.w	r3, fp, #1
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	9303      	str	r3, [sp, #12]
 8008f6c:	bfb8      	it	lt
 8008f6e:	2301      	movlt	r3, #1
 8008f70:	e006      	b.n	8008f80 <_dtoa_r+0x250>
 8008f72:	2301      	movs	r3, #1
 8008f74:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	dd28      	ble.n	8008fce <_dtoa_r+0x29e>
 8008f7c:	469b      	mov	fp, r3
 8008f7e:	9303      	str	r3, [sp, #12]
 8008f80:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008f84:	2100      	movs	r1, #0
 8008f86:	2204      	movs	r2, #4
 8008f88:	f102 0514 	add.w	r5, r2, #20
 8008f8c:	429d      	cmp	r5, r3
 8008f8e:	d926      	bls.n	8008fde <_dtoa_r+0x2ae>
 8008f90:	6041      	str	r1, [r0, #4]
 8008f92:	4648      	mov	r0, r9
 8008f94:	f000 fd9c 	bl	8009ad0 <_Balloc>
 8008f98:	4682      	mov	sl, r0
 8008f9a:	2800      	cmp	r0, #0
 8008f9c:	d142      	bne.n	8009024 <_dtoa_r+0x2f4>
 8008f9e:	4b1e      	ldr	r3, [pc, #120]	@ (8009018 <_dtoa_r+0x2e8>)
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	f240 11af 	movw	r1, #431	@ 0x1af
 8008fa6:	e6da      	b.n	8008d5e <_dtoa_r+0x2e>
 8008fa8:	2300      	movs	r3, #0
 8008faa:	e7e3      	b.n	8008f74 <_dtoa_r+0x244>
 8008fac:	2300      	movs	r3, #0
 8008fae:	e7d5      	b.n	8008f5c <_dtoa_r+0x22c>
 8008fb0:	2401      	movs	r4, #1
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	9307      	str	r3, [sp, #28]
 8008fb6:	9409      	str	r4, [sp, #36]	@ 0x24
 8008fb8:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	f8cd b00c 	str.w	fp, [sp, #12]
 8008fc2:	2312      	movs	r3, #18
 8008fc4:	920c      	str	r2, [sp, #48]	@ 0x30
 8008fc6:	e7db      	b.n	8008f80 <_dtoa_r+0x250>
 8008fc8:	2301      	movs	r3, #1
 8008fca:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fcc:	e7f4      	b.n	8008fb8 <_dtoa_r+0x288>
 8008fce:	f04f 0b01 	mov.w	fp, #1
 8008fd2:	f8cd b00c 	str.w	fp, [sp, #12]
 8008fd6:	465b      	mov	r3, fp
 8008fd8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8008fdc:	e7d0      	b.n	8008f80 <_dtoa_r+0x250>
 8008fde:	3101      	adds	r1, #1
 8008fe0:	0052      	lsls	r2, r2, #1
 8008fe2:	e7d1      	b.n	8008f88 <_dtoa_r+0x258>
 8008fe4:	f3af 8000 	nop.w
 8008fe8:	636f4361 	.word	0x636f4361
 8008fec:	3fd287a7 	.word	0x3fd287a7
 8008ff0:	8b60c8b3 	.word	0x8b60c8b3
 8008ff4:	3fc68a28 	.word	0x3fc68a28
 8008ff8:	509f79fb 	.word	0x509f79fb
 8008ffc:	3fd34413 	.word	0x3fd34413
 8009000:	0800aa41 	.word	0x0800aa41
 8009004:	0800aa58 	.word	0x0800aa58
 8009008:	7ff00000 	.word	0x7ff00000
 800900c:	0800aa11 	.word	0x0800aa11
 8009010:	3ff80000 	.word	0x3ff80000
 8009014:	0800aba8 	.word	0x0800aba8
 8009018:	0800aab0 	.word	0x0800aab0
 800901c:	0800aa3d 	.word	0x0800aa3d
 8009020:	0800aa10 	.word	0x0800aa10
 8009024:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009028:	6018      	str	r0, [r3, #0]
 800902a:	9b03      	ldr	r3, [sp, #12]
 800902c:	2b0e      	cmp	r3, #14
 800902e:	f200 80a1 	bhi.w	8009174 <_dtoa_r+0x444>
 8009032:	2c00      	cmp	r4, #0
 8009034:	f000 809e 	beq.w	8009174 <_dtoa_r+0x444>
 8009038:	2f00      	cmp	r7, #0
 800903a:	dd33      	ble.n	80090a4 <_dtoa_r+0x374>
 800903c:	4b9c      	ldr	r3, [pc, #624]	@ (80092b0 <_dtoa_r+0x580>)
 800903e:	f007 020f 	and.w	r2, r7, #15
 8009042:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009046:	ed93 7b00 	vldr	d7, [r3]
 800904a:	05f8      	lsls	r0, r7, #23
 800904c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009050:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009054:	d516      	bpl.n	8009084 <_dtoa_r+0x354>
 8009056:	4b97      	ldr	r3, [pc, #604]	@ (80092b4 <_dtoa_r+0x584>)
 8009058:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800905c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009060:	f7f7 fc1c 	bl	800089c <__aeabi_ddiv>
 8009064:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009068:	f004 040f 	and.w	r4, r4, #15
 800906c:	2603      	movs	r6, #3
 800906e:	4d91      	ldr	r5, [pc, #580]	@ (80092b4 <_dtoa_r+0x584>)
 8009070:	b954      	cbnz	r4, 8009088 <_dtoa_r+0x358>
 8009072:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009076:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800907a:	f7f7 fc0f 	bl	800089c <__aeabi_ddiv>
 800907e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009082:	e028      	b.n	80090d6 <_dtoa_r+0x3a6>
 8009084:	2602      	movs	r6, #2
 8009086:	e7f2      	b.n	800906e <_dtoa_r+0x33e>
 8009088:	07e1      	lsls	r1, r4, #31
 800908a:	d508      	bpl.n	800909e <_dtoa_r+0x36e>
 800908c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009090:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009094:	f7f7 fad8 	bl	8000648 <__aeabi_dmul>
 8009098:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800909c:	3601      	adds	r6, #1
 800909e:	1064      	asrs	r4, r4, #1
 80090a0:	3508      	adds	r5, #8
 80090a2:	e7e5      	b.n	8009070 <_dtoa_r+0x340>
 80090a4:	f000 80af 	beq.w	8009206 <_dtoa_r+0x4d6>
 80090a8:	427c      	negs	r4, r7
 80090aa:	4b81      	ldr	r3, [pc, #516]	@ (80092b0 <_dtoa_r+0x580>)
 80090ac:	4d81      	ldr	r5, [pc, #516]	@ (80092b4 <_dtoa_r+0x584>)
 80090ae:	f004 020f 	and.w	r2, r4, #15
 80090b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80090be:	f7f7 fac3 	bl	8000648 <__aeabi_dmul>
 80090c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80090c6:	1124      	asrs	r4, r4, #4
 80090c8:	2300      	movs	r3, #0
 80090ca:	2602      	movs	r6, #2
 80090cc:	2c00      	cmp	r4, #0
 80090ce:	f040 808f 	bne.w	80091f0 <_dtoa_r+0x4c0>
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d1d3      	bne.n	800907e <_dtoa_r+0x34e>
 80090d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80090d8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	f000 8094 	beq.w	800920a <_dtoa_r+0x4da>
 80090e2:	4b75      	ldr	r3, [pc, #468]	@ (80092b8 <_dtoa_r+0x588>)
 80090e4:	2200      	movs	r2, #0
 80090e6:	4620      	mov	r0, r4
 80090e8:	4629      	mov	r1, r5
 80090ea:	f7f7 fd1f 	bl	8000b2c <__aeabi_dcmplt>
 80090ee:	2800      	cmp	r0, #0
 80090f0:	f000 808b 	beq.w	800920a <_dtoa_r+0x4da>
 80090f4:	9b03      	ldr	r3, [sp, #12]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	f000 8087 	beq.w	800920a <_dtoa_r+0x4da>
 80090fc:	f1bb 0f00 	cmp.w	fp, #0
 8009100:	dd34      	ble.n	800916c <_dtoa_r+0x43c>
 8009102:	4620      	mov	r0, r4
 8009104:	4b6d      	ldr	r3, [pc, #436]	@ (80092bc <_dtoa_r+0x58c>)
 8009106:	2200      	movs	r2, #0
 8009108:	4629      	mov	r1, r5
 800910a:	f7f7 fa9d 	bl	8000648 <__aeabi_dmul>
 800910e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009112:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8009116:	3601      	adds	r6, #1
 8009118:	465c      	mov	r4, fp
 800911a:	4630      	mov	r0, r6
 800911c:	f7f7 fa2a 	bl	8000574 <__aeabi_i2d>
 8009120:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009124:	f7f7 fa90 	bl	8000648 <__aeabi_dmul>
 8009128:	4b65      	ldr	r3, [pc, #404]	@ (80092c0 <_dtoa_r+0x590>)
 800912a:	2200      	movs	r2, #0
 800912c:	f7f7 f8d6 	bl	80002dc <__adddf3>
 8009130:	4605      	mov	r5, r0
 8009132:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009136:	2c00      	cmp	r4, #0
 8009138:	d16a      	bne.n	8009210 <_dtoa_r+0x4e0>
 800913a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800913e:	4b61      	ldr	r3, [pc, #388]	@ (80092c4 <_dtoa_r+0x594>)
 8009140:	2200      	movs	r2, #0
 8009142:	f7f7 f8c9 	bl	80002d8 <__aeabi_dsub>
 8009146:	4602      	mov	r2, r0
 8009148:	460b      	mov	r3, r1
 800914a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800914e:	462a      	mov	r2, r5
 8009150:	4633      	mov	r3, r6
 8009152:	f7f7 fd09 	bl	8000b68 <__aeabi_dcmpgt>
 8009156:	2800      	cmp	r0, #0
 8009158:	f040 8298 	bne.w	800968c <_dtoa_r+0x95c>
 800915c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009160:	462a      	mov	r2, r5
 8009162:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009166:	f7f7 fce1 	bl	8000b2c <__aeabi_dcmplt>
 800916a:	bb38      	cbnz	r0, 80091bc <_dtoa_r+0x48c>
 800916c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009170:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009174:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009176:	2b00      	cmp	r3, #0
 8009178:	f2c0 8157 	blt.w	800942a <_dtoa_r+0x6fa>
 800917c:	2f0e      	cmp	r7, #14
 800917e:	f300 8154 	bgt.w	800942a <_dtoa_r+0x6fa>
 8009182:	4b4b      	ldr	r3, [pc, #300]	@ (80092b0 <_dtoa_r+0x580>)
 8009184:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009188:	ed93 7b00 	vldr	d7, [r3]
 800918c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800918e:	2b00      	cmp	r3, #0
 8009190:	ed8d 7b00 	vstr	d7, [sp]
 8009194:	f280 80e5 	bge.w	8009362 <_dtoa_r+0x632>
 8009198:	9b03      	ldr	r3, [sp, #12]
 800919a:	2b00      	cmp	r3, #0
 800919c:	f300 80e1 	bgt.w	8009362 <_dtoa_r+0x632>
 80091a0:	d10c      	bne.n	80091bc <_dtoa_r+0x48c>
 80091a2:	4b48      	ldr	r3, [pc, #288]	@ (80092c4 <_dtoa_r+0x594>)
 80091a4:	2200      	movs	r2, #0
 80091a6:	ec51 0b17 	vmov	r0, r1, d7
 80091aa:	f7f7 fa4d 	bl	8000648 <__aeabi_dmul>
 80091ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091b2:	f7f7 fccf 	bl	8000b54 <__aeabi_dcmpge>
 80091b6:	2800      	cmp	r0, #0
 80091b8:	f000 8266 	beq.w	8009688 <_dtoa_r+0x958>
 80091bc:	2400      	movs	r4, #0
 80091be:	4625      	mov	r5, r4
 80091c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80091c2:	4656      	mov	r6, sl
 80091c4:	ea6f 0803 	mvn.w	r8, r3
 80091c8:	2700      	movs	r7, #0
 80091ca:	4621      	mov	r1, r4
 80091cc:	4648      	mov	r0, r9
 80091ce:	f000 fcbf 	bl	8009b50 <_Bfree>
 80091d2:	2d00      	cmp	r5, #0
 80091d4:	f000 80bd 	beq.w	8009352 <_dtoa_r+0x622>
 80091d8:	b12f      	cbz	r7, 80091e6 <_dtoa_r+0x4b6>
 80091da:	42af      	cmp	r7, r5
 80091dc:	d003      	beq.n	80091e6 <_dtoa_r+0x4b6>
 80091de:	4639      	mov	r1, r7
 80091e0:	4648      	mov	r0, r9
 80091e2:	f000 fcb5 	bl	8009b50 <_Bfree>
 80091e6:	4629      	mov	r1, r5
 80091e8:	4648      	mov	r0, r9
 80091ea:	f000 fcb1 	bl	8009b50 <_Bfree>
 80091ee:	e0b0      	b.n	8009352 <_dtoa_r+0x622>
 80091f0:	07e2      	lsls	r2, r4, #31
 80091f2:	d505      	bpl.n	8009200 <_dtoa_r+0x4d0>
 80091f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80091f8:	f7f7 fa26 	bl	8000648 <__aeabi_dmul>
 80091fc:	3601      	adds	r6, #1
 80091fe:	2301      	movs	r3, #1
 8009200:	1064      	asrs	r4, r4, #1
 8009202:	3508      	adds	r5, #8
 8009204:	e762      	b.n	80090cc <_dtoa_r+0x39c>
 8009206:	2602      	movs	r6, #2
 8009208:	e765      	b.n	80090d6 <_dtoa_r+0x3a6>
 800920a:	9c03      	ldr	r4, [sp, #12]
 800920c:	46b8      	mov	r8, r7
 800920e:	e784      	b.n	800911a <_dtoa_r+0x3ea>
 8009210:	4b27      	ldr	r3, [pc, #156]	@ (80092b0 <_dtoa_r+0x580>)
 8009212:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009214:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009218:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800921c:	4454      	add	r4, sl
 800921e:	2900      	cmp	r1, #0
 8009220:	d054      	beq.n	80092cc <_dtoa_r+0x59c>
 8009222:	4929      	ldr	r1, [pc, #164]	@ (80092c8 <_dtoa_r+0x598>)
 8009224:	2000      	movs	r0, #0
 8009226:	f7f7 fb39 	bl	800089c <__aeabi_ddiv>
 800922a:	4633      	mov	r3, r6
 800922c:	462a      	mov	r2, r5
 800922e:	f7f7 f853 	bl	80002d8 <__aeabi_dsub>
 8009232:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009236:	4656      	mov	r6, sl
 8009238:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800923c:	f7f7 fcb4 	bl	8000ba8 <__aeabi_d2iz>
 8009240:	4605      	mov	r5, r0
 8009242:	f7f7 f997 	bl	8000574 <__aeabi_i2d>
 8009246:	4602      	mov	r2, r0
 8009248:	460b      	mov	r3, r1
 800924a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800924e:	f7f7 f843 	bl	80002d8 <__aeabi_dsub>
 8009252:	3530      	adds	r5, #48	@ 0x30
 8009254:	4602      	mov	r2, r0
 8009256:	460b      	mov	r3, r1
 8009258:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800925c:	f806 5b01 	strb.w	r5, [r6], #1
 8009260:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009264:	f7f7 fc62 	bl	8000b2c <__aeabi_dcmplt>
 8009268:	2800      	cmp	r0, #0
 800926a:	d172      	bne.n	8009352 <_dtoa_r+0x622>
 800926c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009270:	4911      	ldr	r1, [pc, #68]	@ (80092b8 <_dtoa_r+0x588>)
 8009272:	2000      	movs	r0, #0
 8009274:	f7f7 f830 	bl	80002d8 <__aeabi_dsub>
 8009278:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800927c:	f7f7 fc56 	bl	8000b2c <__aeabi_dcmplt>
 8009280:	2800      	cmp	r0, #0
 8009282:	f040 80b4 	bne.w	80093ee <_dtoa_r+0x6be>
 8009286:	42a6      	cmp	r6, r4
 8009288:	f43f af70 	beq.w	800916c <_dtoa_r+0x43c>
 800928c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009290:	4b0a      	ldr	r3, [pc, #40]	@ (80092bc <_dtoa_r+0x58c>)
 8009292:	2200      	movs	r2, #0
 8009294:	f7f7 f9d8 	bl	8000648 <__aeabi_dmul>
 8009298:	4b08      	ldr	r3, [pc, #32]	@ (80092bc <_dtoa_r+0x58c>)
 800929a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800929e:	2200      	movs	r2, #0
 80092a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092a4:	f7f7 f9d0 	bl	8000648 <__aeabi_dmul>
 80092a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80092ac:	e7c4      	b.n	8009238 <_dtoa_r+0x508>
 80092ae:	bf00      	nop
 80092b0:	0800aba8 	.word	0x0800aba8
 80092b4:	0800ab80 	.word	0x0800ab80
 80092b8:	3ff00000 	.word	0x3ff00000
 80092bc:	40240000 	.word	0x40240000
 80092c0:	401c0000 	.word	0x401c0000
 80092c4:	40140000 	.word	0x40140000
 80092c8:	3fe00000 	.word	0x3fe00000
 80092cc:	4631      	mov	r1, r6
 80092ce:	4628      	mov	r0, r5
 80092d0:	f7f7 f9ba 	bl	8000648 <__aeabi_dmul>
 80092d4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80092d8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80092da:	4656      	mov	r6, sl
 80092dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092e0:	f7f7 fc62 	bl	8000ba8 <__aeabi_d2iz>
 80092e4:	4605      	mov	r5, r0
 80092e6:	f7f7 f945 	bl	8000574 <__aeabi_i2d>
 80092ea:	4602      	mov	r2, r0
 80092ec:	460b      	mov	r3, r1
 80092ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092f2:	f7f6 fff1 	bl	80002d8 <__aeabi_dsub>
 80092f6:	3530      	adds	r5, #48	@ 0x30
 80092f8:	f806 5b01 	strb.w	r5, [r6], #1
 80092fc:	4602      	mov	r2, r0
 80092fe:	460b      	mov	r3, r1
 8009300:	42a6      	cmp	r6, r4
 8009302:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009306:	f04f 0200 	mov.w	r2, #0
 800930a:	d124      	bne.n	8009356 <_dtoa_r+0x626>
 800930c:	4baf      	ldr	r3, [pc, #700]	@ (80095cc <_dtoa_r+0x89c>)
 800930e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009312:	f7f6 ffe3 	bl	80002dc <__adddf3>
 8009316:	4602      	mov	r2, r0
 8009318:	460b      	mov	r3, r1
 800931a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800931e:	f7f7 fc23 	bl	8000b68 <__aeabi_dcmpgt>
 8009322:	2800      	cmp	r0, #0
 8009324:	d163      	bne.n	80093ee <_dtoa_r+0x6be>
 8009326:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800932a:	49a8      	ldr	r1, [pc, #672]	@ (80095cc <_dtoa_r+0x89c>)
 800932c:	2000      	movs	r0, #0
 800932e:	f7f6 ffd3 	bl	80002d8 <__aeabi_dsub>
 8009332:	4602      	mov	r2, r0
 8009334:	460b      	mov	r3, r1
 8009336:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800933a:	f7f7 fbf7 	bl	8000b2c <__aeabi_dcmplt>
 800933e:	2800      	cmp	r0, #0
 8009340:	f43f af14 	beq.w	800916c <_dtoa_r+0x43c>
 8009344:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009346:	1e73      	subs	r3, r6, #1
 8009348:	9313      	str	r3, [sp, #76]	@ 0x4c
 800934a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800934e:	2b30      	cmp	r3, #48	@ 0x30
 8009350:	d0f8      	beq.n	8009344 <_dtoa_r+0x614>
 8009352:	4647      	mov	r7, r8
 8009354:	e03b      	b.n	80093ce <_dtoa_r+0x69e>
 8009356:	4b9e      	ldr	r3, [pc, #632]	@ (80095d0 <_dtoa_r+0x8a0>)
 8009358:	f7f7 f976 	bl	8000648 <__aeabi_dmul>
 800935c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009360:	e7bc      	b.n	80092dc <_dtoa_r+0x5ac>
 8009362:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009366:	4656      	mov	r6, sl
 8009368:	e9dd 2300 	ldrd	r2, r3, [sp]
 800936c:	4620      	mov	r0, r4
 800936e:	4629      	mov	r1, r5
 8009370:	f7f7 fa94 	bl	800089c <__aeabi_ddiv>
 8009374:	f7f7 fc18 	bl	8000ba8 <__aeabi_d2iz>
 8009378:	4680      	mov	r8, r0
 800937a:	f7f7 f8fb 	bl	8000574 <__aeabi_i2d>
 800937e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009382:	f7f7 f961 	bl	8000648 <__aeabi_dmul>
 8009386:	4602      	mov	r2, r0
 8009388:	460b      	mov	r3, r1
 800938a:	4620      	mov	r0, r4
 800938c:	4629      	mov	r1, r5
 800938e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009392:	f7f6 ffa1 	bl	80002d8 <__aeabi_dsub>
 8009396:	f806 4b01 	strb.w	r4, [r6], #1
 800939a:	9d03      	ldr	r5, [sp, #12]
 800939c:	eba6 040a 	sub.w	r4, r6, sl
 80093a0:	42a5      	cmp	r5, r4
 80093a2:	4602      	mov	r2, r0
 80093a4:	460b      	mov	r3, r1
 80093a6:	d133      	bne.n	8009410 <_dtoa_r+0x6e0>
 80093a8:	f7f6 ff98 	bl	80002dc <__adddf3>
 80093ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093b0:	4604      	mov	r4, r0
 80093b2:	460d      	mov	r5, r1
 80093b4:	f7f7 fbd8 	bl	8000b68 <__aeabi_dcmpgt>
 80093b8:	b9c0      	cbnz	r0, 80093ec <_dtoa_r+0x6bc>
 80093ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093be:	4620      	mov	r0, r4
 80093c0:	4629      	mov	r1, r5
 80093c2:	f7f7 fba9 	bl	8000b18 <__aeabi_dcmpeq>
 80093c6:	b110      	cbz	r0, 80093ce <_dtoa_r+0x69e>
 80093c8:	f018 0f01 	tst.w	r8, #1
 80093cc:	d10e      	bne.n	80093ec <_dtoa_r+0x6bc>
 80093ce:	9902      	ldr	r1, [sp, #8]
 80093d0:	4648      	mov	r0, r9
 80093d2:	f000 fbbd 	bl	8009b50 <_Bfree>
 80093d6:	2300      	movs	r3, #0
 80093d8:	7033      	strb	r3, [r6, #0]
 80093da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80093dc:	3701      	adds	r7, #1
 80093de:	601f      	str	r7, [r3, #0]
 80093e0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	f000 824b 	beq.w	800987e <_dtoa_r+0xb4e>
 80093e8:	601e      	str	r6, [r3, #0]
 80093ea:	e248      	b.n	800987e <_dtoa_r+0xb4e>
 80093ec:	46b8      	mov	r8, r7
 80093ee:	4633      	mov	r3, r6
 80093f0:	461e      	mov	r6, r3
 80093f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80093f6:	2a39      	cmp	r2, #57	@ 0x39
 80093f8:	d106      	bne.n	8009408 <_dtoa_r+0x6d8>
 80093fa:	459a      	cmp	sl, r3
 80093fc:	d1f8      	bne.n	80093f0 <_dtoa_r+0x6c0>
 80093fe:	2230      	movs	r2, #48	@ 0x30
 8009400:	f108 0801 	add.w	r8, r8, #1
 8009404:	f88a 2000 	strb.w	r2, [sl]
 8009408:	781a      	ldrb	r2, [r3, #0]
 800940a:	3201      	adds	r2, #1
 800940c:	701a      	strb	r2, [r3, #0]
 800940e:	e7a0      	b.n	8009352 <_dtoa_r+0x622>
 8009410:	4b6f      	ldr	r3, [pc, #444]	@ (80095d0 <_dtoa_r+0x8a0>)
 8009412:	2200      	movs	r2, #0
 8009414:	f7f7 f918 	bl	8000648 <__aeabi_dmul>
 8009418:	2200      	movs	r2, #0
 800941a:	2300      	movs	r3, #0
 800941c:	4604      	mov	r4, r0
 800941e:	460d      	mov	r5, r1
 8009420:	f7f7 fb7a 	bl	8000b18 <__aeabi_dcmpeq>
 8009424:	2800      	cmp	r0, #0
 8009426:	d09f      	beq.n	8009368 <_dtoa_r+0x638>
 8009428:	e7d1      	b.n	80093ce <_dtoa_r+0x69e>
 800942a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800942c:	2a00      	cmp	r2, #0
 800942e:	f000 80ea 	beq.w	8009606 <_dtoa_r+0x8d6>
 8009432:	9a07      	ldr	r2, [sp, #28]
 8009434:	2a01      	cmp	r2, #1
 8009436:	f300 80cd 	bgt.w	80095d4 <_dtoa_r+0x8a4>
 800943a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800943c:	2a00      	cmp	r2, #0
 800943e:	f000 80c1 	beq.w	80095c4 <_dtoa_r+0x894>
 8009442:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009446:	9c08      	ldr	r4, [sp, #32]
 8009448:	9e00      	ldr	r6, [sp, #0]
 800944a:	9a00      	ldr	r2, [sp, #0]
 800944c:	441a      	add	r2, r3
 800944e:	9200      	str	r2, [sp, #0]
 8009450:	9a06      	ldr	r2, [sp, #24]
 8009452:	2101      	movs	r1, #1
 8009454:	441a      	add	r2, r3
 8009456:	4648      	mov	r0, r9
 8009458:	9206      	str	r2, [sp, #24]
 800945a:	f000 fc2d 	bl	8009cb8 <__i2b>
 800945e:	4605      	mov	r5, r0
 8009460:	b166      	cbz	r6, 800947c <_dtoa_r+0x74c>
 8009462:	9b06      	ldr	r3, [sp, #24]
 8009464:	2b00      	cmp	r3, #0
 8009466:	dd09      	ble.n	800947c <_dtoa_r+0x74c>
 8009468:	42b3      	cmp	r3, r6
 800946a:	9a00      	ldr	r2, [sp, #0]
 800946c:	bfa8      	it	ge
 800946e:	4633      	movge	r3, r6
 8009470:	1ad2      	subs	r2, r2, r3
 8009472:	9200      	str	r2, [sp, #0]
 8009474:	9a06      	ldr	r2, [sp, #24]
 8009476:	1af6      	subs	r6, r6, r3
 8009478:	1ad3      	subs	r3, r2, r3
 800947a:	9306      	str	r3, [sp, #24]
 800947c:	9b08      	ldr	r3, [sp, #32]
 800947e:	b30b      	cbz	r3, 80094c4 <_dtoa_r+0x794>
 8009480:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009482:	2b00      	cmp	r3, #0
 8009484:	f000 80c6 	beq.w	8009614 <_dtoa_r+0x8e4>
 8009488:	2c00      	cmp	r4, #0
 800948a:	f000 80c0 	beq.w	800960e <_dtoa_r+0x8de>
 800948e:	4629      	mov	r1, r5
 8009490:	4622      	mov	r2, r4
 8009492:	4648      	mov	r0, r9
 8009494:	f000 fcc8 	bl	8009e28 <__pow5mult>
 8009498:	9a02      	ldr	r2, [sp, #8]
 800949a:	4601      	mov	r1, r0
 800949c:	4605      	mov	r5, r0
 800949e:	4648      	mov	r0, r9
 80094a0:	f000 fc20 	bl	8009ce4 <__multiply>
 80094a4:	9902      	ldr	r1, [sp, #8]
 80094a6:	4680      	mov	r8, r0
 80094a8:	4648      	mov	r0, r9
 80094aa:	f000 fb51 	bl	8009b50 <_Bfree>
 80094ae:	9b08      	ldr	r3, [sp, #32]
 80094b0:	1b1b      	subs	r3, r3, r4
 80094b2:	9308      	str	r3, [sp, #32]
 80094b4:	f000 80b1 	beq.w	800961a <_dtoa_r+0x8ea>
 80094b8:	9a08      	ldr	r2, [sp, #32]
 80094ba:	4641      	mov	r1, r8
 80094bc:	4648      	mov	r0, r9
 80094be:	f000 fcb3 	bl	8009e28 <__pow5mult>
 80094c2:	9002      	str	r0, [sp, #8]
 80094c4:	2101      	movs	r1, #1
 80094c6:	4648      	mov	r0, r9
 80094c8:	f000 fbf6 	bl	8009cb8 <__i2b>
 80094cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80094ce:	4604      	mov	r4, r0
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	f000 81d8 	beq.w	8009886 <_dtoa_r+0xb56>
 80094d6:	461a      	mov	r2, r3
 80094d8:	4601      	mov	r1, r0
 80094da:	4648      	mov	r0, r9
 80094dc:	f000 fca4 	bl	8009e28 <__pow5mult>
 80094e0:	9b07      	ldr	r3, [sp, #28]
 80094e2:	2b01      	cmp	r3, #1
 80094e4:	4604      	mov	r4, r0
 80094e6:	f300 809f 	bgt.w	8009628 <_dtoa_r+0x8f8>
 80094ea:	9b04      	ldr	r3, [sp, #16]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	f040 8097 	bne.w	8009620 <_dtoa_r+0x8f0>
 80094f2:	9b05      	ldr	r3, [sp, #20]
 80094f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	f040 8093 	bne.w	8009624 <_dtoa_r+0x8f4>
 80094fe:	9b05      	ldr	r3, [sp, #20]
 8009500:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009504:	0d1b      	lsrs	r3, r3, #20
 8009506:	051b      	lsls	r3, r3, #20
 8009508:	b133      	cbz	r3, 8009518 <_dtoa_r+0x7e8>
 800950a:	9b00      	ldr	r3, [sp, #0]
 800950c:	3301      	adds	r3, #1
 800950e:	9300      	str	r3, [sp, #0]
 8009510:	9b06      	ldr	r3, [sp, #24]
 8009512:	3301      	adds	r3, #1
 8009514:	9306      	str	r3, [sp, #24]
 8009516:	2301      	movs	r3, #1
 8009518:	9308      	str	r3, [sp, #32]
 800951a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800951c:	2b00      	cmp	r3, #0
 800951e:	f000 81b8 	beq.w	8009892 <_dtoa_r+0xb62>
 8009522:	6923      	ldr	r3, [r4, #16]
 8009524:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009528:	6918      	ldr	r0, [r3, #16]
 800952a:	f000 fb79 	bl	8009c20 <__hi0bits>
 800952e:	f1c0 0020 	rsb	r0, r0, #32
 8009532:	9b06      	ldr	r3, [sp, #24]
 8009534:	4418      	add	r0, r3
 8009536:	f010 001f 	ands.w	r0, r0, #31
 800953a:	f000 8082 	beq.w	8009642 <_dtoa_r+0x912>
 800953e:	f1c0 0320 	rsb	r3, r0, #32
 8009542:	2b04      	cmp	r3, #4
 8009544:	dd73      	ble.n	800962e <_dtoa_r+0x8fe>
 8009546:	9b00      	ldr	r3, [sp, #0]
 8009548:	f1c0 001c 	rsb	r0, r0, #28
 800954c:	4403      	add	r3, r0
 800954e:	9300      	str	r3, [sp, #0]
 8009550:	9b06      	ldr	r3, [sp, #24]
 8009552:	4403      	add	r3, r0
 8009554:	4406      	add	r6, r0
 8009556:	9306      	str	r3, [sp, #24]
 8009558:	9b00      	ldr	r3, [sp, #0]
 800955a:	2b00      	cmp	r3, #0
 800955c:	dd05      	ble.n	800956a <_dtoa_r+0x83a>
 800955e:	9902      	ldr	r1, [sp, #8]
 8009560:	461a      	mov	r2, r3
 8009562:	4648      	mov	r0, r9
 8009564:	f000 fcba 	bl	8009edc <__lshift>
 8009568:	9002      	str	r0, [sp, #8]
 800956a:	9b06      	ldr	r3, [sp, #24]
 800956c:	2b00      	cmp	r3, #0
 800956e:	dd05      	ble.n	800957c <_dtoa_r+0x84c>
 8009570:	4621      	mov	r1, r4
 8009572:	461a      	mov	r2, r3
 8009574:	4648      	mov	r0, r9
 8009576:	f000 fcb1 	bl	8009edc <__lshift>
 800957a:	4604      	mov	r4, r0
 800957c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800957e:	2b00      	cmp	r3, #0
 8009580:	d061      	beq.n	8009646 <_dtoa_r+0x916>
 8009582:	9802      	ldr	r0, [sp, #8]
 8009584:	4621      	mov	r1, r4
 8009586:	f000 fd15 	bl	8009fb4 <__mcmp>
 800958a:	2800      	cmp	r0, #0
 800958c:	da5b      	bge.n	8009646 <_dtoa_r+0x916>
 800958e:	2300      	movs	r3, #0
 8009590:	9902      	ldr	r1, [sp, #8]
 8009592:	220a      	movs	r2, #10
 8009594:	4648      	mov	r0, r9
 8009596:	f000 fafd 	bl	8009b94 <__multadd>
 800959a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800959c:	9002      	str	r0, [sp, #8]
 800959e:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	f000 8177 	beq.w	8009896 <_dtoa_r+0xb66>
 80095a8:	4629      	mov	r1, r5
 80095aa:	2300      	movs	r3, #0
 80095ac:	220a      	movs	r2, #10
 80095ae:	4648      	mov	r0, r9
 80095b0:	f000 faf0 	bl	8009b94 <__multadd>
 80095b4:	f1bb 0f00 	cmp.w	fp, #0
 80095b8:	4605      	mov	r5, r0
 80095ba:	dc6f      	bgt.n	800969c <_dtoa_r+0x96c>
 80095bc:	9b07      	ldr	r3, [sp, #28]
 80095be:	2b02      	cmp	r3, #2
 80095c0:	dc49      	bgt.n	8009656 <_dtoa_r+0x926>
 80095c2:	e06b      	b.n	800969c <_dtoa_r+0x96c>
 80095c4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80095c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80095ca:	e73c      	b.n	8009446 <_dtoa_r+0x716>
 80095cc:	3fe00000 	.word	0x3fe00000
 80095d0:	40240000 	.word	0x40240000
 80095d4:	9b03      	ldr	r3, [sp, #12]
 80095d6:	1e5c      	subs	r4, r3, #1
 80095d8:	9b08      	ldr	r3, [sp, #32]
 80095da:	42a3      	cmp	r3, r4
 80095dc:	db09      	blt.n	80095f2 <_dtoa_r+0x8c2>
 80095de:	1b1c      	subs	r4, r3, r4
 80095e0:	9b03      	ldr	r3, [sp, #12]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	f6bf af30 	bge.w	8009448 <_dtoa_r+0x718>
 80095e8:	9b00      	ldr	r3, [sp, #0]
 80095ea:	9a03      	ldr	r2, [sp, #12]
 80095ec:	1a9e      	subs	r6, r3, r2
 80095ee:	2300      	movs	r3, #0
 80095f0:	e72b      	b.n	800944a <_dtoa_r+0x71a>
 80095f2:	9b08      	ldr	r3, [sp, #32]
 80095f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80095f6:	9408      	str	r4, [sp, #32]
 80095f8:	1ae3      	subs	r3, r4, r3
 80095fa:	441a      	add	r2, r3
 80095fc:	9e00      	ldr	r6, [sp, #0]
 80095fe:	9b03      	ldr	r3, [sp, #12]
 8009600:	920d      	str	r2, [sp, #52]	@ 0x34
 8009602:	2400      	movs	r4, #0
 8009604:	e721      	b.n	800944a <_dtoa_r+0x71a>
 8009606:	9c08      	ldr	r4, [sp, #32]
 8009608:	9e00      	ldr	r6, [sp, #0]
 800960a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800960c:	e728      	b.n	8009460 <_dtoa_r+0x730>
 800960e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009612:	e751      	b.n	80094b8 <_dtoa_r+0x788>
 8009614:	9a08      	ldr	r2, [sp, #32]
 8009616:	9902      	ldr	r1, [sp, #8]
 8009618:	e750      	b.n	80094bc <_dtoa_r+0x78c>
 800961a:	f8cd 8008 	str.w	r8, [sp, #8]
 800961e:	e751      	b.n	80094c4 <_dtoa_r+0x794>
 8009620:	2300      	movs	r3, #0
 8009622:	e779      	b.n	8009518 <_dtoa_r+0x7e8>
 8009624:	9b04      	ldr	r3, [sp, #16]
 8009626:	e777      	b.n	8009518 <_dtoa_r+0x7e8>
 8009628:	2300      	movs	r3, #0
 800962a:	9308      	str	r3, [sp, #32]
 800962c:	e779      	b.n	8009522 <_dtoa_r+0x7f2>
 800962e:	d093      	beq.n	8009558 <_dtoa_r+0x828>
 8009630:	9a00      	ldr	r2, [sp, #0]
 8009632:	331c      	adds	r3, #28
 8009634:	441a      	add	r2, r3
 8009636:	9200      	str	r2, [sp, #0]
 8009638:	9a06      	ldr	r2, [sp, #24]
 800963a:	441a      	add	r2, r3
 800963c:	441e      	add	r6, r3
 800963e:	9206      	str	r2, [sp, #24]
 8009640:	e78a      	b.n	8009558 <_dtoa_r+0x828>
 8009642:	4603      	mov	r3, r0
 8009644:	e7f4      	b.n	8009630 <_dtoa_r+0x900>
 8009646:	9b03      	ldr	r3, [sp, #12]
 8009648:	2b00      	cmp	r3, #0
 800964a:	46b8      	mov	r8, r7
 800964c:	dc20      	bgt.n	8009690 <_dtoa_r+0x960>
 800964e:	469b      	mov	fp, r3
 8009650:	9b07      	ldr	r3, [sp, #28]
 8009652:	2b02      	cmp	r3, #2
 8009654:	dd1e      	ble.n	8009694 <_dtoa_r+0x964>
 8009656:	f1bb 0f00 	cmp.w	fp, #0
 800965a:	f47f adb1 	bne.w	80091c0 <_dtoa_r+0x490>
 800965e:	4621      	mov	r1, r4
 8009660:	465b      	mov	r3, fp
 8009662:	2205      	movs	r2, #5
 8009664:	4648      	mov	r0, r9
 8009666:	f000 fa95 	bl	8009b94 <__multadd>
 800966a:	4601      	mov	r1, r0
 800966c:	4604      	mov	r4, r0
 800966e:	9802      	ldr	r0, [sp, #8]
 8009670:	f000 fca0 	bl	8009fb4 <__mcmp>
 8009674:	2800      	cmp	r0, #0
 8009676:	f77f ada3 	ble.w	80091c0 <_dtoa_r+0x490>
 800967a:	4656      	mov	r6, sl
 800967c:	2331      	movs	r3, #49	@ 0x31
 800967e:	f806 3b01 	strb.w	r3, [r6], #1
 8009682:	f108 0801 	add.w	r8, r8, #1
 8009686:	e59f      	b.n	80091c8 <_dtoa_r+0x498>
 8009688:	9c03      	ldr	r4, [sp, #12]
 800968a:	46b8      	mov	r8, r7
 800968c:	4625      	mov	r5, r4
 800968e:	e7f4      	b.n	800967a <_dtoa_r+0x94a>
 8009690:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009694:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009696:	2b00      	cmp	r3, #0
 8009698:	f000 8101 	beq.w	800989e <_dtoa_r+0xb6e>
 800969c:	2e00      	cmp	r6, #0
 800969e:	dd05      	ble.n	80096ac <_dtoa_r+0x97c>
 80096a0:	4629      	mov	r1, r5
 80096a2:	4632      	mov	r2, r6
 80096a4:	4648      	mov	r0, r9
 80096a6:	f000 fc19 	bl	8009edc <__lshift>
 80096aa:	4605      	mov	r5, r0
 80096ac:	9b08      	ldr	r3, [sp, #32]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d05c      	beq.n	800976c <_dtoa_r+0xa3c>
 80096b2:	6869      	ldr	r1, [r5, #4]
 80096b4:	4648      	mov	r0, r9
 80096b6:	f000 fa0b 	bl	8009ad0 <_Balloc>
 80096ba:	4606      	mov	r6, r0
 80096bc:	b928      	cbnz	r0, 80096ca <_dtoa_r+0x99a>
 80096be:	4b82      	ldr	r3, [pc, #520]	@ (80098c8 <_dtoa_r+0xb98>)
 80096c0:	4602      	mov	r2, r0
 80096c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80096c6:	f7ff bb4a 	b.w	8008d5e <_dtoa_r+0x2e>
 80096ca:	692a      	ldr	r2, [r5, #16]
 80096cc:	3202      	adds	r2, #2
 80096ce:	0092      	lsls	r2, r2, #2
 80096d0:	f105 010c 	add.w	r1, r5, #12
 80096d4:	300c      	adds	r0, #12
 80096d6:	f7ff fa94 	bl	8008c02 <memcpy>
 80096da:	2201      	movs	r2, #1
 80096dc:	4631      	mov	r1, r6
 80096de:	4648      	mov	r0, r9
 80096e0:	f000 fbfc 	bl	8009edc <__lshift>
 80096e4:	f10a 0301 	add.w	r3, sl, #1
 80096e8:	9300      	str	r3, [sp, #0]
 80096ea:	eb0a 030b 	add.w	r3, sl, fp
 80096ee:	9308      	str	r3, [sp, #32]
 80096f0:	9b04      	ldr	r3, [sp, #16]
 80096f2:	f003 0301 	and.w	r3, r3, #1
 80096f6:	462f      	mov	r7, r5
 80096f8:	9306      	str	r3, [sp, #24]
 80096fa:	4605      	mov	r5, r0
 80096fc:	9b00      	ldr	r3, [sp, #0]
 80096fe:	9802      	ldr	r0, [sp, #8]
 8009700:	4621      	mov	r1, r4
 8009702:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8009706:	f7ff fa8a 	bl	8008c1e <quorem>
 800970a:	4603      	mov	r3, r0
 800970c:	3330      	adds	r3, #48	@ 0x30
 800970e:	9003      	str	r0, [sp, #12]
 8009710:	4639      	mov	r1, r7
 8009712:	9802      	ldr	r0, [sp, #8]
 8009714:	9309      	str	r3, [sp, #36]	@ 0x24
 8009716:	f000 fc4d 	bl	8009fb4 <__mcmp>
 800971a:	462a      	mov	r2, r5
 800971c:	9004      	str	r0, [sp, #16]
 800971e:	4621      	mov	r1, r4
 8009720:	4648      	mov	r0, r9
 8009722:	f000 fc63 	bl	8009fec <__mdiff>
 8009726:	68c2      	ldr	r2, [r0, #12]
 8009728:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800972a:	4606      	mov	r6, r0
 800972c:	bb02      	cbnz	r2, 8009770 <_dtoa_r+0xa40>
 800972e:	4601      	mov	r1, r0
 8009730:	9802      	ldr	r0, [sp, #8]
 8009732:	f000 fc3f 	bl	8009fb4 <__mcmp>
 8009736:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009738:	4602      	mov	r2, r0
 800973a:	4631      	mov	r1, r6
 800973c:	4648      	mov	r0, r9
 800973e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009740:	9309      	str	r3, [sp, #36]	@ 0x24
 8009742:	f000 fa05 	bl	8009b50 <_Bfree>
 8009746:	9b07      	ldr	r3, [sp, #28]
 8009748:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800974a:	9e00      	ldr	r6, [sp, #0]
 800974c:	ea42 0103 	orr.w	r1, r2, r3
 8009750:	9b06      	ldr	r3, [sp, #24]
 8009752:	4319      	orrs	r1, r3
 8009754:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009756:	d10d      	bne.n	8009774 <_dtoa_r+0xa44>
 8009758:	2b39      	cmp	r3, #57	@ 0x39
 800975a:	d027      	beq.n	80097ac <_dtoa_r+0xa7c>
 800975c:	9a04      	ldr	r2, [sp, #16]
 800975e:	2a00      	cmp	r2, #0
 8009760:	dd01      	ble.n	8009766 <_dtoa_r+0xa36>
 8009762:	9b03      	ldr	r3, [sp, #12]
 8009764:	3331      	adds	r3, #49	@ 0x31
 8009766:	f88b 3000 	strb.w	r3, [fp]
 800976a:	e52e      	b.n	80091ca <_dtoa_r+0x49a>
 800976c:	4628      	mov	r0, r5
 800976e:	e7b9      	b.n	80096e4 <_dtoa_r+0x9b4>
 8009770:	2201      	movs	r2, #1
 8009772:	e7e2      	b.n	800973a <_dtoa_r+0xa0a>
 8009774:	9904      	ldr	r1, [sp, #16]
 8009776:	2900      	cmp	r1, #0
 8009778:	db04      	blt.n	8009784 <_dtoa_r+0xa54>
 800977a:	9807      	ldr	r0, [sp, #28]
 800977c:	4301      	orrs	r1, r0
 800977e:	9806      	ldr	r0, [sp, #24]
 8009780:	4301      	orrs	r1, r0
 8009782:	d120      	bne.n	80097c6 <_dtoa_r+0xa96>
 8009784:	2a00      	cmp	r2, #0
 8009786:	ddee      	ble.n	8009766 <_dtoa_r+0xa36>
 8009788:	9902      	ldr	r1, [sp, #8]
 800978a:	9300      	str	r3, [sp, #0]
 800978c:	2201      	movs	r2, #1
 800978e:	4648      	mov	r0, r9
 8009790:	f000 fba4 	bl	8009edc <__lshift>
 8009794:	4621      	mov	r1, r4
 8009796:	9002      	str	r0, [sp, #8]
 8009798:	f000 fc0c 	bl	8009fb4 <__mcmp>
 800979c:	2800      	cmp	r0, #0
 800979e:	9b00      	ldr	r3, [sp, #0]
 80097a0:	dc02      	bgt.n	80097a8 <_dtoa_r+0xa78>
 80097a2:	d1e0      	bne.n	8009766 <_dtoa_r+0xa36>
 80097a4:	07da      	lsls	r2, r3, #31
 80097a6:	d5de      	bpl.n	8009766 <_dtoa_r+0xa36>
 80097a8:	2b39      	cmp	r3, #57	@ 0x39
 80097aa:	d1da      	bne.n	8009762 <_dtoa_r+0xa32>
 80097ac:	2339      	movs	r3, #57	@ 0x39
 80097ae:	f88b 3000 	strb.w	r3, [fp]
 80097b2:	4633      	mov	r3, r6
 80097b4:	461e      	mov	r6, r3
 80097b6:	3b01      	subs	r3, #1
 80097b8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80097bc:	2a39      	cmp	r2, #57	@ 0x39
 80097be:	d04e      	beq.n	800985e <_dtoa_r+0xb2e>
 80097c0:	3201      	adds	r2, #1
 80097c2:	701a      	strb	r2, [r3, #0]
 80097c4:	e501      	b.n	80091ca <_dtoa_r+0x49a>
 80097c6:	2a00      	cmp	r2, #0
 80097c8:	dd03      	ble.n	80097d2 <_dtoa_r+0xaa2>
 80097ca:	2b39      	cmp	r3, #57	@ 0x39
 80097cc:	d0ee      	beq.n	80097ac <_dtoa_r+0xa7c>
 80097ce:	3301      	adds	r3, #1
 80097d0:	e7c9      	b.n	8009766 <_dtoa_r+0xa36>
 80097d2:	9a00      	ldr	r2, [sp, #0]
 80097d4:	9908      	ldr	r1, [sp, #32]
 80097d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80097da:	428a      	cmp	r2, r1
 80097dc:	d028      	beq.n	8009830 <_dtoa_r+0xb00>
 80097de:	9902      	ldr	r1, [sp, #8]
 80097e0:	2300      	movs	r3, #0
 80097e2:	220a      	movs	r2, #10
 80097e4:	4648      	mov	r0, r9
 80097e6:	f000 f9d5 	bl	8009b94 <__multadd>
 80097ea:	42af      	cmp	r7, r5
 80097ec:	9002      	str	r0, [sp, #8]
 80097ee:	f04f 0300 	mov.w	r3, #0
 80097f2:	f04f 020a 	mov.w	r2, #10
 80097f6:	4639      	mov	r1, r7
 80097f8:	4648      	mov	r0, r9
 80097fa:	d107      	bne.n	800980c <_dtoa_r+0xadc>
 80097fc:	f000 f9ca 	bl	8009b94 <__multadd>
 8009800:	4607      	mov	r7, r0
 8009802:	4605      	mov	r5, r0
 8009804:	9b00      	ldr	r3, [sp, #0]
 8009806:	3301      	adds	r3, #1
 8009808:	9300      	str	r3, [sp, #0]
 800980a:	e777      	b.n	80096fc <_dtoa_r+0x9cc>
 800980c:	f000 f9c2 	bl	8009b94 <__multadd>
 8009810:	4629      	mov	r1, r5
 8009812:	4607      	mov	r7, r0
 8009814:	2300      	movs	r3, #0
 8009816:	220a      	movs	r2, #10
 8009818:	4648      	mov	r0, r9
 800981a:	f000 f9bb 	bl	8009b94 <__multadd>
 800981e:	4605      	mov	r5, r0
 8009820:	e7f0      	b.n	8009804 <_dtoa_r+0xad4>
 8009822:	f1bb 0f00 	cmp.w	fp, #0
 8009826:	bfcc      	ite	gt
 8009828:	465e      	movgt	r6, fp
 800982a:	2601      	movle	r6, #1
 800982c:	4456      	add	r6, sl
 800982e:	2700      	movs	r7, #0
 8009830:	9902      	ldr	r1, [sp, #8]
 8009832:	9300      	str	r3, [sp, #0]
 8009834:	2201      	movs	r2, #1
 8009836:	4648      	mov	r0, r9
 8009838:	f000 fb50 	bl	8009edc <__lshift>
 800983c:	4621      	mov	r1, r4
 800983e:	9002      	str	r0, [sp, #8]
 8009840:	f000 fbb8 	bl	8009fb4 <__mcmp>
 8009844:	2800      	cmp	r0, #0
 8009846:	dcb4      	bgt.n	80097b2 <_dtoa_r+0xa82>
 8009848:	d102      	bne.n	8009850 <_dtoa_r+0xb20>
 800984a:	9b00      	ldr	r3, [sp, #0]
 800984c:	07db      	lsls	r3, r3, #31
 800984e:	d4b0      	bmi.n	80097b2 <_dtoa_r+0xa82>
 8009850:	4633      	mov	r3, r6
 8009852:	461e      	mov	r6, r3
 8009854:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009858:	2a30      	cmp	r2, #48	@ 0x30
 800985a:	d0fa      	beq.n	8009852 <_dtoa_r+0xb22>
 800985c:	e4b5      	b.n	80091ca <_dtoa_r+0x49a>
 800985e:	459a      	cmp	sl, r3
 8009860:	d1a8      	bne.n	80097b4 <_dtoa_r+0xa84>
 8009862:	2331      	movs	r3, #49	@ 0x31
 8009864:	f108 0801 	add.w	r8, r8, #1
 8009868:	f88a 3000 	strb.w	r3, [sl]
 800986c:	e4ad      	b.n	80091ca <_dtoa_r+0x49a>
 800986e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009870:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80098cc <_dtoa_r+0xb9c>
 8009874:	b11b      	cbz	r3, 800987e <_dtoa_r+0xb4e>
 8009876:	f10a 0308 	add.w	r3, sl, #8
 800987a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800987c:	6013      	str	r3, [r2, #0]
 800987e:	4650      	mov	r0, sl
 8009880:	b017      	add	sp, #92	@ 0x5c
 8009882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009886:	9b07      	ldr	r3, [sp, #28]
 8009888:	2b01      	cmp	r3, #1
 800988a:	f77f ae2e 	ble.w	80094ea <_dtoa_r+0x7ba>
 800988e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009890:	9308      	str	r3, [sp, #32]
 8009892:	2001      	movs	r0, #1
 8009894:	e64d      	b.n	8009532 <_dtoa_r+0x802>
 8009896:	f1bb 0f00 	cmp.w	fp, #0
 800989a:	f77f aed9 	ble.w	8009650 <_dtoa_r+0x920>
 800989e:	4656      	mov	r6, sl
 80098a0:	9802      	ldr	r0, [sp, #8]
 80098a2:	4621      	mov	r1, r4
 80098a4:	f7ff f9bb 	bl	8008c1e <quorem>
 80098a8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80098ac:	f806 3b01 	strb.w	r3, [r6], #1
 80098b0:	eba6 020a 	sub.w	r2, r6, sl
 80098b4:	4593      	cmp	fp, r2
 80098b6:	ddb4      	ble.n	8009822 <_dtoa_r+0xaf2>
 80098b8:	9902      	ldr	r1, [sp, #8]
 80098ba:	2300      	movs	r3, #0
 80098bc:	220a      	movs	r2, #10
 80098be:	4648      	mov	r0, r9
 80098c0:	f000 f968 	bl	8009b94 <__multadd>
 80098c4:	9002      	str	r0, [sp, #8]
 80098c6:	e7eb      	b.n	80098a0 <_dtoa_r+0xb70>
 80098c8:	0800aab0 	.word	0x0800aab0
 80098cc:	0800aa34 	.word	0x0800aa34

080098d0 <_free_r>:
 80098d0:	b538      	push	{r3, r4, r5, lr}
 80098d2:	4605      	mov	r5, r0
 80098d4:	2900      	cmp	r1, #0
 80098d6:	d041      	beq.n	800995c <_free_r+0x8c>
 80098d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098dc:	1f0c      	subs	r4, r1, #4
 80098de:	2b00      	cmp	r3, #0
 80098e0:	bfb8      	it	lt
 80098e2:	18e4      	addlt	r4, r4, r3
 80098e4:	f000 f8e8 	bl	8009ab8 <__malloc_lock>
 80098e8:	4a1d      	ldr	r2, [pc, #116]	@ (8009960 <_free_r+0x90>)
 80098ea:	6813      	ldr	r3, [r2, #0]
 80098ec:	b933      	cbnz	r3, 80098fc <_free_r+0x2c>
 80098ee:	6063      	str	r3, [r4, #4]
 80098f0:	6014      	str	r4, [r2, #0]
 80098f2:	4628      	mov	r0, r5
 80098f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098f8:	f000 b8e4 	b.w	8009ac4 <__malloc_unlock>
 80098fc:	42a3      	cmp	r3, r4
 80098fe:	d908      	bls.n	8009912 <_free_r+0x42>
 8009900:	6820      	ldr	r0, [r4, #0]
 8009902:	1821      	adds	r1, r4, r0
 8009904:	428b      	cmp	r3, r1
 8009906:	bf01      	itttt	eq
 8009908:	6819      	ldreq	r1, [r3, #0]
 800990a:	685b      	ldreq	r3, [r3, #4]
 800990c:	1809      	addeq	r1, r1, r0
 800990e:	6021      	streq	r1, [r4, #0]
 8009910:	e7ed      	b.n	80098ee <_free_r+0x1e>
 8009912:	461a      	mov	r2, r3
 8009914:	685b      	ldr	r3, [r3, #4]
 8009916:	b10b      	cbz	r3, 800991c <_free_r+0x4c>
 8009918:	42a3      	cmp	r3, r4
 800991a:	d9fa      	bls.n	8009912 <_free_r+0x42>
 800991c:	6811      	ldr	r1, [r2, #0]
 800991e:	1850      	adds	r0, r2, r1
 8009920:	42a0      	cmp	r0, r4
 8009922:	d10b      	bne.n	800993c <_free_r+0x6c>
 8009924:	6820      	ldr	r0, [r4, #0]
 8009926:	4401      	add	r1, r0
 8009928:	1850      	adds	r0, r2, r1
 800992a:	4283      	cmp	r3, r0
 800992c:	6011      	str	r1, [r2, #0]
 800992e:	d1e0      	bne.n	80098f2 <_free_r+0x22>
 8009930:	6818      	ldr	r0, [r3, #0]
 8009932:	685b      	ldr	r3, [r3, #4]
 8009934:	6053      	str	r3, [r2, #4]
 8009936:	4408      	add	r0, r1
 8009938:	6010      	str	r0, [r2, #0]
 800993a:	e7da      	b.n	80098f2 <_free_r+0x22>
 800993c:	d902      	bls.n	8009944 <_free_r+0x74>
 800993e:	230c      	movs	r3, #12
 8009940:	602b      	str	r3, [r5, #0]
 8009942:	e7d6      	b.n	80098f2 <_free_r+0x22>
 8009944:	6820      	ldr	r0, [r4, #0]
 8009946:	1821      	adds	r1, r4, r0
 8009948:	428b      	cmp	r3, r1
 800994a:	bf04      	itt	eq
 800994c:	6819      	ldreq	r1, [r3, #0]
 800994e:	685b      	ldreq	r3, [r3, #4]
 8009950:	6063      	str	r3, [r4, #4]
 8009952:	bf04      	itt	eq
 8009954:	1809      	addeq	r1, r1, r0
 8009956:	6021      	streq	r1, [r4, #0]
 8009958:	6054      	str	r4, [r2, #4]
 800995a:	e7ca      	b.n	80098f2 <_free_r+0x22>
 800995c:	bd38      	pop	{r3, r4, r5, pc}
 800995e:	bf00      	nop
 8009960:	20000750 	.word	0x20000750

08009964 <malloc>:
 8009964:	4b02      	ldr	r3, [pc, #8]	@ (8009970 <malloc+0xc>)
 8009966:	4601      	mov	r1, r0
 8009968:	6818      	ldr	r0, [r3, #0]
 800996a:	f000 b825 	b.w	80099b8 <_malloc_r>
 800996e:	bf00      	nop
 8009970:	20000068 	.word	0x20000068

08009974 <sbrk_aligned>:
 8009974:	b570      	push	{r4, r5, r6, lr}
 8009976:	4e0f      	ldr	r6, [pc, #60]	@ (80099b4 <sbrk_aligned+0x40>)
 8009978:	460c      	mov	r4, r1
 800997a:	6831      	ldr	r1, [r6, #0]
 800997c:	4605      	mov	r5, r0
 800997e:	b911      	cbnz	r1, 8009986 <sbrk_aligned+0x12>
 8009980:	f000 fccc 	bl	800a31c <_sbrk_r>
 8009984:	6030      	str	r0, [r6, #0]
 8009986:	4621      	mov	r1, r4
 8009988:	4628      	mov	r0, r5
 800998a:	f000 fcc7 	bl	800a31c <_sbrk_r>
 800998e:	1c43      	adds	r3, r0, #1
 8009990:	d103      	bne.n	800999a <sbrk_aligned+0x26>
 8009992:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009996:	4620      	mov	r0, r4
 8009998:	bd70      	pop	{r4, r5, r6, pc}
 800999a:	1cc4      	adds	r4, r0, #3
 800999c:	f024 0403 	bic.w	r4, r4, #3
 80099a0:	42a0      	cmp	r0, r4
 80099a2:	d0f8      	beq.n	8009996 <sbrk_aligned+0x22>
 80099a4:	1a21      	subs	r1, r4, r0
 80099a6:	4628      	mov	r0, r5
 80099a8:	f000 fcb8 	bl	800a31c <_sbrk_r>
 80099ac:	3001      	adds	r0, #1
 80099ae:	d1f2      	bne.n	8009996 <sbrk_aligned+0x22>
 80099b0:	e7ef      	b.n	8009992 <sbrk_aligned+0x1e>
 80099b2:	bf00      	nop
 80099b4:	2000074c 	.word	0x2000074c

080099b8 <_malloc_r>:
 80099b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099bc:	1ccd      	adds	r5, r1, #3
 80099be:	f025 0503 	bic.w	r5, r5, #3
 80099c2:	3508      	adds	r5, #8
 80099c4:	2d0c      	cmp	r5, #12
 80099c6:	bf38      	it	cc
 80099c8:	250c      	movcc	r5, #12
 80099ca:	2d00      	cmp	r5, #0
 80099cc:	4606      	mov	r6, r0
 80099ce:	db01      	blt.n	80099d4 <_malloc_r+0x1c>
 80099d0:	42a9      	cmp	r1, r5
 80099d2:	d904      	bls.n	80099de <_malloc_r+0x26>
 80099d4:	230c      	movs	r3, #12
 80099d6:	6033      	str	r3, [r6, #0]
 80099d8:	2000      	movs	r0, #0
 80099da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009ab4 <_malloc_r+0xfc>
 80099e2:	f000 f869 	bl	8009ab8 <__malloc_lock>
 80099e6:	f8d8 3000 	ldr.w	r3, [r8]
 80099ea:	461c      	mov	r4, r3
 80099ec:	bb44      	cbnz	r4, 8009a40 <_malloc_r+0x88>
 80099ee:	4629      	mov	r1, r5
 80099f0:	4630      	mov	r0, r6
 80099f2:	f7ff ffbf 	bl	8009974 <sbrk_aligned>
 80099f6:	1c43      	adds	r3, r0, #1
 80099f8:	4604      	mov	r4, r0
 80099fa:	d158      	bne.n	8009aae <_malloc_r+0xf6>
 80099fc:	f8d8 4000 	ldr.w	r4, [r8]
 8009a00:	4627      	mov	r7, r4
 8009a02:	2f00      	cmp	r7, #0
 8009a04:	d143      	bne.n	8009a8e <_malloc_r+0xd6>
 8009a06:	2c00      	cmp	r4, #0
 8009a08:	d04b      	beq.n	8009aa2 <_malloc_r+0xea>
 8009a0a:	6823      	ldr	r3, [r4, #0]
 8009a0c:	4639      	mov	r1, r7
 8009a0e:	4630      	mov	r0, r6
 8009a10:	eb04 0903 	add.w	r9, r4, r3
 8009a14:	f000 fc82 	bl	800a31c <_sbrk_r>
 8009a18:	4581      	cmp	r9, r0
 8009a1a:	d142      	bne.n	8009aa2 <_malloc_r+0xea>
 8009a1c:	6821      	ldr	r1, [r4, #0]
 8009a1e:	1a6d      	subs	r5, r5, r1
 8009a20:	4629      	mov	r1, r5
 8009a22:	4630      	mov	r0, r6
 8009a24:	f7ff ffa6 	bl	8009974 <sbrk_aligned>
 8009a28:	3001      	adds	r0, #1
 8009a2a:	d03a      	beq.n	8009aa2 <_malloc_r+0xea>
 8009a2c:	6823      	ldr	r3, [r4, #0]
 8009a2e:	442b      	add	r3, r5
 8009a30:	6023      	str	r3, [r4, #0]
 8009a32:	f8d8 3000 	ldr.w	r3, [r8]
 8009a36:	685a      	ldr	r2, [r3, #4]
 8009a38:	bb62      	cbnz	r2, 8009a94 <_malloc_r+0xdc>
 8009a3a:	f8c8 7000 	str.w	r7, [r8]
 8009a3e:	e00f      	b.n	8009a60 <_malloc_r+0xa8>
 8009a40:	6822      	ldr	r2, [r4, #0]
 8009a42:	1b52      	subs	r2, r2, r5
 8009a44:	d420      	bmi.n	8009a88 <_malloc_r+0xd0>
 8009a46:	2a0b      	cmp	r2, #11
 8009a48:	d917      	bls.n	8009a7a <_malloc_r+0xc2>
 8009a4a:	1961      	adds	r1, r4, r5
 8009a4c:	42a3      	cmp	r3, r4
 8009a4e:	6025      	str	r5, [r4, #0]
 8009a50:	bf18      	it	ne
 8009a52:	6059      	strne	r1, [r3, #4]
 8009a54:	6863      	ldr	r3, [r4, #4]
 8009a56:	bf08      	it	eq
 8009a58:	f8c8 1000 	streq.w	r1, [r8]
 8009a5c:	5162      	str	r2, [r4, r5]
 8009a5e:	604b      	str	r3, [r1, #4]
 8009a60:	4630      	mov	r0, r6
 8009a62:	f000 f82f 	bl	8009ac4 <__malloc_unlock>
 8009a66:	f104 000b 	add.w	r0, r4, #11
 8009a6a:	1d23      	adds	r3, r4, #4
 8009a6c:	f020 0007 	bic.w	r0, r0, #7
 8009a70:	1ac2      	subs	r2, r0, r3
 8009a72:	bf1c      	itt	ne
 8009a74:	1a1b      	subne	r3, r3, r0
 8009a76:	50a3      	strne	r3, [r4, r2]
 8009a78:	e7af      	b.n	80099da <_malloc_r+0x22>
 8009a7a:	6862      	ldr	r2, [r4, #4]
 8009a7c:	42a3      	cmp	r3, r4
 8009a7e:	bf0c      	ite	eq
 8009a80:	f8c8 2000 	streq.w	r2, [r8]
 8009a84:	605a      	strne	r2, [r3, #4]
 8009a86:	e7eb      	b.n	8009a60 <_malloc_r+0xa8>
 8009a88:	4623      	mov	r3, r4
 8009a8a:	6864      	ldr	r4, [r4, #4]
 8009a8c:	e7ae      	b.n	80099ec <_malloc_r+0x34>
 8009a8e:	463c      	mov	r4, r7
 8009a90:	687f      	ldr	r7, [r7, #4]
 8009a92:	e7b6      	b.n	8009a02 <_malloc_r+0x4a>
 8009a94:	461a      	mov	r2, r3
 8009a96:	685b      	ldr	r3, [r3, #4]
 8009a98:	42a3      	cmp	r3, r4
 8009a9a:	d1fb      	bne.n	8009a94 <_malloc_r+0xdc>
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	6053      	str	r3, [r2, #4]
 8009aa0:	e7de      	b.n	8009a60 <_malloc_r+0xa8>
 8009aa2:	230c      	movs	r3, #12
 8009aa4:	6033      	str	r3, [r6, #0]
 8009aa6:	4630      	mov	r0, r6
 8009aa8:	f000 f80c 	bl	8009ac4 <__malloc_unlock>
 8009aac:	e794      	b.n	80099d8 <_malloc_r+0x20>
 8009aae:	6005      	str	r5, [r0, #0]
 8009ab0:	e7d6      	b.n	8009a60 <_malloc_r+0xa8>
 8009ab2:	bf00      	nop
 8009ab4:	20000750 	.word	0x20000750

08009ab8 <__malloc_lock>:
 8009ab8:	4801      	ldr	r0, [pc, #4]	@ (8009ac0 <__malloc_lock+0x8>)
 8009aba:	f7ff b8a0 	b.w	8008bfe <__retarget_lock_acquire_recursive>
 8009abe:	bf00      	nop
 8009ac0:	20000748 	.word	0x20000748

08009ac4 <__malloc_unlock>:
 8009ac4:	4801      	ldr	r0, [pc, #4]	@ (8009acc <__malloc_unlock+0x8>)
 8009ac6:	f7ff b89b 	b.w	8008c00 <__retarget_lock_release_recursive>
 8009aca:	bf00      	nop
 8009acc:	20000748 	.word	0x20000748

08009ad0 <_Balloc>:
 8009ad0:	b570      	push	{r4, r5, r6, lr}
 8009ad2:	69c6      	ldr	r6, [r0, #28]
 8009ad4:	4604      	mov	r4, r0
 8009ad6:	460d      	mov	r5, r1
 8009ad8:	b976      	cbnz	r6, 8009af8 <_Balloc+0x28>
 8009ada:	2010      	movs	r0, #16
 8009adc:	f7ff ff42 	bl	8009964 <malloc>
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	61e0      	str	r0, [r4, #28]
 8009ae4:	b920      	cbnz	r0, 8009af0 <_Balloc+0x20>
 8009ae6:	4b18      	ldr	r3, [pc, #96]	@ (8009b48 <_Balloc+0x78>)
 8009ae8:	4818      	ldr	r0, [pc, #96]	@ (8009b4c <_Balloc+0x7c>)
 8009aea:	216b      	movs	r1, #107	@ 0x6b
 8009aec:	f000 fc26 	bl	800a33c <__assert_func>
 8009af0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009af4:	6006      	str	r6, [r0, #0]
 8009af6:	60c6      	str	r6, [r0, #12]
 8009af8:	69e6      	ldr	r6, [r4, #28]
 8009afa:	68f3      	ldr	r3, [r6, #12]
 8009afc:	b183      	cbz	r3, 8009b20 <_Balloc+0x50>
 8009afe:	69e3      	ldr	r3, [r4, #28]
 8009b00:	68db      	ldr	r3, [r3, #12]
 8009b02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009b06:	b9b8      	cbnz	r0, 8009b38 <_Balloc+0x68>
 8009b08:	2101      	movs	r1, #1
 8009b0a:	fa01 f605 	lsl.w	r6, r1, r5
 8009b0e:	1d72      	adds	r2, r6, #5
 8009b10:	0092      	lsls	r2, r2, #2
 8009b12:	4620      	mov	r0, r4
 8009b14:	f000 fc30 	bl	800a378 <_calloc_r>
 8009b18:	b160      	cbz	r0, 8009b34 <_Balloc+0x64>
 8009b1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009b1e:	e00e      	b.n	8009b3e <_Balloc+0x6e>
 8009b20:	2221      	movs	r2, #33	@ 0x21
 8009b22:	2104      	movs	r1, #4
 8009b24:	4620      	mov	r0, r4
 8009b26:	f000 fc27 	bl	800a378 <_calloc_r>
 8009b2a:	69e3      	ldr	r3, [r4, #28]
 8009b2c:	60f0      	str	r0, [r6, #12]
 8009b2e:	68db      	ldr	r3, [r3, #12]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d1e4      	bne.n	8009afe <_Balloc+0x2e>
 8009b34:	2000      	movs	r0, #0
 8009b36:	bd70      	pop	{r4, r5, r6, pc}
 8009b38:	6802      	ldr	r2, [r0, #0]
 8009b3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009b3e:	2300      	movs	r3, #0
 8009b40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b44:	e7f7      	b.n	8009b36 <_Balloc+0x66>
 8009b46:	bf00      	nop
 8009b48:	0800aa41 	.word	0x0800aa41
 8009b4c:	0800aac1 	.word	0x0800aac1

08009b50 <_Bfree>:
 8009b50:	b570      	push	{r4, r5, r6, lr}
 8009b52:	69c6      	ldr	r6, [r0, #28]
 8009b54:	4605      	mov	r5, r0
 8009b56:	460c      	mov	r4, r1
 8009b58:	b976      	cbnz	r6, 8009b78 <_Bfree+0x28>
 8009b5a:	2010      	movs	r0, #16
 8009b5c:	f7ff ff02 	bl	8009964 <malloc>
 8009b60:	4602      	mov	r2, r0
 8009b62:	61e8      	str	r0, [r5, #28]
 8009b64:	b920      	cbnz	r0, 8009b70 <_Bfree+0x20>
 8009b66:	4b09      	ldr	r3, [pc, #36]	@ (8009b8c <_Bfree+0x3c>)
 8009b68:	4809      	ldr	r0, [pc, #36]	@ (8009b90 <_Bfree+0x40>)
 8009b6a:	218f      	movs	r1, #143	@ 0x8f
 8009b6c:	f000 fbe6 	bl	800a33c <__assert_func>
 8009b70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b74:	6006      	str	r6, [r0, #0]
 8009b76:	60c6      	str	r6, [r0, #12]
 8009b78:	b13c      	cbz	r4, 8009b8a <_Bfree+0x3a>
 8009b7a:	69eb      	ldr	r3, [r5, #28]
 8009b7c:	6862      	ldr	r2, [r4, #4]
 8009b7e:	68db      	ldr	r3, [r3, #12]
 8009b80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b84:	6021      	str	r1, [r4, #0]
 8009b86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009b8a:	bd70      	pop	{r4, r5, r6, pc}
 8009b8c:	0800aa41 	.word	0x0800aa41
 8009b90:	0800aac1 	.word	0x0800aac1

08009b94 <__multadd>:
 8009b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b98:	690d      	ldr	r5, [r1, #16]
 8009b9a:	4607      	mov	r7, r0
 8009b9c:	460c      	mov	r4, r1
 8009b9e:	461e      	mov	r6, r3
 8009ba0:	f101 0c14 	add.w	ip, r1, #20
 8009ba4:	2000      	movs	r0, #0
 8009ba6:	f8dc 3000 	ldr.w	r3, [ip]
 8009baa:	b299      	uxth	r1, r3
 8009bac:	fb02 6101 	mla	r1, r2, r1, r6
 8009bb0:	0c1e      	lsrs	r6, r3, #16
 8009bb2:	0c0b      	lsrs	r3, r1, #16
 8009bb4:	fb02 3306 	mla	r3, r2, r6, r3
 8009bb8:	b289      	uxth	r1, r1
 8009bba:	3001      	adds	r0, #1
 8009bbc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009bc0:	4285      	cmp	r5, r0
 8009bc2:	f84c 1b04 	str.w	r1, [ip], #4
 8009bc6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009bca:	dcec      	bgt.n	8009ba6 <__multadd+0x12>
 8009bcc:	b30e      	cbz	r6, 8009c12 <__multadd+0x7e>
 8009bce:	68a3      	ldr	r3, [r4, #8]
 8009bd0:	42ab      	cmp	r3, r5
 8009bd2:	dc19      	bgt.n	8009c08 <__multadd+0x74>
 8009bd4:	6861      	ldr	r1, [r4, #4]
 8009bd6:	4638      	mov	r0, r7
 8009bd8:	3101      	adds	r1, #1
 8009bda:	f7ff ff79 	bl	8009ad0 <_Balloc>
 8009bde:	4680      	mov	r8, r0
 8009be0:	b928      	cbnz	r0, 8009bee <__multadd+0x5a>
 8009be2:	4602      	mov	r2, r0
 8009be4:	4b0c      	ldr	r3, [pc, #48]	@ (8009c18 <__multadd+0x84>)
 8009be6:	480d      	ldr	r0, [pc, #52]	@ (8009c1c <__multadd+0x88>)
 8009be8:	21ba      	movs	r1, #186	@ 0xba
 8009bea:	f000 fba7 	bl	800a33c <__assert_func>
 8009bee:	6922      	ldr	r2, [r4, #16]
 8009bf0:	3202      	adds	r2, #2
 8009bf2:	f104 010c 	add.w	r1, r4, #12
 8009bf6:	0092      	lsls	r2, r2, #2
 8009bf8:	300c      	adds	r0, #12
 8009bfa:	f7ff f802 	bl	8008c02 <memcpy>
 8009bfe:	4621      	mov	r1, r4
 8009c00:	4638      	mov	r0, r7
 8009c02:	f7ff ffa5 	bl	8009b50 <_Bfree>
 8009c06:	4644      	mov	r4, r8
 8009c08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009c0c:	3501      	adds	r5, #1
 8009c0e:	615e      	str	r6, [r3, #20]
 8009c10:	6125      	str	r5, [r4, #16]
 8009c12:	4620      	mov	r0, r4
 8009c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c18:	0800aab0 	.word	0x0800aab0
 8009c1c:	0800aac1 	.word	0x0800aac1

08009c20 <__hi0bits>:
 8009c20:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009c24:	4603      	mov	r3, r0
 8009c26:	bf36      	itet	cc
 8009c28:	0403      	lslcc	r3, r0, #16
 8009c2a:	2000      	movcs	r0, #0
 8009c2c:	2010      	movcc	r0, #16
 8009c2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009c32:	bf3c      	itt	cc
 8009c34:	021b      	lslcc	r3, r3, #8
 8009c36:	3008      	addcc	r0, #8
 8009c38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c3c:	bf3c      	itt	cc
 8009c3e:	011b      	lslcc	r3, r3, #4
 8009c40:	3004      	addcc	r0, #4
 8009c42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c46:	bf3c      	itt	cc
 8009c48:	009b      	lslcc	r3, r3, #2
 8009c4a:	3002      	addcc	r0, #2
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	db05      	blt.n	8009c5c <__hi0bits+0x3c>
 8009c50:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009c54:	f100 0001 	add.w	r0, r0, #1
 8009c58:	bf08      	it	eq
 8009c5a:	2020      	moveq	r0, #32
 8009c5c:	4770      	bx	lr

08009c5e <__lo0bits>:
 8009c5e:	6803      	ldr	r3, [r0, #0]
 8009c60:	4602      	mov	r2, r0
 8009c62:	f013 0007 	ands.w	r0, r3, #7
 8009c66:	d00b      	beq.n	8009c80 <__lo0bits+0x22>
 8009c68:	07d9      	lsls	r1, r3, #31
 8009c6a:	d421      	bmi.n	8009cb0 <__lo0bits+0x52>
 8009c6c:	0798      	lsls	r0, r3, #30
 8009c6e:	bf49      	itett	mi
 8009c70:	085b      	lsrmi	r3, r3, #1
 8009c72:	089b      	lsrpl	r3, r3, #2
 8009c74:	2001      	movmi	r0, #1
 8009c76:	6013      	strmi	r3, [r2, #0]
 8009c78:	bf5c      	itt	pl
 8009c7a:	6013      	strpl	r3, [r2, #0]
 8009c7c:	2002      	movpl	r0, #2
 8009c7e:	4770      	bx	lr
 8009c80:	b299      	uxth	r1, r3
 8009c82:	b909      	cbnz	r1, 8009c88 <__lo0bits+0x2a>
 8009c84:	0c1b      	lsrs	r3, r3, #16
 8009c86:	2010      	movs	r0, #16
 8009c88:	b2d9      	uxtb	r1, r3
 8009c8a:	b909      	cbnz	r1, 8009c90 <__lo0bits+0x32>
 8009c8c:	3008      	adds	r0, #8
 8009c8e:	0a1b      	lsrs	r3, r3, #8
 8009c90:	0719      	lsls	r1, r3, #28
 8009c92:	bf04      	itt	eq
 8009c94:	091b      	lsreq	r3, r3, #4
 8009c96:	3004      	addeq	r0, #4
 8009c98:	0799      	lsls	r1, r3, #30
 8009c9a:	bf04      	itt	eq
 8009c9c:	089b      	lsreq	r3, r3, #2
 8009c9e:	3002      	addeq	r0, #2
 8009ca0:	07d9      	lsls	r1, r3, #31
 8009ca2:	d403      	bmi.n	8009cac <__lo0bits+0x4e>
 8009ca4:	085b      	lsrs	r3, r3, #1
 8009ca6:	f100 0001 	add.w	r0, r0, #1
 8009caa:	d003      	beq.n	8009cb4 <__lo0bits+0x56>
 8009cac:	6013      	str	r3, [r2, #0]
 8009cae:	4770      	bx	lr
 8009cb0:	2000      	movs	r0, #0
 8009cb2:	4770      	bx	lr
 8009cb4:	2020      	movs	r0, #32
 8009cb6:	4770      	bx	lr

08009cb8 <__i2b>:
 8009cb8:	b510      	push	{r4, lr}
 8009cba:	460c      	mov	r4, r1
 8009cbc:	2101      	movs	r1, #1
 8009cbe:	f7ff ff07 	bl	8009ad0 <_Balloc>
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	b928      	cbnz	r0, 8009cd2 <__i2b+0x1a>
 8009cc6:	4b05      	ldr	r3, [pc, #20]	@ (8009cdc <__i2b+0x24>)
 8009cc8:	4805      	ldr	r0, [pc, #20]	@ (8009ce0 <__i2b+0x28>)
 8009cca:	f240 1145 	movw	r1, #325	@ 0x145
 8009cce:	f000 fb35 	bl	800a33c <__assert_func>
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	6144      	str	r4, [r0, #20]
 8009cd6:	6103      	str	r3, [r0, #16]
 8009cd8:	bd10      	pop	{r4, pc}
 8009cda:	bf00      	nop
 8009cdc:	0800aab0 	.word	0x0800aab0
 8009ce0:	0800aac1 	.word	0x0800aac1

08009ce4 <__multiply>:
 8009ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce8:	4617      	mov	r7, r2
 8009cea:	690a      	ldr	r2, [r1, #16]
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	bfa8      	it	ge
 8009cf2:	463b      	movge	r3, r7
 8009cf4:	4689      	mov	r9, r1
 8009cf6:	bfa4      	itt	ge
 8009cf8:	460f      	movge	r7, r1
 8009cfa:	4699      	movge	r9, r3
 8009cfc:	693d      	ldr	r5, [r7, #16]
 8009cfe:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	6879      	ldr	r1, [r7, #4]
 8009d06:	eb05 060a 	add.w	r6, r5, sl
 8009d0a:	42b3      	cmp	r3, r6
 8009d0c:	b085      	sub	sp, #20
 8009d0e:	bfb8      	it	lt
 8009d10:	3101      	addlt	r1, #1
 8009d12:	f7ff fedd 	bl	8009ad0 <_Balloc>
 8009d16:	b930      	cbnz	r0, 8009d26 <__multiply+0x42>
 8009d18:	4602      	mov	r2, r0
 8009d1a:	4b41      	ldr	r3, [pc, #260]	@ (8009e20 <__multiply+0x13c>)
 8009d1c:	4841      	ldr	r0, [pc, #260]	@ (8009e24 <__multiply+0x140>)
 8009d1e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009d22:	f000 fb0b 	bl	800a33c <__assert_func>
 8009d26:	f100 0414 	add.w	r4, r0, #20
 8009d2a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009d2e:	4623      	mov	r3, r4
 8009d30:	2200      	movs	r2, #0
 8009d32:	4573      	cmp	r3, lr
 8009d34:	d320      	bcc.n	8009d78 <__multiply+0x94>
 8009d36:	f107 0814 	add.w	r8, r7, #20
 8009d3a:	f109 0114 	add.w	r1, r9, #20
 8009d3e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009d42:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009d46:	9302      	str	r3, [sp, #8]
 8009d48:	1beb      	subs	r3, r5, r7
 8009d4a:	3b15      	subs	r3, #21
 8009d4c:	f023 0303 	bic.w	r3, r3, #3
 8009d50:	3304      	adds	r3, #4
 8009d52:	3715      	adds	r7, #21
 8009d54:	42bd      	cmp	r5, r7
 8009d56:	bf38      	it	cc
 8009d58:	2304      	movcc	r3, #4
 8009d5a:	9301      	str	r3, [sp, #4]
 8009d5c:	9b02      	ldr	r3, [sp, #8]
 8009d5e:	9103      	str	r1, [sp, #12]
 8009d60:	428b      	cmp	r3, r1
 8009d62:	d80c      	bhi.n	8009d7e <__multiply+0x9a>
 8009d64:	2e00      	cmp	r6, #0
 8009d66:	dd03      	ble.n	8009d70 <__multiply+0x8c>
 8009d68:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d055      	beq.n	8009e1c <__multiply+0x138>
 8009d70:	6106      	str	r6, [r0, #16]
 8009d72:	b005      	add	sp, #20
 8009d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d78:	f843 2b04 	str.w	r2, [r3], #4
 8009d7c:	e7d9      	b.n	8009d32 <__multiply+0x4e>
 8009d7e:	f8b1 a000 	ldrh.w	sl, [r1]
 8009d82:	f1ba 0f00 	cmp.w	sl, #0
 8009d86:	d01f      	beq.n	8009dc8 <__multiply+0xe4>
 8009d88:	46c4      	mov	ip, r8
 8009d8a:	46a1      	mov	r9, r4
 8009d8c:	2700      	movs	r7, #0
 8009d8e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009d92:	f8d9 3000 	ldr.w	r3, [r9]
 8009d96:	fa1f fb82 	uxth.w	fp, r2
 8009d9a:	b29b      	uxth	r3, r3
 8009d9c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009da0:	443b      	add	r3, r7
 8009da2:	f8d9 7000 	ldr.w	r7, [r9]
 8009da6:	0c12      	lsrs	r2, r2, #16
 8009da8:	0c3f      	lsrs	r7, r7, #16
 8009daa:	fb0a 7202 	mla	r2, sl, r2, r7
 8009dae:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009db2:	b29b      	uxth	r3, r3
 8009db4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009db8:	4565      	cmp	r5, ip
 8009dba:	f849 3b04 	str.w	r3, [r9], #4
 8009dbe:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009dc2:	d8e4      	bhi.n	8009d8e <__multiply+0xaa>
 8009dc4:	9b01      	ldr	r3, [sp, #4]
 8009dc6:	50e7      	str	r7, [r4, r3]
 8009dc8:	9b03      	ldr	r3, [sp, #12]
 8009dca:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009dce:	3104      	adds	r1, #4
 8009dd0:	f1b9 0f00 	cmp.w	r9, #0
 8009dd4:	d020      	beq.n	8009e18 <__multiply+0x134>
 8009dd6:	6823      	ldr	r3, [r4, #0]
 8009dd8:	4647      	mov	r7, r8
 8009dda:	46a4      	mov	ip, r4
 8009ddc:	f04f 0a00 	mov.w	sl, #0
 8009de0:	f8b7 b000 	ldrh.w	fp, [r7]
 8009de4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009de8:	fb09 220b 	mla	r2, r9, fp, r2
 8009dec:	4452      	add	r2, sl
 8009dee:	b29b      	uxth	r3, r3
 8009df0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009df4:	f84c 3b04 	str.w	r3, [ip], #4
 8009df8:	f857 3b04 	ldr.w	r3, [r7], #4
 8009dfc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009e00:	f8bc 3000 	ldrh.w	r3, [ip]
 8009e04:	fb09 330a 	mla	r3, r9, sl, r3
 8009e08:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009e0c:	42bd      	cmp	r5, r7
 8009e0e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009e12:	d8e5      	bhi.n	8009de0 <__multiply+0xfc>
 8009e14:	9a01      	ldr	r2, [sp, #4]
 8009e16:	50a3      	str	r3, [r4, r2]
 8009e18:	3404      	adds	r4, #4
 8009e1a:	e79f      	b.n	8009d5c <__multiply+0x78>
 8009e1c:	3e01      	subs	r6, #1
 8009e1e:	e7a1      	b.n	8009d64 <__multiply+0x80>
 8009e20:	0800aab0 	.word	0x0800aab0
 8009e24:	0800aac1 	.word	0x0800aac1

08009e28 <__pow5mult>:
 8009e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e2c:	4615      	mov	r5, r2
 8009e2e:	f012 0203 	ands.w	r2, r2, #3
 8009e32:	4607      	mov	r7, r0
 8009e34:	460e      	mov	r6, r1
 8009e36:	d007      	beq.n	8009e48 <__pow5mult+0x20>
 8009e38:	4c25      	ldr	r4, [pc, #148]	@ (8009ed0 <__pow5mult+0xa8>)
 8009e3a:	3a01      	subs	r2, #1
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009e42:	f7ff fea7 	bl	8009b94 <__multadd>
 8009e46:	4606      	mov	r6, r0
 8009e48:	10ad      	asrs	r5, r5, #2
 8009e4a:	d03d      	beq.n	8009ec8 <__pow5mult+0xa0>
 8009e4c:	69fc      	ldr	r4, [r7, #28]
 8009e4e:	b97c      	cbnz	r4, 8009e70 <__pow5mult+0x48>
 8009e50:	2010      	movs	r0, #16
 8009e52:	f7ff fd87 	bl	8009964 <malloc>
 8009e56:	4602      	mov	r2, r0
 8009e58:	61f8      	str	r0, [r7, #28]
 8009e5a:	b928      	cbnz	r0, 8009e68 <__pow5mult+0x40>
 8009e5c:	4b1d      	ldr	r3, [pc, #116]	@ (8009ed4 <__pow5mult+0xac>)
 8009e5e:	481e      	ldr	r0, [pc, #120]	@ (8009ed8 <__pow5mult+0xb0>)
 8009e60:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009e64:	f000 fa6a 	bl	800a33c <__assert_func>
 8009e68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009e6c:	6004      	str	r4, [r0, #0]
 8009e6e:	60c4      	str	r4, [r0, #12]
 8009e70:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009e74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009e78:	b94c      	cbnz	r4, 8009e8e <__pow5mult+0x66>
 8009e7a:	f240 2171 	movw	r1, #625	@ 0x271
 8009e7e:	4638      	mov	r0, r7
 8009e80:	f7ff ff1a 	bl	8009cb8 <__i2b>
 8009e84:	2300      	movs	r3, #0
 8009e86:	f8c8 0008 	str.w	r0, [r8, #8]
 8009e8a:	4604      	mov	r4, r0
 8009e8c:	6003      	str	r3, [r0, #0]
 8009e8e:	f04f 0900 	mov.w	r9, #0
 8009e92:	07eb      	lsls	r3, r5, #31
 8009e94:	d50a      	bpl.n	8009eac <__pow5mult+0x84>
 8009e96:	4631      	mov	r1, r6
 8009e98:	4622      	mov	r2, r4
 8009e9a:	4638      	mov	r0, r7
 8009e9c:	f7ff ff22 	bl	8009ce4 <__multiply>
 8009ea0:	4631      	mov	r1, r6
 8009ea2:	4680      	mov	r8, r0
 8009ea4:	4638      	mov	r0, r7
 8009ea6:	f7ff fe53 	bl	8009b50 <_Bfree>
 8009eaa:	4646      	mov	r6, r8
 8009eac:	106d      	asrs	r5, r5, #1
 8009eae:	d00b      	beq.n	8009ec8 <__pow5mult+0xa0>
 8009eb0:	6820      	ldr	r0, [r4, #0]
 8009eb2:	b938      	cbnz	r0, 8009ec4 <__pow5mult+0x9c>
 8009eb4:	4622      	mov	r2, r4
 8009eb6:	4621      	mov	r1, r4
 8009eb8:	4638      	mov	r0, r7
 8009eba:	f7ff ff13 	bl	8009ce4 <__multiply>
 8009ebe:	6020      	str	r0, [r4, #0]
 8009ec0:	f8c0 9000 	str.w	r9, [r0]
 8009ec4:	4604      	mov	r4, r0
 8009ec6:	e7e4      	b.n	8009e92 <__pow5mult+0x6a>
 8009ec8:	4630      	mov	r0, r6
 8009eca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ece:	bf00      	nop
 8009ed0:	0800ab74 	.word	0x0800ab74
 8009ed4:	0800aa41 	.word	0x0800aa41
 8009ed8:	0800aac1 	.word	0x0800aac1

08009edc <__lshift>:
 8009edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ee0:	460c      	mov	r4, r1
 8009ee2:	6849      	ldr	r1, [r1, #4]
 8009ee4:	6923      	ldr	r3, [r4, #16]
 8009ee6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009eea:	68a3      	ldr	r3, [r4, #8]
 8009eec:	4607      	mov	r7, r0
 8009eee:	4691      	mov	r9, r2
 8009ef0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009ef4:	f108 0601 	add.w	r6, r8, #1
 8009ef8:	42b3      	cmp	r3, r6
 8009efa:	db0b      	blt.n	8009f14 <__lshift+0x38>
 8009efc:	4638      	mov	r0, r7
 8009efe:	f7ff fde7 	bl	8009ad0 <_Balloc>
 8009f02:	4605      	mov	r5, r0
 8009f04:	b948      	cbnz	r0, 8009f1a <__lshift+0x3e>
 8009f06:	4602      	mov	r2, r0
 8009f08:	4b28      	ldr	r3, [pc, #160]	@ (8009fac <__lshift+0xd0>)
 8009f0a:	4829      	ldr	r0, [pc, #164]	@ (8009fb0 <__lshift+0xd4>)
 8009f0c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009f10:	f000 fa14 	bl	800a33c <__assert_func>
 8009f14:	3101      	adds	r1, #1
 8009f16:	005b      	lsls	r3, r3, #1
 8009f18:	e7ee      	b.n	8009ef8 <__lshift+0x1c>
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	f100 0114 	add.w	r1, r0, #20
 8009f20:	f100 0210 	add.w	r2, r0, #16
 8009f24:	4618      	mov	r0, r3
 8009f26:	4553      	cmp	r3, sl
 8009f28:	db33      	blt.n	8009f92 <__lshift+0xb6>
 8009f2a:	6920      	ldr	r0, [r4, #16]
 8009f2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009f30:	f104 0314 	add.w	r3, r4, #20
 8009f34:	f019 091f 	ands.w	r9, r9, #31
 8009f38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009f3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009f40:	d02b      	beq.n	8009f9a <__lshift+0xbe>
 8009f42:	f1c9 0e20 	rsb	lr, r9, #32
 8009f46:	468a      	mov	sl, r1
 8009f48:	2200      	movs	r2, #0
 8009f4a:	6818      	ldr	r0, [r3, #0]
 8009f4c:	fa00 f009 	lsl.w	r0, r0, r9
 8009f50:	4310      	orrs	r0, r2
 8009f52:	f84a 0b04 	str.w	r0, [sl], #4
 8009f56:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f5a:	459c      	cmp	ip, r3
 8009f5c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009f60:	d8f3      	bhi.n	8009f4a <__lshift+0x6e>
 8009f62:	ebac 0304 	sub.w	r3, ip, r4
 8009f66:	3b15      	subs	r3, #21
 8009f68:	f023 0303 	bic.w	r3, r3, #3
 8009f6c:	3304      	adds	r3, #4
 8009f6e:	f104 0015 	add.w	r0, r4, #21
 8009f72:	4560      	cmp	r0, ip
 8009f74:	bf88      	it	hi
 8009f76:	2304      	movhi	r3, #4
 8009f78:	50ca      	str	r2, [r1, r3]
 8009f7a:	b10a      	cbz	r2, 8009f80 <__lshift+0xa4>
 8009f7c:	f108 0602 	add.w	r6, r8, #2
 8009f80:	3e01      	subs	r6, #1
 8009f82:	4638      	mov	r0, r7
 8009f84:	612e      	str	r6, [r5, #16]
 8009f86:	4621      	mov	r1, r4
 8009f88:	f7ff fde2 	bl	8009b50 <_Bfree>
 8009f8c:	4628      	mov	r0, r5
 8009f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f92:	f842 0f04 	str.w	r0, [r2, #4]!
 8009f96:	3301      	adds	r3, #1
 8009f98:	e7c5      	b.n	8009f26 <__lshift+0x4a>
 8009f9a:	3904      	subs	r1, #4
 8009f9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fa0:	f841 2f04 	str.w	r2, [r1, #4]!
 8009fa4:	459c      	cmp	ip, r3
 8009fa6:	d8f9      	bhi.n	8009f9c <__lshift+0xc0>
 8009fa8:	e7ea      	b.n	8009f80 <__lshift+0xa4>
 8009faa:	bf00      	nop
 8009fac:	0800aab0 	.word	0x0800aab0
 8009fb0:	0800aac1 	.word	0x0800aac1

08009fb4 <__mcmp>:
 8009fb4:	690a      	ldr	r2, [r1, #16]
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	6900      	ldr	r0, [r0, #16]
 8009fba:	1a80      	subs	r0, r0, r2
 8009fbc:	b530      	push	{r4, r5, lr}
 8009fbe:	d10e      	bne.n	8009fde <__mcmp+0x2a>
 8009fc0:	3314      	adds	r3, #20
 8009fc2:	3114      	adds	r1, #20
 8009fc4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009fc8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009fcc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009fd0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009fd4:	4295      	cmp	r5, r2
 8009fd6:	d003      	beq.n	8009fe0 <__mcmp+0x2c>
 8009fd8:	d205      	bcs.n	8009fe6 <__mcmp+0x32>
 8009fda:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009fde:	bd30      	pop	{r4, r5, pc}
 8009fe0:	42a3      	cmp	r3, r4
 8009fe2:	d3f3      	bcc.n	8009fcc <__mcmp+0x18>
 8009fe4:	e7fb      	b.n	8009fde <__mcmp+0x2a>
 8009fe6:	2001      	movs	r0, #1
 8009fe8:	e7f9      	b.n	8009fde <__mcmp+0x2a>
	...

08009fec <__mdiff>:
 8009fec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ff0:	4689      	mov	r9, r1
 8009ff2:	4606      	mov	r6, r0
 8009ff4:	4611      	mov	r1, r2
 8009ff6:	4648      	mov	r0, r9
 8009ff8:	4614      	mov	r4, r2
 8009ffa:	f7ff ffdb 	bl	8009fb4 <__mcmp>
 8009ffe:	1e05      	subs	r5, r0, #0
 800a000:	d112      	bne.n	800a028 <__mdiff+0x3c>
 800a002:	4629      	mov	r1, r5
 800a004:	4630      	mov	r0, r6
 800a006:	f7ff fd63 	bl	8009ad0 <_Balloc>
 800a00a:	4602      	mov	r2, r0
 800a00c:	b928      	cbnz	r0, 800a01a <__mdiff+0x2e>
 800a00e:	4b3f      	ldr	r3, [pc, #252]	@ (800a10c <__mdiff+0x120>)
 800a010:	f240 2137 	movw	r1, #567	@ 0x237
 800a014:	483e      	ldr	r0, [pc, #248]	@ (800a110 <__mdiff+0x124>)
 800a016:	f000 f991 	bl	800a33c <__assert_func>
 800a01a:	2301      	movs	r3, #1
 800a01c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a020:	4610      	mov	r0, r2
 800a022:	b003      	add	sp, #12
 800a024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a028:	bfbc      	itt	lt
 800a02a:	464b      	movlt	r3, r9
 800a02c:	46a1      	movlt	r9, r4
 800a02e:	4630      	mov	r0, r6
 800a030:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a034:	bfba      	itte	lt
 800a036:	461c      	movlt	r4, r3
 800a038:	2501      	movlt	r5, #1
 800a03a:	2500      	movge	r5, #0
 800a03c:	f7ff fd48 	bl	8009ad0 <_Balloc>
 800a040:	4602      	mov	r2, r0
 800a042:	b918      	cbnz	r0, 800a04c <__mdiff+0x60>
 800a044:	4b31      	ldr	r3, [pc, #196]	@ (800a10c <__mdiff+0x120>)
 800a046:	f240 2145 	movw	r1, #581	@ 0x245
 800a04a:	e7e3      	b.n	800a014 <__mdiff+0x28>
 800a04c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a050:	6926      	ldr	r6, [r4, #16]
 800a052:	60c5      	str	r5, [r0, #12]
 800a054:	f109 0310 	add.w	r3, r9, #16
 800a058:	f109 0514 	add.w	r5, r9, #20
 800a05c:	f104 0e14 	add.w	lr, r4, #20
 800a060:	f100 0b14 	add.w	fp, r0, #20
 800a064:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a068:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a06c:	9301      	str	r3, [sp, #4]
 800a06e:	46d9      	mov	r9, fp
 800a070:	f04f 0c00 	mov.w	ip, #0
 800a074:	9b01      	ldr	r3, [sp, #4]
 800a076:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a07a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a07e:	9301      	str	r3, [sp, #4]
 800a080:	fa1f f38a 	uxth.w	r3, sl
 800a084:	4619      	mov	r1, r3
 800a086:	b283      	uxth	r3, r0
 800a088:	1acb      	subs	r3, r1, r3
 800a08a:	0c00      	lsrs	r0, r0, #16
 800a08c:	4463      	add	r3, ip
 800a08e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a092:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a096:	b29b      	uxth	r3, r3
 800a098:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a09c:	4576      	cmp	r6, lr
 800a09e:	f849 3b04 	str.w	r3, [r9], #4
 800a0a2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a0a6:	d8e5      	bhi.n	800a074 <__mdiff+0x88>
 800a0a8:	1b33      	subs	r3, r6, r4
 800a0aa:	3b15      	subs	r3, #21
 800a0ac:	f023 0303 	bic.w	r3, r3, #3
 800a0b0:	3415      	adds	r4, #21
 800a0b2:	3304      	adds	r3, #4
 800a0b4:	42a6      	cmp	r6, r4
 800a0b6:	bf38      	it	cc
 800a0b8:	2304      	movcc	r3, #4
 800a0ba:	441d      	add	r5, r3
 800a0bc:	445b      	add	r3, fp
 800a0be:	461e      	mov	r6, r3
 800a0c0:	462c      	mov	r4, r5
 800a0c2:	4544      	cmp	r4, r8
 800a0c4:	d30e      	bcc.n	800a0e4 <__mdiff+0xf8>
 800a0c6:	f108 0103 	add.w	r1, r8, #3
 800a0ca:	1b49      	subs	r1, r1, r5
 800a0cc:	f021 0103 	bic.w	r1, r1, #3
 800a0d0:	3d03      	subs	r5, #3
 800a0d2:	45a8      	cmp	r8, r5
 800a0d4:	bf38      	it	cc
 800a0d6:	2100      	movcc	r1, #0
 800a0d8:	440b      	add	r3, r1
 800a0da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a0de:	b191      	cbz	r1, 800a106 <__mdiff+0x11a>
 800a0e0:	6117      	str	r7, [r2, #16]
 800a0e2:	e79d      	b.n	800a020 <__mdiff+0x34>
 800a0e4:	f854 1b04 	ldr.w	r1, [r4], #4
 800a0e8:	46e6      	mov	lr, ip
 800a0ea:	0c08      	lsrs	r0, r1, #16
 800a0ec:	fa1c fc81 	uxtah	ip, ip, r1
 800a0f0:	4471      	add	r1, lr
 800a0f2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a0f6:	b289      	uxth	r1, r1
 800a0f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a0fc:	f846 1b04 	str.w	r1, [r6], #4
 800a100:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a104:	e7dd      	b.n	800a0c2 <__mdiff+0xd6>
 800a106:	3f01      	subs	r7, #1
 800a108:	e7e7      	b.n	800a0da <__mdiff+0xee>
 800a10a:	bf00      	nop
 800a10c:	0800aab0 	.word	0x0800aab0
 800a110:	0800aac1 	.word	0x0800aac1

0800a114 <__d2b>:
 800a114:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a118:	460f      	mov	r7, r1
 800a11a:	2101      	movs	r1, #1
 800a11c:	ec59 8b10 	vmov	r8, r9, d0
 800a120:	4616      	mov	r6, r2
 800a122:	f7ff fcd5 	bl	8009ad0 <_Balloc>
 800a126:	4604      	mov	r4, r0
 800a128:	b930      	cbnz	r0, 800a138 <__d2b+0x24>
 800a12a:	4602      	mov	r2, r0
 800a12c:	4b23      	ldr	r3, [pc, #140]	@ (800a1bc <__d2b+0xa8>)
 800a12e:	4824      	ldr	r0, [pc, #144]	@ (800a1c0 <__d2b+0xac>)
 800a130:	f240 310f 	movw	r1, #783	@ 0x30f
 800a134:	f000 f902 	bl	800a33c <__assert_func>
 800a138:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a13c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a140:	b10d      	cbz	r5, 800a146 <__d2b+0x32>
 800a142:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a146:	9301      	str	r3, [sp, #4]
 800a148:	f1b8 0300 	subs.w	r3, r8, #0
 800a14c:	d023      	beq.n	800a196 <__d2b+0x82>
 800a14e:	4668      	mov	r0, sp
 800a150:	9300      	str	r3, [sp, #0]
 800a152:	f7ff fd84 	bl	8009c5e <__lo0bits>
 800a156:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a15a:	b1d0      	cbz	r0, 800a192 <__d2b+0x7e>
 800a15c:	f1c0 0320 	rsb	r3, r0, #32
 800a160:	fa02 f303 	lsl.w	r3, r2, r3
 800a164:	430b      	orrs	r3, r1
 800a166:	40c2      	lsrs	r2, r0
 800a168:	6163      	str	r3, [r4, #20]
 800a16a:	9201      	str	r2, [sp, #4]
 800a16c:	9b01      	ldr	r3, [sp, #4]
 800a16e:	61a3      	str	r3, [r4, #24]
 800a170:	2b00      	cmp	r3, #0
 800a172:	bf0c      	ite	eq
 800a174:	2201      	moveq	r2, #1
 800a176:	2202      	movne	r2, #2
 800a178:	6122      	str	r2, [r4, #16]
 800a17a:	b1a5      	cbz	r5, 800a1a6 <__d2b+0x92>
 800a17c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a180:	4405      	add	r5, r0
 800a182:	603d      	str	r5, [r7, #0]
 800a184:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a188:	6030      	str	r0, [r6, #0]
 800a18a:	4620      	mov	r0, r4
 800a18c:	b003      	add	sp, #12
 800a18e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a192:	6161      	str	r1, [r4, #20]
 800a194:	e7ea      	b.n	800a16c <__d2b+0x58>
 800a196:	a801      	add	r0, sp, #4
 800a198:	f7ff fd61 	bl	8009c5e <__lo0bits>
 800a19c:	9b01      	ldr	r3, [sp, #4]
 800a19e:	6163      	str	r3, [r4, #20]
 800a1a0:	3020      	adds	r0, #32
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	e7e8      	b.n	800a178 <__d2b+0x64>
 800a1a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a1aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a1ae:	6038      	str	r0, [r7, #0]
 800a1b0:	6918      	ldr	r0, [r3, #16]
 800a1b2:	f7ff fd35 	bl	8009c20 <__hi0bits>
 800a1b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a1ba:	e7e5      	b.n	800a188 <__d2b+0x74>
 800a1bc:	0800aab0 	.word	0x0800aab0
 800a1c0:	0800aac1 	.word	0x0800aac1

0800a1c4 <__sflush_r>:
 800a1c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a1c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1cc:	0716      	lsls	r6, r2, #28
 800a1ce:	4605      	mov	r5, r0
 800a1d0:	460c      	mov	r4, r1
 800a1d2:	d454      	bmi.n	800a27e <__sflush_r+0xba>
 800a1d4:	684b      	ldr	r3, [r1, #4]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	dc02      	bgt.n	800a1e0 <__sflush_r+0x1c>
 800a1da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	dd48      	ble.n	800a272 <__sflush_r+0xae>
 800a1e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a1e2:	2e00      	cmp	r6, #0
 800a1e4:	d045      	beq.n	800a272 <__sflush_r+0xae>
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a1ec:	682f      	ldr	r7, [r5, #0]
 800a1ee:	6a21      	ldr	r1, [r4, #32]
 800a1f0:	602b      	str	r3, [r5, #0]
 800a1f2:	d030      	beq.n	800a256 <__sflush_r+0x92>
 800a1f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a1f6:	89a3      	ldrh	r3, [r4, #12]
 800a1f8:	0759      	lsls	r1, r3, #29
 800a1fa:	d505      	bpl.n	800a208 <__sflush_r+0x44>
 800a1fc:	6863      	ldr	r3, [r4, #4]
 800a1fe:	1ad2      	subs	r2, r2, r3
 800a200:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a202:	b10b      	cbz	r3, 800a208 <__sflush_r+0x44>
 800a204:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a206:	1ad2      	subs	r2, r2, r3
 800a208:	2300      	movs	r3, #0
 800a20a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a20c:	6a21      	ldr	r1, [r4, #32]
 800a20e:	4628      	mov	r0, r5
 800a210:	47b0      	blx	r6
 800a212:	1c43      	adds	r3, r0, #1
 800a214:	89a3      	ldrh	r3, [r4, #12]
 800a216:	d106      	bne.n	800a226 <__sflush_r+0x62>
 800a218:	6829      	ldr	r1, [r5, #0]
 800a21a:	291d      	cmp	r1, #29
 800a21c:	d82b      	bhi.n	800a276 <__sflush_r+0xb2>
 800a21e:	4a2a      	ldr	r2, [pc, #168]	@ (800a2c8 <__sflush_r+0x104>)
 800a220:	40ca      	lsrs	r2, r1
 800a222:	07d6      	lsls	r6, r2, #31
 800a224:	d527      	bpl.n	800a276 <__sflush_r+0xb2>
 800a226:	2200      	movs	r2, #0
 800a228:	6062      	str	r2, [r4, #4]
 800a22a:	04d9      	lsls	r1, r3, #19
 800a22c:	6922      	ldr	r2, [r4, #16]
 800a22e:	6022      	str	r2, [r4, #0]
 800a230:	d504      	bpl.n	800a23c <__sflush_r+0x78>
 800a232:	1c42      	adds	r2, r0, #1
 800a234:	d101      	bne.n	800a23a <__sflush_r+0x76>
 800a236:	682b      	ldr	r3, [r5, #0]
 800a238:	b903      	cbnz	r3, 800a23c <__sflush_r+0x78>
 800a23a:	6560      	str	r0, [r4, #84]	@ 0x54
 800a23c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a23e:	602f      	str	r7, [r5, #0]
 800a240:	b1b9      	cbz	r1, 800a272 <__sflush_r+0xae>
 800a242:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a246:	4299      	cmp	r1, r3
 800a248:	d002      	beq.n	800a250 <__sflush_r+0x8c>
 800a24a:	4628      	mov	r0, r5
 800a24c:	f7ff fb40 	bl	80098d0 <_free_r>
 800a250:	2300      	movs	r3, #0
 800a252:	6363      	str	r3, [r4, #52]	@ 0x34
 800a254:	e00d      	b.n	800a272 <__sflush_r+0xae>
 800a256:	2301      	movs	r3, #1
 800a258:	4628      	mov	r0, r5
 800a25a:	47b0      	blx	r6
 800a25c:	4602      	mov	r2, r0
 800a25e:	1c50      	adds	r0, r2, #1
 800a260:	d1c9      	bne.n	800a1f6 <__sflush_r+0x32>
 800a262:	682b      	ldr	r3, [r5, #0]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d0c6      	beq.n	800a1f6 <__sflush_r+0x32>
 800a268:	2b1d      	cmp	r3, #29
 800a26a:	d001      	beq.n	800a270 <__sflush_r+0xac>
 800a26c:	2b16      	cmp	r3, #22
 800a26e:	d11e      	bne.n	800a2ae <__sflush_r+0xea>
 800a270:	602f      	str	r7, [r5, #0]
 800a272:	2000      	movs	r0, #0
 800a274:	e022      	b.n	800a2bc <__sflush_r+0xf8>
 800a276:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a27a:	b21b      	sxth	r3, r3
 800a27c:	e01b      	b.n	800a2b6 <__sflush_r+0xf2>
 800a27e:	690f      	ldr	r7, [r1, #16]
 800a280:	2f00      	cmp	r7, #0
 800a282:	d0f6      	beq.n	800a272 <__sflush_r+0xae>
 800a284:	0793      	lsls	r3, r2, #30
 800a286:	680e      	ldr	r6, [r1, #0]
 800a288:	bf08      	it	eq
 800a28a:	694b      	ldreq	r3, [r1, #20]
 800a28c:	600f      	str	r7, [r1, #0]
 800a28e:	bf18      	it	ne
 800a290:	2300      	movne	r3, #0
 800a292:	eba6 0807 	sub.w	r8, r6, r7
 800a296:	608b      	str	r3, [r1, #8]
 800a298:	f1b8 0f00 	cmp.w	r8, #0
 800a29c:	dde9      	ble.n	800a272 <__sflush_r+0xae>
 800a29e:	6a21      	ldr	r1, [r4, #32]
 800a2a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a2a2:	4643      	mov	r3, r8
 800a2a4:	463a      	mov	r2, r7
 800a2a6:	4628      	mov	r0, r5
 800a2a8:	47b0      	blx	r6
 800a2aa:	2800      	cmp	r0, #0
 800a2ac:	dc08      	bgt.n	800a2c0 <__sflush_r+0xfc>
 800a2ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2b6:	81a3      	strh	r3, [r4, #12]
 800a2b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a2bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2c0:	4407      	add	r7, r0
 800a2c2:	eba8 0800 	sub.w	r8, r8, r0
 800a2c6:	e7e7      	b.n	800a298 <__sflush_r+0xd4>
 800a2c8:	20400001 	.word	0x20400001

0800a2cc <_fflush_r>:
 800a2cc:	b538      	push	{r3, r4, r5, lr}
 800a2ce:	690b      	ldr	r3, [r1, #16]
 800a2d0:	4605      	mov	r5, r0
 800a2d2:	460c      	mov	r4, r1
 800a2d4:	b913      	cbnz	r3, 800a2dc <_fflush_r+0x10>
 800a2d6:	2500      	movs	r5, #0
 800a2d8:	4628      	mov	r0, r5
 800a2da:	bd38      	pop	{r3, r4, r5, pc}
 800a2dc:	b118      	cbz	r0, 800a2e6 <_fflush_r+0x1a>
 800a2de:	6a03      	ldr	r3, [r0, #32]
 800a2e0:	b90b      	cbnz	r3, 800a2e6 <_fflush_r+0x1a>
 800a2e2:	f7fe fb95 	bl	8008a10 <__sinit>
 800a2e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d0f3      	beq.n	800a2d6 <_fflush_r+0xa>
 800a2ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a2f0:	07d0      	lsls	r0, r2, #31
 800a2f2:	d404      	bmi.n	800a2fe <_fflush_r+0x32>
 800a2f4:	0599      	lsls	r1, r3, #22
 800a2f6:	d402      	bmi.n	800a2fe <_fflush_r+0x32>
 800a2f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a2fa:	f7fe fc80 	bl	8008bfe <__retarget_lock_acquire_recursive>
 800a2fe:	4628      	mov	r0, r5
 800a300:	4621      	mov	r1, r4
 800a302:	f7ff ff5f 	bl	800a1c4 <__sflush_r>
 800a306:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a308:	07da      	lsls	r2, r3, #31
 800a30a:	4605      	mov	r5, r0
 800a30c:	d4e4      	bmi.n	800a2d8 <_fflush_r+0xc>
 800a30e:	89a3      	ldrh	r3, [r4, #12]
 800a310:	059b      	lsls	r3, r3, #22
 800a312:	d4e1      	bmi.n	800a2d8 <_fflush_r+0xc>
 800a314:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a316:	f7fe fc73 	bl	8008c00 <__retarget_lock_release_recursive>
 800a31a:	e7dd      	b.n	800a2d8 <_fflush_r+0xc>

0800a31c <_sbrk_r>:
 800a31c:	b538      	push	{r3, r4, r5, lr}
 800a31e:	4d06      	ldr	r5, [pc, #24]	@ (800a338 <_sbrk_r+0x1c>)
 800a320:	2300      	movs	r3, #0
 800a322:	4604      	mov	r4, r0
 800a324:	4608      	mov	r0, r1
 800a326:	602b      	str	r3, [r5, #0]
 800a328:	f7f8 fd2a 	bl	8002d80 <_sbrk>
 800a32c:	1c43      	adds	r3, r0, #1
 800a32e:	d102      	bne.n	800a336 <_sbrk_r+0x1a>
 800a330:	682b      	ldr	r3, [r5, #0]
 800a332:	b103      	cbz	r3, 800a336 <_sbrk_r+0x1a>
 800a334:	6023      	str	r3, [r4, #0]
 800a336:	bd38      	pop	{r3, r4, r5, pc}
 800a338:	20000744 	.word	0x20000744

0800a33c <__assert_func>:
 800a33c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a33e:	4614      	mov	r4, r2
 800a340:	461a      	mov	r2, r3
 800a342:	4b09      	ldr	r3, [pc, #36]	@ (800a368 <__assert_func+0x2c>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4605      	mov	r5, r0
 800a348:	68d8      	ldr	r0, [r3, #12]
 800a34a:	b14c      	cbz	r4, 800a360 <__assert_func+0x24>
 800a34c:	4b07      	ldr	r3, [pc, #28]	@ (800a36c <__assert_func+0x30>)
 800a34e:	9100      	str	r1, [sp, #0]
 800a350:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a354:	4906      	ldr	r1, [pc, #24]	@ (800a370 <__assert_func+0x34>)
 800a356:	462b      	mov	r3, r5
 800a358:	f000 f842 	bl	800a3e0 <fiprintf>
 800a35c:	f000 f852 	bl	800a404 <abort>
 800a360:	4b04      	ldr	r3, [pc, #16]	@ (800a374 <__assert_func+0x38>)
 800a362:	461c      	mov	r4, r3
 800a364:	e7f3      	b.n	800a34e <__assert_func+0x12>
 800a366:	bf00      	nop
 800a368:	20000068 	.word	0x20000068
 800a36c:	0800ab24 	.word	0x0800ab24
 800a370:	0800ab31 	.word	0x0800ab31
 800a374:	0800ab5f 	.word	0x0800ab5f

0800a378 <_calloc_r>:
 800a378:	b570      	push	{r4, r5, r6, lr}
 800a37a:	fba1 5402 	umull	r5, r4, r1, r2
 800a37e:	b934      	cbnz	r4, 800a38e <_calloc_r+0x16>
 800a380:	4629      	mov	r1, r5
 800a382:	f7ff fb19 	bl	80099b8 <_malloc_r>
 800a386:	4606      	mov	r6, r0
 800a388:	b928      	cbnz	r0, 800a396 <_calloc_r+0x1e>
 800a38a:	4630      	mov	r0, r6
 800a38c:	bd70      	pop	{r4, r5, r6, pc}
 800a38e:	220c      	movs	r2, #12
 800a390:	6002      	str	r2, [r0, #0]
 800a392:	2600      	movs	r6, #0
 800a394:	e7f9      	b.n	800a38a <_calloc_r+0x12>
 800a396:	462a      	mov	r2, r5
 800a398:	4621      	mov	r1, r4
 800a39a:	f7fe fbb2 	bl	8008b02 <memset>
 800a39e:	e7f4      	b.n	800a38a <_calloc_r+0x12>

0800a3a0 <__ascii_mbtowc>:
 800a3a0:	b082      	sub	sp, #8
 800a3a2:	b901      	cbnz	r1, 800a3a6 <__ascii_mbtowc+0x6>
 800a3a4:	a901      	add	r1, sp, #4
 800a3a6:	b142      	cbz	r2, 800a3ba <__ascii_mbtowc+0x1a>
 800a3a8:	b14b      	cbz	r3, 800a3be <__ascii_mbtowc+0x1e>
 800a3aa:	7813      	ldrb	r3, [r2, #0]
 800a3ac:	600b      	str	r3, [r1, #0]
 800a3ae:	7812      	ldrb	r2, [r2, #0]
 800a3b0:	1e10      	subs	r0, r2, #0
 800a3b2:	bf18      	it	ne
 800a3b4:	2001      	movne	r0, #1
 800a3b6:	b002      	add	sp, #8
 800a3b8:	4770      	bx	lr
 800a3ba:	4610      	mov	r0, r2
 800a3bc:	e7fb      	b.n	800a3b6 <__ascii_mbtowc+0x16>
 800a3be:	f06f 0001 	mvn.w	r0, #1
 800a3c2:	e7f8      	b.n	800a3b6 <__ascii_mbtowc+0x16>

0800a3c4 <__ascii_wctomb>:
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	4608      	mov	r0, r1
 800a3c8:	b141      	cbz	r1, 800a3dc <__ascii_wctomb+0x18>
 800a3ca:	2aff      	cmp	r2, #255	@ 0xff
 800a3cc:	d904      	bls.n	800a3d8 <__ascii_wctomb+0x14>
 800a3ce:	228a      	movs	r2, #138	@ 0x8a
 800a3d0:	601a      	str	r2, [r3, #0]
 800a3d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a3d6:	4770      	bx	lr
 800a3d8:	700a      	strb	r2, [r1, #0]
 800a3da:	2001      	movs	r0, #1
 800a3dc:	4770      	bx	lr
	...

0800a3e0 <fiprintf>:
 800a3e0:	b40e      	push	{r1, r2, r3}
 800a3e2:	b503      	push	{r0, r1, lr}
 800a3e4:	4601      	mov	r1, r0
 800a3e6:	ab03      	add	r3, sp, #12
 800a3e8:	4805      	ldr	r0, [pc, #20]	@ (800a400 <fiprintf+0x20>)
 800a3ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3ee:	6800      	ldr	r0, [r0, #0]
 800a3f0:	9301      	str	r3, [sp, #4]
 800a3f2:	f000 f837 	bl	800a464 <_vfiprintf_r>
 800a3f6:	b002      	add	sp, #8
 800a3f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3fc:	b003      	add	sp, #12
 800a3fe:	4770      	bx	lr
 800a400:	20000068 	.word	0x20000068

0800a404 <abort>:
 800a404:	b508      	push	{r3, lr}
 800a406:	2006      	movs	r0, #6
 800a408:	f000 fa00 	bl	800a80c <raise>
 800a40c:	2001      	movs	r0, #1
 800a40e:	f7f8 fc3f 	bl	8002c90 <_exit>

0800a412 <__sfputc_r>:
 800a412:	6893      	ldr	r3, [r2, #8]
 800a414:	3b01      	subs	r3, #1
 800a416:	2b00      	cmp	r3, #0
 800a418:	b410      	push	{r4}
 800a41a:	6093      	str	r3, [r2, #8]
 800a41c:	da08      	bge.n	800a430 <__sfputc_r+0x1e>
 800a41e:	6994      	ldr	r4, [r2, #24]
 800a420:	42a3      	cmp	r3, r4
 800a422:	db01      	blt.n	800a428 <__sfputc_r+0x16>
 800a424:	290a      	cmp	r1, #10
 800a426:	d103      	bne.n	800a430 <__sfputc_r+0x1e>
 800a428:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a42c:	f000 b932 	b.w	800a694 <__swbuf_r>
 800a430:	6813      	ldr	r3, [r2, #0]
 800a432:	1c58      	adds	r0, r3, #1
 800a434:	6010      	str	r0, [r2, #0]
 800a436:	7019      	strb	r1, [r3, #0]
 800a438:	4608      	mov	r0, r1
 800a43a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a43e:	4770      	bx	lr

0800a440 <__sfputs_r>:
 800a440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a442:	4606      	mov	r6, r0
 800a444:	460f      	mov	r7, r1
 800a446:	4614      	mov	r4, r2
 800a448:	18d5      	adds	r5, r2, r3
 800a44a:	42ac      	cmp	r4, r5
 800a44c:	d101      	bne.n	800a452 <__sfputs_r+0x12>
 800a44e:	2000      	movs	r0, #0
 800a450:	e007      	b.n	800a462 <__sfputs_r+0x22>
 800a452:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a456:	463a      	mov	r2, r7
 800a458:	4630      	mov	r0, r6
 800a45a:	f7ff ffda 	bl	800a412 <__sfputc_r>
 800a45e:	1c43      	adds	r3, r0, #1
 800a460:	d1f3      	bne.n	800a44a <__sfputs_r+0xa>
 800a462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a464 <_vfiprintf_r>:
 800a464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a468:	460d      	mov	r5, r1
 800a46a:	b09d      	sub	sp, #116	@ 0x74
 800a46c:	4614      	mov	r4, r2
 800a46e:	4698      	mov	r8, r3
 800a470:	4606      	mov	r6, r0
 800a472:	b118      	cbz	r0, 800a47c <_vfiprintf_r+0x18>
 800a474:	6a03      	ldr	r3, [r0, #32]
 800a476:	b90b      	cbnz	r3, 800a47c <_vfiprintf_r+0x18>
 800a478:	f7fe faca 	bl	8008a10 <__sinit>
 800a47c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a47e:	07d9      	lsls	r1, r3, #31
 800a480:	d405      	bmi.n	800a48e <_vfiprintf_r+0x2a>
 800a482:	89ab      	ldrh	r3, [r5, #12]
 800a484:	059a      	lsls	r2, r3, #22
 800a486:	d402      	bmi.n	800a48e <_vfiprintf_r+0x2a>
 800a488:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a48a:	f7fe fbb8 	bl	8008bfe <__retarget_lock_acquire_recursive>
 800a48e:	89ab      	ldrh	r3, [r5, #12]
 800a490:	071b      	lsls	r3, r3, #28
 800a492:	d501      	bpl.n	800a498 <_vfiprintf_r+0x34>
 800a494:	692b      	ldr	r3, [r5, #16]
 800a496:	b99b      	cbnz	r3, 800a4c0 <_vfiprintf_r+0x5c>
 800a498:	4629      	mov	r1, r5
 800a49a:	4630      	mov	r0, r6
 800a49c:	f000 f938 	bl	800a710 <__swsetup_r>
 800a4a0:	b170      	cbz	r0, 800a4c0 <_vfiprintf_r+0x5c>
 800a4a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a4a4:	07dc      	lsls	r4, r3, #31
 800a4a6:	d504      	bpl.n	800a4b2 <_vfiprintf_r+0x4e>
 800a4a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a4ac:	b01d      	add	sp, #116	@ 0x74
 800a4ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4b2:	89ab      	ldrh	r3, [r5, #12]
 800a4b4:	0598      	lsls	r0, r3, #22
 800a4b6:	d4f7      	bmi.n	800a4a8 <_vfiprintf_r+0x44>
 800a4b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a4ba:	f7fe fba1 	bl	8008c00 <__retarget_lock_release_recursive>
 800a4be:	e7f3      	b.n	800a4a8 <_vfiprintf_r+0x44>
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4c4:	2320      	movs	r3, #32
 800a4c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a4ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4ce:	2330      	movs	r3, #48	@ 0x30
 800a4d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a680 <_vfiprintf_r+0x21c>
 800a4d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a4d8:	f04f 0901 	mov.w	r9, #1
 800a4dc:	4623      	mov	r3, r4
 800a4de:	469a      	mov	sl, r3
 800a4e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4e4:	b10a      	cbz	r2, 800a4ea <_vfiprintf_r+0x86>
 800a4e6:	2a25      	cmp	r2, #37	@ 0x25
 800a4e8:	d1f9      	bne.n	800a4de <_vfiprintf_r+0x7a>
 800a4ea:	ebba 0b04 	subs.w	fp, sl, r4
 800a4ee:	d00b      	beq.n	800a508 <_vfiprintf_r+0xa4>
 800a4f0:	465b      	mov	r3, fp
 800a4f2:	4622      	mov	r2, r4
 800a4f4:	4629      	mov	r1, r5
 800a4f6:	4630      	mov	r0, r6
 800a4f8:	f7ff ffa2 	bl	800a440 <__sfputs_r>
 800a4fc:	3001      	adds	r0, #1
 800a4fe:	f000 80a7 	beq.w	800a650 <_vfiprintf_r+0x1ec>
 800a502:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a504:	445a      	add	r2, fp
 800a506:	9209      	str	r2, [sp, #36]	@ 0x24
 800a508:	f89a 3000 	ldrb.w	r3, [sl]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	f000 809f 	beq.w	800a650 <_vfiprintf_r+0x1ec>
 800a512:	2300      	movs	r3, #0
 800a514:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a518:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a51c:	f10a 0a01 	add.w	sl, sl, #1
 800a520:	9304      	str	r3, [sp, #16]
 800a522:	9307      	str	r3, [sp, #28]
 800a524:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a528:	931a      	str	r3, [sp, #104]	@ 0x68
 800a52a:	4654      	mov	r4, sl
 800a52c:	2205      	movs	r2, #5
 800a52e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a532:	4853      	ldr	r0, [pc, #332]	@ (800a680 <_vfiprintf_r+0x21c>)
 800a534:	f7f5 fe74 	bl	8000220 <memchr>
 800a538:	9a04      	ldr	r2, [sp, #16]
 800a53a:	b9d8      	cbnz	r0, 800a574 <_vfiprintf_r+0x110>
 800a53c:	06d1      	lsls	r1, r2, #27
 800a53e:	bf44      	itt	mi
 800a540:	2320      	movmi	r3, #32
 800a542:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a546:	0713      	lsls	r3, r2, #28
 800a548:	bf44      	itt	mi
 800a54a:	232b      	movmi	r3, #43	@ 0x2b
 800a54c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a550:	f89a 3000 	ldrb.w	r3, [sl]
 800a554:	2b2a      	cmp	r3, #42	@ 0x2a
 800a556:	d015      	beq.n	800a584 <_vfiprintf_r+0x120>
 800a558:	9a07      	ldr	r2, [sp, #28]
 800a55a:	4654      	mov	r4, sl
 800a55c:	2000      	movs	r0, #0
 800a55e:	f04f 0c0a 	mov.w	ip, #10
 800a562:	4621      	mov	r1, r4
 800a564:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a568:	3b30      	subs	r3, #48	@ 0x30
 800a56a:	2b09      	cmp	r3, #9
 800a56c:	d94b      	bls.n	800a606 <_vfiprintf_r+0x1a2>
 800a56e:	b1b0      	cbz	r0, 800a59e <_vfiprintf_r+0x13a>
 800a570:	9207      	str	r2, [sp, #28]
 800a572:	e014      	b.n	800a59e <_vfiprintf_r+0x13a>
 800a574:	eba0 0308 	sub.w	r3, r0, r8
 800a578:	fa09 f303 	lsl.w	r3, r9, r3
 800a57c:	4313      	orrs	r3, r2
 800a57e:	9304      	str	r3, [sp, #16]
 800a580:	46a2      	mov	sl, r4
 800a582:	e7d2      	b.n	800a52a <_vfiprintf_r+0xc6>
 800a584:	9b03      	ldr	r3, [sp, #12]
 800a586:	1d19      	adds	r1, r3, #4
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	9103      	str	r1, [sp, #12]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	bfbb      	ittet	lt
 800a590:	425b      	neglt	r3, r3
 800a592:	f042 0202 	orrlt.w	r2, r2, #2
 800a596:	9307      	strge	r3, [sp, #28]
 800a598:	9307      	strlt	r3, [sp, #28]
 800a59a:	bfb8      	it	lt
 800a59c:	9204      	strlt	r2, [sp, #16]
 800a59e:	7823      	ldrb	r3, [r4, #0]
 800a5a0:	2b2e      	cmp	r3, #46	@ 0x2e
 800a5a2:	d10a      	bne.n	800a5ba <_vfiprintf_r+0x156>
 800a5a4:	7863      	ldrb	r3, [r4, #1]
 800a5a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a5a8:	d132      	bne.n	800a610 <_vfiprintf_r+0x1ac>
 800a5aa:	9b03      	ldr	r3, [sp, #12]
 800a5ac:	1d1a      	adds	r2, r3, #4
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	9203      	str	r2, [sp, #12]
 800a5b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a5b6:	3402      	adds	r4, #2
 800a5b8:	9305      	str	r3, [sp, #20]
 800a5ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a690 <_vfiprintf_r+0x22c>
 800a5be:	7821      	ldrb	r1, [r4, #0]
 800a5c0:	2203      	movs	r2, #3
 800a5c2:	4650      	mov	r0, sl
 800a5c4:	f7f5 fe2c 	bl	8000220 <memchr>
 800a5c8:	b138      	cbz	r0, 800a5da <_vfiprintf_r+0x176>
 800a5ca:	9b04      	ldr	r3, [sp, #16]
 800a5cc:	eba0 000a 	sub.w	r0, r0, sl
 800a5d0:	2240      	movs	r2, #64	@ 0x40
 800a5d2:	4082      	lsls	r2, r0
 800a5d4:	4313      	orrs	r3, r2
 800a5d6:	3401      	adds	r4, #1
 800a5d8:	9304      	str	r3, [sp, #16]
 800a5da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5de:	4829      	ldr	r0, [pc, #164]	@ (800a684 <_vfiprintf_r+0x220>)
 800a5e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a5e4:	2206      	movs	r2, #6
 800a5e6:	f7f5 fe1b 	bl	8000220 <memchr>
 800a5ea:	2800      	cmp	r0, #0
 800a5ec:	d03f      	beq.n	800a66e <_vfiprintf_r+0x20a>
 800a5ee:	4b26      	ldr	r3, [pc, #152]	@ (800a688 <_vfiprintf_r+0x224>)
 800a5f0:	bb1b      	cbnz	r3, 800a63a <_vfiprintf_r+0x1d6>
 800a5f2:	9b03      	ldr	r3, [sp, #12]
 800a5f4:	3307      	adds	r3, #7
 800a5f6:	f023 0307 	bic.w	r3, r3, #7
 800a5fa:	3308      	adds	r3, #8
 800a5fc:	9303      	str	r3, [sp, #12]
 800a5fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a600:	443b      	add	r3, r7
 800a602:	9309      	str	r3, [sp, #36]	@ 0x24
 800a604:	e76a      	b.n	800a4dc <_vfiprintf_r+0x78>
 800a606:	fb0c 3202 	mla	r2, ip, r2, r3
 800a60a:	460c      	mov	r4, r1
 800a60c:	2001      	movs	r0, #1
 800a60e:	e7a8      	b.n	800a562 <_vfiprintf_r+0xfe>
 800a610:	2300      	movs	r3, #0
 800a612:	3401      	adds	r4, #1
 800a614:	9305      	str	r3, [sp, #20]
 800a616:	4619      	mov	r1, r3
 800a618:	f04f 0c0a 	mov.w	ip, #10
 800a61c:	4620      	mov	r0, r4
 800a61e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a622:	3a30      	subs	r2, #48	@ 0x30
 800a624:	2a09      	cmp	r2, #9
 800a626:	d903      	bls.n	800a630 <_vfiprintf_r+0x1cc>
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d0c6      	beq.n	800a5ba <_vfiprintf_r+0x156>
 800a62c:	9105      	str	r1, [sp, #20]
 800a62e:	e7c4      	b.n	800a5ba <_vfiprintf_r+0x156>
 800a630:	fb0c 2101 	mla	r1, ip, r1, r2
 800a634:	4604      	mov	r4, r0
 800a636:	2301      	movs	r3, #1
 800a638:	e7f0      	b.n	800a61c <_vfiprintf_r+0x1b8>
 800a63a:	ab03      	add	r3, sp, #12
 800a63c:	9300      	str	r3, [sp, #0]
 800a63e:	462a      	mov	r2, r5
 800a640:	4b12      	ldr	r3, [pc, #72]	@ (800a68c <_vfiprintf_r+0x228>)
 800a642:	a904      	add	r1, sp, #16
 800a644:	4630      	mov	r0, r6
 800a646:	f7fd fda1 	bl	800818c <_printf_float>
 800a64a:	4607      	mov	r7, r0
 800a64c:	1c78      	adds	r0, r7, #1
 800a64e:	d1d6      	bne.n	800a5fe <_vfiprintf_r+0x19a>
 800a650:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a652:	07d9      	lsls	r1, r3, #31
 800a654:	d405      	bmi.n	800a662 <_vfiprintf_r+0x1fe>
 800a656:	89ab      	ldrh	r3, [r5, #12]
 800a658:	059a      	lsls	r2, r3, #22
 800a65a:	d402      	bmi.n	800a662 <_vfiprintf_r+0x1fe>
 800a65c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a65e:	f7fe facf 	bl	8008c00 <__retarget_lock_release_recursive>
 800a662:	89ab      	ldrh	r3, [r5, #12]
 800a664:	065b      	lsls	r3, r3, #25
 800a666:	f53f af1f 	bmi.w	800a4a8 <_vfiprintf_r+0x44>
 800a66a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a66c:	e71e      	b.n	800a4ac <_vfiprintf_r+0x48>
 800a66e:	ab03      	add	r3, sp, #12
 800a670:	9300      	str	r3, [sp, #0]
 800a672:	462a      	mov	r2, r5
 800a674:	4b05      	ldr	r3, [pc, #20]	@ (800a68c <_vfiprintf_r+0x228>)
 800a676:	a904      	add	r1, sp, #16
 800a678:	4630      	mov	r0, r6
 800a67a:	f7fe f81f 	bl	80086bc <_printf_i>
 800a67e:	e7e4      	b.n	800a64a <_vfiprintf_r+0x1e6>
 800a680:	0800ab60 	.word	0x0800ab60
 800a684:	0800ab6a 	.word	0x0800ab6a
 800a688:	0800818d 	.word	0x0800818d
 800a68c:	0800a441 	.word	0x0800a441
 800a690:	0800ab66 	.word	0x0800ab66

0800a694 <__swbuf_r>:
 800a694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a696:	460e      	mov	r6, r1
 800a698:	4614      	mov	r4, r2
 800a69a:	4605      	mov	r5, r0
 800a69c:	b118      	cbz	r0, 800a6a6 <__swbuf_r+0x12>
 800a69e:	6a03      	ldr	r3, [r0, #32]
 800a6a0:	b90b      	cbnz	r3, 800a6a6 <__swbuf_r+0x12>
 800a6a2:	f7fe f9b5 	bl	8008a10 <__sinit>
 800a6a6:	69a3      	ldr	r3, [r4, #24]
 800a6a8:	60a3      	str	r3, [r4, #8]
 800a6aa:	89a3      	ldrh	r3, [r4, #12]
 800a6ac:	071a      	lsls	r2, r3, #28
 800a6ae:	d501      	bpl.n	800a6b4 <__swbuf_r+0x20>
 800a6b0:	6923      	ldr	r3, [r4, #16]
 800a6b2:	b943      	cbnz	r3, 800a6c6 <__swbuf_r+0x32>
 800a6b4:	4621      	mov	r1, r4
 800a6b6:	4628      	mov	r0, r5
 800a6b8:	f000 f82a 	bl	800a710 <__swsetup_r>
 800a6bc:	b118      	cbz	r0, 800a6c6 <__swbuf_r+0x32>
 800a6be:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800a6c2:	4638      	mov	r0, r7
 800a6c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6c6:	6823      	ldr	r3, [r4, #0]
 800a6c8:	6922      	ldr	r2, [r4, #16]
 800a6ca:	1a98      	subs	r0, r3, r2
 800a6cc:	6963      	ldr	r3, [r4, #20]
 800a6ce:	b2f6      	uxtb	r6, r6
 800a6d0:	4283      	cmp	r3, r0
 800a6d2:	4637      	mov	r7, r6
 800a6d4:	dc05      	bgt.n	800a6e2 <__swbuf_r+0x4e>
 800a6d6:	4621      	mov	r1, r4
 800a6d8:	4628      	mov	r0, r5
 800a6da:	f7ff fdf7 	bl	800a2cc <_fflush_r>
 800a6de:	2800      	cmp	r0, #0
 800a6e0:	d1ed      	bne.n	800a6be <__swbuf_r+0x2a>
 800a6e2:	68a3      	ldr	r3, [r4, #8]
 800a6e4:	3b01      	subs	r3, #1
 800a6e6:	60a3      	str	r3, [r4, #8]
 800a6e8:	6823      	ldr	r3, [r4, #0]
 800a6ea:	1c5a      	adds	r2, r3, #1
 800a6ec:	6022      	str	r2, [r4, #0]
 800a6ee:	701e      	strb	r6, [r3, #0]
 800a6f0:	6962      	ldr	r2, [r4, #20]
 800a6f2:	1c43      	adds	r3, r0, #1
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d004      	beq.n	800a702 <__swbuf_r+0x6e>
 800a6f8:	89a3      	ldrh	r3, [r4, #12]
 800a6fa:	07db      	lsls	r3, r3, #31
 800a6fc:	d5e1      	bpl.n	800a6c2 <__swbuf_r+0x2e>
 800a6fe:	2e0a      	cmp	r6, #10
 800a700:	d1df      	bne.n	800a6c2 <__swbuf_r+0x2e>
 800a702:	4621      	mov	r1, r4
 800a704:	4628      	mov	r0, r5
 800a706:	f7ff fde1 	bl	800a2cc <_fflush_r>
 800a70a:	2800      	cmp	r0, #0
 800a70c:	d0d9      	beq.n	800a6c2 <__swbuf_r+0x2e>
 800a70e:	e7d6      	b.n	800a6be <__swbuf_r+0x2a>

0800a710 <__swsetup_r>:
 800a710:	b538      	push	{r3, r4, r5, lr}
 800a712:	4b29      	ldr	r3, [pc, #164]	@ (800a7b8 <__swsetup_r+0xa8>)
 800a714:	4605      	mov	r5, r0
 800a716:	6818      	ldr	r0, [r3, #0]
 800a718:	460c      	mov	r4, r1
 800a71a:	b118      	cbz	r0, 800a724 <__swsetup_r+0x14>
 800a71c:	6a03      	ldr	r3, [r0, #32]
 800a71e:	b90b      	cbnz	r3, 800a724 <__swsetup_r+0x14>
 800a720:	f7fe f976 	bl	8008a10 <__sinit>
 800a724:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a728:	0719      	lsls	r1, r3, #28
 800a72a:	d422      	bmi.n	800a772 <__swsetup_r+0x62>
 800a72c:	06da      	lsls	r2, r3, #27
 800a72e:	d407      	bmi.n	800a740 <__swsetup_r+0x30>
 800a730:	2209      	movs	r2, #9
 800a732:	602a      	str	r2, [r5, #0]
 800a734:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a738:	81a3      	strh	r3, [r4, #12]
 800a73a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a73e:	e033      	b.n	800a7a8 <__swsetup_r+0x98>
 800a740:	0758      	lsls	r0, r3, #29
 800a742:	d512      	bpl.n	800a76a <__swsetup_r+0x5a>
 800a744:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a746:	b141      	cbz	r1, 800a75a <__swsetup_r+0x4a>
 800a748:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a74c:	4299      	cmp	r1, r3
 800a74e:	d002      	beq.n	800a756 <__swsetup_r+0x46>
 800a750:	4628      	mov	r0, r5
 800a752:	f7ff f8bd 	bl	80098d0 <_free_r>
 800a756:	2300      	movs	r3, #0
 800a758:	6363      	str	r3, [r4, #52]	@ 0x34
 800a75a:	89a3      	ldrh	r3, [r4, #12]
 800a75c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a760:	81a3      	strh	r3, [r4, #12]
 800a762:	2300      	movs	r3, #0
 800a764:	6063      	str	r3, [r4, #4]
 800a766:	6923      	ldr	r3, [r4, #16]
 800a768:	6023      	str	r3, [r4, #0]
 800a76a:	89a3      	ldrh	r3, [r4, #12]
 800a76c:	f043 0308 	orr.w	r3, r3, #8
 800a770:	81a3      	strh	r3, [r4, #12]
 800a772:	6923      	ldr	r3, [r4, #16]
 800a774:	b94b      	cbnz	r3, 800a78a <__swsetup_r+0x7a>
 800a776:	89a3      	ldrh	r3, [r4, #12]
 800a778:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a77c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a780:	d003      	beq.n	800a78a <__swsetup_r+0x7a>
 800a782:	4621      	mov	r1, r4
 800a784:	4628      	mov	r0, r5
 800a786:	f000 f883 	bl	800a890 <__smakebuf_r>
 800a78a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a78e:	f013 0201 	ands.w	r2, r3, #1
 800a792:	d00a      	beq.n	800a7aa <__swsetup_r+0x9a>
 800a794:	2200      	movs	r2, #0
 800a796:	60a2      	str	r2, [r4, #8]
 800a798:	6962      	ldr	r2, [r4, #20]
 800a79a:	4252      	negs	r2, r2
 800a79c:	61a2      	str	r2, [r4, #24]
 800a79e:	6922      	ldr	r2, [r4, #16]
 800a7a0:	b942      	cbnz	r2, 800a7b4 <__swsetup_r+0xa4>
 800a7a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a7a6:	d1c5      	bne.n	800a734 <__swsetup_r+0x24>
 800a7a8:	bd38      	pop	{r3, r4, r5, pc}
 800a7aa:	0799      	lsls	r1, r3, #30
 800a7ac:	bf58      	it	pl
 800a7ae:	6962      	ldrpl	r2, [r4, #20]
 800a7b0:	60a2      	str	r2, [r4, #8]
 800a7b2:	e7f4      	b.n	800a79e <__swsetup_r+0x8e>
 800a7b4:	2000      	movs	r0, #0
 800a7b6:	e7f7      	b.n	800a7a8 <__swsetup_r+0x98>
 800a7b8:	20000068 	.word	0x20000068

0800a7bc <_raise_r>:
 800a7bc:	291f      	cmp	r1, #31
 800a7be:	b538      	push	{r3, r4, r5, lr}
 800a7c0:	4605      	mov	r5, r0
 800a7c2:	460c      	mov	r4, r1
 800a7c4:	d904      	bls.n	800a7d0 <_raise_r+0x14>
 800a7c6:	2316      	movs	r3, #22
 800a7c8:	6003      	str	r3, [r0, #0]
 800a7ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a7ce:	bd38      	pop	{r3, r4, r5, pc}
 800a7d0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a7d2:	b112      	cbz	r2, 800a7da <_raise_r+0x1e>
 800a7d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a7d8:	b94b      	cbnz	r3, 800a7ee <_raise_r+0x32>
 800a7da:	4628      	mov	r0, r5
 800a7dc:	f000 f830 	bl	800a840 <_getpid_r>
 800a7e0:	4622      	mov	r2, r4
 800a7e2:	4601      	mov	r1, r0
 800a7e4:	4628      	mov	r0, r5
 800a7e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7ea:	f000 b817 	b.w	800a81c <_kill_r>
 800a7ee:	2b01      	cmp	r3, #1
 800a7f0:	d00a      	beq.n	800a808 <_raise_r+0x4c>
 800a7f2:	1c59      	adds	r1, r3, #1
 800a7f4:	d103      	bne.n	800a7fe <_raise_r+0x42>
 800a7f6:	2316      	movs	r3, #22
 800a7f8:	6003      	str	r3, [r0, #0]
 800a7fa:	2001      	movs	r0, #1
 800a7fc:	e7e7      	b.n	800a7ce <_raise_r+0x12>
 800a7fe:	2100      	movs	r1, #0
 800a800:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a804:	4620      	mov	r0, r4
 800a806:	4798      	blx	r3
 800a808:	2000      	movs	r0, #0
 800a80a:	e7e0      	b.n	800a7ce <_raise_r+0x12>

0800a80c <raise>:
 800a80c:	4b02      	ldr	r3, [pc, #8]	@ (800a818 <raise+0xc>)
 800a80e:	4601      	mov	r1, r0
 800a810:	6818      	ldr	r0, [r3, #0]
 800a812:	f7ff bfd3 	b.w	800a7bc <_raise_r>
 800a816:	bf00      	nop
 800a818:	20000068 	.word	0x20000068

0800a81c <_kill_r>:
 800a81c:	b538      	push	{r3, r4, r5, lr}
 800a81e:	4d07      	ldr	r5, [pc, #28]	@ (800a83c <_kill_r+0x20>)
 800a820:	2300      	movs	r3, #0
 800a822:	4604      	mov	r4, r0
 800a824:	4608      	mov	r0, r1
 800a826:	4611      	mov	r1, r2
 800a828:	602b      	str	r3, [r5, #0]
 800a82a:	f7f8 fa21 	bl	8002c70 <_kill>
 800a82e:	1c43      	adds	r3, r0, #1
 800a830:	d102      	bne.n	800a838 <_kill_r+0x1c>
 800a832:	682b      	ldr	r3, [r5, #0]
 800a834:	b103      	cbz	r3, 800a838 <_kill_r+0x1c>
 800a836:	6023      	str	r3, [r4, #0]
 800a838:	bd38      	pop	{r3, r4, r5, pc}
 800a83a:	bf00      	nop
 800a83c:	20000744 	.word	0x20000744

0800a840 <_getpid_r>:
 800a840:	f7f8 ba0e 	b.w	8002c60 <_getpid>

0800a844 <__swhatbuf_r>:
 800a844:	b570      	push	{r4, r5, r6, lr}
 800a846:	460c      	mov	r4, r1
 800a848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a84c:	2900      	cmp	r1, #0
 800a84e:	b096      	sub	sp, #88	@ 0x58
 800a850:	4615      	mov	r5, r2
 800a852:	461e      	mov	r6, r3
 800a854:	da0d      	bge.n	800a872 <__swhatbuf_r+0x2e>
 800a856:	89a3      	ldrh	r3, [r4, #12]
 800a858:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a85c:	f04f 0100 	mov.w	r1, #0
 800a860:	bf14      	ite	ne
 800a862:	2340      	movne	r3, #64	@ 0x40
 800a864:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a868:	2000      	movs	r0, #0
 800a86a:	6031      	str	r1, [r6, #0]
 800a86c:	602b      	str	r3, [r5, #0]
 800a86e:	b016      	add	sp, #88	@ 0x58
 800a870:	bd70      	pop	{r4, r5, r6, pc}
 800a872:	466a      	mov	r2, sp
 800a874:	f000 f848 	bl	800a908 <_fstat_r>
 800a878:	2800      	cmp	r0, #0
 800a87a:	dbec      	blt.n	800a856 <__swhatbuf_r+0x12>
 800a87c:	9901      	ldr	r1, [sp, #4]
 800a87e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a882:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a886:	4259      	negs	r1, r3
 800a888:	4159      	adcs	r1, r3
 800a88a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a88e:	e7eb      	b.n	800a868 <__swhatbuf_r+0x24>

0800a890 <__smakebuf_r>:
 800a890:	898b      	ldrh	r3, [r1, #12]
 800a892:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a894:	079d      	lsls	r5, r3, #30
 800a896:	4606      	mov	r6, r0
 800a898:	460c      	mov	r4, r1
 800a89a:	d507      	bpl.n	800a8ac <__smakebuf_r+0x1c>
 800a89c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a8a0:	6023      	str	r3, [r4, #0]
 800a8a2:	6123      	str	r3, [r4, #16]
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	6163      	str	r3, [r4, #20]
 800a8a8:	b003      	add	sp, #12
 800a8aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8ac:	ab01      	add	r3, sp, #4
 800a8ae:	466a      	mov	r2, sp
 800a8b0:	f7ff ffc8 	bl	800a844 <__swhatbuf_r>
 800a8b4:	9f00      	ldr	r7, [sp, #0]
 800a8b6:	4605      	mov	r5, r0
 800a8b8:	4639      	mov	r1, r7
 800a8ba:	4630      	mov	r0, r6
 800a8bc:	f7ff f87c 	bl	80099b8 <_malloc_r>
 800a8c0:	b948      	cbnz	r0, 800a8d6 <__smakebuf_r+0x46>
 800a8c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8c6:	059a      	lsls	r2, r3, #22
 800a8c8:	d4ee      	bmi.n	800a8a8 <__smakebuf_r+0x18>
 800a8ca:	f023 0303 	bic.w	r3, r3, #3
 800a8ce:	f043 0302 	orr.w	r3, r3, #2
 800a8d2:	81a3      	strh	r3, [r4, #12]
 800a8d4:	e7e2      	b.n	800a89c <__smakebuf_r+0xc>
 800a8d6:	89a3      	ldrh	r3, [r4, #12]
 800a8d8:	6020      	str	r0, [r4, #0]
 800a8da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8de:	81a3      	strh	r3, [r4, #12]
 800a8e0:	9b01      	ldr	r3, [sp, #4]
 800a8e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a8e6:	b15b      	cbz	r3, 800a900 <__smakebuf_r+0x70>
 800a8e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8ec:	4630      	mov	r0, r6
 800a8ee:	f000 f81d 	bl	800a92c <_isatty_r>
 800a8f2:	b128      	cbz	r0, 800a900 <__smakebuf_r+0x70>
 800a8f4:	89a3      	ldrh	r3, [r4, #12]
 800a8f6:	f023 0303 	bic.w	r3, r3, #3
 800a8fa:	f043 0301 	orr.w	r3, r3, #1
 800a8fe:	81a3      	strh	r3, [r4, #12]
 800a900:	89a3      	ldrh	r3, [r4, #12]
 800a902:	431d      	orrs	r5, r3
 800a904:	81a5      	strh	r5, [r4, #12]
 800a906:	e7cf      	b.n	800a8a8 <__smakebuf_r+0x18>

0800a908 <_fstat_r>:
 800a908:	b538      	push	{r3, r4, r5, lr}
 800a90a:	4d07      	ldr	r5, [pc, #28]	@ (800a928 <_fstat_r+0x20>)
 800a90c:	2300      	movs	r3, #0
 800a90e:	4604      	mov	r4, r0
 800a910:	4608      	mov	r0, r1
 800a912:	4611      	mov	r1, r2
 800a914:	602b      	str	r3, [r5, #0]
 800a916:	f7f8 fa0b 	bl	8002d30 <_fstat>
 800a91a:	1c43      	adds	r3, r0, #1
 800a91c:	d102      	bne.n	800a924 <_fstat_r+0x1c>
 800a91e:	682b      	ldr	r3, [r5, #0]
 800a920:	b103      	cbz	r3, 800a924 <_fstat_r+0x1c>
 800a922:	6023      	str	r3, [r4, #0]
 800a924:	bd38      	pop	{r3, r4, r5, pc}
 800a926:	bf00      	nop
 800a928:	20000744 	.word	0x20000744

0800a92c <_isatty_r>:
 800a92c:	b538      	push	{r3, r4, r5, lr}
 800a92e:	4d06      	ldr	r5, [pc, #24]	@ (800a948 <_isatty_r+0x1c>)
 800a930:	2300      	movs	r3, #0
 800a932:	4604      	mov	r4, r0
 800a934:	4608      	mov	r0, r1
 800a936:	602b      	str	r3, [r5, #0]
 800a938:	f7f8 fa0a 	bl	8002d50 <_isatty>
 800a93c:	1c43      	adds	r3, r0, #1
 800a93e:	d102      	bne.n	800a946 <_isatty_r+0x1a>
 800a940:	682b      	ldr	r3, [r5, #0]
 800a942:	b103      	cbz	r3, 800a946 <_isatty_r+0x1a>
 800a944:	6023      	str	r3, [r4, #0]
 800a946:	bd38      	pop	{r3, r4, r5, pc}
 800a948:	20000744 	.word	0x20000744

0800a94c <_init>:
 800a94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a94e:	bf00      	nop
 800a950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a952:	bc08      	pop	{r3}
 800a954:	469e      	mov	lr, r3
 800a956:	4770      	bx	lr

0800a958 <_fini>:
 800a958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a95a:	bf00      	nop
 800a95c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a95e:	bc08      	pop	{r3}
 800a960:	469e      	mov	lr, r3
 800a962:	4770      	bx	lr
