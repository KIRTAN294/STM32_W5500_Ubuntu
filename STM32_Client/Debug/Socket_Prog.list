
Socket_Prog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a82c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  0800aa10  0800aa10  0000ba10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800adb4  0800adb4  0000c220  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800adb4  0800adb4  0000bdb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800adbc  0800adbc  0000c220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800adbc  0800adbc  0000bdbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800adc0  0800adc0  0000bdc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000220  20000000  0800adc4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000052c  20000220  0800afe4  0000c220  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000074c  0800afe4  0000c74c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c220  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016cfd  00000000  00000000  0000c250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000342f  00000000  00000000  00022f4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001700  00000000  00000000  00026380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011cf  00000000  00000000  00027a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002945f  00000000  00000000  00028c4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000183b1  00000000  00000000  000520ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001062a7  00000000  00000000  0006a45f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00170706  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007198  00000000  00000000  0017074c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000093  00000000  00000000  001778e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000220 	.word	0x20000220
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a9f4 	.word	0x0800a9f4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000224 	.word	0x20000224
 800021c:	0800a9f4 	.word	0x0800a9f4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <Handlebmsmessage>:
bool Bms_message = false;

Master_BMS_Data_t master_data;
Ethernet_BMS_Packet eth_msg = {0};

void Handlebmsmessage(uint32_t can_id, uint8_t *RxData, uint8_t length){
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	71fb      	strb	r3, [r7, #7]

	Bms_message = true;
 8000ca6:	4b73      	ldr	r3, [pc, #460]	@ (8000e74 <Handlebmsmessage+0x1dc>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	701a      	strb	r2, [r3, #0]

	switch(can_id){
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	4a72      	ldr	r2, [pc, #456]	@ (8000e78 <Handlebmsmessage+0x1e0>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	f000 80c8 	beq.w	8000e46 <Handlebmsmessage+0x1ae>
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	4a6f      	ldr	r2, [pc, #444]	@ (8000e78 <Handlebmsmessage+0x1e0>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	f200 80d5 	bhi.w	8000e6a <Handlebmsmessage+0x1d2>
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	4a6e      	ldr	r2, [pc, #440]	@ (8000e7c <Handlebmsmessage+0x1e4>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	f000 80ac 	beq.w	8000e22 <Handlebmsmessage+0x18a>
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	4a6b      	ldr	r2, [pc, #428]	@ (8000e7c <Handlebmsmessage+0x1e4>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	f200 80cb 	bhi.w	8000e6a <Handlebmsmessage+0x1d2>
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	4a6a      	ldr	r2, [pc, #424]	@ (8000e80 <Handlebmsmessage+0x1e8>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d077      	beq.n	8000dcc <Handlebmsmessage+0x134>
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	4a68      	ldr	r2, [pc, #416]	@ (8000e80 <Handlebmsmessage+0x1e8>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	f200 80c2 	bhi.w	8000e6a <Handlebmsmessage+0x1d2>
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	4a66      	ldr	r2, [pc, #408]	@ (8000e84 <Handlebmsmessage+0x1ec>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d034      	beq.n	8000d58 <Handlebmsmessage+0xc0>
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	4a64      	ldr	r2, [pc, #400]	@ (8000e84 <Handlebmsmessage+0x1ec>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	f200 80b9 	bhi.w	8000e6a <Handlebmsmessage+0x1d2>
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	4a63      	ldr	r2, [pc, #396]	@ (8000e88 <Handlebmsmessage+0x1f0>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d03d      	beq.n	8000d7c <Handlebmsmessage+0xe4>
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	4a61      	ldr	r2, [pc, #388]	@ (8000e88 <Handlebmsmessage+0x1f0>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	f200 80b0 	bhi.w	8000e6a <Handlebmsmessage+0x1d2>
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	4a5f      	ldr	r2, [pc, #380]	@ (8000e8c <Handlebmsmessage+0x1f4>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d046      	beq.n	8000da0 <Handlebmsmessage+0x108>
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	4a5d      	ldr	r2, [pc, #372]	@ (8000e8c <Handlebmsmessage+0x1f4>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	f200 80a7 	bhi.w	8000e6a <Handlebmsmessage+0x1d2>
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 8000d22:	d004      	beq.n	8000d2e <Handlebmsmessage+0x96>
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4a5a      	ldr	r2, [pc, #360]	@ (8000e90 <Handlebmsmessage+0x1f8>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d061      	beq.n	8000df0 <Handlebmsmessage+0x158>
              eth_msg.length = sizeof(master_data.status7);
              memcpy(eth_msg.payload, &master_data.status7, sizeof(master_data.status7));
              break;

	}
}
 8000d2c:	e09d      	b.n	8000e6a <Handlebmsmessage+0x1d2>
	          eth_msg.can_id = APP_flag_error_CANID;
 8000d2e:	4b59      	ldr	r3, [pc, #356]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000d30:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8000d34:	601a      	str	r2, [r3, #0]
              Unpack_APP_flag_error_bms_can(&master_data.status, RxData, length);
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	68b9      	ldr	r1, [r7, #8]
 8000d3c:	4856      	ldr	r0, [pc, #344]	@ (8000e98 <Handlebmsmessage+0x200>)
 8000d3e:	f000 fb27 	bl	8001390 <Unpack_APP_flag_error_bms_can>
              eth_msg.length = sizeof(master_data.status);
 8000d42:	4b54      	ldr	r3, [pc, #336]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000d44:	2208      	movs	r2, #8
 8000d46:	605a      	str	r2, [r3, #4]
              memcpy(eth_msg.payload, &master_data.status, sizeof(master_data.status));
 8000d48:	4b52      	ldr	r3, [pc, #328]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000d4a:	4a53      	ldr	r2, [pc, #332]	@ (8000e98 <Handlebmsmessage+0x200>)
 8000d4c:	3308      	adds	r3, #8
 8000d4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d52:	e883 0003 	stmia.w	r3, {r0, r1}
              break;
 8000d56:	e088      	b.n	8000e6a <Handlebmsmessage+0x1d2>
	          eth_msg.can_id = BAT_BMS_IntTemp_CANID;
 8000d58:	4b4e      	ldr	r3, [pc, #312]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000d5a:	4a4a      	ldr	r2, [pc, #296]	@ (8000e84 <Handlebmsmessage+0x1ec>)
 8000d5c:	601a      	str	r2, [r3, #0]
              Unpack_BAT_BMS_IntTemp_bms_can(&master_data.status1, RxData, length);
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	461a      	mov	r2, r3
 8000d62:	68b9      	ldr	r1, [r7, #8]
 8000d64:	484d      	ldr	r0, [pc, #308]	@ (8000e9c <Handlebmsmessage+0x204>)
 8000d66:	f000 fc63 	bl	8001630 <Unpack_BAT_BMS_IntTemp_bms_can>
              eth_msg.length = sizeof(master_data.status1);
 8000d6a:	4b4a      	ldr	r3, [pc, #296]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000d6c:	2220      	movs	r2, #32
 8000d6e:	605a      	str	r2, [r3, #4]
              memcpy(eth_msg.payload, &master_data.status1, sizeof(master_data.status1));
 8000d70:	2220      	movs	r2, #32
 8000d72:	494a      	ldr	r1, [pc, #296]	@ (8000e9c <Handlebmsmessage+0x204>)
 8000d74:	484a      	ldr	r0, [pc, #296]	@ (8000ea0 <Handlebmsmessage+0x208>)
 8000d76:	f007 ff98 	bl	8008caa <memcpy>
              break;
 8000d7a:	e076      	b.n	8000e6a <Handlebmsmessage+0x1d2>
	          eth_msg.can_id = BAT_BMS_ExtTemp_CANID;
 8000d7c:	4b45      	ldr	r3, [pc, #276]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000d7e:	4a42      	ldr	r2, [pc, #264]	@ (8000e88 <Handlebmsmessage+0x1f0>)
 8000d80:	601a      	str	r2, [r3, #0]
              Unpack_BAT_BMS_ExtTemp_bms_can(&master_data.status2, RxData, length);
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	461a      	mov	r2, r3
 8000d86:	68b9      	ldr	r1, [r7, #8]
 8000d88:	4846      	ldr	r0, [pc, #280]	@ (8000ea4 <Handlebmsmessage+0x20c>)
 8000d8a:	f000 fbd9 	bl	8001540 <Unpack_BAT_BMS_ExtTemp_bms_can>
              eth_msg.length = sizeof(master_data.status2);
 8000d8e:	4b41      	ldr	r3, [pc, #260]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000d90:	2228      	movs	r2, #40	@ 0x28
 8000d92:	605a      	str	r2, [r3, #4]
              memcpy(eth_msg.payload, &master_data.status2, sizeof(master_data.status2));
 8000d94:	2228      	movs	r2, #40	@ 0x28
 8000d96:	4943      	ldr	r1, [pc, #268]	@ (8000ea4 <Handlebmsmessage+0x20c>)
 8000d98:	4841      	ldr	r0, [pc, #260]	@ (8000ea0 <Handlebmsmessage+0x208>)
 8000d9a:	f007 ff86 	bl	8008caa <memcpy>
              break;
 8000d9e:	e064      	b.n	8000e6a <Handlebmsmessage+0x1d2>
	          eth_msg.can_id = BAT_AFE_Fet_Status_CANID;
 8000da0:	4b3c      	ldr	r3, [pc, #240]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000da2:	4a3a      	ldr	r2, [pc, #232]	@ (8000e8c <Handlebmsmessage+0x1f4>)
 8000da4:	601a      	str	r2, [r3, #0]
              Unpack_BAT_AFE_Fet_Status_bms_can(&master_data.status3, RxData, length);
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	461a      	mov	r2, r3
 8000daa:	68b9      	ldr	r1, [r7, #8]
 8000dac:	483e      	ldr	r0, [pc, #248]	@ (8000ea8 <Handlebmsmessage+0x210>)
 8000dae:	f000 fb85 	bl	80014bc <Unpack_BAT_AFE_Fet_Status_bms_can>
              eth_msg.length = sizeof(master_data.status3);
 8000db2:	4b38      	ldr	r3, [pc, #224]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000db4:	2206      	movs	r2, #6
 8000db6:	605a      	str	r2, [r3, #4]
              memcpy(eth_msg.payload, &master_data.status3, sizeof(master_data.status3));
 8000db8:	4b36      	ldr	r3, [pc, #216]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000dba:	4a37      	ldr	r2, [pc, #220]	@ (8000e98 <Handlebmsmessage+0x200>)
 8000dbc:	3308      	adds	r3, #8
 8000dbe:	3250      	adds	r2, #80	@ 0x50
 8000dc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dc4:	6018      	str	r0, [r3, #0]
 8000dc6:	3304      	adds	r3, #4
 8000dc8:	8019      	strh	r1, [r3, #0]
              break;
 8000dca:	e04e      	b.n	8000e6a <Handlebmsmessage+0x1d2>
	          eth_msg.can_id = BAT_BMS_Charger_Load_Status_CANID;
 8000dcc:	4b31      	ldr	r3, [pc, #196]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000dce:	4a2c      	ldr	r2, [pc, #176]	@ (8000e80 <Handlebmsmessage+0x1e8>)
 8000dd0:	601a      	str	r2, [r3, #0]
              Unpack_BAT_BMS_Charger_Load_Status_bms_can(&master_data.status4, RxData,length);
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	68b9      	ldr	r1, [r7, #8]
 8000dd8:	4834      	ldr	r0, [pc, #208]	@ (8000eac <Handlebmsmessage+0x214>)
 8000dda:	f000 fc8b 	bl	80016f4 <Unpack_BAT_BMS_Charger_Load_Status_bms_can>
              eth_msg.length = sizeof(master_data.status4);
 8000dde:	4b2d      	ldr	r3, [pc, #180]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000de0:	2202      	movs	r2, #2
 8000de2:	605a      	str	r2, [r3, #4]
              memcpy(eth_msg.payload, &master_data.status4, sizeof(master_data.status4));
 8000de4:	4b2c      	ldr	r3, [pc, #176]	@ (8000e98 <Handlebmsmessage+0x200>)
 8000de6:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 8000dea:	4b2a      	ldr	r3, [pc, #168]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000dec:	811a      	strh	r2, [r3, #8]
              break;
 8000dee:	e03c      	b.n	8000e6a <Handlebmsmessage+0x1d2>
	          eth_msg.can_id = BMS_Temp_Sensor_Present_CANID;
 8000df0:	4b28      	ldr	r3, [pc, #160]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000df2:	4a27      	ldr	r2, [pc, #156]	@ (8000e90 <Handlebmsmessage+0x1f8>)
 8000df4:	601a      	str	r2, [r3, #0]
              Unpack_BMS_Temp_Sensor_Present_bms_can(&master_data.status5, RxData, length);
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	68b9      	ldr	r1, [r7, #8]
 8000dfc:	482c      	ldr	r0, [pc, #176]	@ (8000eb0 <Handlebmsmessage+0x218>)
 8000dfe:	f000 fb15 	bl	800142c <Unpack_BMS_Temp_Sensor_Present_bms_can>
              eth_msg.length = sizeof(master_data.status5);
 8000e02:	4b24      	ldr	r3, [pc, #144]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000e04:	2207      	movs	r2, #7
 8000e06:	605a      	str	r2, [r3, #4]
              memcpy(eth_msg.payload, &master_data.status5, sizeof(master_data.status5));
 8000e08:	4b22      	ldr	r3, [pc, #136]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000e0a:	4a23      	ldr	r2, [pc, #140]	@ (8000e98 <Handlebmsmessage+0x200>)
 8000e0c:	3308      	adds	r3, #8
 8000e0e:	3258      	adds	r2, #88	@ 0x58
 8000e10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e14:	6018      	str	r0, [r3, #0]
 8000e16:	3304      	adds	r3, #4
 8000e18:	8019      	strh	r1, [r3, #0]
 8000e1a:	3302      	adds	r3, #2
 8000e1c:	0c0a      	lsrs	r2, r1, #16
 8000e1e:	701a      	strb	r2, [r3, #0]
              break;
 8000e20:	e023      	b.n	8000e6a <Handlebmsmessage+0x1d2>
	          eth_msg.can_id = BAT_GAUGE_OvrVIEW_CANID;
 8000e22:	4b1c      	ldr	r3, [pc, #112]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000e24:	4a15      	ldr	r2, [pc, #84]	@ (8000e7c <Handlebmsmessage+0x1e4>)
 8000e26:	601a      	str	r2, [r3, #0]
              Unpack_BAT_GAUGE_OvrVIEW_bms_can(&master_data.status6, RxData, length);
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	68b9      	ldr	r1, [r7, #8]
 8000e2e:	4821      	ldr	r0, [pc, #132]	@ (8000eb4 <Handlebmsmessage+0x21c>)
 8000e30:	f000 fc82 	bl	8001738 <Unpack_BAT_GAUGE_OvrVIEW_bms_can>
              eth_msg.length = sizeof(master_data.status6);
 8000e34:	4b17      	ldr	r3, [pc, #92]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000e36:	2210      	movs	r2, #16
 8000e38:	605a      	str	r2, [r3, #4]
              memcpy(eth_msg.payload, &master_data.status6, sizeof(master_data.status6));
 8000e3a:	2210      	movs	r2, #16
 8000e3c:	491d      	ldr	r1, [pc, #116]	@ (8000eb4 <Handlebmsmessage+0x21c>)
 8000e3e:	4818      	ldr	r0, [pc, #96]	@ (8000ea0 <Handlebmsmessage+0x208>)
 8000e40:	f007 ff33 	bl	8008caa <memcpy>
              break;
 8000e44:	e011      	b.n	8000e6a <Handlebmsmessage+0x1d2>
	          eth_msg.can_id = BAT_GAUGE_ViT_CANID;
 8000e46:	4b13      	ldr	r3, [pc, #76]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000e48:	4a0b      	ldr	r2, [pc, #44]	@ (8000e78 <Handlebmsmessage+0x1e0>)
 8000e4a:	601a      	str	r2, [r3, #0]
              Unpack_BAT_GAUGE_ViT_bms_can(&master_data.status7, RxData, length);
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	68b9      	ldr	r1, [r7, #8]
 8000e52:	4819      	ldr	r0, [pc, #100]	@ (8000eb8 <Handlebmsmessage+0x220>)
 8000e54:	f000 fcc0 	bl	80017d8 <Unpack_BAT_GAUGE_ViT_bms_can>
              eth_msg.length = sizeof(master_data.status7);
 8000e58:	4b0e      	ldr	r3, [pc, #56]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000e5a:	2230      	movs	r2, #48	@ 0x30
 8000e5c:	605a      	str	r2, [r3, #4]
              memcpy(eth_msg.payload, &master_data.status7, sizeof(master_data.status7));
 8000e5e:	2230      	movs	r2, #48	@ 0x30
 8000e60:	4915      	ldr	r1, [pc, #84]	@ (8000eb8 <Handlebmsmessage+0x220>)
 8000e62:	480f      	ldr	r0, [pc, #60]	@ (8000ea0 <Handlebmsmessage+0x208>)
 8000e64:	f007 ff21 	bl	8008caa <memcpy>
              break;
 8000e68:	bf00      	nop
}
 8000e6a:	bf00      	nop
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	2000023c 	.word	0x2000023c
 8000e78:	001ff820 	.word	0x001ff820
 8000e7c:	001ff810 	.word	0x001ff810
 8000e80:	001ff615 	.word	0x001ff615
 8000e84:	001ff612 	.word	0x001ff612
 8000e88:	001ff611 	.word	0x001ff611
 8000e8c:	001ff310 	.word	0x001ff310
 8000e90:	001ff110 	.word	0x001ff110
 8000e94:	200002e0 	.word	0x200002e0
 8000e98:	20000240 	.word	0x20000240
 8000e9c:	20000248 	.word	0x20000248
 8000ea0:	200002e8 	.word	0x200002e8
 8000ea4:	20000268 	.word	0x20000268
 8000ea8:	20000290 	.word	0x20000290
 8000eac:	20000296 	.word	0x20000296
 8000eb0:	20000298 	.word	0x20000298
 8000eb4:	200002a0 	.word	0x200002a0
 8000eb8:	200002b0 	.word	0x200002b0

08000ebc <sendbmsdata>:

void sendbmsdata(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
    if (Bms_message && getSn_SR(TCP_SOCKET) == SOCK_ESTABLISHED)
 8000ec2:	4b12      	ldr	r3, [pc, #72]	@ (8000f0c <sendbmsdata+0x50>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d01b      	beq.n	8000f02 <sendbmsdata+0x46>
 8000eca:	f44f 7042 	mov.w	r0, #776	@ 0x308
 8000ece:	f002 f8ad 	bl	800302c <WIZCHIP_READ>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b17      	cmp	r3, #23
 8000ed6:	d114      	bne.n	8000f02 <sendbmsdata+0x46>
    {

        int32_t sent = send(TCP_SOCKET, (uint8_t*)&eth_msg ,sizeof(Ethernet_BMS_Packet));
 8000ed8:	2248      	movs	r2, #72	@ 0x48
 8000eda:	490d      	ldr	r1, [pc, #52]	@ (8000f10 <sendbmsdata+0x54>)
 8000edc:	2000      	movs	r0, #0
 8000ede:	f001 fb93 	bl	8002608 <send>
 8000ee2:	6078      	str	r0, [r7, #4]

        if (sent > 0)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	dd08      	ble.n	8000efc <sendbmsdata+0x40>
        {
            HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8000eea:	2101      	movs	r1, #1
 8000eec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ef0:	f004 f8e0 	bl	80050b4 <HAL_GPIO_TogglePin>
            Bms_message = false;
 8000ef4:	4b05      	ldr	r3, [pc, #20]	@ (8000f0c <sendbmsdata+0x50>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	701a      	strb	r2, [r3, #0]
        {
            disconnect(TCP_SOCKET);
        }

    }
}
 8000efa:	e002      	b.n	8000f02 <sendbmsdata+0x46>
            disconnect(TCP_SOCKET);
 8000efc:	2000      	movs	r0, #0
 8000efe:	f001 fb0d 	bl	800251c <disconnect>
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	2000023c 	.word	0x2000023c
 8000f10:	200002e0 	.word	0x200002e0

08000f14 <bytesToFloat>:
EulerAngles last_angles;
EulerAngles txBuffer[MAX_MESSAGES];
uint8_t large_buffer[BUFFER_SIZE];


float bytesToFloat(uint8_t *bytes) {
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]

    float value;
    memcpy(&value, bytes, sizeof(float));
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	60fb      	str	r3, [r7, #12]
    return value;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	ee07 3a90 	vmov	s15, r3
}
 8000f28:	eeb0 0a67 	vmov.f32	s0, s15
 8000f2c:	3714      	adds	r7, #20
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
	...

08000f38 <Handleimumessage>:

void Handleimumessage(uint32_t can_id, uint8_t *RxData){
 8000f38:	b5b0      	push	{r4, r5, r7, lr}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]

    Imu_message = true;
 8000f42:	4bc3      	ldr	r3, [pc, #780]	@ (8001250 <Handleimumessage+0x318>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	701a      	strb	r2, [r3, #0]

	switch(can_id){
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3b11      	subs	r3, #17
 8000f4c:	2b23      	cmp	r3, #35	@ 0x23
 8000f4e:	f200 8186 	bhi.w	800125e <Handleimumessage+0x326>
 8000f52:	a201      	add	r2, pc, #4	@ (adr r2, 8000f58 <Handleimumessage+0x20>)
 8000f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f58:	08001173 	.word	0x08001173
 8000f5c:	08001199 	.word	0x08001199
 8000f60:	080011db 	.word	0x080011db
 8000f64:	0800125f 	.word	0x0800125f
 8000f68:	0800125f 	.word	0x0800125f
 8000f6c:	0800125f 	.word	0x0800125f
 8000f70:	0800125f 	.word	0x0800125f
 8000f74:	0800125f 	.word	0x0800125f
 8000f78:	0800125f 	.word	0x0800125f
 8000f7c:	0800125f 	.word	0x0800125f
 8000f80:	0800125f 	.word	0x0800125f
 8000f84:	0800125f 	.word	0x0800125f
 8000f88:	0800125f 	.word	0x0800125f
 8000f8c:	0800125f 	.word	0x0800125f
 8000f90:	0800125f 	.word	0x0800125f
 8000f94:	0800125f 	.word	0x0800125f
 8000f98:	0800125f 	.word	0x0800125f
 8000f9c:	08000fe9 	.word	0x08000fe9
 8000fa0:	0800125f 	.word	0x0800125f
 8000fa4:	0800125f 	.word	0x0800125f
 8000fa8:	0800125f 	.word	0x0800125f
 8000fac:	0800125f 	.word	0x0800125f
 8000fb0:	0800125f 	.word	0x0800125f
 8000fb4:	0800125f 	.word	0x0800125f
 8000fb8:	0800125f 	.word	0x0800125f
 8000fbc:	0800125f 	.word	0x0800125f
 8000fc0:	0800125f 	.word	0x0800125f
 8000fc4:	0800125f 	.word	0x0800125f
 8000fc8:	0800125f 	.word	0x0800125f
 8000fcc:	0800125f 	.word	0x0800125f
 8000fd0:	0800125f 	.word	0x0800125f
 8000fd4:	0800125f 	.word	0x0800125f
 8000fd8:	0800125f 	.word	0x0800125f
 8000fdc:	0800125f 	.word	0x0800125f
 8000fe0:	0800125f 	.word	0x0800125f
 8000fe4:	080010b9 	.word	0x080010b9

	        case 0x22:
	             int16_t roll_rad = (RxData[0]<<8 ) | RxData[1];
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	b21b      	sxth	r3, r3
 8000fee:	021b      	lsls	r3, r3, #8
 8000ff0:	b21a      	sxth	r2, r3
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	b21b      	sxth	r3, r3
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	833b      	strh	r3, [r7, #24]
	             int16_t pitch_rad= (RxData[2]<<8)| RxData[3];
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	3302      	adds	r3, #2
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	b21b      	sxth	r3, r3
 8001006:	021b      	lsls	r3, r3, #8
 8001008:	b21a      	sxth	r2, r3
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	3303      	adds	r3, #3
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	b21b      	sxth	r3, r3
 8001012:	4313      	orrs	r3, r2
 8001014:	82fb      	strh	r3, [r7, #22]
	             int16_t yaw_rad = (RxData[4]<<8 )| RxData[5];
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	3304      	adds	r3, #4
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	b21b      	sxth	r3, r3
 800101e:	021b      	lsls	r3, r3, #8
 8001020:	b21a      	sxth	r2, r3
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	3305      	adds	r3, #5
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	b21b      	sxth	r3, r3
 800102a:	4313      	orrs	r3, r2
 800102c:	82bb      	strh	r3, [r7, #20]

	              if((roll_rad>=0 && roll_rad<=23040) ||(pitch_rad>=0 && pitch_rad<=23040) || (yaw_rad>=0 && yaw_rad<=23040)){
 800102e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001032:	2b00      	cmp	r3, #0
 8001034:	db04      	blt.n	8001040 <Handleimumessage+0x108>
 8001036:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800103a:	f5b3 4fb4 	cmp.w	r3, #23040	@ 0x5a00
 800103e:	dd13      	ble.n	8001068 <Handleimumessage+0x130>
 8001040:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001044:	2b00      	cmp	r3, #0
 8001046:	db04      	blt.n	8001052 <Handleimumessage+0x11a>
 8001048:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800104c:	f5b3 4fb4 	cmp.w	r3, #23040	@ 0x5a00
 8001050:	dd0a      	ble.n	8001068 <Handleimumessage+0x130>
 8001052:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001056:	2b00      	cmp	r3, #0
 8001058:	f2c0 8100 	blt.w	800125c <Handleimumessage+0x324>
 800105c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001060:	f5b3 4fb4 	cmp.w	r3, #23040	@ 0x5a00
 8001064:	f300 80fa 	bgt.w	800125c <Handleimumessage+0x324>

	             angles.roll= (roll_rad * 0.0078f);
 8001068:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800106c:	ee07 3a90 	vmov	s15, r3
 8001070:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001074:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 8001254 <Handleimumessage+0x31c>
 8001078:	ee67 7a87 	vmul.f32	s15, s15, s14
 800107c:	4b76      	ldr	r3, [pc, #472]	@ (8001258 <Handleimumessage+0x320>)
 800107e:	edc3 7a00 	vstr	s15, [r3]
	             angles.pitch= (pitch_rad * 0.0078f);
 8001082:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001086:	ee07 3a90 	vmov	s15, r3
 800108a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800108e:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 8001254 <Handleimumessage+0x31c>
 8001092:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001096:	4b70      	ldr	r3, [pc, #448]	@ (8001258 <Handleimumessage+0x320>)
 8001098:	edc3 7a01 	vstr	s15, [r3, #4]
	             angles.yaw = (yaw_rad * 0.0078f);
 800109c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80010a0:	ee07 3a90 	vmov	s15, r3
 80010a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010a8:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 8001254 <Handleimumessage+0x31c>
 80010ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010b0:	4b69      	ldr	r3, [pc, #420]	@ (8001258 <Handleimumessage+0x320>)
 80010b2:	edc3 7a02 	vstr	s15, [r3, #8]
	             angles.roll= (roll_rad - 65536)*0.0078;
	             angles.pitch= (pitch_rad - 65536)*0.0078;
	             angles.yaw = (yaw_rad - 65536)*0.0078;

	              }
	             break;
 80010b6:	e0d1      	b.n	800125c <Handleimumessage+0x324>

	        case 0x34:
	             int16_t accX = (RxData[0] << 8) | RxData[1];
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	b21b      	sxth	r3, r3
 80010be:	021b      	lsls	r3, r3, #8
 80010c0:	b21a      	sxth	r2, r3
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	3301      	adds	r3, #1
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	b21b      	sxth	r3, r3
 80010ca:	4313      	orrs	r3, r2
 80010cc:	83fb      	strh	r3, [r7, #30]
	             int16_t accY = (RxData[2] << 8) | RxData[3];
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	3302      	adds	r3, #2
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	b21b      	sxth	r3, r3
 80010d6:	021b      	lsls	r3, r3, #8
 80010d8:	b21a      	sxth	r2, r3
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	3303      	adds	r3, #3
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	b21b      	sxth	r3, r3
 80010e2:	4313      	orrs	r3, r2
 80010e4:	83bb      	strh	r3, [r7, #28]
	             int16_t accZ = (RxData[4] << 8) | RxData[5];
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	3304      	adds	r3, #4
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	b21b      	sxth	r3, r3
 80010ee:	021b      	lsls	r3, r3, #8
 80010f0:	b21a      	sxth	r2, r3
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	3305      	adds	r3, #5
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	b21b      	sxth	r3, r3
 80010fa:	4313      	orrs	r3, r2
 80010fc:	837b      	strh	r3, [r7, #26]

	             angles.accx = accX * 0.0039;
 80010fe:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fa36 	bl	8000574 <__aeabi_i2d>
 8001108:	a34b      	add	r3, pc, #300	@ (adr r3, 8001238 <Handleimumessage+0x300>)
 800110a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110e:	f7ff fa9b 	bl	8000648 <__aeabi_dmul>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	4610      	mov	r0, r2
 8001118:	4619      	mov	r1, r3
 800111a:	f7ff fd6d 	bl	8000bf8 <__aeabi_d2f>
 800111e:	4603      	mov	r3, r0
 8001120:	4a4d      	ldr	r2, [pc, #308]	@ (8001258 <Handleimumessage+0x320>)
 8001122:	60d3      	str	r3, [r2, #12]
	             angles.accy = accY * 0.0039;
 8001124:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fa23 	bl	8000574 <__aeabi_i2d>
 800112e:	a342      	add	r3, pc, #264	@ (adr r3, 8001238 <Handleimumessage+0x300>)
 8001130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001134:	f7ff fa88 	bl	8000648 <__aeabi_dmul>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	4610      	mov	r0, r2
 800113e:	4619      	mov	r1, r3
 8001140:	f7ff fd5a 	bl	8000bf8 <__aeabi_d2f>
 8001144:	4603      	mov	r3, r0
 8001146:	4a44      	ldr	r2, [pc, #272]	@ (8001258 <Handleimumessage+0x320>)
 8001148:	6113      	str	r3, [r2, #16]
	             angles.accz = accZ * 0.0039;
 800114a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff fa10 	bl	8000574 <__aeabi_i2d>
 8001154:	a338      	add	r3, pc, #224	@ (adr r3, 8001238 <Handleimumessage+0x300>)
 8001156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115a:	f7ff fa75 	bl	8000648 <__aeabi_dmul>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	4610      	mov	r0, r2
 8001164:	4619      	mov	r1, r3
 8001166:	f7ff fd47 	bl	8000bf8 <__aeabi_d2f>
 800116a:	4603      	mov	r3, r0
 800116c:	4a3a      	ldr	r2, [pc, #232]	@ (8001258 <Handleimumessage+0x320>)
 800116e:	6153      	str	r3, [r2, #20]

	             break;
 8001170:	e075      	b.n	800125e <Handleimumessage+0x326>

			case 0x11:
			    angles.roll = bytesToFloat(&RxData[4]);
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	3304      	adds	r3, #4
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff fecc 	bl	8000f14 <bytesToFloat>
 800117c:	eef0 7a40 	vmov.f32	s15, s0
 8001180:	4b35      	ldr	r3, [pc, #212]	@ (8001258 <Handleimumessage+0x320>)
 8001182:	edc3 7a00 	vstr	s15, [r3]
			    angles.pitch = bytesToFloat(&RxData[0]);
 8001186:	6838      	ldr	r0, [r7, #0]
 8001188:	f7ff fec4 	bl	8000f14 <bytesToFloat>
 800118c:	eef0 7a40 	vmov.f32	s15, s0
 8001190:	4b31      	ldr	r3, [pc, #196]	@ (8001258 <Handleimumessage+0x320>)
 8001192:	edc3 7a01 	vstr	s15, [r3, #4]
	            break;
 8001196:	e062      	b.n	800125e <Handleimumessage+0x326>

		    case 0x12:
			    angles.yaw = bytesToFloat(&RxData[0]);
 8001198:	6838      	ldr	r0, [r7, #0]
 800119a:	f7ff febb 	bl	8000f14 <bytesToFloat>
 800119e:	eef0 7a40 	vmov.f32	s15, s0
 80011a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001258 <Handleimumessage+0x320>)
 80011a4:	edc3 7a02 	vstr	s15, [r3, #8]
			    float ACCY= bytesToFloat(&RxData[4]);
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	3304      	adds	r3, #4
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff feb1 	bl	8000f14 <bytesToFloat>
 80011b2:	ed87 0a02 	vstr	s0, [r7, #8]
			    angles.accy = ACCY * (-9.81);
 80011b6:	68b8      	ldr	r0, [r7, #8]
 80011b8:	f7ff f9ee 	bl	8000598 <__aeabi_f2d>
 80011bc:	a320      	add	r3, pc, #128	@ (adr r3, 8001240 <Handleimumessage+0x308>)
 80011be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c2:	f7ff fa41 	bl	8000648 <__aeabi_dmul>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	4610      	mov	r0, r2
 80011cc:	4619      	mov	r1, r3
 80011ce:	f7ff fd13 	bl	8000bf8 <__aeabi_d2f>
 80011d2:	4603      	mov	r3, r0
 80011d4:	4a20      	ldr	r2, [pc, #128]	@ (8001258 <Handleimumessage+0x320>)
 80011d6:	6113      	str	r3, [r2, #16]
			    break;
 80011d8:	e041      	b.n	800125e <Handleimumessage+0x326>

			case 0x13:
			    float ACCX=bytesToFloat(&RxData[0]);
 80011da:	6838      	ldr	r0, [r7, #0]
 80011dc:	f7ff fe9a 	bl	8000f14 <bytesToFloat>
 80011e0:	ed87 0a04 	vstr	s0, [r7, #16]
			    angles.accx = ACCX * 9.81;
 80011e4:	6938      	ldr	r0, [r7, #16]
 80011e6:	f7ff f9d7 	bl	8000598 <__aeabi_f2d>
 80011ea:	a317      	add	r3, pc, #92	@ (adr r3, 8001248 <Handleimumessage+0x310>)
 80011ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f0:	f7ff fa2a 	bl	8000648 <__aeabi_dmul>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	4610      	mov	r0, r2
 80011fa:	4619      	mov	r1, r3
 80011fc:	f7ff fcfc 	bl	8000bf8 <__aeabi_d2f>
 8001200:	4603      	mov	r3, r0
 8001202:	4a15      	ldr	r2, [pc, #84]	@ (8001258 <Handleimumessage+0x320>)
 8001204:	60d3      	str	r3, [r2, #12]
			    float ACCZ=bytesToFloat(&RxData[4]);
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	3304      	adds	r3, #4
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff fe82 	bl	8000f14 <bytesToFloat>
 8001210:	ed87 0a03 	vstr	s0, [r7, #12]
			    angles.accz = ACCZ * 9.81;
 8001214:	68f8      	ldr	r0, [r7, #12]
 8001216:	f7ff f9bf 	bl	8000598 <__aeabi_f2d>
 800121a:	a30b      	add	r3, pc, #44	@ (adr r3, 8001248 <Handleimumessage+0x310>)
 800121c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001220:	f7ff fa12 	bl	8000648 <__aeabi_dmul>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4610      	mov	r0, r2
 800122a:	4619      	mov	r1, r3
 800122c:	f7ff fce4 	bl	8000bf8 <__aeabi_d2f>
 8001230:	4603      	mov	r3, r0
 8001232:	4a09      	ldr	r2, [pc, #36]	@ (8001258 <Handleimumessage+0x320>)
 8001234:	6153      	str	r3, [r2, #20]
			    break;
 8001236:	e012      	b.n	800125e <Handleimumessage+0x326>
 8001238:	8e8a71de 	.word	0x8e8a71de
 800123c:	3f6ff2e4 	.word	0x3f6ff2e4
 8001240:	51eb851f 	.word	0x51eb851f
 8001244:	c0239eb8 	.word	0xc0239eb8
 8001248:	51eb851f 	.word	0x51eb851f
 800124c:	40239eb8 	.word	0x40239eb8
 8001250:	20000354 	.word	0x20000354
 8001254:	3bff9724 	.word	0x3bff9724
 8001258:	2000035c 	.word	0x2000035c
	             break;
 800125c:	bf00      	nop

	}

	angles.timestamp = HAL_GetTick();
 800125e:	f002 fc0d 	bl	8003a7c <HAL_GetTick>
 8001262:	4603      	mov	r3, r0
 8001264:	4a07      	ldr	r2, [pc, #28]	@ (8001284 <Handleimumessage+0x34c>)
 8001266:	6193      	str	r3, [r2, #24]
    last_angles = angles;
 8001268:	4a07      	ldr	r2, [pc, #28]	@ (8001288 <Handleimumessage+0x350>)
 800126a:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <Handleimumessage+0x34c>)
 800126c:	4614      	mov	r4, r2
 800126e:	461d      	mov	r5, r3
 8001270:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001272:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001274:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001278:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800127c:	bf00      	nop
 800127e:	3720      	adds	r7, #32
 8001280:	46bd      	mov	sp, r7
 8001282:	bdb0      	pop	{r4, r5, r7, pc}
 8001284:	2000035c 	.word	0x2000035c
 8001288:	20000378 	.word	0x20000378

0800128c <sendimudata>:
void sendimudata(void) {
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0

	uint32_t now = __HAL_TIM_GET_COUNTER(&htim2);
 8001292:	4b36      	ldr	r3, [pc, #216]	@ (800136c <sendimudata+0xe0>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001298:	60fb      	str	r3, [r7, #12]
    if (Imu_message) {
 800129a:	4b35      	ldr	r3, [pc, #212]	@ (8001370 <sendimudata+0xe4>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d05f      	beq.n	8001362 <sendimudata+0xd6>

        if (buffer_index < MAX_MESSAGES) {
 80012a2:	4b34      	ldr	r3, [pc, #208]	@ (8001374 <sendimudata+0xe8>)
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d113      	bne.n	80012d2 <sendimudata+0x46>
            memcpy(&txBuffer[buffer_index], (void*)&last_angles, sizeof(EulerAngles));
 80012aa:	4b32      	ldr	r3, [pc, #200]	@ (8001374 <sendimudata+0xe8>)
 80012ac:	881b      	ldrh	r3, [r3, #0]
 80012ae:	461a      	mov	r2, r3
 80012b0:	4613      	mov	r3, r2
 80012b2:	00db      	lsls	r3, r3, #3
 80012b4:	1a9b      	subs	r3, r3, r2
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	4a2f      	ldr	r2, [pc, #188]	@ (8001378 <sendimudata+0xec>)
 80012ba:	4413      	add	r3, r2
 80012bc:	221c      	movs	r2, #28
 80012be:	492f      	ldr	r1, [pc, #188]	@ (800137c <sendimudata+0xf0>)
 80012c0:	4618      	mov	r0, r3
 80012c2:	f007 fcf2 	bl	8008caa <memcpy>
            buffer_index++;
 80012c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001374 <sendimudata+0xe8>)
 80012c8:	881b      	ldrh	r3, [r3, #0]
 80012ca:	3301      	adds	r3, #1
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	4b29      	ldr	r3, [pc, #164]	@ (8001374 <sendimudata+0xe8>)
 80012d0:	801a      	strh	r2, [r3, #0]
        }

        if (buffer_index >= MAX_MESSAGES) {
 80012d2:	4b28      	ldr	r3, [pc, #160]	@ (8001374 <sendimudata+0xe8>)
 80012d4:	881b      	ldrh	r3, [r3, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d040      	beq.n	800135c <sendimudata+0xd0>
            total_size = buffer_index * sizeof(EulerAngles);
 80012da:	4b26      	ldr	r3, [pc, #152]	@ (8001374 <sendimudata+0xe8>)
 80012dc:	881b      	ldrh	r3, [r3, #0]
 80012de:	461a      	mov	r2, r3
 80012e0:	4613      	mov	r3, r2
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	1a9b      	subs	r3, r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b25      	ldr	r3, [pc, #148]	@ (8001380 <sendimudata+0xf4>)
 80012ec:	601a      	str	r2, [r3, #0]
            memcpy(large_buffer, txBuffer, total_size);
 80012ee:	4b24      	ldr	r3, [pc, #144]	@ (8001380 <sendimudata+0xf4>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	461a      	mov	r2, r3
 80012f4:	4920      	ldr	r1, [pc, #128]	@ (8001378 <sendimudata+0xec>)
 80012f6:	4823      	ldr	r0, [pc, #140]	@ (8001384 <sendimudata+0xf8>)
 80012f8:	f007 fcd7 	bl	8008caa <memcpy>

        if (now - last_imu_time >= 1 && getSn_SR(TCP_SOCKET) == SOCK_ESTABLISHED) {
 80012fc:	4b22      	ldr	r3, [pc, #136]	@ (8001388 <sendimudata+0xfc>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	68fa      	ldr	r2, [r7, #12]
 8001302:	429a      	cmp	r2, r3
 8001304:	d027      	beq.n	8001356 <sendimudata+0xca>
 8001306:	f44f 7042 	mov.w	r0, #776	@ 0x308
 800130a:	f001 fe8f 	bl	800302c <WIZCHIP_READ>
 800130e:	4603      	mov	r3, r0
 8001310:	2b17      	cmp	r3, #23
 8001312:	d120      	bne.n	8001356 <sendimudata+0xca>
            int32_t sent = send(TCP_SOCKET, large_buffer, total_size);
 8001314:	4b1a      	ldr	r3, [pc, #104]	@ (8001380 <sendimudata+0xf4>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	b29b      	uxth	r3, r3
 800131a:	461a      	mov	r2, r3
 800131c:	4919      	ldr	r1, [pc, #100]	@ (8001384 <sendimudata+0xf8>)
 800131e:	2000      	movs	r0, #0
 8001320:	f001 f972 	bl	8002608 <send>
 8001324:	60b8      	str	r0, [r7, #8]

        if (sent > 0) {
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	2b00      	cmp	r3, #0
 800132a:	dd14      	ble.n	8001356 <sendimudata+0xca>
           	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 800132c:	2101      	movs	r1, #1
 800132e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001332:	f003 febf 	bl	80050b4 <HAL_GPIO_TogglePin>
           	last_imu_time = now;
 8001336:	4a14      	ldr	r2, [pc, #80]	@ (8001388 <sendimudata+0xfc>)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	6013      	str	r3, [r2, #0]
           	uint16_t rec = getSn_RX_RSR(TCP_SOCKET);
 800133c:	2000      	movs	r0, #0
 800133e:	f002 f818 	bl	8003372 <getSn_RX_RSR>
 8001342:	4603      	mov	r3, r0
 8001344:	80fb      	strh	r3, [r7, #6]
        if(rec >=2){
 8001346:	88fb      	ldrh	r3, [r7, #6]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d904      	bls.n	8001356 <sendimudata+0xca>
           	recv(TCP_SOCKET,accept,sizeof(accept));
 800134c:	2228      	movs	r2, #40	@ 0x28
 800134e:	490f      	ldr	r1, [pc, #60]	@ (800138c <sendimudata+0x100>)
 8001350:	2000      	movs	r0, #0
 8001352:	f001 fa51 	bl	80027f8 <recv>
           	}
           }
         }
            buffer_index = 0;
 8001356:	4b07      	ldr	r3, [pc, #28]	@ (8001374 <sendimudata+0xe8>)
 8001358:	2200      	movs	r2, #0
 800135a:	801a      	strh	r2, [r3, #0]
        }
            Imu_message = false;
 800135c:	4b04      	ldr	r3, [pc, #16]	@ (8001370 <sendimudata+0xe4>)
 800135e:	2200      	movs	r2, #0
 8001360:	701a      	strb	r2, [r3, #0]
    }

}
 8001362:	bf00      	nop
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000554 	.word	0x20000554
 8001370:	20000354 	.word	0x20000354
 8001374:	20000356 	.word	0x20000356
 8001378:	20000394 	.word	0x20000394
 800137c:	20000378 	.word	0x20000378
 8001380:	20000350 	.word	0x20000350
 8001384:	200003b0 	.word	0x200003b0
 8001388:	20000358 	.word	0x20000358
 800138c:	20000328 	.word	0x20000328

08001390 <Unpack_APP_flag_error_bms_can>:
}

#endif // BMS_CAN_USE_CANSTRUCT

uint32_t Unpack_APP_flag_error_bms_can(APP_flag_error_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	4613      	mov	r3, r2
 800139c:	71fb      	strb	r3, [r7, #7]
  (void)dlc_;
  _m->APP_flag_undervolt = (_d[0] & (0x01U));
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	701a      	strb	r2, [r3, #0]
  _m->APP_flag_overvolt = (_d[1] & (0x01U));
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	3301      	adds	r3, #1
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	705a      	strb	r2, [r3, #1]
  _m->APP_flag_scd_error = (_d[2] & (0x01U));
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	3302      	adds	r3, #2
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	709a      	strb	r2, [r3, #2]
  _m->APP_flag_highCurrent = (_d[3] & (0x01U));
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	3303      	adds	r3, #3
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	70da      	strb	r2, [r3, #3]
  _m->APP_flag_bat_lowTemp = (_d[4] & (0x01U));
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	3304      	adds	r3, #4
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	711a      	strb	r2, [r3, #4]
  _m->APP_flag_bat_highTemp = (_d[5] & (0x01U));
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	3305      	adds	r3, #5
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	715a      	strb	r2, [r3, #5]
  _m->APP_flag_bms_lowTemp = (_d[6] & (0x01U));
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	3306      	adds	r3, #6
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	b2da      	uxtb	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	719a      	strb	r2, [r3, #6]
  _m->APP_flag_bms_highTemp = (_d[7] & (0x01U));
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	3307      	adds	r3, #7
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	b2da      	uxtb	r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	71da      	strb	r2, [r3, #7]
  _m->mon1.frame_cnt++;

  FMon_APP_flag_error_bms_can(&_m->mon1, APP_flag_error_CANID);
#endif // BMS_CAN_USE_DIAG_MONITORS

  return APP_flag_error_CANID;
 800141c:	f44f 7388 	mov.w	r3, #272	@ 0x110
}
 8001420:	4618      	mov	r0, r3
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <Unpack_BMS_Temp_Sensor_Present_bms_can>:
}

#endif // BMS_CAN_USE_CANSTRUCT

uint32_t Unpack_BMS_Temp_Sensor_Present_bms_can(BMS_Temp_Sensor_Present_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	4613      	mov	r3, r2
 8001438:	71fb      	strb	r3, [r7, #7]
  (void)dlc_;
  _m->BMS_ambient_temp_sensor_present = (_d[0] & (0x01U));
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	b2da      	uxtb	r2, r3
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	701a      	strb	r2, [r3, #0]
  _m->BMS_Fet_temp_sensor_present = (_d[1] & (0x01U));
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	3301      	adds	r3, #1
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	b2da      	uxtb	r2, r3
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	705a      	strb	r2, [r3, #1]
  _m->BMS_ext_adc1_temp_sensor_present = (_d[2] & (0x01U));
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	3302      	adds	r3, #2
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	b2da      	uxtb	r2, r3
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	709a      	strb	r2, [r3, #2]
  _m->BMS_ext_adc2_temp_sensor_present = (_d[3] & (0x01U));
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	3303      	adds	r3, #3
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	b2da      	uxtb	r2, r3
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	70da      	strb	r2, [r3, #3]
  _m->BMS_afe_ts1_temp_sensor_present = (_d[4] & (0x01U));
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	3304      	adds	r3, #4
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	b2da      	uxtb	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	711a      	strb	r2, [r3, #4]
  _m->BMS_afe_ts3_temp_sensor_present = (_d[5] & (0x01U));
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	3305      	adds	r3, #5
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	b2da      	uxtb	r2, r3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	715a      	strb	r2, [r3, #5]
  _m->BMS_gauge_temp_sensor_present = (_d[6] & (0x01U));
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	3306      	adds	r3, #6
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	719a      	strb	r2, [r3, #6]
  _m->mon1.frame_cnt++;

  FMon_BMS_Temp_Sensor_Present_bms_can(&_m->mon1, BMS_Temp_Sensor_Present_CANID);
#endif // BMS_CAN_USE_DIAG_MONITORS

  return BMS_Temp_Sensor_Present_CANID;
 80014a8:	4b03      	ldr	r3, [pc, #12]	@ (80014b8 <Unpack_BMS_Temp_Sensor_Present_bms_can+0x8c>)
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3714      	adds	r7, #20
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	001ff110 	.word	0x001ff110

080014bc <Unpack_BAT_AFE_Fet_Status_bms_can>:
}

#endif // BMS_CAN_USE_CANSTRUCT

uint32_t Unpack_BAT_AFE_Fet_Status_bms_can(BAT_AFE_Fet_Status_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	4613      	mov	r3, r2
 80014c8:	71fb      	strb	r3, [r7, #7]
  (void)dlc_;
  _m->BAT_afe_chg = (_d[0] & (0x01U));
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	701a      	strb	r2, [r3, #0]
  _m->BAT_afe_dsg = (_d[1] & (0x01U));
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	3301      	adds	r3, #1
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	b2da      	uxtb	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	705a      	strb	r2, [r3, #1]
  _m->BAT_afe_pchg = (_d[2] & (0x01U));
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	3302      	adds	r3, #2
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	709a      	strb	r2, [r3, #2]
  _m->BAT_afe_pdsg = (_d[3] & (0x01U));
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	3303      	adds	r3, #3
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	b2da      	uxtb	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	70da      	strb	r2, [r3, #3]
  _m->BAT_afe_dchg = (_d[4] & (0x01U));
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	3304      	adds	r3, #4
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	b2da      	uxtb	r2, r3
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	711a      	strb	r2, [r3, #4]
  _m->BAT_afe_ddsg = (_d[5] & (0x01U));
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	3305      	adds	r3, #5
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	b2da      	uxtb	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	715a      	strb	r2, [r3, #5]
  _m->mon1.frame_cnt++;

  FMon_BAT_AFE_Fet_Status_bms_can(&_m->mon1, BAT_AFE_Fet_Status_CANID);
#endif // BMS_CAN_USE_DIAG_MONITORS

  return BAT_AFE_Fet_Status_CANID;
 8001528:	4b03      	ldr	r3, [pc, #12]	@ (8001538 <Unpack_BAT_AFE_Fet_Status_bms_can+0x7c>)
}
 800152a:	4618      	mov	r0, r3
 800152c:	3714      	adds	r7, #20
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	001ff310 	.word	0x001ff310
 800153c:	00000000 	.word	0x00000000

08001540 <Unpack_BAT_BMS_ExtTemp_bms_can>:
}

#endif // BMS_CAN_USE_CANSTRUCT

uint32_t Unpack_BAT_BMS_ExtTemp_bms_can(BAT_BMS_ExtTemp_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	4613      	mov	r3, r2
 800154c:	71fb      	strb	r3, [r7, #7]
  (void)dlc_;
  _m->BAT_bms_afe_temp1_ro = ((_d[1] & (0xFFU)) << 8) | (_d[0] & (0xFFU));
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	3301      	adds	r3, #1
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	021b      	lsls	r3, r3, #8
 8001556:	b29b      	uxth	r3, r3
 8001558:	68ba      	ldr	r2, [r7, #8]
 800155a:	7812      	ldrb	r2, [r2, #0]
 800155c:	4313      	orrs	r3, r2
 800155e:	b29a      	uxth	r2, r3
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	801a      	strh	r2, [r3, #0]
#ifdef BMS_CAN_USE_SIGFLOAT
  _m->BAT_bms_afe_temp1_phys = (sigfloat_t)(BMS_CAN_BAT_bms_afe_temp1_ro_fromS(_m->BAT_bms_afe_temp1_ro));
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	881b      	ldrh	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff f803 	bl	8000574 <__aeabi_i2d>
 800156e:	a32d      	add	r3, pc, #180	@ (adr r3, 8001624 <Unpack_BAT_BMS_ExtTemp_bms_can+0xe4>)
 8001570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001574:	f7ff f868 	bl	8000648 <__aeabi_dmul>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4610      	mov	r0, r2
 800157e:	4619      	mov	r1, r3
 8001580:	f04f 0200 	mov.w	r2, #0
 8001584:	f04f 0300 	mov.w	r3, #0
 8001588:	f7fe fea8 	bl	80002dc <__adddf3>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	68f9      	ldr	r1, [r7, #12]
 8001592:	e9c1 2302 	strd	r2, r3, [r1, #8]
#endif // BMS_CAN_USE_SIGFLOAT

  _m->BAT_bms_afe_temp2_ro = ((_d[3] & (0xFFU)) << 8) | (_d[2] & (0xFFU));
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	3303      	adds	r3, #3
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	021b      	lsls	r3, r3, #8
 800159e:	b29b      	uxth	r3, r3
 80015a0:	68ba      	ldr	r2, [r7, #8]
 80015a2:	3202      	adds	r2, #2
 80015a4:	7812      	ldrb	r2, [r2, #0]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	821a      	strh	r2, [r3, #16]
#ifdef BMS_CAN_USE_SIGFLOAT
  _m->BAT_bms_afe_temp2_phys = (sigfloat_t)(BMS_CAN_BAT_bms_afe_temp2_ro_fromS(_m->BAT_bms_afe_temp2_ro));
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	8a1b      	ldrh	r3, [r3, #16]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7fe ffde 	bl	8000574 <__aeabi_i2d>
 80015b8:	a31a      	add	r3, pc, #104	@ (adr r3, 8001624 <Unpack_BAT_BMS_ExtTemp_bms_can+0xe4>)
 80015ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015be:	f7ff f843 	bl	8000648 <__aeabi_dmul>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4610      	mov	r0, r2
 80015c8:	4619      	mov	r1, r3
 80015ca:	f04f 0200 	mov.w	r2, #0
 80015ce:	f04f 0300 	mov.w	r3, #0
 80015d2:	f7fe fe83 	bl	80002dc <__adddf3>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	68f9      	ldr	r1, [r7, #12]
 80015dc:	e9c1 2306 	strd	r2, r3, [r1, #24]
#endif // BMS_CAN_USE_SIGFLOAT

  _m->BAT_bms_ext_temp1 = ((_d[5] & (0xFFU)) << 8) | (_d[4] & (0xFFU));
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	3305      	adds	r3, #5
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	021b      	lsls	r3, r3, #8
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	68ba      	ldr	r2, [r7, #8]
 80015ec:	3204      	adds	r2, #4
 80015ee:	7812      	ldrb	r2, [r2, #0]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	b21a      	sxth	r2, r3
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	841a      	strh	r2, [r3, #32]
  _m->BAT_bms_ext_temp2 = ((_d[7] & (0xFFU)) << 8) | (_d[6] & (0xFFU));
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	3307      	adds	r3, #7
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	021b      	lsls	r3, r3, #8
 8001602:	b29b      	uxth	r3, r3
 8001604:	68ba      	ldr	r2, [r7, #8]
 8001606:	3206      	adds	r2, #6
 8001608:	7812      	ldrb	r2, [r2, #0]
 800160a:	4313      	orrs	r3, r2
 800160c:	b29b      	uxth	r3, r3
 800160e:	b21a      	sxth	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	845a      	strh	r2, [r3, #34]	@ 0x22
  _m->mon1.frame_cnt++;

  FMon_BAT_BMS_ExtTemp_bms_can(&_m->mon1, BAT_BMS_ExtTemp_CANID);
#endif // BMS_CAN_USE_DIAG_MONITORS

  return BAT_BMS_ExtTemp_CANID;
 8001614:	4b02      	ldr	r3, [pc, #8]	@ (8001620 <Unpack_BAT_BMS_ExtTemp_bms_can+0xe0>)
}
 8001616:	4618      	mov	r0, r3
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	001ff611 	.word	0x001ff611
 8001624:	47ae147b 	.word	0x47ae147b
 8001628:	3f847ae1 	.word	0x3f847ae1
 800162c:	00000000 	.word	0x00000000

08001630 <Unpack_BAT_BMS_IntTemp_bms_can>:
}

#endif // BMS_CAN_USE_CANSTRUCT

uint32_t Unpack_BAT_BMS_IntTemp_bms_can(BAT_BMS_IntTemp_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	4613      	mov	r3, r2
 800163c:	71fb      	strb	r3, [r7, #7]
  (void)dlc_;
  _m->BAT_bms_ambient_temp_ro = ((_d[1] & (0xFFU)) << 8) | (_d[0] & (0xFFU));
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	3301      	adds	r3, #1
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	021b      	lsls	r3, r3, #8
 8001646:	b29b      	uxth	r3, r3
 8001648:	68ba      	ldr	r2, [r7, #8]
 800164a:	7812      	ldrb	r2, [r2, #0]
 800164c:	4313      	orrs	r3, r2
 800164e:	b29b      	uxth	r3, r3
 8001650:	b21a      	sxth	r2, r3
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	801a      	strh	r2, [r3, #0]
#ifdef BMS_CAN_USE_SIGFLOAT
  _m->BAT_bms_ambient_temp_phys = (sigfloat_t)(BMS_CAN_BAT_bms_ambient_temp_ro_fromS(_m->BAT_bms_ambient_temp_ro));
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f9b3 3000 	ldrsh.w	r3, [r3]
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe ff89 	bl	8000574 <__aeabi_i2d>
 8001662:	a322      	add	r3, pc, #136	@ (adr r3, 80016ec <Unpack_BAT_BMS_IntTemp_bms_can+0xbc>)
 8001664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001668:	f7fe ffee 	bl	8000648 <__aeabi_dmul>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	4610      	mov	r0, r2
 8001672:	4619      	mov	r1, r3
 8001674:	f04f 0200 	mov.w	r2, #0
 8001678:	f04f 0300 	mov.w	r3, #0
 800167c:	f7fe fe2e 	bl	80002dc <__adddf3>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	68f9      	ldr	r1, [r7, #12]
 8001686:	e9c1 2302 	strd	r2, r3, [r1, #8]
#endif // BMS_CAN_USE_SIGFLOAT

  _m->BAT_bms_fets_temp_ro = ((_d[3] & (0xFFU)) << 8) | (_d[2] & (0xFFU));
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	3303      	adds	r3, #3
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	021b      	lsls	r3, r3, #8
 8001692:	b29b      	uxth	r3, r3
 8001694:	68ba      	ldr	r2, [r7, #8]
 8001696:	3202      	adds	r2, #2
 8001698:	7812      	ldrb	r2, [r2, #0]
 800169a:	4313      	orrs	r3, r2
 800169c:	b29b      	uxth	r3, r3
 800169e:	b21a      	sxth	r2, r3
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	821a      	strh	r2, [r3, #16]
#ifdef BMS_CAN_USE_SIGFLOAT
  _m->BAT_bms_fets_temp_phys = (sigfloat_t)(BMS_CAN_BAT_bms_fets_temp_ro_fromS(_m->BAT_bms_fets_temp_ro));
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7fe ff62 	bl	8000574 <__aeabi_i2d>
 80016b0:	a30e      	add	r3, pc, #56	@ (adr r3, 80016ec <Unpack_BAT_BMS_IntTemp_bms_can+0xbc>)
 80016b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b6:	f7fe ffc7 	bl	8000648 <__aeabi_dmul>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4610      	mov	r0, r2
 80016c0:	4619      	mov	r1, r3
 80016c2:	f04f 0200 	mov.w	r2, #0
 80016c6:	f04f 0300 	mov.w	r3, #0
 80016ca:	f7fe fe07 	bl	80002dc <__adddf3>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	68f9      	ldr	r1, [r7, #12]
 80016d4:	e9c1 2306 	strd	r2, r3, [r1, #24]
  _m->mon1.frame_cnt++;

  FMon_BAT_BMS_IntTemp_bms_can(&_m->mon1, BAT_BMS_IntTemp_CANID);
#endif // BMS_CAN_USE_DIAG_MONITORS

  return BAT_BMS_IntTemp_CANID;
 80016d8:	4b03      	ldr	r3, [pc, #12]	@ (80016e8 <Unpack_BAT_BMS_IntTemp_bms_can+0xb8>)
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	f3af 8000 	nop.w
 80016e8:	001ff612 	.word	0x001ff612
 80016ec:	47ae147b 	.word	0x47ae147b
 80016f0:	3f847ae1 	.word	0x3f847ae1

080016f4 <Unpack_BAT_BMS_Charger_Load_Status_bms_can>:
}

#endif // BMS_CAN_USE_CANSTRUCT

uint32_t Unpack_BAT_BMS_Charger_Load_Status_bms_can(BAT_BMS_Charger_Load_Status_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	4613      	mov	r3, r2
 8001700:	71fb      	strb	r3, [r7, #7]
  (void)dlc_;
  _m->APP_bms_load_detect = (_d[0] & (0x01U));
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	b2da      	uxtb	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	701a      	strb	r2, [r3, #0]
  _m->APP_bms_charger_detect = (_d[1] & (0x01U));
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	3301      	adds	r3, #1
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	b2da      	uxtb	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	705a      	strb	r2, [r3, #1]
  _m->mon1.frame_cnt++;

  FMon_BAT_BMS_Charger_Load_Status_bms_can(&_m->mon1, BAT_BMS_Charger_Load_Status_CANID);
#endif // BMS_CAN_USE_DIAG_MONITORS

  return BAT_BMS_Charger_Load_Status_CANID;
 8001720:	4b03      	ldr	r3, [pc, #12]	@ (8001730 <Unpack_BAT_BMS_Charger_Load_Status_bms_can+0x3c>)
}
 8001722:	4618      	mov	r0, r3
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	001ff615 	.word	0x001ff615
 8001734:	00000000 	.word	0x00000000

08001738 <Unpack_BAT_GAUGE_OvrVIEW_bms_can>:
}

#endif // BMS_CAN_USE_CANSTRUCT

uint32_t Unpack_BAT_GAUGE_OvrVIEW_bms_can(BAT_GAUGE_OvrVIEW_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	4613      	mov	r3, r2
 8001744:	71fb      	strb	r3, [r7, #7]
  (void)dlc_;
  _m->BAT_gauge_SoC = (_d[0] & (0xFFU));
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	781a      	ldrb	r2, [r3, #0]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	701a      	strb	r2, [r3, #0]
  _m->BAT_gaige_SoH = (_d[1] & (0xFFU));
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	3301      	adds	r3, #1
 8001752:	781a      	ldrb	r2, [r3, #0]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	705a      	strb	r2, [r3, #1]
  _m->BAT_gauge_cycleCount = ((_d[3] & (0xFFU)) << 8) | (_d[2] & (0xFFU));
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	3303      	adds	r3, #3
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	021b      	lsls	r3, r3, #8
 8001760:	b29b      	uxth	r3, r3
 8001762:	68ba      	ldr	r2, [r7, #8]
 8001764:	3202      	adds	r2, #2
 8001766:	7812      	ldrb	r2, [r2, #0]
 8001768:	4313      	orrs	r3, r2
 800176a:	b29a      	uxth	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	805a      	strh	r2, [r3, #2]
  _m->BAT_gauge_remainingCap_ro = ((_d[5] & (0xFFU)) << 8) | (_d[4] & (0xFFU));
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	3305      	adds	r3, #5
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	021b      	lsls	r3, r3, #8
 8001778:	b29b      	uxth	r3, r3
 800177a:	68ba      	ldr	r2, [r7, #8]
 800177c:	3204      	adds	r2, #4
 800177e:	7812      	ldrb	r2, [r2, #0]
 8001780:	4313      	orrs	r3, r2
 8001782:	b29a      	uxth	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	809a      	strh	r2, [r3, #4]
#ifdef BMS_CAN_USE_SIGFLOAT
  _m->BAT_gauge_remainingCap_phys = (sigfloat_t)(BMS_CAN_BAT_gauge_remainingCap_ro_fromS(_m->BAT_gauge_remainingCap_ro));
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	889b      	ldrh	r3, [r3, #4]
 800178c:	4618      	mov	r0, r3
 800178e:	f7fe fef1 	bl	8000574 <__aeabi_i2d>
 8001792:	a30e      	add	r3, pc, #56	@ (adr r3, 80017cc <Unpack_BAT_GAUGE_OvrVIEW_bms_can+0x94>)
 8001794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001798:	f7fe ff56 	bl	8000648 <__aeabi_dmul>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4610      	mov	r0, r2
 80017a2:	4619      	mov	r1, r3
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	f04f 0300 	mov.w	r3, #0
 80017ac:	f7fe fd96 	bl	80002dc <__adddf3>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	68f9      	ldr	r1, [r7, #12]
 80017b6:	e9c1 2302 	strd	r2, r3, [r1, #8]
  _m->mon1.frame_cnt++;

  FMon_BAT_GAUGE_OvrVIEW_bms_can(&_m->mon1, BAT_GAUGE_OvrVIEW_CANID);
#endif // BMS_CAN_USE_DIAG_MONITORS

  return BAT_GAUGE_OvrVIEW_CANID;
 80017ba:	4b03      	ldr	r3, [pc, #12]	@ (80017c8 <Unpack_BAT_GAUGE_OvrVIEW_bms_can+0x90>)
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	f3af 8000 	nop.w
 80017c8:	001ff810 	.word	0x001ff810
 80017cc:	d2f1a9fc 	.word	0xd2f1a9fc
 80017d0:	3f50624d 	.word	0x3f50624d
 80017d4:	00000000 	.word	0x00000000

080017d8 <Unpack_BAT_GAUGE_ViT_bms_can>:
}

#endif // BMS_CAN_USE_CANSTRUCT

uint32_t Unpack_BAT_GAUGE_ViT_bms_can(BAT_GAUGE_ViT_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	4613      	mov	r3, r2
 80017e4:	71fb      	strb	r3, [r7, #7]
  (void)dlc_;
  _m->BAT_gauge_vPack_ro = ((_d[1] & (0xFFU)) << 8) | (_d[0] & (0xFFU));
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	3301      	adds	r3, #1
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	021b      	lsls	r3, r3, #8
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	68ba      	ldr	r2, [r7, #8]
 80017f2:	7812      	ldrb	r2, [r2, #0]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	801a      	strh	r2, [r3, #0]
#ifdef BMS_CAN_USE_SIGFLOAT
  _m->BAT_gauge_vPack_phys = (sigfloat_t)(BMS_CAN_BAT_gauge_vPack_ro_fromS(_m->BAT_gauge_vPack_ro));
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	881b      	ldrh	r3, [r3, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f7fe feb7 	bl	8000574 <__aeabi_i2d>
 8001806:	a333      	add	r3, pc, #204	@ (adr r3, 80018d4 <Unpack_BAT_GAUGE_ViT_bms_can+0xfc>)
 8001808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180c:	f7fe ff1c 	bl	8000648 <__aeabi_dmul>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	4610      	mov	r0, r2
 8001816:	4619      	mov	r1, r3
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	f7fe fd5c 	bl	80002dc <__adddf3>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	68f9      	ldr	r1, [r7, #12]
 800182a:	e9c1 2302 	strd	r2, r3, [r1, #8]
#endif // BMS_CAN_USE_SIGFLOAT

  _m->BAT_gauge_iPack_ro = ((_d[3] & (0xFFU)) << 8) | (_d[2] & (0xFFU));
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	3303      	adds	r3, #3
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	021b      	lsls	r3, r3, #8
 8001836:	b29b      	uxth	r3, r3
 8001838:	68ba      	ldr	r2, [r7, #8]
 800183a:	3202      	adds	r2, #2
 800183c:	7812      	ldrb	r2, [r2, #0]
 800183e:	4313      	orrs	r3, r2
 8001840:	b29b      	uxth	r3, r3
 8001842:	b21a      	sxth	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	821a      	strh	r2, [r3, #16]
#ifdef BMS_CAN_USE_SIGFLOAT
  _m->BAT_gauge_iPack_phys = (sigfloat_t)(BMS_CAN_BAT_gauge_iPack_ro_fromS(_m->BAT_gauge_iPack_ro));
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800184e:	4618      	mov	r0, r3
 8001850:	f7fe fe90 	bl	8000574 <__aeabi_i2d>
 8001854:	a321      	add	r3, pc, #132	@ (adr r3, 80018dc <Unpack_BAT_GAUGE_ViT_bms_can+0x104>)
 8001856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185a:	f7fe fef5 	bl	8000648 <__aeabi_dmul>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	4610      	mov	r0, r2
 8001864:	4619      	mov	r1, r3
 8001866:	f04f 0200 	mov.w	r2, #0
 800186a:	f04f 0300 	mov.w	r3, #0
 800186e:	f7fe fd35 	bl	80002dc <__adddf3>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	68f9      	ldr	r1, [r7, #12]
 8001878:	e9c1 2306 	strd	r2, r3, [r1, #24]
#endif // BMS_CAN_USE_SIGFLOAT

  _m->BAT_gauge_tPack_ro = ((_d[5] & (0xFFU)) << 8) | (_d[4] & (0xFFU));
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	3305      	adds	r3, #5
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	021b      	lsls	r3, r3, #8
 8001884:	b29b      	uxth	r3, r3
 8001886:	68ba      	ldr	r2, [r7, #8]
 8001888:	3204      	adds	r2, #4
 800188a:	7812      	ldrb	r2, [r2, #0]
 800188c:	4313      	orrs	r3, r2
 800188e:	b29a      	uxth	r2, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	841a      	strh	r2, [r3, #32]
#ifdef BMS_CAN_USE_SIGFLOAT
  _m->BAT_gauge_tPack_phys = (sigfloat_t)(BMS_CAN_BAT_gauge_tPack_ro_fromS(_m->BAT_gauge_tPack_ro));
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	8c1b      	ldrh	r3, [r3, #32]
 8001898:	4618      	mov	r0, r3
 800189a:	f7fe fe6b 	bl	8000574 <__aeabi_i2d>
 800189e:	a30f      	add	r3, pc, #60	@ (adr r3, 80018dc <Unpack_BAT_GAUGE_ViT_bms_can+0x104>)
 80018a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a4:	f7fe fed0 	bl	8000648 <__aeabi_dmul>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	4610      	mov	r0, r2
 80018ae:	4619      	mov	r1, r3
 80018b0:	f04f 0200 	mov.w	r2, #0
 80018b4:	f04f 0300 	mov.w	r3, #0
 80018b8:	f7fe fd10 	bl	80002dc <__adddf3>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	68f9      	ldr	r1, [r7, #12]
 80018c2:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
  _m->mon1.frame_cnt++;

  FMon_BAT_GAUGE_ViT_bms_can(&_m->mon1, BAT_GAUGE_ViT_CANID);
#endif // BMS_CAN_USE_DIAG_MONITORS

  return BAT_GAUGE_ViT_CANID;
 80018c6:	4b02      	ldr	r3, [pc, #8]	@ (80018d0 <Unpack_BAT_GAUGE_ViT_bms_can+0xf8>)
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	001ff820 	.word	0x001ff820
 80018d4:	d2f1a9fc 	.word	0xd2f1a9fc
 80018d8:	3f50624d 	.word	0x3f50624d
 80018dc:	47ae147b 	.word	0x47ae147b
 80018e0:	3f847ae1 	.word	0x3f847ae1

080018e4 <HAL_FDCAN_RxFifo0Callback>:
/* USER CODE BEGIN 0 */

typedef uint8_t Commandtype;
Commandtype received_cmd;

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]

	if(HAL_FDCAN_GetRxMessage(hfdcan,FDCAN_RX_FIFO0,&RxHeader,RxData)== HAL_OK){
 80018ee:	4b2b      	ldr	r3, [pc, #172]	@ (800199c <HAL_FDCAN_RxFifo0Callback+0xb8>)
 80018f0:	4a2b      	ldr	r2, [pc, #172]	@ (80019a0 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 80018f2:	2140      	movs	r1, #64	@ 0x40
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f002 fe4d 	bl	8004594 <HAL_FDCAN_GetRxMessage>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d148      	bne.n	8001992 <HAL_FDCAN_RxFifo0Callback+0xae>


		switch(RxHeader.Identifier){
 8001900:	4b27      	ldr	r3, [pc, #156]	@ (80019a0 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a27      	ldr	r2, [pc, #156]	@ (80019a4 <HAL_FDCAN_RxFifo0Callback+0xc0>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d032      	beq.n	8001970 <HAL_FDCAN_RxFifo0Callback+0x8c>
 800190a:	4a26      	ldr	r2, [pc, #152]	@ (80019a4 <HAL_FDCAN_RxFifo0Callback+0xc0>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d840      	bhi.n	8001992 <HAL_FDCAN_RxFifo0Callback+0xae>
 8001910:	4a25      	ldr	r2, [pc, #148]	@ (80019a8 <HAL_FDCAN_RxFifo0Callback+0xc4>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d02c      	beq.n	8001970 <HAL_FDCAN_RxFifo0Callback+0x8c>
 8001916:	4a24      	ldr	r2, [pc, #144]	@ (80019a8 <HAL_FDCAN_RxFifo0Callback+0xc4>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d83a      	bhi.n	8001992 <HAL_FDCAN_RxFifo0Callback+0xae>
 800191c:	4a23      	ldr	r2, [pc, #140]	@ (80019ac <HAL_FDCAN_RxFifo0Callback+0xc8>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d026      	beq.n	8001970 <HAL_FDCAN_RxFifo0Callback+0x8c>
 8001922:	4a22      	ldr	r2, [pc, #136]	@ (80019ac <HAL_FDCAN_RxFifo0Callback+0xc8>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d834      	bhi.n	8001992 <HAL_FDCAN_RxFifo0Callback+0xae>
 8001928:	4a21      	ldr	r2, [pc, #132]	@ (80019b0 <HAL_FDCAN_RxFifo0Callback+0xcc>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d831      	bhi.n	8001992 <HAL_FDCAN_RxFifo0Callback+0xae>
 800192e:	4a21      	ldr	r2, [pc, #132]	@ (80019b4 <HAL_FDCAN_RxFifo0Callback+0xd0>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d81d      	bhi.n	8001970 <HAL_FDCAN_RxFifo0Callback+0x8c>
 8001934:	4a20      	ldr	r2, [pc, #128]	@ (80019b8 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d01a      	beq.n	8001970 <HAL_FDCAN_RxFifo0Callback+0x8c>
 800193a:	4a1f      	ldr	r2, [pc, #124]	@ (80019b8 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d828      	bhi.n	8001992 <HAL_FDCAN_RxFifo0Callback+0xae>
 8001940:	4a1e      	ldr	r2, [pc, #120]	@ (80019bc <HAL_FDCAN_RxFifo0Callback+0xd8>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d014      	beq.n	8001970 <HAL_FDCAN_RxFifo0Callback+0x8c>
 8001946:	4a1d      	ldr	r2, [pc, #116]	@ (80019bc <HAL_FDCAN_RxFifo0Callback+0xd8>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d822      	bhi.n	8001992 <HAL_FDCAN_RxFifo0Callback+0xae>
 800194c:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 8001950:	d00e      	beq.n	8001970 <HAL_FDCAN_RxFifo0Callback+0x8c>
 8001952:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 8001956:	d81c      	bhi.n	8001992 <HAL_FDCAN_RxFifo0Callback+0xae>
 8001958:	2b34      	cmp	r3, #52	@ 0x34
 800195a:	d013      	beq.n	8001984 <HAL_FDCAN_RxFifo0Callback+0xa0>
 800195c:	2b34      	cmp	r3, #52	@ 0x34
 800195e:	d818      	bhi.n	8001992 <HAL_FDCAN_RxFifo0Callback+0xae>
 8001960:	2b13      	cmp	r3, #19
 8001962:	d802      	bhi.n	800196a <HAL_FDCAN_RxFifo0Callback+0x86>
 8001964:	2b11      	cmp	r3, #17
 8001966:	d20d      	bcs.n	8001984 <HAL_FDCAN_RxFifo0Callback+0xa0>
			Handleimumessage(RxHeader.Identifier, RxData);
			break;
	    }
	}

}
 8001968:	e013      	b.n	8001992 <HAL_FDCAN_RxFifo0Callback+0xae>
		switch(RxHeader.Identifier){
 800196a:	2b22      	cmp	r3, #34	@ 0x22
 800196c:	d00a      	beq.n	8001984 <HAL_FDCAN_RxFifo0Callback+0xa0>
}
 800196e:	e010      	b.n	8001992 <HAL_FDCAN_RxFifo0Callback+0xae>
        	Handlebmsmessage(RxHeader.Identifier, RxData, RxHeader.DataLength);
 8001970:	4b0b      	ldr	r3, [pc, #44]	@ (80019a0 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a0a      	ldr	r2, [pc, #40]	@ (80019a0 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001976:	68d2      	ldr	r2, [r2, #12]
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	4908      	ldr	r1, [pc, #32]	@ (800199c <HAL_FDCAN_RxFifo0Callback+0xb8>)
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff f98b 	bl	8000c98 <Handlebmsmessage>
            break;
 8001982:	e006      	b.n	8001992 <HAL_FDCAN_RxFifo0Callback+0xae>
			Handleimumessage(RxHeader.Identifier, RxData);
 8001984:	4b06      	ldr	r3, [pc, #24]	@ (80019a0 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4904      	ldr	r1, [pc, #16]	@ (800199c <HAL_FDCAN_RxFifo0Callback+0xb8>)
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff fad4 	bl	8000f38 <Handleimumessage>
			break;
 8001990:	bf00      	nop
}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	200005a0 	.word	0x200005a0
 80019a0:	200005a8 	.word	0x200005a8
 80019a4:	001ff820 	.word	0x001ff820
 80019a8:	001ff810 	.word	0x001ff810
 80019ac:	001ff615 	.word	0x001ff615
 80019b0:	001ff612 	.word	0x001ff612
 80019b4:	001ff610 	.word	0x001ff610
 80019b8:	001ff310 	.word	0x001ff310
 80019bc:	001ff110 	.word	0x001ff110

080019c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019c6:	f001 fff4 	bl	80039b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019ca:	f000 f8f3 	bl	8001bb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019ce:	f000 fad3 	bl	8001f78 <MX_GPIO_Init>
  MX_DMA_Init();
 80019d2:	f000 fa9f 	bl	8001f14 <MX_DMA_Init>
  MX_FDCAN1_Init();
 80019d6:	f000 f939 	bl	8001c4c <MX_FDCAN1_Init>
  MX_SPI2_Init();
 80019da:	f000 fa0f 	bl	8001dfc <MX_SPI2_Init>
  MX_TIM2_Init();
 80019de:	f000 fa4b 	bl	8001e78 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80019e2:	486b      	ldr	r0, [pc, #428]	@ (8001b90 <main+0x1d0>)
 80019e4:	f006 f812 	bl	8007a0c <HAL_TIM_Base_Start_IT>
  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK){
 80019e8:	486a      	ldr	r0, [pc, #424]	@ (8001b94 <main+0x1d4>)
 80019ea:	f002 fdab 	bl	8004544 <HAL_FDCAN_Start>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <main+0x38>

	  Error_Handler();
 80019f4:	f000 fb2e 	bl	8002054 <Error_Handler>

  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 80019f8:	2200      	movs	r2, #0
 80019fa:	2101      	movs	r1, #1
 80019fc:	4865      	ldr	r0, [pc, #404]	@ (8001b94 <main+0x1d4>)
 80019fe:	f002 fed1 	bl	80047a4 <HAL_FDCAN_ActivateNotification>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <main+0x4c>
         Error_Handler();
 8001a08:	f000 fb24 	bl	8002054 <Error_Handler>
     }

 W5500_Init();
 8001a0c:	f001 facc 	bl	8002fa8 <W5500_Init>
 wizchip_setnetinfo(&netInfo);
 8001a10:	4861      	ldr	r0, [pc, #388]	@ (8001b98 <main+0x1d8>)
 8001a12:	f001 ff65 	bl	80038e0 <wizchip_setnetinfo>

 uint8_t SOCKET = socket(TCP_SOCKET,Sn_MR_TCP,LOCAL_PORT,0);
 8001a16:	2300      	movs	r3, #0
 8001a18:	f241 52b3 	movw	r2, #5555	@ 0x15b3
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	2000      	movs	r0, #0
 8001a20:	f000 fb1e 	bl	8002060 <socket>
 8001a24:	4603      	mov	r3, r0
 8001a26:	73fb      	strb	r3, [r7, #15]
 if(SOCKET == TCP_SOCKET){
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d11b      	bne.n	8001a66 <main+0xa6>

	  int mode = getSn_MR(TCP_SOCKET);
 8001a2e:	2008      	movs	r0, #8
 8001a30:	f001 fafc 	bl	800302c <WIZCHIP_READ>
 8001a34:	4603      	mov	r3, r0
 8001a36:	60bb      	str	r3, [r7, #8]
	  mode |= Sn_MR_ND;
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	f043 0320 	orr.w	r3, r3, #32
 8001a3e:	60bb      	str	r3, [r7, #8]
	  setSn_MR(TCP_SOCKET, mode);
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	4619      	mov	r1, r3
 8001a46:	2008      	movs	r0, #8
 8001a48:	f001 fb3c 	bl	80030c4 <WIZCHIP_WRITE>
	  connect(TCP_SOCKET, S_ADDR, S_PORT);
 8001a4c:	4b53      	ldr	r3, [pc, #332]	@ (8001b9c <main+0x1dc>)
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	461a      	mov	r2, r3
 8001a52:	4953      	ldr	r1, [pc, #332]	@ (8001ba0 <main+0x1e0>)
 8001a54:	2000      	movs	r0, #0
 8001a56:	f000 fc85 	bl	8002364 <connect>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0,GPIO_PIN_SET);
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a62:	f003 fb0f 	bl	8005084 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch (getSn_SR(TCP_SOCKET)) {
 8001a66:	f44f 7042 	mov.w	r0, #776	@ 0x308
 8001a6a:	f001 fadf 	bl	800302c <WIZCHIP_READ>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b1c      	cmp	r3, #28
 8001a72:	d05d      	beq.n	8001b30 <main+0x170>
 8001a74:	2b1c      	cmp	r3, #28
 8001a76:	dc77      	bgt.n	8001b68 <main+0x1a8>
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d05d      	beq.n	8001b38 <main+0x178>
 8001a7c:	2b17      	cmp	r3, #23
 8001a7e:	d173      	bne.n	8001b68 <main+0x1a8>
	          case SOCK_ESTABLISHED:
	              if (getSn_IR(TCP_SOCKET) & Sn_IR_CON) {
 8001a80:	f44f 7002 	mov.w	r0, #520	@ 0x208
 8001a84:	f001 fad2 	bl	800302c <WIZCHIP_READ>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d00a      	beq.n	8001aa8 <main+0xe8>
	                  setSn_IR(TCP_SOCKET, Sn_IR_CON);
 8001a92:	2101      	movs	r1, #1
 8001a94:	f44f 7002 	mov.w	r0, #520	@ 0x208
 8001a98:	f001 fb14 	bl	80030c4 <WIZCHIP_WRITE>
	                  Newmessage1 = false;
 8001a9c:	4b41      	ldr	r3, [pc, #260]	@ (8001ba4 <main+0x1e4>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	701a      	strb	r2, [r3, #0]
	                  Nextmessage1 = false;
 8001aa2:	4b41      	ldr	r3, [pc, #260]	@ (8001ba8 <main+0x1e8>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	701a      	strb	r2, [r3, #0]
	              }

	              uint16_t rxSize = getSn_RX_RSR(TCP_SOCKET);
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	f001 fc62 	bl	8003372 <getSn_RX_RSR>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	80fb      	strh	r3, [r7, #6]
	              if (rxSize >= sizeof(Commandtype)) {
 8001ab2:	88fb      	ldrh	r3, [r7, #6]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d027      	beq.n	8001b08 <main+0x148>
	                  int32_t received = recv(TCP_SOCKET, &received_cmd, sizeof(received_cmd));
 8001ab8:	2201      	movs	r2, #1
 8001aba:	493c      	ldr	r1, [pc, #240]	@ (8001bac <main+0x1ec>)
 8001abc:	2000      	movs	r0, #0
 8001abe:	f000 fe9b 	bl	80027f8 <recv>
 8001ac2:	6038      	str	r0, [r7, #0]
	                  if (received == sizeof(received_cmd)) {
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d11e      	bne.n	8001b08 <main+0x148>

	                      if (received_cmd == Send_IMU_Data) {
 8001aca:	4b38      	ldr	r3, [pc, #224]	@ (8001bac <main+0x1ec>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d10b      	bne.n	8001aea <main+0x12a>
	                          Newmessage1 = true;
 8001ad2:	4b34      	ldr	r3, [pc, #208]	@ (8001ba4 <main+0x1e4>)
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	701a      	strb	r2, [r3, #0]
	                          Nextmessage1 = false;
 8001ad8:	4b33      	ldr	r3, [pc, #204]	@ (8001ba8 <main+0x1e8>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	701a      	strb	r2, [r3, #0]
	                          HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8001ade:	2101      	movs	r1, #1
 8001ae0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ae4:	f003 fae6 	bl	80050b4 <HAL_GPIO_TogglePin>
 8001ae8:	e00e      	b.n	8001b08 <main+0x148>
	                      } else if (received_cmd == Send_BMS_Data) {
 8001aea:	4b30      	ldr	r3, [pc, #192]	@ (8001bac <main+0x1ec>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d10a      	bne.n	8001b08 <main+0x148>
	                          Newmessage1 = false;
 8001af2:	4b2c      	ldr	r3, [pc, #176]	@ (8001ba4 <main+0x1e4>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	701a      	strb	r2, [r3, #0]
	                          Nextmessage1 = true;
 8001af8:	4b2b      	ldr	r3, [pc, #172]	@ (8001ba8 <main+0x1e8>)
 8001afa:	2201      	movs	r2, #1
 8001afc:	701a      	strb	r2, [r3, #0]
	                          HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8001afe:	2101      	movs	r1, #1
 8001b00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b04:	f003 fad6 	bl	80050b4 <HAL_GPIO_TogglePin>
	                      }
	                  }
	              }
	              if (Newmessage1 && getSn_SR(TCP_SOCKET) == SOCK_ESTABLISHED){
 8001b08:	4b26      	ldr	r3, [pc, #152]	@ (8001ba4 <main+0x1e4>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d008      	beq.n	8001b22 <main+0x162>
 8001b10:	f44f 7042 	mov.w	r0, #776	@ 0x308
 8001b14:	f001 fa8a 	bl	800302c <WIZCHIP_READ>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b17      	cmp	r3, #23
 8001b1c:	d101      	bne.n	8001b22 <main+0x162>
	                  sendimudata();
 8001b1e:	f7ff fbb5 	bl	800128c <sendimudata>
	              }
	              if (Nextmessage1) {
 8001b22:	4b21      	ldr	r3, [pc, #132]	@ (8001ba8 <main+0x1e8>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d01b      	beq.n	8001b62 <main+0x1a2>
	                  sendbmsdata();
 8001b2a:	f7ff f9c7 	bl	8000ebc <sendbmsdata>
	              }
	              break;
 8001b2e:	e018      	b.n	8001b62 <main+0x1a2>

	          case SOCK_CLOSE_WAIT:
	              disconnect(TCP_SOCKET);
 8001b30:	2000      	movs	r0, #0
 8001b32:	f000 fcf3 	bl	800251c <disconnect>

	              break;
 8001b36:	e017      	b.n	8001b68 <main+0x1a8>

	          case SOCK_CLOSED:
	              if (socket(TCP_SOCKET, Sn_MR_TCP, LOCAL_PORT, 0) == TCP_SOCKET) {
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f241 52b3 	movw	r2, #5555	@ 0x15b3
 8001b3e:	2101      	movs	r1, #1
 8001b40:	2000      	movs	r0, #0
 8001b42:	f000 fa8d 	bl	8002060 <socket>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d10c      	bne.n	8001b66 <main+0x1a6>
	                  connect(TCP_SOCKET, S_ADDR, S_PORT);
 8001b4c:	4b13      	ldr	r3, [pc, #76]	@ (8001b9c <main+0x1dc>)
 8001b4e:	881b      	ldrh	r3, [r3, #0]
 8001b50:	461a      	mov	r2, r3
 8001b52:	4913      	ldr	r1, [pc, #76]	@ (8001ba0 <main+0x1e0>)
 8001b54:	2000      	movs	r0, #0
 8001b56:	f000 fc05 	bl	8002364 <connect>
	                  total_size = 0;
 8001b5a:	4b15      	ldr	r3, [pc, #84]	@ (8001bb0 <main+0x1f0>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]

	              }
	              break;
 8001b60:	e001      	b.n	8001b66 <main+0x1a6>
	              break;
 8001b62:	bf00      	nop
 8001b64:	e000      	b.n	8001b68 <main+0x1a8>
	              break;
 8001b66:	bf00      	nop
	           }
	      if (getSn_IR(TCP_SOCKET) & Sn_IR_TIMEOUT) {
 8001b68:	f44f 7002 	mov.w	r0, #520	@ 0x208
 8001b6c:	f001 fa5e 	bl	800302c <WIZCHIP_READ>
 8001b70:	4603      	mov	r3, r0
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f43f af75 	beq.w	8001a66 <main+0xa6>
	          setSn_IR(TCP_SOCKET, Sn_IR_TIMEOUT);
 8001b7c:	2108      	movs	r1, #8
 8001b7e:	f44f 7002 	mov.w	r0, #520	@ 0x208
 8001b82:	f001 fa9f 	bl	80030c4 <WIZCHIP_WRITE>
	          disconnect(TCP_SOCKET);
 8001b86:	2000      	movs	r0, #0
 8001b88:	f000 fcc8 	bl	800251c <disconnect>
	  switch (getSn_SR(TCP_SOCKET)) {
 8001b8c:	e76b      	b.n	8001a66 <main+0xa6>
 8001b8e:	bf00      	nop
 8001b90:	20000554 	.word	0x20000554
 8001b94:	200003cc 	.word	0x200003cc
 8001b98:	20000010 	.word	0x20000010
 8001b9c:	20000004 	.word	0x20000004
 8001ba0:	20000000 	.word	0x20000000
 8001ba4:	200005d0 	.word	0x200005d0
 8001ba8:	200005d1 	.word	0x200005d1
 8001bac:	200005d2 	.word	0x200005d2
 8001bb0:	20000350 	.word	0x20000350

08001bb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b094      	sub	sp, #80	@ 0x50
 8001bb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bba:	f107 0318 	add.w	r3, r7, #24
 8001bbe:	2238      	movs	r2, #56	@ 0x38
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f006 fff1 	bl	8008baa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bc8:	1d3b      	adds	r3, r7, #4
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	605a      	str	r2, [r3, #4]
 8001bd0:	609a      	str	r2, [r3, #8]
 8001bd2:	60da      	str	r2, [r3, #12]
 8001bd4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	f003 fa86 	bl	80050e8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001be0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001be4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001be6:	2340      	movs	r3, #64	@ 0x40
 8001be8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bea:	2302      	movs	r3, #2
 8001bec:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001bf6:	2314      	movs	r3, #20
 8001bf8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001bfe:	2304      	movs	r3, #4
 8001c00:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c02:	2302      	movs	r3, #2
 8001c04:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c06:	f107 0318 	add.w	r3, r7, #24
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f003 fb20 	bl	8005250 <HAL_RCC_OscConfig>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001c16:	f000 fa1d 	bl	8002054 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c1a:	230f      	movs	r3, #15
 8001c1c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c22:	2300      	movs	r3, #0
 8001c24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c26:	2300      	movs	r3, #0
 8001c28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c2e:	1d3b      	adds	r3, r7, #4
 8001c30:	2104      	movs	r1, #4
 8001c32:	4618      	mov	r0, r3
 8001c34:	f003 fe1e 	bl	8005874 <HAL_RCC_ClockConfig>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001c3e:	f000 fa09 	bl	8002054 <Error_Handler>
  }
}
 8001c42:	bf00      	nop
 8001c44:	3750      	adds	r7, #80	@ 0x50
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
	...

08001c4c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08c      	sub	sp, #48	@ 0x30
 8001c50:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001c52:	4b61      	ldr	r3, [pc, #388]	@ (8001dd8 <MX_FDCAN1_Init+0x18c>)
 8001c54:	4a61      	ldr	r2, [pc, #388]	@ (8001ddc <MX_FDCAN1_Init+0x190>)
 8001c56:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001c58:	4b5f      	ldr	r3, [pc, #380]	@ (8001dd8 <MX_FDCAN1_Init+0x18c>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001c5e:	4b5e      	ldr	r3, [pc, #376]	@ (8001dd8 <MX_FDCAN1_Init+0x18c>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001c64:	4b5c      	ldr	r3, [pc, #368]	@ (8001dd8 <MX_FDCAN1_Init+0x18c>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8001c6a:	4b5b      	ldr	r3, [pc, #364]	@ (8001dd8 <MX_FDCAN1_Init+0x18c>)
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001c70:	4b59      	ldr	r3, [pc, #356]	@ (8001dd8 <MX_FDCAN1_Init+0x18c>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001c76:	4b58      	ldr	r3, [pc, #352]	@ (8001dd8 <MX_FDCAN1_Init+0x18c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8001c7c:	4b56      	ldr	r3, [pc, #344]	@ (8001dd8 <MX_FDCAN1_Init+0x18c>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 16;
 8001c82:	4b55      	ldr	r3, [pc, #340]	@ (8001dd8 <MX_FDCAN1_Init+0x18c>)
 8001c84:	2210      	movs	r2, #16
 8001c86:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 63;
 8001c88:	4b53      	ldr	r3, [pc, #332]	@ (8001dd8 <MX_FDCAN1_Init+0x18c>)
 8001c8a:	223f      	movs	r2, #63	@ 0x3f
 8001c8c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 16;
 8001c8e:	4b52      	ldr	r3, [pc, #328]	@ (8001dd8 <MX_FDCAN1_Init+0x18c>)
 8001c90:	2210      	movs	r2, #16
 8001c92:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 8001c94:	4b50      	ldr	r3, [pc, #320]	@ (8001dd8 <MX_FDCAN1_Init+0x18c>)
 8001c96:	2202      	movs	r2, #2
 8001c98:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8001c9a:	4b4f      	ldr	r3, [pc, #316]	@ (8001dd8 <MX_FDCAN1_Init+0x18c>)
 8001c9c:	2204      	movs	r2, #4
 8001c9e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 8001ca0:	4b4d      	ldr	r3, [pc, #308]	@ (8001dd8 <MX_FDCAN1_Init+0x18c>)
 8001ca2:	2205      	movs	r2, #5
 8001ca4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 8001ca6:	4b4c      	ldr	r3, [pc, #304]	@ (8001dd8 <MX_FDCAN1_Init+0x18c>)
 8001ca8:	2205      	movs	r2, #5
 8001caa:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 3;
 8001cac:	4b4a      	ldr	r3, [pc, #296]	@ (8001dd8 <MX_FDCAN1_Init+0x18c>)
 8001cae:	2203      	movs	r2, #3
 8001cb0:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 4;
 8001cb2:	4b49      	ldr	r3, [pc, #292]	@ (8001dd8 <MX_FDCAN1_Init+0x18c>)
 8001cb4:	2204      	movs	r2, #4
 8001cb6:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001cb8:	4b47      	ldr	r3, [pc, #284]	@ (8001dd8 <MX_FDCAN1_Init+0x18c>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001cbe:	4846      	ldr	r0, [pc, #280]	@ (8001dd8 <MX_FDCAN1_Init+0x18c>)
 8001cc0:	f002 fa8c 	bl	80041dc <HAL_FDCAN_Init>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8001cca:	f000 f9c3 	bl	8002054 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef s;

        s.FilterConfig = FDCAN_FILTER_TO_RXFIFO0 ;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	627b      	str	r3, [r7, #36]	@ 0x24
        s.FilterType = FDCAN_FILTER_DUAL ;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	623b      	str	r3, [r7, #32]
        s.IdType= FDCAN_STANDARD_ID;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61bb      	str	r3, [r7, #24]
        s.FilterID1 = 0x110;
 8001cda:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001cde:	62bb      	str	r3, [r7, #40]	@ 0x28
        s.FilterID2 = 0x11;
 8001ce0:	2311      	movs	r3, #17
 8001ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        s.FilterIndex = 0;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	61fb      	str	r3, [r7, #28]
    if(HAL_FDCAN_ConfigFilter(&hfdcan1,&s)!= HAL_OK){
 8001ce8:	f107 0318 	add.w	r3, r7, #24
 8001cec:	4619      	mov	r1, r3
 8001cee:	483a      	ldr	r0, [pc, #232]	@ (8001dd8 <MX_FDCAN1_Init+0x18c>)
 8001cf0:	f002 fbce 	bl	8004490 <HAL_FDCAN_ConfigFilter>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_FDCAN1_Init+0xb2>

         Error_Handler();
 8001cfa:	f000 f9ab 	bl	8002054 <Error_Handler>

        }
        s.FilterID1 = 0x12;
 8001cfe:	2312      	movs	r3, #18
 8001d00:	62bb      	str	r3, [r7, #40]	@ 0x28
        s.FilterID2 = 0x13;
 8001d02:	2313      	movs	r3, #19
 8001d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
        s.FilterIndex = 1;
 8001d06:	2301      	movs	r3, #1
 8001d08:	61fb      	str	r3, [r7, #28]

    if(HAL_FDCAN_ConfigFilter(&hfdcan1,&s)!= HAL_OK){
 8001d0a:	f107 0318 	add.w	r3, r7, #24
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4831      	ldr	r0, [pc, #196]	@ (8001dd8 <MX_FDCAN1_Init+0x18c>)
 8001d12:	f002 fbbd 	bl	8004490 <HAL_FDCAN_ConfigFilter>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_FDCAN1_Init+0xd4>

      	 Error_Handler();
 8001d1c:	f000 f99a 	bl	8002054 <Error_Handler>
        }
        s.FilterID1 = 0x22;
 8001d20:	2322      	movs	r3, #34	@ 0x22
 8001d22:	62bb      	str	r3, [r7, #40]	@ 0x28
        s.FilterID2 = 0x34;
 8001d24:	2334      	movs	r3, #52	@ 0x34
 8001d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
        s.FilterIndex = 2;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	61fb      	str	r3, [r7, #28]

    if(HAL_FDCAN_ConfigFilter(&hfdcan1,&s)!= HAL_OK){
 8001d2c:	f107 0318 	add.w	r3, r7, #24
 8001d30:	4619      	mov	r1, r3
 8001d32:	4829      	ldr	r0, [pc, #164]	@ (8001dd8 <MX_FDCAN1_Init+0x18c>)
 8001d34:	f002 fbac 	bl	8004490 <HAL_FDCAN_ConfigFilter>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_FDCAN1_Init+0xf6>

  	     Error_Handler();
 8001d3e:	f000 f989 	bl	8002054 <Error_Handler>
        }
  FDCAN_FilterTypeDef Filterconfigure;

        Filterconfigure.FilterConfig = FDCAN_FILTER_TO_RXFIFO0 ;
 8001d42:	2301      	movs	r3, #1
 8001d44:	60fb      	str	r3, [r7, #12]
        Filterconfigure.FilterType = FDCAN_FILTER_DUAL;
 8001d46:	2301      	movs	r3, #1
 8001d48:	60bb      	str	r3, [r7, #8]
        Filterconfigure.IdType= FDCAN_EXTENDED_ID;
 8001d4a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d4e:	603b      	str	r3, [r7, #0]
        Filterconfigure.FilterIndex = 0;
 8001d50:	2300      	movs	r3, #0
 8001d52:	607b      	str	r3, [r7, #4]
        Filterconfigure.FilterID1 = 0x1FF310;
 8001d54:	4b22      	ldr	r3, [pc, #136]	@ (8001de0 <MX_FDCAN1_Init+0x194>)
 8001d56:	613b      	str	r3, [r7, #16]
        Filterconfigure.FilterID2 = 0x1FF310;
 8001d58:	4b21      	ldr	r3, [pc, #132]	@ (8001de0 <MX_FDCAN1_Init+0x194>)
 8001d5a:	617b      	str	r3, [r7, #20]
     if(HAL_FDCAN_ConfigFilter(&hfdcan1,&Filterconfigure)!= HAL_OK){
 8001d5c:	463b      	mov	r3, r7
 8001d5e:	4619      	mov	r1, r3
 8001d60:	481d      	ldr	r0, [pc, #116]	@ (8001dd8 <MX_FDCAN1_Init+0x18c>)
 8001d62:	f002 fb95 	bl	8004490 <HAL_FDCAN_ConfigFilter>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_FDCAN1_Init+0x124>

         Error_Handler();
 8001d6c:	f000 f972 	bl	8002054 <Error_Handler>

        }

        Filterconfigure.FilterIndex = 1;
 8001d70:	2301      	movs	r3, #1
 8001d72:	607b      	str	r3, [r7, #4]
        Filterconfigure.FilterID1 = 0x1FF615;
 8001d74:	4b1b      	ldr	r3, [pc, #108]	@ (8001de4 <MX_FDCAN1_Init+0x198>)
 8001d76:	613b      	str	r3, [r7, #16]
        Filterconfigure.FilterID2 = 0x1FF110;
 8001d78:	4b1b      	ldr	r3, [pc, #108]	@ (8001de8 <MX_FDCAN1_Init+0x19c>)
 8001d7a:	617b      	str	r3, [r7, #20]
     if(HAL_FDCAN_ConfigFilter(&hfdcan1,&Filterconfigure)!= HAL_OK){
 8001d7c:	463b      	mov	r3, r7
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4815      	ldr	r0, [pc, #84]	@ (8001dd8 <MX_FDCAN1_Init+0x18c>)
 8001d82:	f002 fb85 	bl	8004490 <HAL_FDCAN_ConfigFilter>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_FDCAN1_Init+0x144>

         Error_Handler();
 8001d8c:	f000 f962 	bl	8002054 <Error_Handler>

        }

        Filterconfigure.FilterIndex = 2;
 8001d90:	2302      	movs	r3, #2
 8001d92:	607b      	str	r3, [r7, #4]
        Filterconfigure.FilterID1 = 0x1FF611;
 8001d94:	4b15      	ldr	r3, [pc, #84]	@ (8001dec <MX_FDCAN1_Init+0x1a0>)
 8001d96:	613b      	str	r3, [r7, #16]
        Filterconfigure.FilterID2 = 0x1FF612;
 8001d98:	4b15      	ldr	r3, [pc, #84]	@ (8001df0 <MX_FDCAN1_Init+0x1a4>)
 8001d9a:	617b      	str	r3, [r7, #20]
     if(HAL_FDCAN_ConfigFilter(&hfdcan1,&Filterconfigure)!= HAL_OK){
 8001d9c:	463b      	mov	r3, r7
 8001d9e:	4619      	mov	r1, r3
 8001da0:	480d      	ldr	r0, [pc, #52]	@ (8001dd8 <MX_FDCAN1_Init+0x18c>)
 8001da2:	f002 fb75 	bl	8004490 <HAL_FDCAN_ConfigFilter>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_FDCAN1_Init+0x164>

         Error_Handler();
 8001dac:	f000 f952 	bl	8002054 <Error_Handler>

        }

        Filterconfigure.FilterIndex = 3;
 8001db0:	2303      	movs	r3, #3
 8001db2:	607b      	str	r3, [r7, #4]
        Filterconfigure.FilterID1 = 0x1FF810;
 8001db4:	4b0f      	ldr	r3, [pc, #60]	@ (8001df4 <MX_FDCAN1_Init+0x1a8>)
 8001db6:	613b      	str	r3, [r7, #16]
        Filterconfigure.FilterID2 = 0x1FF820;
 8001db8:	4b0f      	ldr	r3, [pc, #60]	@ (8001df8 <MX_FDCAN1_Init+0x1ac>)
 8001dba:	617b      	str	r3, [r7, #20]
     if(HAL_FDCAN_ConfigFilter(&hfdcan1,&Filterconfigure)!= HAL_OK){
 8001dbc:	463b      	mov	r3, r7
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4805      	ldr	r0, [pc, #20]	@ (8001dd8 <MX_FDCAN1_Init+0x18c>)
 8001dc2:	f002 fb65 	bl	8004490 <HAL_FDCAN_ConfigFilter>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <MX_FDCAN1_Init+0x184>

      	 Error_Handler();
 8001dcc:	f000 f942 	bl	8002054 <Error_Handler>

        }
  /* USER CODE END FDCAN1_Init 2 */

}
 8001dd0:	bf00      	nop
 8001dd2:	3730      	adds	r7, #48	@ 0x30
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	200003cc 	.word	0x200003cc
 8001ddc:	40006400 	.word	0x40006400
 8001de0:	001ff310 	.word	0x001ff310
 8001de4:	001ff615 	.word	0x001ff615
 8001de8:	001ff110 	.word	0x001ff110
 8001dec:	001ff611 	.word	0x001ff611
 8001df0:	001ff612 	.word	0x001ff612
 8001df4:	001ff810 	.word	0x001ff810
 8001df8:	001ff820 	.word	0x001ff820

08001dfc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001e00:	4b1b      	ldr	r3, [pc, #108]	@ (8001e70 <MX_SPI2_Init+0x74>)
 8001e02:	4a1c      	ldr	r2, [pc, #112]	@ (8001e74 <MX_SPI2_Init+0x78>)
 8001e04:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e06:	4b1a      	ldr	r3, [pc, #104]	@ (8001e70 <MX_SPI2_Init+0x74>)
 8001e08:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001e0c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e0e:	4b18      	ldr	r3, [pc, #96]	@ (8001e70 <MX_SPI2_Init+0x74>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e14:	4b16      	ldr	r3, [pc, #88]	@ (8001e70 <MX_SPI2_Init+0x74>)
 8001e16:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001e1a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e1c:	4b14      	ldr	r3, [pc, #80]	@ (8001e70 <MX_SPI2_Init+0x74>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e22:	4b13      	ldr	r3, [pc, #76]	@ (8001e70 <MX_SPI2_Init+0x74>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e28:	4b11      	ldr	r3, [pc, #68]	@ (8001e70 <MX_SPI2_Init+0x74>)
 8001e2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e2e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001e30:	4b0f      	ldr	r3, [pc, #60]	@ (8001e70 <MX_SPI2_Init+0x74>)
 8001e32:	2208      	movs	r2, #8
 8001e34:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e36:	4b0e      	ldr	r3, [pc, #56]	@ (8001e70 <MX_SPI2_Init+0x74>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e70 <MX_SPI2_Init+0x74>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e42:	4b0b      	ldr	r3, [pc, #44]	@ (8001e70 <MX_SPI2_Init+0x74>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001e48:	4b09      	ldr	r3, [pc, #36]	@ (8001e70 <MX_SPI2_Init+0x74>)
 8001e4a:	2207      	movs	r2, #7
 8001e4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e4e:	4b08      	ldr	r3, [pc, #32]	@ (8001e70 <MX_SPI2_Init+0x74>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001e54:	4b06      	ldr	r3, [pc, #24]	@ (8001e70 <MX_SPI2_Init+0x74>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e5a:	4805      	ldr	r0, [pc, #20]	@ (8001e70 <MX_SPI2_Init+0x74>)
 8001e5c:	f004 f93c 	bl	80060d8 <HAL_SPI_Init>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001e66:	f000 f8f5 	bl	8002054 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20000430 	.word	0x20000430
 8001e74:	40003800 	.word	0x40003800

08001e78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b088      	sub	sp, #32
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e7e:	f107 0310 	add.w	r3, r7, #16
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	605a      	str	r2, [r3, #4]
 8001e88:	609a      	str	r2, [r3, #8]
 8001e8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e8c:	1d3b      	adds	r3, r7, #4
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	605a      	str	r2, [r3, #4]
 8001e94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e96:	4b1e      	ldr	r3, [pc, #120]	@ (8001f10 <MX_TIM2_Init+0x98>)
 8001e98:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e9c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 159;
 8001e9e:	4b1c      	ldr	r3, [pc, #112]	@ (8001f10 <MX_TIM2_Init+0x98>)
 8001ea0:	229f      	movs	r2, #159	@ 0x9f
 8001ea2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f10 <MX_TIM2_Init+0x98>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001eaa:	4b19      	ldr	r3, [pc, #100]	@ (8001f10 <MX_TIM2_Init+0x98>)
 8001eac:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001eb0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eb2:	4b17      	ldr	r3, [pc, #92]	@ (8001f10 <MX_TIM2_Init+0x98>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eb8:	4b15      	ldr	r3, [pc, #84]	@ (8001f10 <MX_TIM2_Init+0x98>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ebe:	4814      	ldr	r0, [pc, #80]	@ (8001f10 <MX_TIM2_Init+0x98>)
 8001ec0:	f005 fd4c 	bl	800795c <HAL_TIM_Base_Init>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001eca:	f000 f8c3 	bl	8002054 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ece:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ed2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ed4:	f107 0310 	add.w	r3, r7, #16
 8001ed8:	4619      	mov	r1, r3
 8001eda:	480d      	ldr	r0, [pc, #52]	@ (8001f10 <MX_TIM2_Init+0x98>)
 8001edc:	f005 fe0e 	bl	8007afc <HAL_TIM_ConfigClockSource>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001ee6:	f000 f8b5 	bl	8002054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eea:	2300      	movs	r3, #0
 8001eec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ef2:	1d3b      	adds	r3, r7, #4
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4806      	ldr	r0, [pc, #24]	@ (8001f10 <MX_TIM2_Init+0x98>)
 8001ef8:	f006 f866 	bl	8007fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001f02:	f000 f8a7 	bl	8002054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f06:	bf00      	nop
 8001f08:	3720      	adds	r7, #32
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20000554 	.word	0x20000554

08001f14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001f1a:	4b16      	ldr	r3, [pc, #88]	@ (8001f74 <MX_DMA_Init+0x60>)
 8001f1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f1e:	4a15      	ldr	r2, [pc, #84]	@ (8001f74 <MX_DMA_Init+0x60>)
 8001f20:	f043 0304 	orr.w	r3, r3, #4
 8001f24:	6493      	str	r3, [r2, #72]	@ 0x48
 8001f26:	4b13      	ldr	r3, [pc, #76]	@ (8001f74 <MX_DMA_Init+0x60>)
 8001f28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f2a:	f003 0304 	and.w	r3, r3, #4
 8001f2e:	607b      	str	r3, [r7, #4]
 8001f30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f32:	4b10      	ldr	r3, [pc, #64]	@ (8001f74 <MX_DMA_Init+0x60>)
 8001f34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f36:	4a0f      	ldr	r2, [pc, #60]	@ (8001f74 <MX_DMA_Init+0x60>)
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	6493      	str	r3, [r2, #72]	@ 0x48
 8001f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f74 <MX_DMA_Init+0x60>)
 8001f40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	603b      	str	r3, [r7, #0]
 8001f48:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	200b      	movs	r0, #11
 8001f50:	f001 fe9d 	bl	8003c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f54:	200b      	movs	r0, #11
 8001f56:	f001 feb4 	bl	8003cc2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	200c      	movs	r0, #12
 8001f60:	f001 fe95 	bl	8003c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001f64:	200c      	movs	r0, #12
 8001f66:	f001 feac 	bl	8003cc2 <HAL_NVIC_EnableIRQ>

}
 8001f6a:	bf00      	nop
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40021000 	.word	0x40021000

08001f78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b088      	sub	sp, #32
 8001f7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7e:	f107 030c 	add.w	r3, r7, #12
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	605a      	str	r2, [r3, #4]
 8001f88:	609a      	str	r2, [r3, #8]
 8001f8a:	60da      	str	r2, [r3, #12]
 8001f8c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f8e:	4b2f      	ldr	r3, [pc, #188]	@ (800204c <MX_GPIO_Init+0xd4>)
 8001f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f92:	4a2e      	ldr	r2, [pc, #184]	@ (800204c <MX_GPIO_Init+0xd4>)
 8001f94:	f043 0320 	orr.w	r3, r3, #32
 8001f98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f9a:	4b2c      	ldr	r3, [pc, #176]	@ (800204c <MX_GPIO_Init+0xd4>)
 8001f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f9e:	f003 0320 	and.w	r3, r3, #32
 8001fa2:	60bb      	str	r3, [r7, #8]
 8001fa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa6:	4b29      	ldr	r3, [pc, #164]	@ (800204c <MX_GPIO_Init+0xd4>)
 8001fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001faa:	4a28      	ldr	r2, [pc, #160]	@ (800204c <MX_GPIO_Init+0xd4>)
 8001fac:	f043 0301 	orr.w	r3, r3, #1
 8001fb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fb2:	4b26      	ldr	r3, [pc, #152]	@ (800204c <MX_GPIO_Init+0xd4>)
 8001fb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	607b      	str	r3, [r7, #4]
 8001fbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fbe:	4b23      	ldr	r3, [pc, #140]	@ (800204c <MX_GPIO_Init+0xd4>)
 8001fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fc2:	4a22      	ldr	r2, [pc, #136]	@ (800204c <MX_GPIO_Init+0xd4>)
 8001fc4:	f043 0302 	orr.w	r3, r3, #2
 8001fc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fca:	4b20      	ldr	r3, [pc, #128]	@ (800204c <MX_GPIO_Init+0xd4>)
 8001fcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	603b      	str	r3, [r7, #0]
 8001fd4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|RST_PIN_Pin, GPIO_PIN_RESET);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	2163      	movs	r1, #99	@ 0x63
 8001fda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fde:	f003 f851 	bl	8005084 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_RESET);
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	2102      	movs	r1, #2
 8001fe6:	481a      	ldr	r0, [pc, #104]	@ (8002050 <MX_GPIO_Init+0xd8>)
 8001fe8:	f003 f84c 	bl	8005084 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8001fec:	2323      	movs	r3, #35	@ 0x23
 8001fee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffc:	f107 030c 	add.w	r3, r7, #12
 8002000:	4619      	mov	r1, r3
 8002002:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002006:	f002 febb 	bl	8004d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_PIN_Pin */
  GPIO_InitStruct.Pin = RST_PIN_Pin;
 800200a:	2340      	movs	r3, #64	@ 0x40
 800200c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800200e:	2301      	movs	r3, #1
 8002010:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002012:	2300      	movs	r3, #0
 8002014:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002016:	2303      	movs	r3, #3
 8002018:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RST_PIN_GPIO_Port, &GPIO_InitStruct);
 800201a:	f107 030c 	add.w	r3, r7, #12
 800201e:	4619      	mov	r1, r3
 8002020:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002024:	f002 feac 	bl	8004d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_PIN_Pin */
  GPIO_InitStruct.Pin = CS_PIN_Pin;
 8002028:	2302      	movs	r3, #2
 800202a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800202c:	2301      	movs	r3, #1
 800202e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002034:	2303      	movs	r3, #3
 8002036:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_PIN_GPIO_Port, &GPIO_InitStruct);
 8002038:	f107 030c 	add.w	r3, r7, #12
 800203c:	4619      	mov	r1, r3
 800203e:	4804      	ldr	r0, [pc, #16]	@ (8002050 <MX_GPIO_Init+0xd8>)
 8002040:	f002 fe9e 	bl	8004d80 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002044:	bf00      	nop
 8002046:	3720      	adds	r7, #32
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40021000 	.word	0x40021000
 8002050:	48000400 	.word	0x48000400

08002054 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002058:	b672      	cpsid	i
}
 800205a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800205c:	bf00      	nop
 800205e:	e7fd      	b.n	800205c <Error_Handler+0x8>

08002060 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8002060:	b590      	push	{r4, r7, lr}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	4604      	mov	r4, r0
 8002068:	4608      	mov	r0, r1
 800206a:	4611      	mov	r1, r2
 800206c:	461a      	mov	r2, r3
 800206e:	4623      	mov	r3, r4
 8002070:	71fb      	strb	r3, [r7, #7]
 8002072:	4603      	mov	r3, r0
 8002074:	71bb      	strb	r3, [r7, #6]
 8002076:	460b      	mov	r3, r1
 8002078:	80bb      	strh	r3, [r7, #4]
 800207a:	4613      	mov	r3, r2
 800207c:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	2b08      	cmp	r3, #8
 8002082:	d902      	bls.n	800208a <socket+0x2a>
 8002084:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002088:	e0ef      	b.n	800226a <socket+0x20a>
	switch(protocol)
 800208a:	79bb      	ldrb	r3, [r7, #6]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d005      	beq.n	800209c <socket+0x3c>
 8002090:	2b00      	cmp	r3, #0
 8002092:	dd11      	ble.n	80020b8 <socket+0x58>
 8002094:	3b02      	subs	r3, #2
 8002096:	2b02      	cmp	r3, #2
 8002098:	d80e      	bhi.n	80020b8 <socket+0x58>
            if(taddr == 0) return SOCKERR_SOCKINIT;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 800209a:	e010      	b.n	80020be <socket+0x5e>
            getSIPR((uint8_t*)&taddr);
 800209c:	f107 030c 	add.w	r3, r7, #12
 80020a0:	2204      	movs	r2, #4
 80020a2:	4619      	mov	r1, r3
 80020a4:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80020a8:	f001 f85a 	bl	8003160 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d105      	bne.n	80020be <socket+0x5e>
 80020b2:	f06f 0302 	mvn.w	r3, #2
 80020b6:	e0d8      	b.n	800226a <socket+0x20a>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 80020b8:	f06f 0304 	mvn.w	r3, #4
 80020bc:	e0d5      	b.n	800226a <socket+0x20a>
         break;
 80020be:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 80020c0:	78fb      	ldrb	r3, [r7, #3]
 80020c2:	f003 0304 	and.w	r3, r3, #4
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d002      	beq.n	80020d0 <socket+0x70>
 80020ca:	f06f 0305 	mvn.w	r3, #5
 80020ce:	e0cc      	b.n	800226a <socket+0x20a>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 80020d0:	78fb      	ldrb	r3, [r7, #3]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d028      	beq.n	8002128 <socket+0xc8>
	{
   	switch(protocol)
 80020d6:	79bb      	ldrb	r3, [r7, #6]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d002      	beq.n	80020e2 <socket+0x82>
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d008      	beq.n	80020f2 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 80020e0:	e022      	b.n	8002128 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 80020e2:	78fb      	ldrb	r3, [r7, #3]
 80020e4:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d11a      	bne.n	8002122 <socket+0xc2>
 80020ec:	f06f 0305 	mvn.w	r3, #5
 80020f0:	e0bb      	b.n	800226a <socket+0x20a>
   	      if(flag & SF_IGMP_VER2)
 80020f2:	78fb      	ldrb	r3, [r7, #3]
 80020f4:	f003 0320 	and.w	r3, r3, #32
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d006      	beq.n	800210a <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 80020fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002100:	2b00      	cmp	r3, #0
 8002102:	db02      	blt.n	800210a <socket+0xaa>
 8002104:	f06f 0305 	mvn.w	r3, #5
 8002108:	e0af      	b.n	800226a <socket+0x20a>
      	      if(flag & SF_UNI_BLOCK)
 800210a:	78fb      	ldrb	r3, [r7, #3]
 800210c:	f003 0310 	and.w	r3, r3, #16
 8002110:	2b00      	cmp	r3, #0
 8002112:	d008      	beq.n	8002126 <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8002114:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002118:	2b00      	cmp	r3, #0
 800211a:	db04      	blt.n	8002126 <socket+0xc6>
 800211c:	f06f 0305 	mvn.w	r3, #5
 8002120:	e0a3      	b.n	800226a <socket+0x20a>
   	      break;
 8002122:	bf00      	nop
 8002124:	e000      	b.n	8002128 <socket+0xc8>
   	      break;
 8002126:	bf00      	nop
   	}
   }
	close(sn);
 8002128:	79fb      	ldrb	r3, [r7, #7]
 800212a:	4618      	mov	r0, r3
 800212c:	f000 f8ac 	bl	8002288 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8002130:	79fb      	ldrb	r3, [r7, #7]
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	3301      	adds	r3, #1
 8002136:	00d8      	lsls	r0, r3, #3
 8002138:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800213c:	f023 030f 	bic.w	r3, r3, #15
 8002140:	b25a      	sxtb	r2, r3
 8002142:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002146:	4313      	orrs	r3, r2
 8002148:	b25b      	sxtb	r3, r3
 800214a:	b2db      	uxtb	r3, r3
 800214c:	4619      	mov	r1, r3
 800214e:	f000 ffb9 	bl	80030c4 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8002152:	88bb      	ldrh	r3, [r7, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d110      	bne.n	800217a <socket+0x11a>
	{
	   port = sock_any_port++;
 8002158:	4b46      	ldr	r3, [pc, #280]	@ (8002274 <socket+0x214>)
 800215a:	881b      	ldrh	r3, [r3, #0]
 800215c:	1c5a      	adds	r2, r3, #1
 800215e:	b291      	uxth	r1, r2
 8002160:	4a44      	ldr	r2, [pc, #272]	@ (8002274 <socket+0x214>)
 8002162:	8011      	strh	r1, [r2, #0]
 8002164:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8002166:	4b43      	ldr	r3, [pc, #268]	@ (8002274 <socket+0x214>)
 8002168:	881b      	ldrh	r3, [r3, #0]
 800216a:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 800216e:	4293      	cmp	r3, r2
 8002170:	d103      	bne.n	800217a <socket+0x11a>
 8002172:	4b40      	ldr	r3, [pc, #256]	@ (8002274 <socket+0x214>)
 8002174:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8002178:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 800217a:	79fb      	ldrb	r3, [r7, #7]
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	3301      	adds	r3, #1
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002186:	461a      	mov	r2, r3
 8002188:	88bb      	ldrh	r3, [r7, #4]
 800218a:	0a1b      	lsrs	r3, r3, #8
 800218c:	b29b      	uxth	r3, r3
 800218e:	b2db      	uxtb	r3, r3
 8002190:	4619      	mov	r1, r3
 8002192:	4610      	mov	r0, r2
 8002194:	f000 ff96 	bl	80030c4 <WIZCHIP_WRITE>
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	3301      	adds	r3, #1
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021a4:	461a      	mov	r2, r3
 80021a6:	88bb      	ldrh	r3, [r7, #4]
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	4619      	mov	r1, r3
 80021ac:	4610      	mov	r0, r2
 80021ae:	f000 ff89 	bl	80030c4 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80021b2:	79fb      	ldrb	r3, [r7, #7]
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	3301      	adds	r3, #1
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80021be:	2101      	movs	r1, #1
 80021c0:	4618      	mov	r0, r3
 80021c2:	f000 ff7f 	bl	80030c4 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80021c6:	bf00      	nop
 80021c8:	79fb      	ldrb	r3, [r7, #7]
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	3301      	adds	r3, #1
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80021d4:	4618      	mov	r0, r3
 80021d6:	f000 ff29 	bl	800302c <WIZCHIP_READ>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1f3      	bne.n	80021c8 <socket+0x168>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 80021e0:	79fb      	ldrb	r3, [r7, #7]
 80021e2:	2201      	movs	r2, #1
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	b21b      	sxth	r3, r3
 80021ea:	43db      	mvns	r3, r3
 80021ec:	b21a      	sxth	r2, r3
 80021ee:	4b22      	ldr	r3, [pc, #136]	@ (8002278 <socket+0x218>)
 80021f0:	881b      	ldrh	r3, [r3, #0]
 80021f2:	b21b      	sxth	r3, r3
 80021f4:	4013      	ands	r3, r2
 80021f6:	b21b      	sxth	r3, r3
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	4b1f      	ldr	r3, [pc, #124]	@ (8002278 <socket+0x218>)
 80021fc:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 80021fe:	78fb      	ldrb	r3, [r7, #3]
 8002200:	f003 0201 	and.w	r2, r3, #1
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	b21a      	sxth	r2, r3
 800220c:	4b1a      	ldr	r3, [pc, #104]	@ (8002278 <socket+0x218>)
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	b21b      	sxth	r3, r3
 8002212:	4313      	orrs	r3, r2
 8002214:	b21b      	sxth	r3, r3
 8002216:	b29a      	uxth	r2, r3
 8002218:	4b17      	ldr	r3, [pc, #92]	@ (8002278 <socket+0x218>)
 800221a:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 800221c:	79fb      	ldrb	r3, [r7, #7]
 800221e:	2201      	movs	r2, #1
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	b21b      	sxth	r3, r3
 8002226:	43db      	mvns	r3, r3
 8002228:	b21a      	sxth	r2, r3
 800222a:	4b14      	ldr	r3, [pc, #80]	@ (800227c <socket+0x21c>)
 800222c:	881b      	ldrh	r3, [r3, #0]
 800222e:	b21b      	sxth	r3, r3
 8002230:	4013      	ands	r3, r2
 8002232:	b21b      	sxth	r3, r3
 8002234:	b29a      	uxth	r2, r3
 8002236:	4b11      	ldr	r3, [pc, #68]	@ (800227c <socket+0x21c>)
 8002238:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 800223a:	79fb      	ldrb	r3, [r7, #7]
 800223c:	4a10      	ldr	r2, [pc, #64]	@ (8002280 <socket+0x220>)
 800223e:	2100      	movs	r1, #0
 8002240:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8002244:	79fb      	ldrb	r3, [r7, #7]
 8002246:	4a0f      	ldr	r2, [pc, #60]	@ (8002284 <socket+0x224>)
 8002248:	2100      	movs	r1, #0
 800224a:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 800224c:	bf00      	nop
 800224e:	79fb      	ldrb	r3, [r7, #7]
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	3301      	adds	r3, #1
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800225a:	4618      	mov	r0, r3
 800225c:	f000 fee6 	bl	800302c <WIZCHIP_READ>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d0f3      	beq.n	800224e <socket+0x1ee>
   return (int8_t)sn;
 8002266:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 800226a:	4618      	mov	r0, r3
 800226c:	3714      	adds	r7, #20
 800226e:	46bd      	mov	sp, r7
 8002270:	bd90      	pop	{r4, r7, pc}
 8002272:	bf00      	nop
 8002274:	20000006 	.word	0x20000006
 8002278:	200005d4 	.word	0x200005d4
 800227c:	200005d6 	.word	0x200005d6
 8002280:	200005d8 	.word	0x200005d8
 8002284:	200005e8 	.word	0x200005e8

08002288 <close>:

int8_t close(uint8_t sn)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8002292:	79fb      	ldrb	r3, [r7, #7]
 8002294:	2b08      	cmp	r3, #8
 8002296:	d902      	bls.n	800229e <close+0x16>
 8002298:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800229c:	e055      	b.n	800234a <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	3301      	adds	r3, #1
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80022aa:	2110      	movs	r1, #16
 80022ac:	4618      	mov	r0, r3
 80022ae:	f000 ff09 	bl	80030c4 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 80022b2:	bf00      	nop
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	3301      	adds	r3, #1
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80022c0:	4618      	mov	r0, r3
 80022c2:	f000 feb3 	bl	800302c <WIZCHIP_READ>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1f3      	bne.n	80022b4 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 80022cc:	79fb      	ldrb	r3, [r7, #7]
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	3301      	adds	r3, #1
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80022d8:	211f      	movs	r1, #31
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 fef2 	bl	80030c4 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 80022e0:	79fb      	ldrb	r3, [r7, #7]
 80022e2:	2201      	movs	r2, #1
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	b21b      	sxth	r3, r3
 80022ea:	43db      	mvns	r3, r3
 80022ec:	b21a      	sxth	r2, r3
 80022ee:	4b19      	ldr	r3, [pc, #100]	@ (8002354 <close+0xcc>)
 80022f0:	881b      	ldrh	r3, [r3, #0]
 80022f2:	b21b      	sxth	r3, r3
 80022f4:	4013      	ands	r3, r2
 80022f6:	b21b      	sxth	r3, r3
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	4b16      	ldr	r3, [pc, #88]	@ (8002354 <close+0xcc>)
 80022fc:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 80022fe:	79fb      	ldrb	r3, [r7, #7]
 8002300:	2201      	movs	r2, #1
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	b21b      	sxth	r3, r3
 8002308:	43db      	mvns	r3, r3
 800230a:	b21a      	sxth	r2, r3
 800230c:	4b12      	ldr	r3, [pc, #72]	@ (8002358 <close+0xd0>)
 800230e:	881b      	ldrh	r3, [r3, #0]
 8002310:	b21b      	sxth	r3, r3
 8002312:	4013      	ands	r3, r2
 8002314:	b21b      	sxth	r3, r3
 8002316:	b29a      	uxth	r2, r3
 8002318:	4b0f      	ldr	r3, [pc, #60]	@ (8002358 <close+0xd0>)
 800231a:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 800231c:	79fb      	ldrb	r3, [r7, #7]
 800231e:	4a0f      	ldr	r2, [pc, #60]	@ (800235c <close+0xd4>)
 8002320:	2100      	movs	r1, #0
 8002322:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	4a0d      	ldr	r2, [pc, #52]	@ (8002360 <close+0xd8>)
 800232a:	2100      	movs	r1, #0
 800232c:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 800232e:	bf00      	nop
 8002330:	79fb      	ldrb	r3, [r7, #7]
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	3301      	adds	r3, #1
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800233c:	4618      	mov	r0, r3
 800233e:	f000 fe75 	bl	800302c <WIZCHIP_READ>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1f3      	bne.n	8002330 <close+0xa8>
	return SOCK_OK;
 8002348:	2301      	movs	r3, #1
}
 800234a:	4618      	mov	r0, r3
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	200005d4 	.word	0x200005d4
 8002358:	200005d6 	.word	0x200005d6
 800235c:	200005d8 	.word	0x200005d8
 8002360:	200005e8 	.word	0x200005e8

08002364 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	6039      	str	r1, [r7, #0]
 800236e:	71fb      	strb	r3, [r7, #7]
 8002370:	4613      	mov	r3, r2
 8002372:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8002374:	79fb      	ldrb	r3, [r7, #7]
 8002376:	2b08      	cmp	r3, #8
 8002378:	d902      	bls.n	8002380 <connect+0x1c>
 800237a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800237e:	e0c6      	b.n	800250e <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002380:	79fb      	ldrb	r3, [r7, #7]
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	3301      	adds	r3, #1
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	4618      	mov	r0, r3
 800238a:	f000 fe4f 	bl	800302c <WIZCHIP_READ>
 800238e:	4603      	mov	r3, r0
 8002390:	f003 030f 	and.w	r3, r3, #15
 8002394:	2b01      	cmp	r3, #1
 8002396:	d002      	beq.n	800239e <connect+0x3a>
 8002398:	f06f 0304 	mvn.w	r3, #4
 800239c:	e0b7      	b.n	800250e <connect+0x1aa>
   CHECK_SOCKINIT();
 800239e:	79fb      	ldrb	r3, [r7, #7]
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	3301      	adds	r3, #1
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 fe3e 	bl	800302c <WIZCHIP_READ>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b13      	cmp	r3, #19
 80023b4:	d002      	beq.n	80023bc <connect+0x58>
 80023b6:	f06f 0302 	mvn.w	r3, #2
 80023ba:	e0a8      	b.n	800250e <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	021b      	lsls	r3, r3, #8
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	3201      	adds	r2, #1
 80023ca:	7812      	ldrb	r2, [r2, #0]
 80023cc:	4413      	add	r3, r2
 80023ce:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	021b      	lsls	r3, r3, #8
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	3202      	adds	r2, #2
 80023d8:	7812      	ldrb	r2, [r2, #0]
 80023da:	4413      	add	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	021b      	lsls	r3, r3, #8
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	3203      	adds	r2, #3
 80023e6:	7812      	ldrb	r2, [r2, #0]
 80023e8:	4413      	add	r3, r2
 80023ea:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80023f2:	d002      	beq.n	80023fa <connect+0x96>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d102      	bne.n	8002400 <connect+0x9c>
 80023fa:	f06f 030b 	mvn.w	r3, #11
 80023fe:	e086      	b.n	800250e <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8002400:	88bb      	ldrh	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d102      	bne.n	800240c <connect+0xa8>
 8002406:	f06f 030a 	mvn.w	r3, #10
 800240a:	e080      	b.n	800250e <connect+0x1aa>
	setSn_DIPR(sn,addr);
 800240c:	79fb      	ldrb	r3, [r7, #7]
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	3301      	adds	r3, #1
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8002418:	2204      	movs	r2, #4
 800241a:	6839      	ldr	r1, [r7, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f000 feff 	bl	8003220 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 8002422:	79fb      	ldrb	r3, [r7, #7]
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	3301      	adds	r3, #1
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800242e:	461a      	mov	r2, r3
 8002430:	88bb      	ldrh	r3, [r7, #4]
 8002432:	0a1b      	lsrs	r3, r3, #8
 8002434:	b29b      	uxth	r3, r3
 8002436:	b2db      	uxtb	r3, r3
 8002438:	4619      	mov	r1, r3
 800243a:	4610      	mov	r0, r2
 800243c:	f000 fe42 	bl	80030c4 <WIZCHIP_WRITE>
 8002440:	79fb      	ldrb	r3, [r7, #7]
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	3301      	adds	r3, #1
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 800244c:	461a      	mov	r2, r3
 800244e:	88bb      	ldrh	r3, [r7, #4]
 8002450:	b2db      	uxtb	r3, r3
 8002452:	4619      	mov	r1, r3
 8002454:	4610      	mov	r0, r2
 8002456:	f000 fe35 	bl	80030c4 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 800245a:	79fb      	ldrb	r3, [r7, #7]
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	3301      	adds	r3, #1
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002466:	2104      	movs	r1, #4
 8002468:	4618      	mov	r0, r3
 800246a:	f000 fe2b 	bl	80030c4 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800246e:	bf00      	nop
 8002470:	79fb      	ldrb	r3, [r7, #7]
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	3301      	adds	r3, #1
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800247c:	4618      	mov	r0, r3
 800247e:	f000 fdd5 	bl	800302c <WIZCHIP_READ>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1f3      	bne.n	8002470 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8002488:	4b23      	ldr	r3, [pc, #140]	@ (8002518 <connect+0x1b4>)
 800248a:	881b      	ldrh	r3, [r3, #0]
 800248c:	461a      	mov	r2, r3
 800248e:	79fb      	ldrb	r3, [r7, #7]
 8002490:	fa42 f303 	asr.w	r3, r2, r3
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b00      	cmp	r3, #0
 800249a:	d02b      	beq.n	80024f4 <connect+0x190>
 800249c:	2300      	movs	r3, #0
 800249e:	e036      	b.n	800250e <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 80024a0:	79fb      	ldrb	r3, [r7, #7]
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	3301      	adds	r3, #1
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80024ac:	4618      	mov	r0, r3
 80024ae:	f000 fdbd 	bl	800302c <WIZCHIP_READ>
 80024b2:	4603      	mov	r3, r0
 80024b4:	f003 0308 	and.w	r3, r3, #8
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00c      	beq.n	80024d6 <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 80024bc:	79fb      	ldrb	r3, [r7, #7]
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	3301      	adds	r3, #1
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80024c8:	2108      	movs	r1, #8
 80024ca:	4618      	mov	r0, r3
 80024cc:	f000 fdfa 	bl	80030c4 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 80024d0:	f06f 030c 	mvn.w	r3, #12
 80024d4:	e01b      	b.n	800250e <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 80024d6:	79fb      	ldrb	r3, [r7, #7]
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	3301      	adds	r3, #1
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 fda2 	bl	800302c <WIZCHIP_READ>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d102      	bne.n	80024f4 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 80024ee:	f06f 0303 	mvn.w	r3, #3
 80024f2:	e00c      	b.n	800250e <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 80024f4:	79fb      	ldrb	r3, [r7, #7]
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	3301      	adds	r3, #1
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002500:	4618      	mov	r0, r3
 8002502:	f000 fd93 	bl	800302c <WIZCHIP_READ>
 8002506:	4603      	mov	r3, r0
 8002508:	2b17      	cmp	r3, #23
 800250a:	d1c9      	bne.n	80024a0 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 800250c:	2301      	movs	r3, #1
}
 800250e:	4618      	mov	r0, r3
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	200005d4 	.word	0x200005d4

0800251c <disconnect>:

int8_t disconnect(uint8_t sn)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8002526:	79fb      	ldrb	r3, [r7, #7]
 8002528:	2b08      	cmp	r3, #8
 800252a:	d902      	bls.n	8002532 <disconnect+0x16>
 800252c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002530:	e062      	b.n	80025f8 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002532:	79fb      	ldrb	r3, [r7, #7]
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	3301      	adds	r3, #1
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	4618      	mov	r0, r3
 800253c:	f000 fd76 	bl	800302c <WIZCHIP_READ>
 8002540:	4603      	mov	r3, r0
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	2b01      	cmp	r3, #1
 8002548:	d002      	beq.n	8002550 <disconnect+0x34>
 800254a:	f06f 0304 	mvn.w	r3, #4
 800254e:	e053      	b.n	80025f8 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8002550:	79fb      	ldrb	r3, [r7, #7]
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	3301      	adds	r3, #1
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800255c:	2108      	movs	r1, #8
 800255e:	4618      	mov	r0, r3
 8002560:	f000 fdb0 	bl	80030c4 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8002564:	bf00      	nop
 8002566:	79fb      	ldrb	r3, [r7, #7]
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	3301      	adds	r3, #1
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002572:	4618      	mov	r0, r3
 8002574:	f000 fd5a 	bl	800302c <WIZCHIP_READ>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1f3      	bne.n	8002566 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 800257e:	79fb      	ldrb	r3, [r7, #7]
 8002580:	2201      	movs	r2, #1
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	b21b      	sxth	r3, r3
 8002588:	43db      	mvns	r3, r3
 800258a:	b21a      	sxth	r2, r3
 800258c:	4b1c      	ldr	r3, [pc, #112]	@ (8002600 <disconnect+0xe4>)
 800258e:	881b      	ldrh	r3, [r3, #0]
 8002590:	b21b      	sxth	r3, r3
 8002592:	4013      	ands	r3, r2
 8002594:	b21b      	sxth	r3, r3
 8002596:	b29a      	uxth	r2, r3
 8002598:	4b19      	ldr	r3, [pc, #100]	@ (8002600 <disconnect+0xe4>)
 800259a:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 800259c:	4b19      	ldr	r3, [pc, #100]	@ (8002604 <disconnect+0xe8>)
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	461a      	mov	r2, r3
 80025a2:	79fb      	ldrb	r3, [r7, #7]
 80025a4:	fa42 f303 	asr.w	r3, r2, r3
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d016      	beq.n	80025de <disconnect+0xc2>
 80025b0:	2300      	movs	r3, #0
 80025b2:	e021      	b.n	80025f8 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 80025b4:	79fb      	ldrb	r3, [r7, #7]
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	3301      	adds	r3, #1
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80025c0:	4618      	mov	r0, r3
 80025c2:	f000 fd33 	bl	800302c <WIZCHIP_READ>
 80025c6:	4603      	mov	r3, r0
 80025c8:	f003 0308 	and.w	r3, r3, #8
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d006      	beq.n	80025de <disconnect+0xc2>
	   {
	      close(sn);
 80025d0:	79fb      	ldrb	r3, [r7, #7]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7ff fe58 	bl	8002288 <close>
	      return SOCKERR_TIMEOUT;
 80025d8:	f06f 030c 	mvn.w	r3, #12
 80025dc:	e00c      	b.n	80025f8 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 80025de:	79fb      	ldrb	r3, [r7, #7]
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	3301      	adds	r3, #1
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80025ea:	4618      	mov	r0, r3
 80025ec:	f000 fd1e 	bl	800302c <WIZCHIP_READ>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1de      	bne.n	80025b4 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 80025f6:	2301      	movs	r3, #1
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	200005d6 	.word	0x200005d6
 8002604:	200005d4 	.word	0x200005d4

08002608 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	6039      	str	r1, [r7, #0]
 8002612:	71fb      	strb	r3, [r7, #7]
 8002614:	4613      	mov	r3, r2
 8002616:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8002618:	2300      	movs	r3, #0
 800261a:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 800261c:	2300      	movs	r3, #0
 800261e:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8002620:	79fb      	ldrb	r3, [r7, #7]
 8002622:	2b08      	cmp	r3, #8
 8002624:	d902      	bls.n	800262c <send+0x24>
 8002626:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800262a:	e0dd      	b.n	80027e8 <send+0x1e0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800262c:	79fb      	ldrb	r3, [r7, #7]
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	3301      	adds	r3, #1
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	4618      	mov	r0, r3
 8002636:	f000 fcf9 	bl	800302c <WIZCHIP_READ>
 800263a:	4603      	mov	r3, r0
 800263c:	f003 030f 	and.w	r3, r3, #15
 8002640:	2b01      	cmp	r3, #1
 8002642:	d002      	beq.n	800264a <send+0x42>
 8002644:	f06f 0304 	mvn.w	r3, #4
 8002648:	e0ce      	b.n	80027e8 <send+0x1e0>
   CHECK_SOCKDATA();
 800264a:	88bb      	ldrh	r3, [r7, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d102      	bne.n	8002656 <send+0x4e>
 8002650:	f06f 030d 	mvn.w	r3, #13
 8002654:	e0c8      	b.n	80027e8 <send+0x1e0>
   tmp = getSn_SR(sn);
 8002656:	79fb      	ldrb	r3, [r7, #7]
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	3301      	adds	r3, #1
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002662:	4618      	mov	r0, r3
 8002664:	f000 fce2 	bl	800302c <WIZCHIP_READ>
 8002668:	4603      	mov	r3, r0
 800266a:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 800266c:	7bfb      	ldrb	r3, [r7, #15]
 800266e:	2b17      	cmp	r3, #23
 8002670:	d005      	beq.n	800267e <send+0x76>
 8002672:	7bfb      	ldrb	r3, [r7, #15]
 8002674:	2b1c      	cmp	r3, #28
 8002676:	d002      	beq.n	800267e <send+0x76>
 8002678:	f06f 0306 	mvn.w	r3, #6
 800267c:	e0b4      	b.n	80027e8 <send+0x1e0>
   if( sock_is_sending & (1<<sn) )
 800267e:	4b5c      	ldr	r3, [pc, #368]	@ (80027f0 <send+0x1e8>)
 8002680:	881b      	ldrh	r3, [r3, #0]
 8002682:	461a      	mov	r2, r3
 8002684:	79fb      	ldrb	r3, [r7, #7]
 8002686:	fa42 f303 	asr.w	r3, r2, r3
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b00      	cmp	r3, #0
 8002690:	d039      	beq.n	8002706 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8002692:	79fb      	ldrb	r3, [r7, #7]
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	3301      	adds	r3, #1
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800269e:	4618      	mov	r0, r3
 80026a0:	f000 fcc4 	bl	800302c <WIZCHIP_READ>
 80026a4:	4603      	mov	r3, r0
 80026a6:	f003 031f 	and.w	r3, r3, #31
 80026aa:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 80026ac:	7bfb      	ldrb	r3, [r7, #15]
 80026ae:	f003 0310 	and.w	r3, r3, #16
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d019      	beq.n	80026ea <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80026b6:	79fb      	ldrb	r3, [r7, #7]
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	3301      	adds	r3, #1
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80026c2:	2110      	movs	r1, #16
 80026c4:	4618      	mov	r0, r3
 80026c6:	f000 fcfd 	bl	80030c4 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 80026ca:	79fb      	ldrb	r3, [r7, #7]
 80026cc:	2201      	movs	r2, #1
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	b21b      	sxth	r3, r3
 80026d4:	43db      	mvns	r3, r3
 80026d6:	b21a      	sxth	r2, r3
 80026d8:	4b45      	ldr	r3, [pc, #276]	@ (80027f0 <send+0x1e8>)
 80026da:	881b      	ldrh	r3, [r3, #0]
 80026dc:	b21b      	sxth	r3, r3
 80026de:	4013      	ands	r3, r2
 80026e0:	b21b      	sxth	r3, r3
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	4b42      	ldr	r3, [pc, #264]	@ (80027f0 <send+0x1e8>)
 80026e6:	801a      	strh	r2, [r3, #0]
 80026e8:	e00d      	b.n	8002706 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
 80026ec:	f003 0308 	and.w	r3, r3, #8
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d006      	beq.n	8002702 <send+0xfa>
      {
         close(sn);
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff fdc6 	bl	8002288 <close>
         return SOCKERR_TIMEOUT;
 80026fc:	f06f 030c 	mvn.w	r3, #12
 8002700:	e072      	b.n	80027e8 <send+0x1e0>
      }
      else return SOCK_BUSY;
 8002702:	2300      	movs	r3, #0
 8002704:	e070      	b.n	80027e8 <send+0x1e0>
   }
   freesize = getSn_TxMAX(sn);
 8002706:	79fb      	ldrb	r3, [r7, #7]
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	3301      	adds	r3, #1
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8002712:	4618      	mov	r0, r3
 8002714:	f000 fc8a 	bl	800302c <WIZCHIP_READ>
 8002718:	4603      	mov	r3, r0
 800271a:	029b      	lsls	r3, r3, #10
 800271c:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800271e:	88ba      	ldrh	r2, [r7, #4]
 8002720:	89bb      	ldrh	r3, [r7, #12]
 8002722:	429a      	cmp	r2, r3
 8002724:	d901      	bls.n	800272a <send+0x122>
 8002726:	89bb      	ldrh	r3, [r7, #12]
 8002728:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 800272a:	79fb      	ldrb	r3, [r7, #7]
 800272c:	4618      	mov	r0, r3
 800272e:	f000 fdd7 	bl	80032e0 <getSn_TX_FSR>
 8002732:	4603      	mov	r3, r0
 8002734:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8002736:	79fb      	ldrb	r3, [r7, #7]
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	3301      	adds	r3, #1
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002742:	4618      	mov	r0, r3
 8002744:	f000 fc72 	bl	800302c <WIZCHIP_READ>
 8002748:	4603      	mov	r3, r0
 800274a:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 800274c:	7bfb      	ldrb	r3, [r7, #15]
 800274e:	2b17      	cmp	r3, #23
 8002750:	d009      	beq.n	8002766 <send+0x15e>
 8002752:	7bfb      	ldrb	r3, [r7, #15]
 8002754:	2b1c      	cmp	r3, #28
 8002756:	d006      	beq.n	8002766 <send+0x15e>
      {
         close(sn);
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff fd94 	bl	8002288 <close>
         return SOCKERR_SOCKSTATUS;
 8002760:	f06f 0306 	mvn.w	r3, #6
 8002764:	e040      	b.n	80027e8 <send+0x1e0>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8002766:	4b23      	ldr	r3, [pc, #140]	@ (80027f4 <send+0x1ec>)
 8002768:	881b      	ldrh	r3, [r3, #0]
 800276a:	461a      	mov	r2, r3
 800276c:	79fb      	ldrb	r3, [r7, #7]
 800276e:	fa42 f303 	asr.w	r3, r2, r3
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d005      	beq.n	8002786 <send+0x17e>
 800277a:	88ba      	ldrh	r2, [r7, #4]
 800277c:	89bb      	ldrh	r3, [r7, #12]
 800277e:	429a      	cmp	r2, r3
 8002780:	d901      	bls.n	8002786 <send+0x17e>
 8002782:	2300      	movs	r3, #0
 8002784:	e030      	b.n	80027e8 <send+0x1e0>
      if(len <= freesize) break;
 8002786:	88ba      	ldrh	r2, [r7, #4]
 8002788:	89bb      	ldrh	r3, [r7, #12]
 800278a:	429a      	cmp	r2, r3
 800278c:	d900      	bls.n	8002790 <send+0x188>
      freesize = getSn_TX_FSR(sn);
 800278e:	e7cc      	b.n	800272a <send+0x122>
      if(len <= freesize) break;
 8002790:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8002792:	88ba      	ldrh	r2, [r7, #4]
 8002794:	79fb      	ldrb	r3, [r7, #7]
 8002796:	6839      	ldr	r1, [r7, #0]
 8002798:	4618      	mov	r0, r3
 800279a:	f000 fe33 	bl	8003404 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 800279e:	79fb      	ldrb	r3, [r7, #7]
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	3301      	adds	r3, #1
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80027aa:	2120      	movs	r1, #32
 80027ac:	4618      	mov	r0, r3
 80027ae:	f000 fc89 	bl	80030c4 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 80027b2:	bf00      	nop
 80027b4:	79fb      	ldrb	r3, [r7, #7]
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	3301      	adds	r3, #1
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80027c0:	4618      	mov	r0, r3
 80027c2:	f000 fc33 	bl	800302c <WIZCHIP_READ>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1f3      	bne.n	80027b4 <send+0x1ac>
   sock_is_sending |= (1 << sn);
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	2201      	movs	r2, #1
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	b21a      	sxth	r2, r3
 80027d6:	4b06      	ldr	r3, [pc, #24]	@ (80027f0 <send+0x1e8>)
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	b21b      	sxth	r3, r3
 80027dc:	4313      	orrs	r3, r2
 80027de:	b21b      	sxth	r3, r3
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	4b03      	ldr	r3, [pc, #12]	@ (80027f0 <send+0x1e8>)
 80027e4:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80027e6:	88bb      	ldrh	r3, [r7, #4]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	200005d6 	.word	0x200005d6
 80027f4:	200005d4 	.word	0x200005d4

080027f8 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80027f8:	b590      	push	{r4, r7, lr}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4603      	mov	r3, r0
 8002800:	6039      	str	r1, [r7, #0]
 8002802:	71fb      	strb	r3, [r7, #7]
 8002804:	4613      	mov	r3, r2
 8002806:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8002808:	2300      	movs	r3, #0
 800280a:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 800280c:	2300      	movs	r3, #0
 800280e:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8002810:	79fb      	ldrb	r3, [r7, #7]
 8002812:	2b08      	cmp	r3, #8
 8002814:	d902      	bls.n	800281c <recv+0x24>
 8002816:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800281a:	e09b      	b.n	8002954 <recv+0x15c>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800281c:	79fb      	ldrb	r3, [r7, #7]
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	3301      	adds	r3, #1
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	4618      	mov	r0, r3
 8002826:	f000 fc01 	bl	800302c <WIZCHIP_READ>
 800282a:	4603      	mov	r3, r0
 800282c:	f003 030f 	and.w	r3, r3, #15
 8002830:	2b01      	cmp	r3, #1
 8002832:	d002      	beq.n	800283a <recv+0x42>
 8002834:	f06f 0304 	mvn.w	r3, #4
 8002838:	e08c      	b.n	8002954 <recv+0x15c>
   CHECK_SOCKDATA();
 800283a:	88bb      	ldrh	r3, [r7, #4]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d102      	bne.n	8002846 <recv+0x4e>
 8002840:	f06f 030d 	mvn.w	r3, #13
 8002844:	e086      	b.n	8002954 <recv+0x15c>
   
   recvsize = getSn_RxMAX(sn);
 8002846:	79fb      	ldrb	r3, [r7, #7]
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	3301      	adds	r3, #1
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8002852:	4618      	mov	r0, r3
 8002854:	f000 fbea 	bl	800302c <WIZCHIP_READ>
 8002858:	4603      	mov	r3, r0
 800285a:	029b      	lsls	r3, r3, #10
 800285c:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 800285e:	89ba      	ldrh	r2, [r7, #12]
 8002860:	88bb      	ldrh	r3, [r7, #4]
 8002862:	429a      	cmp	r2, r3
 8002864:	d201      	bcs.n	800286a <recv+0x72>
 8002866:	89bb      	ldrh	r3, [r7, #12]
 8002868:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 800286a:	79fb      	ldrb	r3, [r7, #7]
 800286c:	4618      	mov	r0, r3
 800286e:	f000 fd80 	bl	8003372 <getSn_RX_RSR>
 8002872:	4603      	mov	r3, r0
 8002874:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8002876:	79fb      	ldrb	r3, [r7, #7]
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	3301      	adds	r3, #1
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002882:	4618      	mov	r0, r3
 8002884:	f000 fbd2 	bl	800302c <WIZCHIP_READ>
 8002888:	4603      	mov	r3, r0
 800288a:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 800288c:	7bfb      	ldrb	r3, [r7, #15]
 800288e:	2b17      	cmp	r3, #23
 8002890:	d026      	beq.n	80028e0 <recv+0xe8>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8002892:	7bfb      	ldrb	r3, [r7, #15]
 8002894:	2b1c      	cmp	r3, #28
 8002896:	d11c      	bne.n	80028d2 <recv+0xda>
            {
               if(recvsize != 0) break;
 8002898:	89bb      	ldrh	r3, [r7, #12]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d133      	bne.n	8002906 <recv+0x10e>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 800289e:	79fb      	ldrb	r3, [r7, #7]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f000 fd1d 	bl	80032e0 <getSn_TX_FSR>
 80028a6:	4603      	mov	r3, r0
 80028a8:	461c      	mov	r4, r3
 80028aa:	79fb      	ldrb	r3, [r7, #7]
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	3301      	adds	r3, #1
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 80028b6:	4618      	mov	r0, r3
 80028b8:	f000 fbb8 	bl	800302c <WIZCHIP_READ>
 80028bc:	4603      	mov	r3, r0
 80028be:	029b      	lsls	r3, r3, #10
 80028c0:	429c      	cmp	r4, r3
 80028c2:	d10d      	bne.n	80028e0 <recv+0xe8>
               {
                  close(sn);
 80028c4:	79fb      	ldrb	r3, [r7, #7]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff fcde 	bl	8002288 <close>
                  return SOCKERR_SOCKSTATUS;
 80028cc:	f06f 0306 	mvn.w	r3, #6
 80028d0:	e040      	b.n	8002954 <recv+0x15c>
               }
            }
            else
            {
               close(sn);
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff fcd7 	bl	8002288 <close>
               return SOCKERR_SOCKSTATUS;
 80028da:	f06f 0306 	mvn.w	r3, #6
 80028de:	e039      	b.n	8002954 <recv+0x15c>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 80028e0:	4b1e      	ldr	r3, [pc, #120]	@ (800295c <recv+0x164>)
 80028e2:	881b      	ldrh	r3, [r3, #0]
 80028e4:	461a      	mov	r2, r3
 80028e6:	79fb      	ldrb	r3, [r7, #7]
 80028e8:	fa42 f303 	asr.w	r3, r2, r3
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d004      	beq.n	80028fe <recv+0x106>
 80028f4:	89bb      	ldrh	r3, [r7, #12]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <recv+0x106>
 80028fa:	2300      	movs	r3, #0
 80028fc:	e02a      	b.n	8002954 <recv+0x15c>
         if(recvsize != 0) break;
 80028fe:	89bb      	ldrh	r3, [r7, #12]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d102      	bne.n	800290a <recv+0x112>
         recvsize = getSn_RX_RSR(sn);
 8002904:	e7b1      	b.n	800286a <recv+0x72>
               if(recvsize != 0) break;
 8002906:	bf00      	nop
 8002908:	e000      	b.n	800290c <recv+0x114>
         if(recvsize != 0) break;
 800290a:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 800290c:	89ba      	ldrh	r2, [r7, #12]
 800290e:	88bb      	ldrh	r3, [r7, #4]
 8002910:	429a      	cmp	r2, r3
 8002912:	d201      	bcs.n	8002918 <recv+0x120>
 8002914:	89bb      	ldrh	r3, [r7, #12]
 8002916:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8002918:	88ba      	ldrh	r2, [r7, #4]
 800291a:	79fb      	ldrb	r3, [r7, #7]
 800291c:	6839      	ldr	r1, [r7, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f000 fdca 	bl	80034b8 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8002924:	79fb      	ldrb	r3, [r7, #7]
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	3301      	adds	r3, #1
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002930:	2140      	movs	r1, #64	@ 0x40
 8002932:	4618      	mov	r0, r3
 8002934:	f000 fbc6 	bl	80030c4 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002938:	bf00      	nop
 800293a:	79fb      	ldrb	r3, [r7, #7]
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	3301      	adds	r3, #1
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002946:	4618      	mov	r0, r3
 8002948:	f000 fb70 	bl	800302c <WIZCHIP_READ>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1f3      	bne.n	800293a <recv+0x142>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8002952:	88bb      	ldrh	r3, [r7, #4]
}
 8002954:	4618      	mov	r0, r3
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	bd90      	pop	{r4, r7, pc}
 800295c:	200005d4 	.word	0x200005d4

08002960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002966:	4b0f      	ldr	r3, [pc, #60]	@ (80029a4 <HAL_MspInit+0x44>)
 8002968:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800296a:	4a0e      	ldr	r2, [pc, #56]	@ (80029a4 <HAL_MspInit+0x44>)
 800296c:	f043 0301 	orr.w	r3, r3, #1
 8002970:	6613      	str	r3, [r2, #96]	@ 0x60
 8002972:	4b0c      	ldr	r3, [pc, #48]	@ (80029a4 <HAL_MspInit+0x44>)
 8002974:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	607b      	str	r3, [r7, #4]
 800297c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800297e:	4b09      	ldr	r3, [pc, #36]	@ (80029a4 <HAL_MspInit+0x44>)
 8002980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002982:	4a08      	ldr	r2, [pc, #32]	@ (80029a4 <HAL_MspInit+0x44>)
 8002984:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002988:	6593      	str	r3, [r2, #88]	@ 0x58
 800298a:	4b06      	ldr	r3, [pc, #24]	@ (80029a4 <HAL_MspInit+0x44>)
 800298c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800298e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002992:	603b      	str	r3, [r7, #0]
 8002994:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002996:	f002 fc4b 	bl	8005230 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800299a:	bf00      	nop
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40021000 	.word	0x40021000

080029a8 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b09e      	sub	sp, #120	@ 0x78
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	605a      	str	r2, [r3, #4]
 80029ba:	609a      	str	r2, [r3, #8]
 80029bc:	60da      	str	r2, [r3, #12]
 80029be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029c0:	f107 0310 	add.w	r3, r7, #16
 80029c4:	2254      	movs	r2, #84	@ 0x54
 80029c6:	2100      	movs	r1, #0
 80029c8:	4618      	mov	r0, r3
 80029ca:	f006 f8ee 	bl	8008baa <memset>
  if(hfdcan->Instance==FDCAN1)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a24      	ldr	r2, [pc, #144]	@ (8002a64 <HAL_FDCAN_MspInit+0xbc>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d140      	bne.n	8002a5a <HAL_FDCAN_MspInit+0xb2>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80029d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029dc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80029de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80029e2:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029e4:	f107 0310 	add.w	r3, r7, #16
 80029e8:	4618      	mov	r0, r3
 80029ea:	f003 f927 	bl	8005c3c <HAL_RCCEx_PeriphCLKConfig>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80029f4:	f7ff fb2e 	bl	8002054 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80029f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a68 <HAL_FDCAN_MspInit+0xc0>)
 80029fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029fc:	4a1a      	ldr	r2, [pc, #104]	@ (8002a68 <HAL_FDCAN_MspInit+0xc0>)
 80029fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a02:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a04:	4b18      	ldr	r3, [pc, #96]	@ (8002a68 <HAL_FDCAN_MspInit+0xc0>)
 8002a06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a0c:	60fb      	str	r3, [r7, #12]
 8002a0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a10:	4b15      	ldr	r3, [pc, #84]	@ (8002a68 <HAL_FDCAN_MspInit+0xc0>)
 8002a12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a14:	4a14      	ldr	r2, [pc, #80]	@ (8002a68 <HAL_FDCAN_MspInit+0xc0>)
 8002a16:	f043 0302 	orr.w	r3, r3, #2
 8002a1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a1c:	4b12      	ldr	r3, [pc, #72]	@ (8002a68 <HAL_FDCAN_MspInit+0xc0>)
 8002a1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	60bb      	str	r3, [r7, #8]
 8002a26:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a28:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002a2c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2e:	2302      	movs	r3, #2
 8002a30:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a32:	2300      	movs	r3, #0
 8002a34:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a36:	2303      	movs	r3, #3
 8002a38:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002a3a:	2309      	movs	r3, #9
 8002a3c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a3e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002a42:	4619      	mov	r1, r3
 8002a44:	4809      	ldr	r0, [pc, #36]	@ (8002a6c <HAL_FDCAN_MspInit+0xc4>)
 8002a46:	f002 f99b 	bl	8004d80 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	2015      	movs	r0, #21
 8002a50:	f001 f91d 	bl	8003c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002a54:	2015      	movs	r0, #21
 8002a56:	f001 f934 	bl	8003cc2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8002a5a:	bf00      	nop
 8002a5c:	3778      	adds	r7, #120	@ 0x78
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40006400 	.word	0x40006400
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	48000400 	.word	0x48000400

08002a70 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b08a      	sub	sp, #40	@ 0x28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a78:	f107 0314 	add.w	r3, r7, #20
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	605a      	str	r2, [r3, #4]
 8002a82:	609a      	str	r2, [r3, #8]
 8002a84:	60da      	str	r2, [r3, #12]
 8002a86:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a49      	ldr	r2, [pc, #292]	@ (8002bb4 <HAL_SPI_MspInit+0x144>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	f040 808c 	bne.w	8002bac <HAL_SPI_MspInit+0x13c>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002a94:	4b48      	ldr	r3, [pc, #288]	@ (8002bb8 <HAL_SPI_MspInit+0x148>)
 8002a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a98:	4a47      	ldr	r2, [pc, #284]	@ (8002bb8 <HAL_SPI_MspInit+0x148>)
 8002a9a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002aa0:	4b45      	ldr	r3, [pc, #276]	@ (8002bb8 <HAL_SPI_MspInit+0x148>)
 8002aa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aa4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002aa8:	613b      	str	r3, [r7, #16]
 8002aaa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aac:	4b42      	ldr	r3, [pc, #264]	@ (8002bb8 <HAL_SPI_MspInit+0x148>)
 8002aae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ab0:	4a41      	ldr	r2, [pc, #260]	@ (8002bb8 <HAL_SPI_MspInit+0x148>)
 8002ab2:	f043 0302 	orr.w	r3, r3, #2
 8002ab6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ab8:	4b3f      	ldr	r3, [pc, #252]	@ (8002bb8 <HAL_SPI_MspInit+0x148>)
 8002aba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002ac4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aca:	2302      	movs	r3, #2
 8002acc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ad6:	2305      	movs	r3, #5
 8002ad8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ada:	f107 0314 	add.w	r3, r7, #20
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4836      	ldr	r0, [pc, #216]	@ (8002bbc <HAL_SPI_MspInit+0x14c>)
 8002ae2:	f002 f94d 	bl	8004d80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002ae6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aec:	2302      	movs	r3, #2
 8002aee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002af0:	2301      	movs	r3, #1
 8002af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af4:	2303      	movs	r3, #3
 8002af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002af8:	2305      	movs	r3, #5
 8002afa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002afc:	f107 0314 	add.w	r3, r7, #20
 8002b00:	4619      	mov	r1, r3
 8002b02:	482e      	ldr	r0, [pc, #184]	@ (8002bbc <HAL_SPI_MspInit+0x14c>)
 8002b04:	f002 f93c 	bl	8004d80 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel1;
 8002b08:	4b2d      	ldr	r3, [pc, #180]	@ (8002bc0 <HAL_SPI_MspInit+0x150>)
 8002b0a:	4a2e      	ldr	r2, [pc, #184]	@ (8002bc4 <HAL_SPI_MspInit+0x154>)
 8002b0c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8002b0e:	4b2c      	ldr	r3, [pc, #176]	@ (8002bc0 <HAL_SPI_MspInit+0x150>)
 8002b10:	220c      	movs	r2, #12
 8002b12:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b14:	4b2a      	ldr	r3, [pc, #168]	@ (8002bc0 <HAL_SPI_MspInit+0x150>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b1a:	4b29      	ldr	r3, [pc, #164]	@ (8002bc0 <HAL_SPI_MspInit+0x150>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b20:	4b27      	ldr	r3, [pc, #156]	@ (8002bc0 <HAL_SPI_MspInit+0x150>)
 8002b22:	2280      	movs	r2, #128	@ 0x80
 8002b24:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b26:	4b26      	ldr	r3, [pc, #152]	@ (8002bc0 <HAL_SPI_MspInit+0x150>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b2c:	4b24      	ldr	r3, [pc, #144]	@ (8002bc0 <HAL_SPI_MspInit+0x150>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8002b32:	4b23      	ldr	r3, [pc, #140]	@ (8002bc0 <HAL_SPI_MspInit+0x150>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b38:	4b21      	ldr	r3, [pc, #132]	@ (8002bc0 <HAL_SPI_MspInit+0x150>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002b3e:	4820      	ldr	r0, [pc, #128]	@ (8002bc0 <HAL_SPI_MspInit+0x150>)
 8002b40:	f001 f8da 	bl	8003cf8 <HAL_DMA_Init>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <HAL_SPI_MspInit+0xde>
    {
      Error_Handler();
 8002b4a:	f7ff fa83 	bl	8002054 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a1b      	ldr	r2, [pc, #108]	@ (8002bc0 <HAL_SPI_MspInit+0x150>)
 8002b52:	659a      	str	r2, [r3, #88]	@ 0x58
 8002b54:	4a1a      	ldr	r2, [pc, #104]	@ (8002bc0 <HAL_SPI_MspInit+0x150>)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel2;
 8002b5a:	4b1b      	ldr	r3, [pc, #108]	@ (8002bc8 <HAL_SPI_MspInit+0x158>)
 8002b5c:	4a1b      	ldr	r2, [pc, #108]	@ (8002bcc <HAL_SPI_MspInit+0x15c>)
 8002b5e:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8002b60:	4b19      	ldr	r3, [pc, #100]	@ (8002bc8 <HAL_SPI_MspInit+0x158>)
 8002b62:	220d      	movs	r2, #13
 8002b64:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b66:	4b18      	ldr	r3, [pc, #96]	@ (8002bc8 <HAL_SPI_MspInit+0x158>)
 8002b68:	2210      	movs	r2, #16
 8002b6a:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b6c:	4b16      	ldr	r3, [pc, #88]	@ (8002bc8 <HAL_SPI_MspInit+0x158>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b72:	4b15      	ldr	r3, [pc, #84]	@ (8002bc8 <HAL_SPI_MspInit+0x158>)
 8002b74:	2280      	movs	r2, #128	@ 0x80
 8002b76:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b78:	4b13      	ldr	r3, [pc, #76]	@ (8002bc8 <HAL_SPI_MspInit+0x158>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b7e:	4b12      	ldr	r3, [pc, #72]	@ (8002bc8 <HAL_SPI_MspInit+0x158>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002b84:	4b10      	ldr	r3, [pc, #64]	@ (8002bc8 <HAL_SPI_MspInit+0x158>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8002bc8 <HAL_SPI_MspInit+0x158>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002b90:	480d      	ldr	r0, [pc, #52]	@ (8002bc8 <HAL_SPI_MspInit+0x158>)
 8002b92:	f001 f8b1 	bl	8003cf8 <HAL_DMA_Init>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <HAL_SPI_MspInit+0x130>
    {
      Error_Handler();
 8002b9c:	f7ff fa5a 	bl	8002054 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a09      	ldr	r2, [pc, #36]	@ (8002bc8 <HAL_SPI_MspInit+0x158>)
 8002ba4:	655a      	str	r2, [r3, #84]	@ 0x54
 8002ba6:	4a08      	ldr	r2, [pc, #32]	@ (8002bc8 <HAL_SPI_MspInit+0x158>)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002bac:	bf00      	nop
 8002bae:	3728      	adds	r7, #40	@ 0x28
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40003800 	.word	0x40003800
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	48000400 	.word	0x48000400
 8002bc0:	20000494 	.word	0x20000494
 8002bc4:	40020008 	.word	0x40020008
 8002bc8:	200004f4 	.word	0x200004f4
 8002bcc:	4002001c 	.word	0x4002001c

08002bd0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002be0:	d10b      	bne.n	8002bfa <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002be2:	4b09      	ldr	r3, [pc, #36]	@ (8002c08 <HAL_TIM_Base_MspInit+0x38>)
 8002be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be6:	4a08      	ldr	r2, [pc, #32]	@ (8002c08 <HAL_TIM_Base_MspInit+0x38>)
 8002be8:	f043 0301 	orr.w	r3, r3, #1
 8002bec:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bee:	4b06      	ldr	r3, [pc, #24]	@ (8002c08 <HAL_TIM_Base_MspInit+0x38>)
 8002bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002bfa:	bf00      	nop
 8002bfc:	3714      	adds	r7, #20
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	40021000 	.word	0x40021000

08002c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c10:	bf00      	nop
 8002c12:	e7fd      	b.n	8002c10 <NMI_Handler+0x4>

08002c14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c18:	bf00      	nop
 8002c1a:	e7fd      	b.n	8002c18 <HardFault_Handler+0x4>

08002c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c20:	bf00      	nop
 8002c22:	e7fd      	b.n	8002c20 <MemManage_Handler+0x4>

08002c24 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c28:	bf00      	nop
 8002c2a:	e7fd      	b.n	8002c28 <BusFault_Handler+0x4>

08002c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c30:	bf00      	nop
 8002c32:	e7fd      	b.n	8002c30 <UsageFault_Handler+0x4>

08002c34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c38:	bf00      	nop
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c42:	b480      	push	{r7}
 8002c44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c46:	bf00      	nop
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c54:	bf00      	nop
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c62:	f000 fef9 	bl	8003a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c66:	bf00      	nop
 8002c68:	bd80      	pop	{r7, pc}
	...

08002c6c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002c70:	4802      	ldr	r0, [pc, #8]	@ (8002c7c <DMA1_Channel1_IRQHandler+0x10>)
 8002c72:	f001 f964 	bl	8003f3e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002c76:	bf00      	nop
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20000494 	.word	0x20000494

08002c80 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002c84:	4802      	ldr	r0, [pc, #8]	@ (8002c90 <DMA1_Channel2_IRQHandler+0x10>)
 8002c86:	f001 f95a 	bl	8003f3e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	200004f4 	.word	0x200004f4

08002c94 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002c98:	4802      	ldr	r0, [pc, #8]	@ (8002ca4 <FDCAN1_IT0_IRQHandler+0x10>)
 8002c9a:	f001 fe69 	bl	8004970 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002c9e:	bf00      	nop
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	200003cc 	.word	0x200003cc

08002ca8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  return 1;
 8002cac:	2301      	movs	r3, #1
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <_kill>:

int _kill(int pid, int sig)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002cc2:	f005 ffc5 	bl	8008c50 <__errno>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2216      	movs	r2, #22
 8002cca:	601a      	str	r2, [r3, #0]
  return -1;
 8002ccc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <_exit>:

void _exit (int status)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ce0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f7ff ffe7 	bl	8002cb8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002cea:	bf00      	nop
 8002cec:	e7fd      	b.n	8002cea <_exit+0x12>

08002cee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b086      	sub	sp, #24
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	60f8      	str	r0, [r7, #12]
 8002cf6:	60b9      	str	r1, [r7, #8]
 8002cf8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	617b      	str	r3, [r7, #20]
 8002cfe:	e00a      	b.n	8002d16 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d00:	f3af 8000 	nop.w
 8002d04:	4601      	mov	r1, r0
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	1c5a      	adds	r2, r3, #1
 8002d0a:	60ba      	str	r2, [r7, #8]
 8002d0c:	b2ca      	uxtb	r2, r1
 8002d0e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	3301      	adds	r3, #1
 8002d14:	617b      	str	r3, [r7, #20]
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	dbf0      	blt.n	8002d00 <_read+0x12>
  }

  return len;
 8002d1e:	687b      	ldr	r3, [r7, #4]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3718      	adds	r7, #24
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d34:	2300      	movs	r3, #0
 8002d36:	617b      	str	r3, [r7, #20]
 8002d38:	e009      	b.n	8002d4e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	1c5a      	adds	r2, r3, #1
 8002d3e:	60ba      	str	r2, [r7, #8]
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	617b      	str	r3, [r7, #20]
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	dbf1      	blt.n	8002d3a <_write+0x12>
  }
  return len;
 8002d56:	687b      	ldr	r3, [r7, #4]
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3718      	adds	r7, #24
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <_close>:

int _close(int file)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d88:	605a      	str	r2, [r3, #4]
  return 0;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <_isatty>:

int _isatty(int file)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002da0:	2301      	movs	r3, #1
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b085      	sub	sp, #20
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	60f8      	str	r0, [r7, #12]
 8002db6:	60b9      	str	r1, [r7, #8]
 8002db8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3714      	adds	r7, #20
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002dd0:	4a14      	ldr	r2, [pc, #80]	@ (8002e24 <_sbrk+0x5c>)
 8002dd2:	4b15      	ldr	r3, [pc, #84]	@ (8002e28 <_sbrk+0x60>)
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ddc:	4b13      	ldr	r3, [pc, #76]	@ (8002e2c <_sbrk+0x64>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d102      	bne.n	8002dea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002de4:	4b11      	ldr	r3, [pc, #68]	@ (8002e2c <_sbrk+0x64>)
 8002de6:	4a12      	ldr	r2, [pc, #72]	@ (8002e30 <_sbrk+0x68>)
 8002de8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dea:	4b10      	ldr	r3, [pc, #64]	@ (8002e2c <_sbrk+0x64>)
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4413      	add	r3, r2
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d207      	bcs.n	8002e08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002df8:	f005 ff2a 	bl	8008c50 <__errno>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	220c      	movs	r2, #12
 8002e00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002e06:	e009      	b.n	8002e1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e08:	4b08      	ldr	r3, [pc, #32]	@ (8002e2c <_sbrk+0x64>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e0e:	4b07      	ldr	r3, [pc, #28]	@ (8002e2c <_sbrk+0x64>)
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4413      	add	r3, r2
 8002e16:	4a05      	ldr	r2, [pc, #20]	@ (8002e2c <_sbrk+0x64>)
 8002e18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3718      	adds	r7, #24
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	20020000 	.word	0x20020000
 8002e28:	00000400 	.word	0x00000400
 8002e2c:	200005f0 	.word	0x200005f0
 8002e30:	20000750 	.word	0x20000750

08002e34 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002e38:	4b06      	ldr	r3, [pc, #24]	@ (8002e54 <SystemInit+0x20>)
 8002e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e3e:	4a05      	ldr	r2, [pc, #20]	@ (8002e54 <SystemInit+0x20>)
 8002e40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e48:	bf00      	nop
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	e000ed00 	.word	0xe000ed00

08002e58 <W5500_Select>:
		.dns = {0,0,0,0},
		.dhcp = NETINFO_STATIC

};
void W5500_Select(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PIN_GPIO_Port,CS_PIN_Pin,GPIO_PIN_RESET);
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	2102      	movs	r1, #2
 8002e60:	4802      	ldr	r0, [pc, #8]	@ (8002e6c <W5500_Select+0x14>)
 8002e62:	f002 f90f 	bl	8005084 <HAL_GPIO_WritePin>
}
 8002e66:	bf00      	nop
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	48000400 	.word	0x48000400

08002e70 <W5500_Unselect>:

void W5500_Unselect(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_SET);
 8002e74:	2201      	movs	r2, #1
 8002e76:	2102      	movs	r1, #2
 8002e78:	4802      	ldr	r0, [pc, #8]	@ (8002e84 <W5500_Unselect+0x14>)
 8002e7a:	f002 f903 	bl	8005084 <HAL_GPIO_WritePin>
}
 8002e7e:	bf00      	nop
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	48000400 	.word	0x48000400

08002e88 <W5500_ReadByte>:

uint8_t W5500_ReadByte(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
    uint8_t byte;
    HAL_SPI_Receive(&hspi2, &byte, 1, HAL_MAX_DELAY);
 8002e8e:	1df9      	adds	r1, r7, #7
 8002e90:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002e94:	2201      	movs	r2, #1
 8002e96:	4804      	ldr	r0, [pc, #16]	@ (8002ea8 <W5500_ReadByte+0x20>)
 8002e98:	f003 fb3f 	bl	800651a <HAL_SPI_Receive>
    return byte;
 8002e9c:	79fb      	ldrb	r3, [r7, #7]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20000430 	.word	0x20000430

08002eac <W5500_WriteByte>:
void W5500_WriteByte(uint8_t byte)

{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi2, &byte, 1, HAL_MAX_DELAY);
 8002eb6:	1df9      	adds	r1, r7, #7
 8002eb8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	4803      	ldr	r0, [pc, #12]	@ (8002ecc <W5500_WriteByte+0x20>)
 8002ec0:	f003 f9b5 	bl	800622e <HAL_SPI_Transmit>
}
 8002ec4:	bf00      	nop
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	20000430 	.word	0x20000430

08002ed0 <W5500_ReadBuff>:

void W5500_ReadBuff(uint8_t* buff, uint16_t len)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	807b      	strh	r3, [r7, #2]
	 spiRxComplete = 0;
 8002edc:	4b0a      	ldr	r3, [pc, #40]	@ (8002f08 <W5500_ReadBuff+0x38>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Receive_DMA(&hspi2, buff, len);
 8002ee2:	887b      	ldrh	r3, [r7, #2]
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	4808      	ldr	r0, [pc, #32]	@ (8002f0c <W5500_ReadBuff+0x3c>)
 8002eea:	f003 ff5b 	bl	8006da4 <HAL_SPI_Receive_DMA>
    while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8002eee:	bf00      	nop
 8002ef0:	4806      	ldr	r0, [pc, #24]	@ (8002f0c <W5500_ReadBuff+0x3c>)
 8002ef2:	f004 fa2f 	bl	8007354 <HAL_SPI_GetState>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d1f9      	bne.n	8002ef0 <W5500_ReadBuff+0x20>

}
 8002efc:	bf00      	nop
 8002efe:	bf00      	nop
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	2000000d 	.word	0x2000000d
 8002f0c:	20000430 	.word	0x20000430

08002f10 <W5500_WriteBuff>:
void W5500_WriteBuff(uint8_t* buff, uint16_t len)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	807b      	strh	r3, [r7, #2]
	 spiTxComplete = 0;
 8002f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8002f48 <W5500_WriteBuff+0x38>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit_DMA(&hspi2, buff, len);
 8002f22:	887b      	ldrh	r3, [r7, #2]
 8002f24:	461a      	mov	r2, r3
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	4808      	ldr	r0, [pc, #32]	@ (8002f4c <W5500_WriteBuff+0x3c>)
 8002f2a:	f003 fe4d 	bl	8006bc8 <HAL_SPI_Transmit_DMA>
    while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8002f2e:	bf00      	nop
 8002f30:	4806      	ldr	r0, [pc, #24]	@ (8002f4c <W5500_WriteBuff+0x3c>)
 8002f32:	f004 fa0f 	bl	8007354 <HAL_SPI_GetState>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d1f9      	bne.n	8002f30 <W5500_WriteBuff+0x20>

}
 8002f3c:	bf00      	nop
 8002f3e:	bf00      	nop
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	2000000c 	.word	0x2000000c
 8002f4c:	20000430 	.word	0x20000430

08002f50 <HAL_SPI_TxCpltCallback>:
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
    if(hspi->Instance == SPI2)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a05      	ldr	r2, [pc, #20]	@ (8002f74 <HAL_SPI_TxCpltCallback+0x24>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d102      	bne.n	8002f68 <HAL_SPI_TxCpltCallback+0x18>
    {
    	 spiTxComplete = 1;
 8002f62:	4b05      	ldr	r3, [pc, #20]	@ (8002f78 <HAL_SPI_TxCpltCallback+0x28>)
 8002f64:	2201      	movs	r2, #1
 8002f66:	701a      	strb	r2, [r3, #0]
    }
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	40003800 	.word	0x40003800
 8002f78:	2000000c 	.word	0x2000000c

08002f7c <HAL_SPI_RxCpltCallback>:
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
    if(hspi->Instance == SPI2)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a05      	ldr	r2, [pc, #20]	@ (8002fa0 <HAL_SPI_RxCpltCallback+0x24>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d102      	bne.n	8002f94 <HAL_SPI_RxCpltCallback+0x18>
    {
    	 spiRxComplete = 1;
 8002f8e:	4b05      	ldr	r3, [pc, #20]	@ (8002fa4 <HAL_SPI_RxCpltCallback+0x28>)
 8002f90:	2201      	movs	r2, #1
 8002f92:	701a      	strb	r2, [r3, #0]
    }
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	40003800 	.word	0x40003800
 8002fa4:	2000000d 	.word	0x2000000d

08002fa8 <W5500_Init>:
void W5500_Init(){
 8002fa8:	b590      	push	{r4, r7, lr}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0


	HAL_GPIO_WritePin(RST_PIN_GPIO_Port,RST_PIN_Pin,GPIO_PIN_RESET);
 8002fae:	2200      	movs	r2, #0
 8002fb0:	2140      	movs	r1, #64	@ 0x40
 8002fb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fb6:	f002 f865 	bl	8005084 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002fba:	2001      	movs	r0, #1
 8002fbc:	f000 fd6a 	bl	8003a94 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PIN_GPIO_Port,RST_PIN_Pin,GPIO_PIN_SET);
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	2140      	movs	r1, #64	@ 0x40
 8002fc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fc8:	f002 f85c 	bl	8005084 <HAL_GPIO_WritePin>

    reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 8002fcc:	4910      	ldr	r1, [pc, #64]	@ (8003010 <W5500_Init+0x68>)
 8002fce:	4811      	ldr	r0, [pc, #68]	@ (8003014 <W5500_Init+0x6c>)
 8002fd0:	f000 fb30 	bl	8003634 <reg_wizchip_cs_cbfunc>
    reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 8002fd4:	4910      	ldr	r1, [pc, #64]	@ (8003018 <W5500_Init+0x70>)
 8002fd6:	4811      	ldr	r0, [pc, #68]	@ (800301c <W5500_Init+0x74>)
 8002fd8:	f000 fb52 	bl	8003680 <reg_wizchip_spi_cbfunc>
    reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 8002fdc:	4910      	ldr	r1, [pc, #64]	@ (8003020 <W5500_Init+0x78>)
 8002fde:	4811      	ldr	r0, [pc, #68]	@ (8003024 <W5500_Init+0x7c>)
 8002fe0:	f000 fb7a 	bl	80036d8 <reg_wizchip_spiburst_cbfunc>

    uint8_t memsize[2][8] = {{2,2,2,2,2,2,2,2}, {2,2,2,2,2,2,2,2}};
 8002fe4:	4b10      	ldr	r3, [pc, #64]	@ (8003028 <W5500_Init+0x80>)
 8002fe6:	463c      	mov	r4, r7
 8002fe8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if(wizchip_init(memsize[0], memsize[1]) < 0)
 8002fee:	463b      	mov	r3, r7
 8002ff0:	f103 0208 	add.w	r2, r3, #8
 8002ff4:	463b      	mov	r3, r7
 8002ff6:	4611      	mov	r1, r2
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f000 fbe5 	bl	80037c8 <wizchip_init>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	da01      	bge.n	8003008 <W5500_Init+0x60>
    {
    	Error_Handler();
 8003004:	f7ff f826 	bl	8002054 <Error_Handler>
    }

}
 8003008:	bf00      	nop
 800300a:	3714      	adds	r7, #20
 800300c:	46bd      	mov	sp, r7
 800300e:	bd90      	pop	{r4, r7, pc}
 8003010:	08002e71 	.word	0x08002e71
 8003014:	08002e59 	.word	0x08002e59
 8003018:	08002ead 	.word	0x08002ead
 800301c:	08002e89 	.word	0x08002e89
 8003020:	08002f11 	.word	0x08002f11
 8003024:	08002ed1 	.word	0x08002ed1
 8003028:	0800aa10 	.word	0x0800aa10

0800302c <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8003034:	4b22      	ldr	r3, [pc, #136]	@ (80030c0 <WIZCHIP_READ+0x94>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	4798      	blx	r3
   WIZCHIP.CS._select();
 800303a:	4b21      	ldr	r3, [pc, #132]	@ (80030c0 <WIZCHIP_READ+0x94>)
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003040:	4b1f      	ldr	r3, [pc, #124]	@ (80030c0 <WIZCHIP_READ+0x94>)
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d003      	beq.n	8003050 <WIZCHIP_READ+0x24>
 8003048:	4b1d      	ldr	r3, [pc, #116]	@ (80030c0 <WIZCHIP_READ+0x94>)
 800304a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800304c:	2b00      	cmp	r3, #0
 800304e:	d114      	bne.n	800307a <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003050:	4b1b      	ldr	r3, [pc, #108]	@ (80030c0 <WIZCHIP_READ+0x94>)
 8003052:	69db      	ldr	r3, [r3, #28]
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	0c12      	lsrs	r2, r2, #16
 8003058:	b2d2      	uxtb	r2, r2
 800305a:	4610      	mov	r0, r2
 800305c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800305e:	4b18      	ldr	r3, [pc, #96]	@ (80030c0 <WIZCHIP_READ+0x94>)
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	0a12      	lsrs	r2, r2, #8
 8003066:	b2d2      	uxtb	r2, r2
 8003068:	4610      	mov	r0, r2
 800306a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800306c:	4b14      	ldr	r3, [pc, #80]	@ (80030c0 <WIZCHIP_READ+0x94>)
 800306e:	69db      	ldr	r3, [r3, #28]
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	4610      	mov	r0, r2
 8003076:	4798      	blx	r3
 8003078:	e011      	b.n	800309e <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	0c1b      	lsrs	r3, r3, #16
 800307e:	b2db      	uxtb	r3, r3
 8003080:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	0a1b      	lsrs	r3, r3, #8
 8003086:	b2db      	uxtb	r3, r3
 8003088:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	b2db      	uxtb	r3, r3
 800308e:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8003090:	4b0b      	ldr	r3, [pc, #44]	@ (80030c0 <WIZCHIP_READ+0x94>)
 8003092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003094:	f107 020c 	add.w	r2, r7, #12
 8003098:	2103      	movs	r1, #3
 800309a:	4610      	mov	r0, r2
 800309c:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 800309e:	4b08      	ldr	r3, [pc, #32]	@ (80030c0 <WIZCHIP_READ+0x94>)
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	4798      	blx	r3
 80030a4:	4603      	mov	r3, r0
 80030a6:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 80030a8:	4b05      	ldr	r3, [pc, #20]	@ (80030c0 <WIZCHIP_READ+0x94>)
 80030aa:	695b      	ldr	r3, [r3, #20]
 80030ac:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80030ae:	4b04      	ldr	r3, [pc, #16]	@ (80030c0 <WIZCHIP_READ+0x94>)
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	4798      	blx	r3
   return ret;
 80030b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	20000028 	.word	0x20000028

080030c4 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	460b      	mov	r3, r1
 80030ce:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 80030d0:	4b22      	ldr	r3, [pc, #136]	@ (800315c <WIZCHIP_WRITE+0x98>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	4798      	blx	r3
   WIZCHIP.CS._select();
 80030d6:	4b21      	ldr	r3, [pc, #132]	@ (800315c <WIZCHIP_WRITE+0x98>)
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f043 0304 	orr.w	r3, r3, #4
 80030e2:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80030e4:	4b1d      	ldr	r3, [pc, #116]	@ (800315c <WIZCHIP_WRITE+0x98>)
 80030e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d119      	bne.n	8003120 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80030ec:	4b1b      	ldr	r3, [pc, #108]	@ (800315c <WIZCHIP_WRITE+0x98>)
 80030ee:	69db      	ldr	r3, [r3, #28]
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	0c12      	lsrs	r2, r2, #16
 80030f4:	b2d2      	uxtb	r2, r2
 80030f6:	4610      	mov	r0, r2
 80030f8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80030fa:	4b18      	ldr	r3, [pc, #96]	@ (800315c <WIZCHIP_WRITE+0x98>)
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	0a12      	lsrs	r2, r2, #8
 8003102:	b2d2      	uxtb	r2, r2
 8003104:	4610      	mov	r0, r2
 8003106:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003108:	4b14      	ldr	r3, [pc, #80]	@ (800315c <WIZCHIP_WRITE+0x98>)
 800310a:	69db      	ldr	r3, [r3, #28]
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	b2d2      	uxtb	r2, r2
 8003110:	4610      	mov	r0, r2
 8003112:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8003114:	4b11      	ldr	r3, [pc, #68]	@ (800315c <WIZCHIP_WRITE+0x98>)
 8003116:	69db      	ldr	r3, [r3, #28]
 8003118:	78fa      	ldrb	r2, [r7, #3]
 800311a:	4610      	mov	r0, r2
 800311c:	4798      	blx	r3
 800311e:	e013      	b.n	8003148 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	0c1b      	lsrs	r3, r3, #16
 8003124:	b2db      	uxtb	r3, r3
 8003126:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	0a1b      	lsrs	r3, r3, #8
 800312c:	b2db      	uxtb	r3, r3
 800312e:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	b2db      	uxtb	r3, r3
 8003134:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8003136:	78fb      	ldrb	r3, [r7, #3]
 8003138:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 800313a:	4b08      	ldr	r3, [pc, #32]	@ (800315c <WIZCHIP_WRITE+0x98>)
 800313c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800313e:	f107 020c 	add.w	r2, r7, #12
 8003142:	2104      	movs	r1, #4
 8003144:	4610      	mov	r0, r2
 8003146:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8003148:	4b04      	ldr	r3, [pc, #16]	@ (800315c <WIZCHIP_WRITE+0x98>)
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800314e:	4b03      	ldr	r3, [pc, #12]	@ (800315c <WIZCHIP_WRITE+0x98>)
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	4798      	blx	r3
}
 8003154:	bf00      	nop
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	20000028 	.word	0x20000028

08003160 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8003160:	b590      	push	{r4, r7, lr}
 8003162:	b087      	sub	sp, #28
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	4613      	mov	r3, r2
 800316c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800316e:	4b2b      	ldr	r3, [pc, #172]	@ (800321c <WIZCHIP_READ_BUF+0xbc>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003174:	4b29      	ldr	r3, [pc, #164]	@ (800321c <WIZCHIP_READ_BUF+0xbc>)
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800317a:	4b28      	ldr	r3, [pc, #160]	@ (800321c <WIZCHIP_READ_BUF+0xbc>)
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <WIZCHIP_READ_BUF+0x2a>
 8003182:	4b26      	ldr	r3, [pc, #152]	@ (800321c <WIZCHIP_READ_BUF+0xbc>)
 8003184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003186:	2b00      	cmp	r3, #0
 8003188:	d126      	bne.n	80031d8 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800318a:	4b24      	ldr	r3, [pc, #144]	@ (800321c <WIZCHIP_READ_BUF+0xbc>)
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	0c12      	lsrs	r2, r2, #16
 8003192:	b2d2      	uxtb	r2, r2
 8003194:	4610      	mov	r0, r2
 8003196:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003198:	4b20      	ldr	r3, [pc, #128]	@ (800321c <WIZCHIP_READ_BUF+0xbc>)
 800319a:	69db      	ldr	r3, [r3, #28]
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	0a12      	lsrs	r2, r2, #8
 80031a0:	b2d2      	uxtb	r2, r2
 80031a2:	4610      	mov	r0, r2
 80031a4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80031a6:	4b1d      	ldr	r3, [pc, #116]	@ (800321c <WIZCHIP_READ_BUF+0xbc>)
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	4610      	mov	r0, r2
 80031b0:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80031b2:	2300      	movs	r3, #0
 80031b4:	82fb      	strh	r3, [r7, #22]
 80031b6:	e00a      	b.n	80031ce <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80031b8:	4b18      	ldr	r3, [pc, #96]	@ (800321c <WIZCHIP_READ_BUF+0xbc>)
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	8afa      	ldrh	r2, [r7, #22]
 80031be:	68b9      	ldr	r1, [r7, #8]
 80031c0:	188c      	adds	r4, r1, r2
 80031c2:	4798      	blx	r3
 80031c4:	4603      	mov	r3, r0
 80031c6:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 80031c8:	8afb      	ldrh	r3, [r7, #22]
 80031ca:	3301      	adds	r3, #1
 80031cc:	82fb      	strh	r3, [r7, #22]
 80031ce:	8afa      	ldrh	r2, [r7, #22]
 80031d0:	88fb      	ldrh	r3, [r7, #6]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d3f0      	bcc.n	80031b8 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80031d6:	e017      	b.n	8003208 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	0c1b      	lsrs	r3, r3, #16
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	0a1b      	lsrs	r3, r3, #8
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80031ee:	4b0b      	ldr	r3, [pc, #44]	@ (800321c <WIZCHIP_READ_BUF+0xbc>)
 80031f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f2:	f107 0210 	add.w	r2, r7, #16
 80031f6:	2103      	movs	r1, #3
 80031f8:	4610      	mov	r0, r2
 80031fa:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 80031fc:	4b07      	ldr	r3, [pc, #28]	@ (800321c <WIZCHIP_READ_BUF+0xbc>)
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	88fa      	ldrh	r2, [r7, #6]
 8003202:	4611      	mov	r1, r2
 8003204:	68b8      	ldr	r0, [r7, #8]
 8003206:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8003208:	4b04      	ldr	r3, [pc, #16]	@ (800321c <WIZCHIP_READ_BUF+0xbc>)
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800320e:	4b03      	ldr	r3, [pc, #12]	@ (800321c <WIZCHIP_READ_BUF+0xbc>)
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	4798      	blx	r3
}
 8003214:	bf00      	nop
 8003216:	371c      	adds	r7, #28
 8003218:	46bd      	mov	sp, r7
 800321a:	bd90      	pop	{r4, r7, pc}
 800321c:	20000028 	.word	0x20000028

08003220 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	4613      	mov	r3, r2
 800322c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800322e:	4b2b      	ldr	r3, [pc, #172]	@ (80032dc <WIZCHIP_WRITE_BUF+0xbc>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003234:	4b29      	ldr	r3, [pc, #164]	@ (80032dc <WIZCHIP_WRITE_BUF+0xbc>)
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f043 0304 	orr.w	r3, r3, #4
 8003240:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003242:	4b26      	ldr	r3, [pc, #152]	@ (80032dc <WIZCHIP_WRITE_BUF+0xbc>)
 8003244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003246:	2b00      	cmp	r3, #0
 8003248:	d126      	bne.n	8003298 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800324a:	4b24      	ldr	r3, [pc, #144]	@ (80032dc <WIZCHIP_WRITE_BUF+0xbc>)
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	0c12      	lsrs	r2, r2, #16
 8003252:	b2d2      	uxtb	r2, r2
 8003254:	4610      	mov	r0, r2
 8003256:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003258:	4b20      	ldr	r3, [pc, #128]	@ (80032dc <WIZCHIP_WRITE_BUF+0xbc>)
 800325a:	69db      	ldr	r3, [r3, #28]
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	0a12      	lsrs	r2, r2, #8
 8003260:	b2d2      	uxtb	r2, r2
 8003262:	4610      	mov	r0, r2
 8003264:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003266:	4b1d      	ldr	r3, [pc, #116]	@ (80032dc <WIZCHIP_WRITE_BUF+0xbc>)
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	b2d2      	uxtb	r2, r2
 800326e:	4610      	mov	r0, r2
 8003270:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8003272:	2300      	movs	r3, #0
 8003274:	82fb      	strh	r3, [r7, #22]
 8003276:	e00a      	b.n	800328e <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8003278:	4b18      	ldr	r3, [pc, #96]	@ (80032dc <WIZCHIP_WRITE_BUF+0xbc>)
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	8afa      	ldrh	r2, [r7, #22]
 800327e:	68b9      	ldr	r1, [r7, #8]
 8003280:	440a      	add	r2, r1
 8003282:	7812      	ldrb	r2, [r2, #0]
 8003284:	4610      	mov	r0, r2
 8003286:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8003288:	8afb      	ldrh	r3, [r7, #22]
 800328a:	3301      	adds	r3, #1
 800328c:	82fb      	strh	r3, [r7, #22]
 800328e:	8afa      	ldrh	r2, [r7, #22]
 8003290:	88fb      	ldrh	r3, [r7, #6]
 8003292:	429a      	cmp	r2, r3
 8003294:	d3f0      	bcc.n	8003278 <WIZCHIP_WRITE_BUF+0x58>
 8003296:	e017      	b.n	80032c8 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	0c1b      	lsrs	r3, r3, #16
 800329c:	b2db      	uxtb	r3, r3
 800329e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	0a1b      	lsrs	r3, r3, #8
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80032ae:	4b0b      	ldr	r3, [pc, #44]	@ (80032dc <WIZCHIP_WRITE_BUF+0xbc>)
 80032b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b2:	f107 0210 	add.w	r2, r7, #16
 80032b6:	2103      	movs	r1, #3
 80032b8:	4610      	mov	r0, r2
 80032ba:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80032bc:	4b07      	ldr	r3, [pc, #28]	@ (80032dc <WIZCHIP_WRITE_BUF+0xbc>)
 80032be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c0:	88fa      	ldrh	r2, [r7, #6]
 80032c2:	4611      	mov	r1, r2
 80032c4:	68b8      	ldr	r0, [r7, #8]
 80032c6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80032c8:	4b04      	ldr	r3, [pc, #16]	@ (80032dc <WIZCHIP_WRITE_BUF+0xbc>)
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80032ce:	4b03      	ldr	r3, [pc, #12]	@ (80032dc <WIZCHIP_WRITE_BUF+0xbc>)
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	4798      	blx	r3
}
 80032d4:	bf00      	nop
 80032d6:	3718      	adds	r7, #24
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	20000028 	.word	0x20000028

080032e0 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 80032e0:	b590      	push	{r4, r7, lr}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	4603      	mov	r3, r0
 80032e8:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80032ea:	2300      	movs	r3, #0
 80032ec:	81fb      	strh	r3, [r7, #14]
 80032ee:	2300      	movs	r3, #0
 80032f0:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 80032f2:	79fb      	ldrb	r3, [r7, #7]
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	3301      	adds	r3, #1
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80032fe:	4618      	mov	r0, r3
 8003300:	f7ff fe94 	bl	800302c <WIZCHIP_READ>
 8003304:	4603      	mov	r3, r0
 8003306:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8003308:	89bb      	ldrh	r3, [r7, #12]
 800330a:	021b      	lsls	r3, r3, #8
 800330c:	b29c      	uxth	r4, r3
 800330e:	79fb      	ldrb	r3, [r7, #7]
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	3301      	adds	r3, #1
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 800331a:	4618      	mov	r0, r3
 800331c:	f7ff fe86 	bl	800302c <WIZCHIP_READ>
 8003320:	4603      	mov	r3, r0
 8003322:	4423      	add	r3, r4
 8003324:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8003326:	89bb      	ldrh	r3, [r7, #12]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d019      	beq.n	8003360 <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 800332c:	79fb      	ldrb	r3, [r7, #7]
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	3301      	adds	r3, #1
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff fe77 	bl	800302c <WIZCHIP_READ>
 800333e:	4603      	mov	r3, r0
 8003340:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8003342:	89fb      	ldrh	r3, [r7, #14]
 8003344:	021b      	lsls	r3, r3, #8
 8003346:	b29c      	uxth	r4, r3
 8003348:	79fb      	ldrb	r3, [r7, #7]
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	3301      	adds	r3, #1
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8003354:	4618      	mov	r0, r3
 8003356:	f7ff fe69 	bl	800302c <WIZCHIP_READ>
 800335a:	4603      	mov	r3, r0
 800335c:	4423      	add	r3, r4
 800335e:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8003360:	89fa      	ldrh	r2, [r7, #14]
 8003362:	89bb      	ldrh	r3, [r7, #12]
 8003364:	429a      	cmp	r2, r3
 8003366:	d1c4      	bne.n	80032f2 <getSn_TX_FSR+0x12>
   return val;
 8003368:	89fb      	ldrh	r3, [r7, #14]
}
 800336a:	4618      	mov	r0, r3
 800336c:	3714      	adds	r7, #20
 800336e:	46bd      	mov	sp, r7
 8003370:	bd90      	pop	{r4, r7, pc}

08003372 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8003372:	b590      	push	{r4, r7, lr}
 8003374:	b085      	sub	sp, #20
 8003376:	af00      	add	r7, sp, #0
 8003378:	4603      	mov	r3, r0
 800337a:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800337c:	2300      	movs	r3, #0
 800337e:	81fb      	strh	r3, [r7, #14]
 8003380:	2300      	movs	r3, #0
 8003382:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8003384:	79fb      	ldrb	r3, [r7, #7]
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	3301      	adds	r3, #1
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff fe4b 	bl	800302c <WIZCHIP_READ>
 8003396:	4603      	mov	r3, r0
 8003398:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800339a:	89bb      	ldrh	r3, [r7, #12]
 800339c:	021b      	lsls	r3, r3, #8
 800339e:	b29c      	uxth	r4, r3
 80033a0:	79fb      	ldrb	r3, [r7, #7]
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	3301      	adds	r3, #1
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff fe3d 	bl	800302c <WIZCHIP_READ>
 80033b2:	4603      	mov	r3, r0
 80033b4:	4423      	add	r3, r4
 80033b6:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80033b8:	89bb      	ldrh	r3, [r7, #12]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d019      	beq.n	80033f2 <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 80033be:	79fb      	ldrb	r3, [r7, #7]
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	3301      	adds	r3, #1
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7ff fe2e 	bl	800302c <WIZCHIP_READ>
 80033d0:	4603      	mov	r3, r0
 80033d2:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80033d4:	89fb      	ldrh	r3, [r7, #14]
 80033d6:	021b      	lsls	r3, r3, #8
 80033d8:	b29c      	uxth	r4, r3
 80033da:	79fb      	ldrb	r3, [r7, #7]
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	3301      	adds	r3, #1
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7ff fe20 	bl	800302c <WIZCHIP_READ>
 80033ec:	4603      	mov	r3, r0
 80033ee:	4423      	add	r3, r4
 80033f0:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80033f2:	89fa      	ldrh	r2, [r7, #14]
 80033f4:	89bb      	ldrh	r3, [r7, #12]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d1c4      	bne.n	8003384 <getSn_RX_RSR+0x12>
   return val;
 80033fa:	89fb      	ldrh	r3, [r7, #14]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3714      	adds	r7, #20
 8003400:	46bd      	mov	sp, r7
 8003402:	bd90      	pop	{r4, r7, pc}

08003404 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8003404:	b590      	push	{r4, r7, lr}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	4603      	mov	r3, r0
 800340c:	6039      	str	r1, [r7, #0]
 800340e:	71fb      	strb	r3, [r7, #7]
 8003410:	4613      	mov	r3, r2
 8003412:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8003414:	2300      	movs	r3, #0
 8003416:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8003418:	2300      	movs	r3, #0
 800341a:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 800341c:	88bb      	ldrh	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d046      	beq.n	80034b0 <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 8003422:	79fb      	ldrb	r3, [r7, #7]
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	3301      	adds	r3, #1
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 800342e:	4618      	mov	r0, r3
 8003430:	f7ff fdfc 	bl	800302c <WIZCHIP_READ>
 8003434:	4603      	mov	r3, r0
 8003436:	021b      	lsls	r3, r3, #8
 8003438:	b29c      	uxth	r4, r3
 800343a:	79fb      	ldrb	r3, [r7, #7]
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	3301      	adds	r3, #1
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8003446:	4618      	mov	r0, r3
 8003448:	f7ff fdf0 	bl	800302c <WIZCHIP_READ>
 800344c:	4603      	mov	r3, r0
 800344e:	4423      	add	r3, r4
 8003450:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8003452:	89fb      	ldrh	r3, [r7, #14]
 8003454:	021a      	lsls	r2, r3, #8
 8003456:	79fb      	ldrb	r3, [r7, #7]
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	3302      	adds	r3, #2
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	4413      	add	r3, r2
 8003460:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8003462:	88bb      	ldrh	r3, [r7, #4]
 8003464:	461a      	mov	r2, r3
 8003466:	6839      	ldr	r1, [r7, #0]
 8003468:	68b8      	ldr	r0, [r7, #8]
 800346a:	f7ff fed9 	bl	8003220 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 800346e:	89fa      	ldrh	r2, [r7, #14]
 8003470:	88bb      	ldrh	r3, [r7, #4]
 8003472:	4413      	add	r3, r2
 8003474:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8003476:	79fb      	ldrb	r3, [r7, #7]
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	3301      	adds	r3, #1
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8003482:	461a      	mov	r2, r3
 8003484:	89fb      	ldrh	r3, [r7, #14]
 8003486:	0a1b      	lsrs	r3, r3, #8
 8003488:	b29b      	uxth	r3, r3
 800348a:	b2db      	uxtb	r3, r3
 800348c:	4619      	mov	r1, r3
 800348e:	4610      	mov	r0, r2
 8003490:	f7ff fe18 	bl	80030c4 <WIZCHIP_WRITE>
 8003494:	79fb      	ldrb	r3, [r7, #7]
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	3301      	adds	r3, #1
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 80034a0:	461a      	mov	r2, r3
 80034a2:	89fb      	ldrh	r3, [r7, #14]
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	4619      	mov	r1, r3
 80034a8:	4610      	mov	r0, r2
 80034aa:	f7ff fe0b 	bl	80030c4 <WIZCHIP_WRITE>
 80034ae:	e000      	b.n	80034b2 <wiz_send_data+0xae>
   if(len == 0)  return;
 80034b0:	bf00      	nop
}
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd90      	pop	{r4, r7, pc}

080034b8 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80034b8:	b590      	push	{r4, r7, lr}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	4603      	mov	r3, r0
 80034c0:	6039      	str	r1, [r7, #0]
 80034c2:	71fb      	strb	r3, [r7, #7]
 80034c4:	4613      	mov	r3, r2
 80034c6:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80034c8:	2300      	movs	r3, #0
 80034ca:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80034cc:	2300      	movs	r3, #0
 80034ce:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 80034d0:	88bb      	ldrh	r3, [r7, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d046      	beq.n	8003564 <wiz_recv_data+0xac>
   ptr = getSn_RX_RD(sn);
 80034d6:	79fb      	ldrb	r3, [r7, #7]
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	3301      	adds	r3, #1
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7ff fda2 	bl	800302c <WIZCHIP_READ>
 80034e8:	4603      	mov	r3, r0
 80034ea:	021b      	lsls	r3, r3, #8
 80034ec:	b29c      	uxth	r4, r3
 80034ee:	79fb      	ldrb	r3, [r7, #7]
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	3301      	adds	r3, #1
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7ff fd96 	bl	800302c <WIZCHIP_READ>
 8003500:	4603      	mov	r3, r0
 8003502:	4423      	add	r3, r4
 8003504:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8003506:	89fb      	ldrh	r3, [r7, #14]
 8003508:	021a      	lsls	r2, r3, #8
 800350a:	79fb      	ldrb	r3, [r7, #7]
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	3303      	adds	r3, #3
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	4413      	add	r3, r2
 8003514:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8003516:	88bb      	ldrh	r3, [r7, #4]
 8003518:	461a      	mov	r2, r3
 800351a:	6839      	ldr	r1, [r7, #0]
 800351c:	68b8      	ldr	r0, [r7, #8]
 800351e:	f7ff fe1f 	bl	8003160 <WIZCHIP_READ_BUF>
   ptr += len;
 8003522:	89fa      	ldrh	r2, [r7, #14]
 8003524:	88bb      	ldrh	r3, [r7, #4]
 8003526:	4413      	add	r3, r2
 8003528:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 800352a:	79fb      	ldrb	r3, [r7, #7]
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	3301      	adds	r3, #1
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8003536:	461a      	mov	r2, r3
 8003538:	89fb      	ldrh	r3, [r7, #14]
 800353a:	0a1b      	lsrs	r3, r3, #8
 800353c:	b29b      	uxth	r3, r3
 800353e:	b2db      	uxtb	r3, r3
 8003540:	4619      	mov	r1, r3
 8003542:	4610      	mov	r0, r2
 8003544:	f7ff fdbe 	bl	80030c4 <WIZCHIP_WRITE>
 8003548:	79fb      	ldrb	r3, [r7, #7]
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	3301      	adds	r3, #1
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8003554:	461a      	mov	r2, r3
 8003556:	89fb      	ldrh	r3, [r7, #14]
 8003558:	b2db      	uxtb	r3, r3
 800355a:	4619      	mov	r1, r3
 800355c:	4610      	mov	r0, r2
 800355e:	f7ff fdb1 	bl	80030c4 <WIZCHIP_WRITE>
 8003562:	e000      	b.n	8003566 <wiz_recv_data+0xae>
   if(len == 0) return;
 8003564:	bf00      	nop
}
 8003566:	3714      	adds	r7, #20
 8003568:	46bd      	mov	sp, r7
 800356a:	bd90      	pop	{r4, r7, pc}

0800356c <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void       wizchip_cris_enter(void)           {};
void       wizchip_cris_enter(void)           {}
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
 8003570:	bf00      	nop
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void       wizchip_cris_exit(void)          {};
void       wizchip_cris_exit(void)          {}
 800357a:	b480      	push	{r7}
 800357c:	af00      	add	r7, sp, #0
 800357e:	bf00      	nop
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <wizchip_cs_select>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_select(void)            {};

void wizchip_cs_select(void) {}
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
 800358c:	bf00      	nop
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr

08003596 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_deselect(void)          {};
void wizchip_cs_deselect(void) { }
 8003596:	b480      	push	{r7}
 8003598:	af00      	add	r7, sp, #0
 800359a:	bf00      	nop
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	4618      	mov	r0, r3
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr

080035be <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void     wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void     wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 80035be:	b480      	push	{r7}
 80035c0:	b083      	sub	sp, #12
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
 80035c6:	460b      	mov	r3, r1
 80035c8:	70fb      	strb	r3, [r7, #3]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	78fa      	ldrb	r2, [r7, #3]
 80035ce:	701a      	strb	r2, [r3, #0]
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
 80035e0:	2300      	movs	r3, #0
 80035e2:	4618      	mov	r0, r3
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writebyte(uint8_t wb) {};
void     wizchip_spi_writebyte(uint8_t wb) {}
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	4603      	mov	r3, r0
 80035f4:	71fb      	strb	r3, [r7, #7]
 80035f6:	bf00      	nop
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)     {}; 
void     wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)     {}
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
 800360a:	460b      	mov	r3, r1
 800360c:	807b      	strh	r3, [r7, #2]
 800360e:	bf00      	nop
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr

0800361a <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 800361a:	b480      	push	{r7}
 800361c:	b083      	sub	sp, #12
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
 8003622:	460b      	mov	r3, r1
 8003624:	807b      	strh	r3, [r7, #2]
 8003626:	bf00      	nop
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
	...

08003634 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d002      	beq.n	800364a <reg_wizchip_cs_cbfunc+0x16>
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d106      	bne.n	8003658 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800364a:	4b0a      	ldr	r3, [pc, #40]	@ (8003674 <reg_wizchip_cs_cbfunc+0x40>)
 800364c:	4a0a      	ldr	r2, [pc, #40]	@ (8003678 <reg_wizchip_cs_cbfunc+0x44>)
 800364e:	611a      	str	r2, [r3, #16]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8003650:	4b08      	ldr	r3, [pc, #32]	@ (8003674 <reg_wizchip_cs_cbfunc+0x40>)
 8003652:	4a0a      	ldr	r2, [pc, #40]	@ (800367c <reg_wizchip_cs_cbfunc+0x48>)
 8003654:	615a      	str	r2, [r3, #20]
 8003656:	e006      	b.n	8003666 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8003658:	4a06      	ldr	r2, [pc, #24]	@ (8003674 <reg_wizchip_cs_cbfunc+0x40>)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6113      	str	r3, [r2, #16]
      WIZCHIP.CS._deselect = cs_desel;
 800365e:	4a05      	ldr	r2, [pc, #20]	@ (8003674 <reg_wizchip_cs_cbfunc+0x40>)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	6153      	str	r3, [r2, #20]
   }
}
 8003664:	bf00      	nop
 8003666:	bf00      	nop
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	20000028 	.word	0x20000028
 8003678:	08003589 	.word	0x08003589
 800367c:	08003597 	.word	0x08003597

08003680 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800368a:	bf00      	nop
 800368c:	4b0f      	ldr	r3, [pc, #60]	@ (80036cc <reg_wizchip_spi_cbfunc+0x4c>)
 800368e:	881b      	ldrh	r3, [r3, #0]
 8003690:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003694:	2b00      	cmp	r3, #0
 8003696:	d0f9      	beq.n	800368c <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d002      	beq.n	80036a4 <reg_wizchip_spi_cbfunc+0x24>
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d106      	bne.n	80036b2 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80036a4:	4b09      	ldr	r3, [pc, #36]	@ (80036cc <reg_wizchip_spi_cbfunc+0x4c>)
 80036a6:	4a0a      	ldr	r2, [pc, #40]	@ (80036d0 <reg_wizchip_spi_cbfunc+0x50>)
 80036a8:	619a      	str	r2, [r3, #24]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80036aa:	4b08      	ldr	r3, [pc, #32]	@ (80036cc <reg_wizchip_spi_cbfunc+0x4c>)
 80036ac:	4a09      	ldr	r2, [pc, #36]	@ (80036d4 <reg_wizchip_spi_cbfunc+0x54>)
 80036ae:	61da      	str	r2, [r3, #28]
 80036b0:	e006      	b.n	80036c0 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80036b2:	4a06      	ldr	r2, [pc, #24]	@ (80036cc <reg_wizchip_spi_cbfunc+0x4c>)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6193      	str	r3, [r2, #24]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80036b8:	4a04      	ldr	r2, [pc, #16]	@ (80036cc <reg_wizchip_spi_cbfunc+0x4c>)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	61d3      	str	r3, [r2, #28]
   }
}
 80036be:	bf00      	nop
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr
 80036cc:	20000028 	.word	0x20000028
 80036d0:	080035dd 	.word	0x080035dd
 80036d4:	080035ed 	.word	0x080035ed

080036d8 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80036e2:	bf00      	nop
 80036e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003724 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80036e6:	881b      	ldrh	r3, [r3, #0]
 80036e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d0f9      	beq.n	80036e4 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d002      	beq.n	80036fc <reg_wizchip_spiburst_cbfunc+0x24>
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d106      	bne.n	800370a <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 80036fc:	4b09      	ldr	r3, [pc, #36]	@ (8003724 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80036fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003728 <reg_wizchip_spiburst_cbfunc+0x50>)
 8003700:	621a      	str	r2, [r3, #32]
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8003702:	4b08      	ldr	r3, [pc, #32]	@ (8003724 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003704:	4a09      	ldr	r2, [pc, #36]	@ (800372c <reg_wizchip_spiburst_cbfunc+0x54>)
 8003706:	625a      	str	r2, [r3, #36]	@ 0x24
 8003708:	e006      	b.n	8003718 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 800370a:	4a06      	ldr	r2, [pc, #24]	@ (8003724 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6213      	str	r3, [r2, #32]
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8003710:	4a04      	ldr	r2, [pc, #16]	@ (8003724 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	6253      	str	r3, [r2, #36]	@ 0x24
   }
}
 8003716:	bf00      	nop
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	20000028 	.word	0x20000028
 8003728:	08003603 	.word	0x08003603
 800372c:	0800361b 	.word	0x0800361b

08003730 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8003736:	1d3b      	adds	r3, r7, #4
 8003738:	2206      	movs	r2, #6
 800373a:	4619      	mov	r1, r3
 800373c:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8003740:	f7ff fd0e 	bl	8003160 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8003744:	f107 0314 	add.w	r3, r7, #20
 8003748:	2204      	movs	r2, #4
 800374a:	4619      	mov	r1, r3
 800374c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003750:	f7ff fd06 	bl	8003160 <WIZCHIP_READ_BUF>
 8003754:	f107 0310 	add.w	r3, r7, #16
 8003758:	2204      	movs	r2, #4
 800375a:	4619      	mov	r1, r3
 800375c:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8003760:	f7ff fcfe 	bl	8003160 <WIZCHIP_READ_BUF>
 8003764:	f107 030c 	add.w	r3, r7, #12
 8003768:	2204      	movs	r2, #4
 800376a:	4619      	mov	r1, r3
 800376c:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8003770:	f7ff fcf6 	bl	8003160 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8003774:	2180      	movs	r1, #128	@ 0x80
 8003776:	2000      	movs	r0, #0
 8003778:	f7ff fca4 	bl	80030c4 <WIZCHIP_WRITE>
   getMR(); // for delay
 800377c:	2000      	movs	r0, #0
 800377e:	f7ff fc55 	bl	800302c <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8003782:	1d3b      	adds	r3, r7, #4
 8003784:	2206      	movs	r2, #6
 8003786:	4619      	mov	r1, r3
 8003788:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 800378c:	f7ff fd48 	bl	8003220 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8003790:	f107 0314 	add.w	r3, r7, #20
 8003794:	2204      	movs	r2, #4
 8003796:	4619      	mov	r1, r3
 8003798:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800379c:	f7ff fd40 	bl	8003220 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 80037a0:	f107 0310 	add.w	r3, r7, #16
 80037a4:	2204      	movs	r2, #4
 80037a6:	4619      	mov	r1, r3
 80037a8:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80037ac:	f7ff fd38 	bl	8003220 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 80037b0:	f107 030c 	add.w	r3, r7, #12
 80037b4:	2204      	movs	r2, #4
 80037b6:	4619      	mov	r1, r3
 80037b8:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80037bc:	f7ff fd30 	bl	8003220 <WIZCHIP_WRITE_BUF>
}
 80037c0:	bf00      	nop
 80037c2:	3718      	adds	r7, #24
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 80037d2:	2300      	movs	r3, #0
 80037d4:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 80037d6:	f7ff ffab 	bl	8003730 <wizchip_sw_reset>
   if(txsize)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d03b      	beq.n	8003858 <wizchip_init+0x90>
   {
      tmp = 0;
 80037e0:	2300      	movs	r3, #0
 80037e2:	73bb      	strb	r3, [r7, #14]
            tmp += txsize[i];
            if(tmp > 128) return -1;
        }
        if(tmp % 8) return -1;
   #else
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80037e4:	2300      	movs	r3, #0
 80037e6:	73fb      	strb	r3, [r7, #15]
 80037e8:	e015      	b.n	8003816 <wizchip_init+0x4e>
        {
            tmp += txsize[i];
 80037ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	4413      	add	r3, r2
 80037f2:	781a      	ldrb	r2, [r3, #0]
 80037f4:	7bbb      	ldrb	r3, [r7, #14]
 80037f6:	4413      	add	r3, r2
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	73bb      	strb	r3, [r7, #14]

        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100 and w5100s
            if(tmp > 8) return -1;
        #else
            if(tmp > 16) return -1;
 80037fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003800:	2b10      	cmp	r3, #16
 8003802:	dd02      	ble.n	800380a <wizchip_init+0x42>
 8003804:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003808:	e066      	b.n	80038d8 <wizchip_init+0x110>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800380a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800380e:	b2db      	uxtb	r3, r3
 8003810:	3301      	adds	r3, #1
 8003812:	b2db      	uxtb	r3, r3
 8003814:	73fb      	strb	r3, [r7, #15]
 8003816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800381a:	2b07      	cmp	r3, #7
 800381c:	dde5      	ble.n	80037ea <wizchip_init+0x22>
        #endif
        }
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800381e:	2300      	movs	r3, #0
 8003820:	73fb      	strb	r3, [r7, #15]
 8003822:	e015      	b.n	8003850 <wizchip_init+0x88>
        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100
            j = 0;
            while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
            setSn_TXBUF_SIZE(i, j);
        #else
            setSn_TXBUF_SIZE(i, txsize[i]);
 8003824:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	3301      	adds	r3, #1
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8003832:	4618      	mov	r0, r3
 8003834:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	4413      	add	r3, r2
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	4619      	mov	r1, r3
 8003840:	f7ff fc40 	bl	80030c4 <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003844:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003848:	b2db      	uxtb	r3, r3
 800384a:	3301      	adds	r3, #1
 800384c:	b2db      	uxtb	r3, r3
 800384e:	73fb      	strb	r3, [r7, #15]
 8003850:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003854:	2b07      	cmp	r3, #7
 8003856:	dde5      	ble.n	8003824 <wizchip_init+0x5c>
        }

    #endif
   }

   if(rxsize)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d03b      	beq.n	80038d6 <wizchip_init+0x10e>
   {
      tmp = 0;
 800385e:	2300      	movs	r3, #0
 8003860:	73bb      	strb	r3, [r7, #14]
            tmp += rxsize[i];
            if(tmp > 128) return -1;
        }
        if(tmp % 8) return -1;
   #else
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003862:	2300      	movs	r3, #0
 8003864:	73fb      	strb	r3, [r7, #15]
 8003866:	e015      	b.n	8003894 <wizchip_init+0xcc>
        {
            tmp += rxsize[i];
 8003868:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	4413      	add	r3, r2
 8003870:	781a      	ldrb	r2, [r3, #0]
 8003872:	7bbb      	ldrb	r3, [r7, #14]
 8003874:	4413      	add	r3, r2
 8003876:	b2db      	uxtb	r3, r3
 8003878:	73bb      	strb	r3, [r7, #14]
        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100 and w5100s
            if(tmp > 8) return -1;
        #else
            if(tmp > 16) return -1;
 800387a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800387e:	2b10      	cmp	r3, #16
 8003880:	dd02      	ble.n	8003888 <wizchip_init+0xc0>
 8003882:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003886:	e027      	b.n	80038d8 <wizchip_init+0x110>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003888:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800388c:	b2db      	uxtb	r3, r3
 800388e:	3301      	adds	r3, #1
 8003890:	b2db      	uxtb	r3, r3
 8003892:	73fb      	strb	r3, [r7, #15]
 8003894:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003898:	2b07      	cmp	r3, #7
 800389a:	dde5      	ble.n	8003868 <wizchip_init+0xa0>
        #endif
        }

        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800389c:	2300      	movs	r3, #0
 800389e:	73fb      	strb	r3, [r7, #15]
 80038a0:	e015      	b.n	80038ce <wizchip_init+0x106>
        #if _WIZCHIP_ < W5200    // add condition for w5100
            j = 0;
            while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
            setSn_RXBUF_SIZE(i, j);
        #else
            setSn_RXBUF_SIZE(i, rxsize[i]);
 80038a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	3301      	adds	r3, #1
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 80038b0:	4618      	mov	r0, r3
 80038b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	4413      	add	r3, r2
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	4619      	mov	r1, r3
 80038be:	f7ff fc01 	bl	80030c4 <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80038c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	3301      	adds	r3, #1
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	73fb      	strb	r3, [r7, #15]
 80038ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038d2:	2b07      	cmp	r3, #7
 80038d4:	dde5      	ble.n	80038a2 <wizchip_init+0xda>
        #endif
        }
    #endif
   }
   return 0;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2206      	movs	r2, #6
 80038ec:	4619      	mov	r1, r3
 80038ee:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80038f2:	f7ff fc95 	bl	8003220 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	330e      	adds	r3, #14
 80038fa:	2204      	movs	r2, #4
 80038fc:	4619      	mov	r1, r3
 80038fe:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003902:	f7ff fc8d 	bl	8003220 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	330a      	adds	r3, #10
 800390a:	2204      	movs	r2, #4
 800390c:	4619      	mov	r1, r3
 800390e:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8003912:	f7ff fc85 	bl	8003220 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	3306      	adds	r3, #6
 800391a:	2204      	movs	r2, #4
 800391c:	4619      	mov	r1, r3
 800391e:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8003922:	f7ff fc7d 	bl	8003220 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	7c9a      	ldrb	r2, [r3, #18]
 800392a:	4b0b      	ldr	r3, [pc, #44]	@ (8003958 <wizchip_setnetinfo+0x78>)
 800392c:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	7cda      	ldrb	r2, [r3, #19]
 8003932:	4b09      	ldr	r3, [pc, #36]	@ (8003958 <wizchip_setnetinfo+0x78>)
 8003934:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	7d1a      	ldrb	r2, [r3, #20]
 800393a:	4b07      	ldr	r3, [pc, #28]	@ (8003958 <wizchip_setnetinfo+0x78>)
 800393c:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	7d5a      	ldrb	r2, [r3, #21]
 8003942:	4b05      	ldr	r3, [pc, #20]	@ (8003958 <wizchip_setnetinfo+0x78>)
 8003944:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	7d9a      	ldrb	r2, [r3, #22]
 800394a:	4b04      	ldr	r3, [pc, #16]	@ (800395c <wizchip_setnetinfo+0x7c>)
 800394c:	701a      	strb	r2, [r3, #0]
}
 800394e:	bf00      	nop
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	200005f4 	.word	0x200005f4
 800395c:	200005f8 	.word	0x200005f8

08003960 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003960:	480d      	ldr	r0, [pc, #52]	@ (8003998 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003962:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003964:	f7ff fa66 	bl	8002e34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003968:	480c      	ldr	r0, [pc, #48]	@ (800399c <LoopForever+0x6>)
  ldr r1, =_edata
 800396a:	490d      	ldr	r1, [pc, #52]	@ (80039a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800396c:	4a0d      	ldr	r2, [pc, #52]	@ (80039a4 <LoopForever+0xe>)
  movs r3, #0
 800396e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003970:	e002      	b.n	8003978 <LoopCopyDataInit>

08003972 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003972:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003974:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003976:	3304      	adds	r3, #4

08003978 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003978:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800397a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800397c:	d3f9      	bcc.n	8003972 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800397e:	4a0a      	ldr	r2, [pc, #40]	@ (80039a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003980:	4c0a      	ldr	r4, [pc, #40]	@ (80039ac <LoopForever+0x16>)
  movs r3, #0
 8003982:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003984:	e001      	b.n	800398a <LoopFillZerobss>

08003986 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003986:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003988:	3204      	adds	r2, #4

0800398a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800398a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800398c:	d3fb      	bcc.n	8003986 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800398e:	f005 f965 	bl	8008c5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003992:	f7fe f815 	bl	80019c0 <main>

08003996 <LoopForever>:

LoopForever:
    b LoopForever
 8003996:	e7fe      	b.n	8003996 <LoopForever>
  ldr   r0, =_estack
 8003998:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800399c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039a0:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 80039a4:	0800adc4 	.word	0x0800adc4
  ldr r2, =_sbss
 80039a8:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 80039ac:	2000074c 	.word	0x2000074c

080039b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80039b0:	e7fe      	b.n	80039b0 <ADC1_2_IRQHandler>

080039b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b082      	sub	sp, #8
 80039b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80039b8:	2300      	movs	r3, #0
 80039ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039bc:	2003      	movs	r0, #3
 80039be:	f000 f95b 	bl	8003c78 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80039c2:	2000      	movs	r0, #0
 80039c4:	f000 f80e 	bl	80039e4 <HAL_InitTick>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d002      	beq.n	80039d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	71fb      	strb	r3, [r7, #7]
 80039d2:	e001      	b.n	80039d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80039d4:	f7fe ffc4 	bl	8002960 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80039d8:	79fb      	ldrb	r3, [r7, #7]

}
 80039da:	4618      	mov	r0, r3
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
	...

080039e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80039ec:	2300      	movs	r3, #0
 80039ee:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80039f0:	4b16      	ldr	r3, [pc, #88]	@ (8003a4c <HAL_InitTick+0x68>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d022      	beq.n	8003a3e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80039f8:	4b15      	ldr	r3, [pc, #84]	@ (8003a50 <HAL_InitTick+0x6c>)
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	4b13      	ldr	r3, [pc, #76]	@ (8003a4c <HAL_InitTick+0x68>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003a04:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 f966 	bl	8003cde <HAL_SYSTICK_Config>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10f      	bne.n	8003a38 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b0f      	cmp	r3, #15
 8003a1c:	d809      	bhi.n	8003a32 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a1e:	2200      	movs	r2, #0
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003a26:	f000 f932 	bl	8003c8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8003a54 <HAL_InitTick+0x70>)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6013      	str	r3, [r2, #0]
 8003a30:	e007      	b.n	8003a42 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	73fb      	strb	r3, [r7, #15]
 8003a36:	e004      	b.n	8003a42 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	73fb      	strb	r3, [r7, #15]
 8003a3c:	e001      	b.n	8003a42 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	20000054 	.word	0x20000054
 8003a50:	20000008 	.word	0x20000008
 8003a54:	20000050 	.word	0x20000050

08003a58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a5c:	4b05      	ldr	r3, [pc, #20]	@ (8003a74 <HAL_IncTick+0x1c>)
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	4b05      	ldr	r3, [pc, #20]	@ (8003a78 <HAL_IncTick+0x20>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4413      	add	r3, r2
 8003a66:	4a03      	ldr	r2, [pc, #12]	@ (8003a74 <HAL_IncTick+0x1c>)
 8003a68:	6013      	str	r3, [r2, #0]
}
 8003a6a:	bf00      	nop
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr
 8003a74:	200005fc 	.word	0x200005fc
 8003a78:	20000054 	.word	0x20000054

08003a7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
  return uwTick;
 8003a80:	4b03      	ldr	r3, [pc, #12]	@ (8003a90 <HAL_GetTick+0x14>)
 8003a82:	681b      	ldr	r3, [r3, #0]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	200005fc 	.word	0x200005fc

08003a94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a9c:	f7ff ffee 	bl	8003a7c <HAL_GetTick>
 8003aa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003aac:	d004      	beq.n	8003ab8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003aae:	4b09      	ldr	r3, [pc, #36]	@ (8003ad4 <HAL_Delay+0x40>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003ab8:	bf00      	nop
 8003aba:	f7ff ffdf 	bl	8003a7c <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d8f7      	bhi.n	8003aba <HAL_Delay+0x26>
  {
  }
}
 8003aca:	bf00      	nop
 8003acc:	bf00      	nop
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	20000054 	.word	0x20000054

08003ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f003 0307 	and.w	r3, r3, #7
 8003ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8003b1c <__NVIC_SetPriorityGrouping+0x44>)
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003aee:	68ba      	ldr	r2, [r7, #8]
 8003af0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003af4:	4013      	ands	r3, r2
 8003af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003b04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b0a:	4a04      	ldr	r2, [pc, #16]	@ (8003b1c <__NVIC_SetPriorityGrouping+0x44>)
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	60d3      	str	r3, [r2, #12]
}
 8003b10:	bf00      	nop
 8003b12:	3714      	adds	r7, #20
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr
 8003b1c:	e000ed00 	.word	0xe000ed00

08003b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b24:	4b04      	ldr	r3, [pc, #16]	@ (8003b38 <__NVIC_GetPriorityGrouping+0x18>)
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	0a1b      	lsrs	r3, r3, #8
 8003b2a:	f003 0307 	and.w	r3, r3, #7
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr
 8003b38:	e000ed00 	.word	0xe000ed00

08003b3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	4603      	mov	r3, r0
 8003b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	db0b      	blt.n	8003b66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b4e:	79fb      	ldrb	r3, [r7, #7]
 8003b50:	f003 021f 	and.w	r2, r3, #31
 8003b54:	4907      	ldr	r1, [pc, #28]	@ (8003b74 <__NVIC_EnableIRQ+0x38>)
 8003b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b5a:	095b      	lsrs	r3, r3, #5
 8003b5c:	2001      	movs	r0, #1
 8003b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b66:	bf00      	nop
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	e000e100 	.word	0xe000e100

08003b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	4603      	mov	r3, r0
 8003b80:	6039      	str	r1, [r7, #0]
 8003b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	db0a      	blt.n	8003ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	b2da      	uxtb	r2, r3
 8003b90:	490c      	ldr	r1, [pc, #48]	@ (8003bc4 <__NVIC_SetPriority+0x4c>)
 8003b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b96:	0112      	lsls	r2, r2, #4
 8003b98:	b2d2      	uxtb	r2, r2
 8003b9a:	440b      	add	r3, r1
 8003b9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ba0:	e00a      	b.n	8003bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	4908      	ldr	r1, [pc, #32]	@ (8003bc8 <__NVIC_SetPriority+0x50>)
 8003ba8:	79fb      	ldrb	r3, [r7, #7]
 8003baa:	f003 030f 	and.w	r3, r3, #15
 8003bae:	3b04      	subs	r3, #4
 8003bb0:	0112      	lsls	r2, r2, #4
 8003bb2:	b2d2      	uxtb	r2, r2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	761a      	strb	r2, [r3, #24]
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	e000e100 	.word	0xe000e100
 8003bc8:	e000ed00 	.word	0xe000ed00

08003bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b089      	sub	sp, #36	@ 0x24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f003 0307 	and.w	r3, r3, #7
 8003bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	f1c3 0307 	rsb	r3, r3, #7
 8003be6:	2b04      	cmp	r3, #4
 8003be8:	bf28      	it	cs
 8003bea:	2304      	movcs	r3, #4
 8003bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	2b06      	cmp	r3, #6
 8003bf4:	d902      	bls.n	8003bfc <NVIC_EncodePriority+0x30>
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	3b03      	subs	r3, #3
 8003bfa:	e000      	b.n	8003bfe <NVIC_EncodePriority+0x32>
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0a:	43da      	mvns	r2, r3
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	401a      	ands	r2, r3
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c14:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c1e:	43d9      	mvns	r1, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c24:	4313      	orrs	r3, r2
         );
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3724      	adds	r7, #36	@ 0x24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
	...

08003c34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c44:	d301      	bcc.n	8003c4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c46:	2301      	movs	r3, #1
 8003c48:	e00f      	b.n	8003c6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c4a:	4a0a      	ldr	r2, [pc, #40]	@ (8003c74 <SysTick_Config+0x40>)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c52:	210f      	movs	r1, #15
 8003c54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003c58:	f7ff ff8e 	bl	8003b78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c5c:	4b05      	ldr	r3, [pc, #20]	@ (8003c74 <SysTick_Config+0x40>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c62:	4b04      	ldr	r3, [pc, #16]	@ (8003c74 <SysTick_Config+0x40>)
 8003c64:	2207      	movs	r2, #7
 8003c66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	e000e010 	.word	0xe000e010

08003c78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f7ff ff29 	bl	8003ad8 <__NVIC_SetPriorityGrouping>
}
 8003c86:	bf00      	nop
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b086      	sub	sp, #24
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	4603      	mov	r3, r0
 8003c96:	60b9      	str	r1, [r7, #8]
 8003c98:	607a      	str	r2, [r7, #4]
 8003c9a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c9c:	f7ff ff40 	bl	8003b20 <__NVIC_GetPriorityGrouping>
 8003ca0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	68b9      	ldr	r1, [r7, #8]
 8003ca6:	6978      	ldr	r0, [r7, #20]
 8003ca8:	f7ff ff90 	bl	8003bcc <NVIC_EncodePriority>
 8003cac:	4602      	mov	r2, r0
 8003cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cb2:	4611      	mov	r1, r2
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7ff ff5f 	bl	8003b78 <__NVIC_SetPriority>
}
 8003cba:	bf00      	nop
 8003cbc:	3718      	adds	r7, #24
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b082      	sub	sp, #8
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	4603      	mov	r3, r0
 8003cca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7ff ff33 	bl	8003b3c <__NVIC_EnableIRQ>
}
 8003cd6:	bf00      	nop
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b082      	sub	sp, #8
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7ff ffa4 	bl	8003c34 <SysTick_Config>
 8003cec:	4603      	mov	r3, r0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
	...

08003cf8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e08d      	b.n	8003e26 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	4b47      	ldr	r3, [pc, #284]	@ (8003e30 <HAL_DMA_Init+0x138>)
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d80f      	bhi.n	8003d36 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	4b45      	ldr	r3, [pc, #276]	@ (8003e34 <HAL_DMA_Init+0x13c>)
 8003d1e:	4413      	add	r3, r2
 8003d20:	4a45      	ldr	r2, [pc, #276]	@ (8003e38 <HAL_DMA_Init+0x140>)
 8003d22:	fba2 2303 	umull	r2, r3, r2, r3
 8003d26:	091b      	lsrs	r3, r3, #4
 8003d28:	009a      	lsls	r2, r3, #2
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a42      	ldr	r2, [pc, #264]	@ (8003e3c <HAL_DMA_Init+0x144>)
 8003d32:	641a      	str	r2, [r3, #64]	@ 0x40
 8003d34:	e00e      	b.n	8003d54 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	4b40      	ldr	r3, [pc, #256]	@ (8003e40 <HAL_DMA_Init+0x148>)
 8003d3e:	4413      	add	r3, r2
 8003d40:	4a3d      	ldr	r2, [pc, #244]	@ (8003e38 <HAL_DMA_Init+0x140>)
 8003d42:	fba2 2303 	umull	r2, r3, r2, r3
 8003d46:	091b      	lsrs	r3, r3, #4
 8003d48:	009a      	lsls	r2, r3, #2
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a3c      	ldr	r2, [pc, #240]	@ (8003e44 <HAL_DMA_Init+0x14c>)
 8003d52:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2202      	movs	r2, #2
 8003d58:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003d6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d6e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003d78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a1b      	ldr	r3, [r3, #32]
 8003d96:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 f9b6 	bl	8004118 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003db4:	d102      	bne.n	8003dbc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dc4:	b2d2      	uxtb	r2, r2
 8003dc6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003dd0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d010      	beq.n	8003dfc <HAL_DMA_Init+0x104>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	2b04      	cmp	r3, #4
 8003de0:	d80c      	bhi.n	8003dfc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f9d6 	bl	8004194 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dec:	2200      	movs	r2, #0
 8003dee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003df8:	605a      	str	r2, [r3, #4]
 8003dfa:	e008      	b.n	8003e0e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	40020407 	.word	0x40020407
 8003e34:	bffdfff8 	.word	0xbffdfff8
 8003e38:	cccccccd 	.word	0xcccccccd
 8003e3c:	40020000 	.word	0x40020000
 8003e40:	bffdfbf8 	.word	0xbffdfbf8
 8003e44:	40020400 	.word	0x40020400

08003e48 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b086      	sub	sp, #24
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
 8003e54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e56:	2300      	movs	r3, #0
 8003e58:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d101      	bne.n	8003e68 <HAL_DMA_Start_IT+0x20>
 8003e64:	2302      	movs	r3, #2
 8003e66:	e066      	b.n	8003f36 <HAL_DMA_Start_IT+0xee>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d155      	bne.n	8003f28 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2202      	movs	r2, #2
 8003e80:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0201 	bic.w	r2, r2, #1
 8003e98:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	68b9      	ldr	r1, [r7, #8]
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f000 f8fb 	bl	800409c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d008      	beq.n	8003ec0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f042 020e 	orr.w	r2, r2, #14
 8003ebc:	601a      	str	r2, [r3, #0]
 8003ebe:	e00f      	b.n	8003ee0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 0204 	bic.w	r2, r2, #4
 8003ece:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f042 020a 	orr.w	r2, r2, #10
 8003ede:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d007      	beq.n	8003efe <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ef8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003efc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d007      	beq.n	8003f16 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f14:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f042 0201 	orr.w	r2, r2, #1
 8003f24:	601a      	str	r2, [r3, #0]
 8003f26:	e005      	b.n	8003f34 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003f30:	2302      	movs	r3, #2
 8003f32:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003f34:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3718      	adds	r7, #24
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b084      	sub	sp, #16
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f5a:	f003 031f 	and.w	r3, r3, #31
 8003f5e:	2204      	movs	r2, #4
 8003f60:	409a      	lsls	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	4013      	ands	r3, r2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d026      	beq.n	8003fb8 <HAL_DMA_IRQHandler+0x7a>
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	f003 0304 	and.w	r3, r3, #4
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d021      	beq.n	8003fb8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0320 	and.w	r3, r3, #32
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d107      	bne.n	8003f92 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f022 0204 	bic.w	r2, r2, #4
 8003f90:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f96:	f003 021f 	and.w	r2, r3, #31
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f9e:	2104      	movs	r1, #4
 8003fa0:	fa01 f202 	lsl.w	r2, r1, r2
 8003fa4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d071      	beq.n	8004092 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003fb6:	e06c      	b.n	8004092 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fbc:	f003 031f 	and.w	r3, r3, #31
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	409a      	lsls	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d02e      	beq.n	800402a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d029      	beq.n	800402a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0320 	and.w	r3, r3, #32
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10b      	bne.n	8003ffc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 020a 	bic.w	r2, r2, #10
 8003ff2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004000:	f003 021f 	and.w	r2, r3, #31
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004008:	2102      	movs	r1, #2
 800400a:	fa01 f202 	lsl.w	r2, r1, r2
 800400e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800401c:	2b00      	cmp	r3, #0
 800401e:	d038      	beq.n	8004092 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004028:	e033      	b.n	8004092 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800402e:	f003 031f 	and.w	r3, r3, #31
 8004032:	2208      	movs	r2, #8
 8004034:	409a      	lsls	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	4013      	ands	r3, r2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d02a      	beq.n	8004094 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	f003 0308 	and.w	r3, r3, #8
 8004044:	2b00      	cmp	r3, #0
 8004046:	d025      	beq.n	8004094 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f022 020e 	bic.w	r2, r2, #14
 8004056:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800405c:	f003 021f 	and.w	r2, r3, #31
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004064:	2101      	movs	r1, #1
 8004066:	fa01 f202 	lsl.w	r2, r1, r2
 800406a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004086:	2b00      	cmp	r3, #0
 8004088:	d004      	beq.n	8004094 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004092:	bf00      	nop
 8004094:	bf00      	nop
}
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]
 80040a8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80040b2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d004      	beq.n	80040c6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80040c4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ca:	f003 021f 	and.w	r2, r3, #31
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d2:	2101      	movs	r1, #1
 80040d4:	fa01 f202 	lsl.w	r2, r1, r2
 80040d8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	2b10      	cmp	r3, #16
 80040e8:	d108      	bne.n	80040fc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68ba      	ldr	r2, [r7, #8]
 80040f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80040fa:	e007      	b.n	800410c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68ba      	ldr	r2, [r7, #8]
 8004102:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	60da      	str	r2, [r3, #12]
}
 800410c:	bf00      	nop
 800410e:	3714      	adds	r7, #20
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004118:	b480      	push	{r7}
 800411a:	b087      	sub	sp, #28
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	461a      	mov	r2, r3
 8004126:	4b16      	ldr	r3, [pc, #88]	@ (8004180 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004128:	429a      	cmp	r2, r3
 800412a:	d802      	bhi.n	8004132 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800412c:	4b15      	ldr	r3, [pc, #84]	@ (8004184 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800412e:	617b      	str	r3, [r7, #20]
 8004130:	e001      	b.n	8004136 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004132:	4b15      	ldr	r3, [pc, #84]	@ (8004188 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004134:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	b2db      	uxtb	r3, r3
 8004140:	3b08      	subs	r3, #8
 8004142:	4a12      	ldr	r2, [pc, #72]	@ (800418c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004144:	fba2 2303 	umull	r2, r3, r2, r3
 8004148:	091b      	lsrs	r3, r3, #4
 800414a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004150:	089b      	lsrs	r3, r3, #2
 8004152:	009a      	lsls	r2, r3, #2
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	4413      	add	r3, r2
 8004158:	461a      	mov	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a0b      	ldr	r2, [pc, #44]	@ (8004190 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004162:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f003 031f 	and.w	r3, r3, #31
 800416a:	2201      	movs	r2, #1
 800416c:	409a      	lsls	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004172:	bf00      	nop
 8004174:	371c      	adds	r7, #28
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	40020407 	.word	0x40020407
 8004184:	40020800 	.word	0x40020800
 8004188:	40020820 	.word	0x40020820
 800418c:	cccccccd 	.word	0xcccccccd
 8004190:	40020880 	.word	0x40020880

08004194 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	4b0b      	ldr	r3, [pc, #44]	@ (80041d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80041a8:	4413      	add	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	461a      	mov	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a08      	ldr	r2, [pc, #32]	@ (80041d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80041b6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	3b01      	subs	r3, #1
 80041bc:	f003 031f 	and.w	r3, r3, #31
 80041c0:	2201      	movs	r2, #1
 80041c2:	409a      	lsls	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80041c8:	bf00      	nop
 80041ca:	3714      	adds	r7, #20
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	1000823f 	.word	0x1000823f
 80041d8:	40020940 	.word	0x40020940

080041dc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e147      	b.n	800447e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d106      	bne.n	8004208 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f7fe fbd0 	bl	80029a8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	699a      	ldr	r2, [r3, #24]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0210 	bic.w	r2, r2, #16
 8004216:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004218:	f7ff fc30 	bl	8003a7c <HAL_GetTick>
 800421c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800421e:	e012      	b.n	8004246 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004220:	f7ff fc2c 	bl	8003a7c <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b0a      	cmp	r3, #10
 800422c:	d90b      	bls.n	8004246 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004232:	f043 0201 	orr.w	r2, r3, #1
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2203      	movs	r2, #3
 800423e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e11b      	b.n	800447e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	f003 0308 	and.w	r3, r3, #8
 8004250:	2b08      	cmp	r3, #8
 8004252:	d0e5      	beq.n	8004220 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	699a      	ldr	r2, [r3, #24]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f042 0201 	orr.w	r2, r2, #1
 8004262:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004264:	f7ff fc0a 	bl	8003a7c <HAL_GetTick>
 8004268:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800426a:	e012      	b.n	8004292 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800426c:	f7ff fc06 	bl	8003a7c <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b0a      	cmp	r3, #10
 8004278:	d90b      	bls.n	8004292 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800427e:	f043 0201 	orr.w	r2, r3, #1
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2203      	movs	r2, #3
 800428a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e0f5      	b.n	800447e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	2b00      	cmp	r3, #0
 800429e:	d0e5      	beq.n	800426c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	699a      	ldr	r2, [r3, #24]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f042 0202 	orr.w	r2, r2, #2
 80042ae:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a74      	ldr	r2, [pc, #464]	@ (8004488 <HAL_FDCAN_Init+0x2ac>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d103      	bne.n	80042c2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80042ba:	4a74      	ldr	r2, [pc, #464]	@ (800448c <HAL_FDCAN_Init+0x2b0>)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	7c1b      	ldrb	r3, [r3, #16]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d108      	bne.n	80042dc <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	699a      	ldr	r2, [r3, #24]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042d8:	619a      	str	r2, [r3, #24]
 80042da:	e007      	b.n	80042ec <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	699a      	ldr	r2, [r3, #24]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80042ea:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	7c5b      	ldrb	r3, [r3, #17]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d108      	bne.n	8004306 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	699a      	ldr	r2, [r3, #24]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004302:	619a      	str	r2, [r3, #24]
 8004304:	e007      	b.n	8004316 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	699a      	ldr	r2, [r3, #24]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004314:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	7c9b      	ldrb	r3, [r3, #18]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d108      	bne.n	8004330 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	699a      	ldr	r2, [r3, #24]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800432c:	619a      	str	r2, [r3, #24]
 800432e:	e007      	b.n	8004340 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	699a      	ldr	r2, [r3, #24]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800433e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689a      	ldr	r2, [r3, #8]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	430a      	orrs	r2, r1
 8004354:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	699a      	ldr	r2, [r3, #24]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8004364:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	691a      	ldr	r2, [r3, #16]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 0210 	bic.w	r2, r2, #16
 8004374:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d108      	bne.n	8004390 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	699a      	ldr	r2, [r3, #24]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f042 0204 	orr.w	r2, r2, #4
 800438c:	619a      	str	r2, [r3, #24]
 800438e:	e02c      	b.n	80043ea <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d028      	beq.n	80043ea <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	2b02      	cmp	r3, #2
 800439e:	d01c      	beq.n	80043da <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699a      	ldr	r2, [r3, #24]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80043ae:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	691a      	ldr	r2, [r3, #16]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f042 0210 	orr.w	r2, r2, #16
 80043be:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	2b03      	cmp	r3, #3
 80043c6:	d110      	bne.n	80043ea <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	699a      	ldr	r2, [r3, #24]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f042 0220 	orr.w	r2, r2, #32
 80043d6:	619a      	str	r2, [r3, #24]
 80043d8:	e007      	b.n	80043ea <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	699a      	ldr	r2, [r3, #24]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f042 0220 	orr.w	r2, r2, #32
 80043e8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	3b01      	subs	r3, #1
 80043f0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	69db      	ldr	r3, [r3, #28]
 80043f6:	3b01      	subs	r3, #1
 80043f8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80043fa:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a1b      	ldr	r3, [r3, #32]
 8004400:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004402:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	3b01      	subs	r3, #1
 800440c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004412:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004414:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800441e:	d115      	bne.n	800444c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004424:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800442a:	3b01      	subs	r3, #1
 800442c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800442e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004434:	3b01      	subs	r3, #1
 8004436:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004438:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004440:	3b01      	subs	r3, #1
 8004442:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004448:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800444a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	430a      	orrs	r2, r1
 800445e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 fc20 	bl	8004ca8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	40006400 	.word	0x40006400
 800448c:	40006500 	.word	0x40006500

08004490 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8004490:	b480      	push	{r7}
 8004492:	b087      	sub	sp, #28
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80044a0:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80044a2:	7dfb      	ldrb	r3, [r7, #23]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d002      	beq.n	80044ae <HAL_FDCAN_ConfigFilter+0x1e>
 80044a8:	7dfb      	ldrb	r3, [r7, #23]
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d13d      	bne.n	800452a <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d119      	bne.n	80044ea <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80044c2:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80044ca:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80044d0:	4313      	orrs	r3, r2
 80044d2:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	4413      	add	r3, r2
 80044e0:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	601a      	str	r2, [r3, #0]
 80044e8:	e01d      	b.n	8004526 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	075a      	lsls	r2, r3, #29
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	079a      	lsls	r2, r3, #30
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	4313      	orrs	r3, r2
 8004504:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	4413      	add	r3, r2
 8004512:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	3304      	adds	r3, #4
 800451e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8004526:	2300      	movs	r3, #0
 8004528:	e006      	b.n	8004538 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800452e:	f043 0202 	orr.w	r2, r3, #2
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
  }
}
 8004538:	4618      	mov	r0, r3
 800453a:	371c      	adds	r7, #28
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004552:	b2db      	uxtb	r3, r3
 8004554:	2b01      	cmp	r3, #1
 8004556:	d110      	bne.n	800457a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2202      	movs	r2, #2
 800455c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	699a      	ldr	r2, [r3, #24]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f022 0201 	bic.w	r2, r2, #1
 800456e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8004576:	2300      	movs	r3, #0
 8004578:	e006      	b.n	8004588 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800457e:	f043 0204 	orr.w	r2, r3, #4
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
  }
}
 8004588:	4618      	mov	r0, r3
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8004594:	b480      	push	{r7}
 8004596:	b08b      	sub	sp, #44	@ 0x2c
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
 80045a0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80045a2:	2300      	movs	r3, #0
 80045a4:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80045ac:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80045ae:	7efb      	ldrb	r3, [r7, #27]
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	f040 80e8 	bne.w	8004786 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	2b40      	cmp	r3, #64	@ 0x40
 80045ba:	d137      	bne.n	800462c <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045c4:	f003 030f 	and.w	r3, r3, #15
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d107      	bne.n	80045dc <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045d0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e0db      	b.n	8004794 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045ec:	d10a      	bne.n	8004604 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045fe:	d101      	bne.n	8004604 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004600:	2301      	movs	r3, #1
 8004602:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800460c:	0a1b      	lsrs	r3, r3, #8
 800460e:	f003 0303 	and.w	r3, r3, #3
 8004612:	69fa      	ldr	r2, [r7, #28]
 8004614:	4413      	add	r3, r2
 8004616:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800461c:	69fa      	ldr	r2, [r7, #28]
 800461e:	4613      	mov	r3, r2
 8004620:	00db      	lsls	r3, r3, #3
 8004622:	4413      	add	r3, r2
 8004624:	00db      	lsls	r3, r3, #3
 8004626:	440b      	add	r3, r1
 8004628:	627b      	str	r3, [r7, #36]	@ 0x24
 800462a:	e036      	b.n	800469a <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004634:	f003 030f 	and.w	r3, r3, #15
 8004638:	2b00      	cmp	r3, #0
 800463a:	d107      	bne.n	800464c <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004640:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e0a3      	b.n	8004794 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004654:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004658:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800465c:	d10a      	bne.n	8004674 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004666:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800466a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800466e:	d101      	bne.n	8004674 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004670:	2301      	movs	r3, #1
 8004672:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800467c:	0a1b      	lsrs	r3, r3, #8
 800467e:	f003 0303 	and.w	r3, r3, #3
 8004682:	69fa      	ldr	r2, [r7, #28]
 8004684:	4413      	add	r3, r2
 8004686:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800468c:	69fa      	ldr	r2, [r7, #28]
 800468e:	4613      	mov	r3, r2
 8004690:	00db      	lsls	r3, r3, #3
 8004692:	4413      	add	r3, r2
 8004694:	00db      	lsls	r3, r3, #3
 8004696:	440b      	add	r3, r1
 8004698:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800469a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d107      	bne.n	80046be <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80046ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	0c9b      	lsrs	r3, r3, #18
 80046b4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	e005      	b.n	80046ca <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80046be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80046ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80046d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80046e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e4:	3304      	adds	r3, #4
 80046e6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80046e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80046f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	0c1b      	lsrs	r3, r3, #16
 80046f8:	f003 020f 	and.w	r2, r3, #15
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8004700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800470c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8004718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	0e1b      	lsrs	r3, r3, #24
 800471e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8004726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	0fda      	lsrs	r2, r3, #31
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8004730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004732:	3304      	adds	r3, #4
 8004734:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8004736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004738:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800473a:	2300      	movs	r3, #0
 800473c:	623b      	str	r3, [r7, #32]
 800473e:	e00a      	b.n	8004756 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	6a3b      	ldr	r3, [r7, #32]
 8004744:	441a      	add	r2, r3
 8004746:	6839      	ldr	r1, [r7, #0]
 8004748:	6a3b      	ldr	r3, [r7, #32]
 800474a:	440b      	add	r3, r1
 800474c:	7812      	ldrb	r2, [r2, #0]
 800474e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8004750:	6a3b      	ldr	r3, [r7, #32]
 8004752:	3301      	adds	r3, #1
 8004754:	623b      	str	r3, [r7, #32]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	4a11      	ldr	r2, [pc, #68]	@ (80047a0 <HAL_FDCAN_GetRxMessage+0x20c>)
 800475c:	5cd3      	ldrb	r3, [r2, r3]
 800475e:	461a      	mov	r2, r3
 8004760:	6a3b      	ldr	r3, [r7, #32]
 8004762:	4293      	cmp	r3, r2
 8004764:	d3ec      	bcc.n	8004740 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	2b40      	cmp	r3, #64	@ 0x40
 800476a:	d105      	bne.n	8004778 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	69fa      	ldr	r2, [r7, #28]
 8004772:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8004776:	e004      	b.n	8004782 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	69fa      	ldr	r2, [r7, #28]
 800477e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8004782:	2300      	movs	r3, #0
 8004784:	e006      	b.n	8004794 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800478a:	f043 0208 	orr.w	r2, r3, #8
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
  }
}
 8004794:	4618      	mov	r0, r3
 8004796:	372c      	adds	r7, #44	@ 0x2c
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr
 80047a0:	0800aa30 	.word	0x0800aa30

080047a4 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b087      	sub	sp, #28
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80047b6:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80047b8:	7dfb      	ldrb	r3, [r7, #23]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d003      	beq.n	80047c6 <HAL_FDCAN_ActivateNotification+0x22>
 80047be:	7dfb      	ldrb	r3, [r7, #23]
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	f040 80c8 	bne.w	8004956 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047cc:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	f003 0307 	and.w	r3, r3, #7
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d004      	beq.n	80047e2 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d03b      	beq.n	800485a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d004      	beq.n	80047f6 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d031      	beq.n	800485a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d004      	beq.n	800480a <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	f003 0304 	and.w	r3, r3, #4
 8004806:	2b00      	cmp	r3, #0
 8004808:	d027      	beq.n	800485a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8004810:	2b00      	cmp	r3, #0
 8004812:	d004      	beq.n	800481e <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	f003 0308 	and.w	r3, r3, #8
 800481a:	2b00      	cmp	r3, #0
 800481c:	d01d      	beq.n	800485a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8004824:	2b00      	cmp	r3, #0
 8004826:	d004      	beq.n	8004832 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	f003 0310 	and.w	r3, r3, #16
 800482e:	2b00      	cmp	r3, #0
 8004830:	d013      	beq.n	800485a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8004838:	2b00      	cmp	r3, #0
 800483a:	d004      	beq.n	8004846 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	f003 0320 	and.w	r3, r3, #32
 8004842:	2b00      	cmp	r3, #0
 8004844:	d009      	beq.n	800485a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00c      	beq.n	800486a <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004856:	2b00      	cmp	r3, #0
 8004858:	d107      	bne.n	800486a <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f042 0201 	orr.w	r2, r2, #1
 8004868:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	f003 0307 	and.w	r3, r3, #7
 8004870:	2b00      	cmp	r3, #0
 8004872:	d004      	beq.n	800487e <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	2b00      	cmp	r3, #0
 800487c:	d13b      	bne.n	80048f6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8004884:	2b00      	cmp	r3, #0
 8004886:	d004      	beq.n	8004892 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	f003 0302 	and.w	r3, r3, #2
 800488e:	2b00      	cmp	r3, #0
 8004890:	d131      	bne.n	80048f6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8004898:	2b00      	cmp	r3, #0
 800489a:	d004      	beq.n	80048a6 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	f003 0304 	and.w	r3, r3, #4
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d127      	bne.n	80048f6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d004      	beq.n	80048ba <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	f003 0308 	and.w	r3, r3, #8
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d11d      	bne.n	80048f6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d004      	beq.n	80048ce <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	f003 0310 	and.w	r3, r3, #16
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d113      	bne.n	80048f6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d004      	beq.n	80048e2 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	f003 0320 	and.w	r3, r3, #32
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d109      	bne.n	80048f6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00c      	beq.n	8004906 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d007      	beq.n	8004906 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f042 0202 	orr.w	r2, r2, #2
 8004904:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800490c:	2b00      	cmp	r3, #0
 800490e:	d009      	beq.n	8004924 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	430a      	orrs	r2, r1
 8004920:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800492a:	2b00      	cmp	r3, #0
 800492c:	d009      	beq.n	8004942 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	430a      	orrs	r2, r1
 800493e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68ba      	ldr	r2, [r7, #8]
 800494e:	430a      	orrs	r2, r1
 8004950:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8004952:	2300      	movs	r3, #0
 8004954:	e006      	b.n	8004964 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800495a:	f043 0202 	orr.w	r2, r3, #2
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
  }
}
 8004964:	4618      	mov	r0, r3
 8004966:	371c      	adds	r7, #28
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b08c      	sub	sp, #48	@ 0x30
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800497e:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8004982:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800498a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800498c:	4013      	ands	r3, r2
 800498e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004996:	f003 0307 	and.w	r3, r3, #7
 800499a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80049a4:	4013      	ands	r3, r2
 80049a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80049b2:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049bc:	4013      	ands	r3, r2
 80049be:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049c6:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80049ca:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049d2:	6a3a      	ldr	r2, [r7, #32]
 80049d4:	4013      	ands	r3, r2
 80049d6:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049de:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80049e2:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ea:	69fa      	ldr	r2, [r7, #28]
 80049ec:	4013      	ands	r3, r2
 80049ee:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049f6:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049fe:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	099b      	lsrs	r3, r3, #6
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00c      	beq.n	8004a26 <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	099b      	lsrs	r3, r3, #6
 8004a10:	f003 0301 	and.w	r3, r3, #1
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d006      	beq.n	8004a26 <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2240      	movs	r2, #64	@ 0x40
 8004a1e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 f922 	bl	8004c6a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	0a1b      	lsrs	r3, r3, #8
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d01a      	beq.n	8004a68 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	0a1b      	lsrs	r3, r3, #8
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d014      	beq.n	8004a68 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004a46:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a50:	693a      	ldr	r2, [r7, #16]
 8004a52:	4013      	ands	r3, r2
 8004a54:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a5e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004a60:	6939      	ldr	r1, [r7, #16]
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f8e2 	bl	8004c2c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d007      	beq.n	8004a7e <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a74:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8004a76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 f8ac 	bl	8004bd6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d007      	beq.n	8004a94 <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a8a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004a8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f7fc ff28 	bl	80018e4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d007      	beq.n	8004aaa <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004aa0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004aa2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 f8a1 	bl	8004bec <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	0a5b      	lsrs	r3, r3, #9
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00d      	beq.n	8004ad2 <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	0a5b      	lsrs	r3, r3, #9
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d007      	beq.n	8004ad2 <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004aca:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 f898 	bl	8004c02 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	09db      	lsrs	r3, r3, #7
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d019      	beq.n	8004b12 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	09db      	lsrs	r3, r3, #7
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d013      	beq.n	8004b12 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004af2:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	4013      	ands	r3, r2
 8004b00:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2280      	movs	r2, #128	@ 0x80
 8004b08:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004b0a:	68f9      	ldr	r1, [r7, #12]
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 f882 	bl	8004c16 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	0b5b      	lsrs	r3, r3, #13
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00d      	beq.n	8004b3a <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	0b5b      	lsrs	r3, r3, #13
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d007      	beq.n	8004b3a <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004b32:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 f884 	bl	8004c42 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	0bdb      	lsrs	r3, r3, #15
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00d      	beq.n	8004b62 <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	0bdb      	lsrs	r3, r3, #15
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d007      	beq.n	8004b62 <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004b5a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 f87a 	bl	8004c56 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	0b9b      	lsrs	r3, r3, #14
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d010      	beq.n	8004b90 <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	0b9b      	lsrs	r3, r3, #14
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00a      	beq.n	8004b90 <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004b82:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b88:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d007      	beq.n	8004ba6 <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	69fa      	ldr	r2, [r7, #28]
 8004b9c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004b9e:	69f9      	ldr	r1, [r7, #28]
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 f876 	bl	8004c92 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004ba6:	6a3b      	ldr	r3, [r7, #32]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d009      	beq.n	8004bc0 <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6a3a      	ldr	r2, [r7, #32]
 8004bb2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004bb8:	6a3b      	ldr	r3, [r7, #32]
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d002      	beq.n	8004bce <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 f858 	bl	8004c7e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8004bce:	bf00      	nop
 8004bd0:	3730      	adds	r7, #48	@ 0x30
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b083      	sub	sp, #12
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
 8004bde:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8004bf6:	bf00      	nop
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004c02:	b480      	push	{r7}
 8004c04:	b083      	sub	sp, #12
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004c0a:	bf00      	nop
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr

08004c16 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b083      	sub	sp, #12
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
 8004c1e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004c36:	bf00      	nop
 8004c38:	370c      	adds	r7, #12
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004c42:	b480      	push	{r7}
 8004c44:	b083      	sub	sp, #12
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004c4a:	bf00      	nop
 8004c4c:	370c      	adds	r7, #12
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b083      	sub	sp, #12
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004c5e:	bf00      	nop
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr

08004c6a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004c6a:	b480      	push	{r7}
 8004c6c:	b083      	sub	sp, #12
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004c72:	bf00      	nop
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b083      	sub	sp, #12
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004c86:	bf00      	nop
 8004c88:	370c      	adds	r7, #12
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr

08004c92 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b083      	sub	sp, #12
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
 8004c9a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004c9c:	bf00      	nop
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004cb0:	4b30      	ldr	r3, [pc, #192]	@ (8004d74 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8004cb2:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a2f      	ldr	r2, [pc, #188]	@ (8004d78 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d103      	bne.n	8004cc6 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004cc4:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a2c      	ldr	r2, [pc, #176]	@ (8004d7c <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d103      	bne.n	8004cd8 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8004cd6:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ce6:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cee:	041a      	lsls	r2, r3, #16
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d0c:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d14:	061a      	lsls	r2, r3, #24
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	60fb      	str	r3, [r7, #12]
 8004d4c:	e005      	b.n	8004d5a <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	3304      	adds	r3, #4
 8004d58:	60fb      	str	r3, [r7, #12]
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d3f3      	bcc.n	8004d4e <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8004d66:	bf00      	nop
 8004d68:	bf00      	nop
 8004d6a:	3714      	adds	r7, #20
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	4000a400 	.word	0x4000a400
 8004d78:	40006800 	.word	0x40006800
 8004d7c:	40006c00 	.word	0x40006c00

08004d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b087      	sub	sp, #28
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004d8e:	e15a      	b.n	8005046 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	2101      	movs	r1, #1
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	fa01 f303 	lsl.w	r3, r1, r3
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	f000 814c 	beq.w	8005040 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f003 0303 	and.w	r3, r3, #3
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d005      	beq.n	8004dc0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d130      	bne.n	8004e22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	005b      	lsls	r3, r3, #1
 8004dca:	2203      	movs	r2, #3
 8004dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd0:	43db      	mvns	r3, r3
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	68da      	ldr	r2, [r3, #12]
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	005b      	lsls	r3, r3, #1
 8004de0:	fa02 f303 	lsl.w	r3, r2, r3
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	693a      	ldr	r2, [r7, #16]
 8004dee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004df6:	2201      	movs	r2, #1
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfe:	43db      	mvns	r3, r3
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	4013      	ands	r3, r2
 8004e04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	091b      	lsrs	r3, r3, #4
 8004e0c:	f003 0201 	and.w	r2, r3, #1
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	fa02 f303 	lsl.w	r3, r2, r3
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	693a      	ldr	r2, [r7, #16]
 8004e20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f003 0303 	and.w	r3, r3, #3
 8004e2a:	2b03      	cmp	r3, #3
 8004e2c:	d017      	beq.n	8004e5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	005b      	lsls	r3, r3, #1
 8004e38:	2203      	movs	r2, #3
 8004e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3e:	43db      	mvns	r3, r3
 8004e40:	693a      	ldr	r2, [r7, #16]
 8004e42:	4013      	ands	r3, r2
 8004e44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	689a      	ldr	r2, [r3, #8]
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f003 0303 	and.w	r3, r3, #3
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d123      	bne.n	8004eb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	08da      	lsrs	r2, r3, #3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	3208      	adds	r2, #8
 8004e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	f003 0307 	and.w	r3, r3, #7
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	220f      	movs	r2, #15
 8004e82:	fa02 f303 	lsl.w	r3, r2, r3
 8004e86:	43db      	mvns	r3, r3
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	691a      	ldr	r2, [r3, #16]
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	f003 0307 	and.w	r3, r3, #7
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	08da      	lsrs	r2, r3, #3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	3208      	adds	r2, #8
 8004eac:	6939      	ldr	r1, [r7, #16]
 8004eae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	005b      	lsls	r3, r3, #1
 8004ebc:	2203      	movs	r2, #3
 8004ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec2:	43db      	mvns	r3, r3
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f003 0203 	and.w	r2, r3, #3
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	005b      	lsls	r3, r3, #1
 8004ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f000 80a6 	beq.w	8005040 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ef4:	4b5b      	ldr	r3, [pc, #364]	@ (8005064 <HAL_GPIO_Init+0x2e4>)
 8004ef6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ef8:	4a5a      	ldr	r2, [pc, #360]	@ (8005064 <HAL_GPIO_Init+0x2e4>)
 8004efa:	f043 0301 	orr.w	r3, r3, #1
 8004efe:	6613      	str	r3, [r2, #96]	@ 0x60
 8004f00:	4b58      	ldr	r3, [pc, #352]	@ (8005064 <HAL_GPIO_Init+0x2e4>)
 8004f02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	60bb      	str	r3, [r7, #8]
 8004f0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f0c:	4a56      	ldr	r2, [pc, #344]	@ (8005068 <HAL_GPIO_Init+0x2e8>)
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	089b      	lsrs	r3, r3, #2
 8004f12:	3302      	adds	r3, #2
 8004f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	f003 0303 	and.w	r3, r3, #3
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	220f      	movs	r2, #15
 8004f24:	fa02 f303 	lsl.w	r3, r2, r3
 8004f28:	43db      	mvns	r3, r3
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004f36:	d01f      	beq.n	8004f78 <HAL_GPIO_Init+0x1f8>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a4c      	ldr	r2, [pc, #304]	@ (800506c <HAL_GPIO_Init+0x2ec>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d019      	beq.n	8004f74 <HAL_GPIO_Init+0x1f4>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a4b      	ldr	r2, [pc, #300]	@ (8005070 <HAL_GPIO_Init+0x2f0>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d013      	beq.n	8004f70 <HAL_GPIO_Init+0x1f0>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a4a      	ldr	r2, [pc, #296]	@ (8005074 <HAL_GPIO_Init+0x2f4>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d00d      	beq.n	8004f6c <HAL_GPIO_Init+0x1ec>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a49      	ldr	r2, [pc, #292]	@ (8005078 <HAL_GPIO_Init+0x2f8>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d007      	beq.n	8004f68 <HAL_GPIO_Init+0x1e8>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a48      	ldr	r2, [pc, #288]	@ (800507c <HAL_GPIO_Init+0x2fc>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d101      	bne.n	8004f64 <HAL_GPIO_Init+0x1e4>
 8004f60:	2305      	movs	r3, #5
 8004f62:	e00a      	b.n	8004f7a <HAL_GPIO_Init+0x1fa>
 8004f64:	2306      	movs	r3, #6
 8004f66:	e008      	b.n	8004f7a <HAL_GPIO_Init+0x1fa>
 8004f68:	2304      	movs	r3, #4
 8004f6a:	e006      	b.n	8004f7a <HAL_GPIO_Init+0x1fa>
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e004      	b.n	8004f7a <HAL_GPIO_Init+0x1fa>
 8004f70:	2302      	movs	r3, #2
 8004f72:	e002      	b.n	8004f7a <HAL_GPIO_Init+0x1fa>
 8004f74:	2301      	movs	r3, #1
 8004f76:	e000      	b.n	8004f7a <HAL_GPIO_Init+0x1fa>
 8004f78:	2300      	movs	r3, #0
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	f002 0203 	and.w	r2, r2, #3
 8004f80:	0092      	lsls	r2, r2, #2
 8004f82:	4093      	lsls	r3, r2
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f8a:	4937      	ldr	r1, [pc, #220]	@ (8005068 <HAL_GPIO_Init+0x2e8>)
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	089b      	lsrs	r3, r3, #2
 8004f90:	3302      	adds	r3, #2
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004f98:	4b39      	ldr	r3, [pc, #228]	@ (8005080 <HAL_GPIO_Init+0x300>)
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	43db      	mvns	r3, r3
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d003      	beq.n	8004fbc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004fbc:	4a30      	ldr	r2, [pc, #192]	@ (8005080 <HAL_GPIO_Init+0x300>)
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004fc2:	4b2f      	ldr	r3, [pc, #188]	@ (8005080 <HAL_GPIO_Init+0x300>)
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	43db      	mvns	r3, r3
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	4013      	ands	r3, r2
 8004fd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d003      	beq.n	8004fe6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004fe6:	4a26      	ldr	r2, [pc, #152]	@ (8005080 <HAL_GPIO_Init+0x300>)
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004fec:	4b24      	ldr	r3, [pc, #144]	@ (8005080 <HAL_GPIO_Init+0x300>)
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	43db      	mvns	r3, r3
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d003      	beq.n	8005010 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	4313      	orrs	r3, r2
 800500e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005010:	4a1b      	ldr	r2, [pc, #108]	@ (8005080 <HAL_GPIO_Init+0x300>)
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005016:	4b1a      	ldr	r3, [pc, #104]	@ (8005080 <HAL_GPIO_Init+0x300>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	43db      	mvns	r3, r3
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	4013      	ands	r3, r2
 8005024:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d003      	beq.n	800503a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	4313      	orrs	r3, r2
 8005038:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800503a:	4a11      	ldr	r2, [pc, #68]	@ (8005080 <HAL_GPIO_Init+0x300>)
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	3301      	adds	r3, #1
 8005044:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	fa22 f303 	lsr.w	r3, r2, r3
 8005050:	2b00      	cmp	r3, #0
 8005052:	f47f ae9d 	bne.w	8004d90 <HAL_GPIO_Init+0x10>
  }
}
 8005056:	bf00      	nop
 8005058:	bf00      	nop
 800505a:	371c      	adds	r7, #28
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr
 8005064:	40021000 	.word	0x40021000
 8005068:	40010000 	.word	0x40010000
 800506c:	48000400 	.word	0x48000400
 8005070:	48000800 	.word	0x48000800
 8005074:	48000c00 	.word	0x48000c00
 8005078:	48001000 	.word	0x48001000
 800507c:	48001400 	.word	0x48001400
 8005080:	40010400 	.word	0x40010400

08005084 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	460b      	mov	r3, r1
 800508e:	807b      	strh	r3, [r7, #2]
 8005090:	4613      	mov	r3, r2
 8005092:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005094:	787b      	ldrb	r3, [r7, #1]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d003      	beq.n	80050a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800509a:	887a      	ldrh	r2, [r7, #2]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80050a0:	e002      	b.n	80050a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80050a2:	887a      	ldrh	r2, [r7, #2]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80050a8:	bf00      	nop
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	460b      	mov	r3, r1
 80050be:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	695b      	ldr	r3, [r3, #20]
 80050c4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80050c6:	887a      	ldrh	r2, [r7, #2]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	4013      	ands	r3, r2
 80050cc:	041a      	lsls	r2, r3, #16
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	43d9      	mvns	r1, r3
 80050d2:	887b      	ldrh	r3, [r7, #2]
 80050d4:	400b      	ands	r3, r1
 80050d6:	431a      	orrs	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	619a      	str	r2, [r3, #24]
}
 80050dc:	bf00      	nop
 80050de:	3714      	adds	r7, #20
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d141      	bne.n	800517a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80050f6:	4b4b      	ldr	r3, [pc, #300]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80050fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005102:	d131      	bne.n	8005168 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005104:	4b47      	ldr	r3, [pc, #284]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005106:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800510a:	4a46      	ldr	r2, [pc, #280]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800510c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005110:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005114:	4b43      	ldr	r3, [pc, #268]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800511c:	4a41      	ldr	r2, [pc, #260]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800511e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005122:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005124:	4b40      	ldr	r3, [pc, #256]	@ (8005228 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2232      	movs	r2, #50	@ 0x32
 800512a:	fb02 f303 	mul.w	r3, r2, r3
 800512e:	4a3f      	ldr	r2, [pc, #252]	@ (800522c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005130:	fba2 2303 	umull	r2, r3, r2, r3
 8005134:	0c9b      	lsrs	r3, r3, #18
 8005136:	3301      	adds	r3, #1
 8005138:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800513a:	e002      	b.n	8005142 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	3b01      	subs	r3, #1
 8005140:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005142:	4b38      	ldr	r3, [pc, #224]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800514a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800514e:	d102      	bne.n	8005156 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1f2      	bne.n	800513c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005156:	4b33      	ldr	r3, [pc, #204]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800515e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005162:	d158      	bne.n	8005216 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e057      	b.n	8005218 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005168:	4b2e      	ldr	r3, [pc, #184]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800516a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800516e:	4a2d      	ldr	r2, [pc, #180]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005170:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005174:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005178:	e04d      	b.n	8005216 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005180:	d141      	bne.n	8005206 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005182:	4b28      	ldr	r3, [pc, #160]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800518a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800518e:	d131      	bne.n	80051f4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005190:	4b24      	ldr	r3, [pc, #144]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005192:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005196:	4a23      	ldr	r2, [pc, #140]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005198:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800519c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80051a0:	4b20      	ldr	r3, [pc, #128]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80051a8:	4a1e      	ldr	r2, [pc, #120]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80051ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80051b0:	4b1d      	ldr	r3, [pc, #116]	@ (8005228 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2232      	movs	r2, #50	@ 0x32
 80051b6:	fb02 f303 	mul.w	r3, r2, r3
 80051ba:	4a1c      	ldr	r2, [pc, #112]	@ (800522c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80051bc:	fba2 2303 	umull	r2, r3, r2, r3
 80051c0:	0c9b      	lsrs	r3, r3, #18
 80051c2:	3301      	adds	r3, #1
 80051c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051c6:	e002      	b.n	80051ce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	3b01      	subs	r3, #1
 80051cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051ce:	4b15      	ldr	r3, [pc, #84]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051da:	d102      	bne.n	80051e2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1f2      	bne.n	80051c8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80051e2:	4b10      	ldr	r3, [pc, #64]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051ee:	d112      	bne.n	8005216 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e011      	b.n	8005218 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80051f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051fa:	4a0a      	ldr	r2, [pc, #40]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005200:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005204:	e007      	b.n	8005216 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005206:	4b07      	ldr	r3, [pc, #28]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800520e:	4a05      	ldr	r2, [pc, #20]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005210:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005214:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3714      	adds	r7, #20
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr
 8005224:	40007000 	.word	0x40007000
 8005228:	20000008 	.word	0x20000008
 800522c:	431bde83 	.word	0x431bde83

08005230 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005230:	b480      	push	{r7}
 8005232:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005234:	4b05      	ldr	r3, [pc, #20]	@ (800524c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	4a04      	ldr	r2, [pc, #16]	@ (800524c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800523a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800523e:	6093      	str	r3, [r2, #8]
}
 8005240:	bf00      	nop
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	40007000 	.word	0x40007000

08005250 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b088      	sub	sp, #32
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e2fe      	b.n	8005860 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	2b00      	cmp	r3, #0
 800526c:	d075      	beq.n	800535a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800526e:	4b97      	ldr	r3, [pc, #604]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f003 030c 	and.w	r3, r3, #12
 8005276:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005278:	4b94      	ldr	r3, [pc, #592]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	f003 0303 	and.w	r3, r3, #3
 8005280:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	2b0c      	cmp	r3, #12
 8005286:	d102      	bne.n	800528e <HAL_RCC_OscConfig+0x3e>
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	2b03      	cmp	r3, #3
 800528c:	d002      	beq.n	8005294 <HAL_RCC_OscConfig+0x44>
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	2b08      	cmp	r3, #8
 8005292:	d10b      	bne.n	80052ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005294:	4b8d      	ldr	r3, [pc, #564]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d05b      	beq.n	8005358 <HAL_RCC_OscConfig+0x108>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d157      	bne.n	8005358 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e2d9      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052b4:	d106      	bne.n	80052c4 <HAL_RCC_OscConfig+0x74>
 80052b6:	4b85      	ldr	r3, [pc, #532]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a84      	ldr	r2, [pc, #528]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 80052bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052c0:	6013      	str	r3, [r2, #0]
 80052c2:	e01d      	b.n	8005300 <HAL_RCC_OscConfig+0xb0>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80052cc:	d10c      	bne.n	80052e8 <HAL_RCC_OscConfig+0x98>
 80052ce:	4b7f      	ldr	r3, [pc, #508]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a7e      	ldr	r2, [pc, #504]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 80052d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052d8:	6013      	str	r3, [r2, #0]
 80052da:	4b7c      	ldr	r3, [pc, #496]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a7b      	ldr	r2, [pc, #492]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 80052e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052e4:	6013      	str	r3, [r2, #0]
 80052e6:	e00b      	b.n	8005300 <HAL_RCC_OscConfig+0xb0>
 80052e8:	4b78      	ldr	r3, [pc, #480]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a77      	ldr	r2, [pc, #476]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 80052ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052f2:	6013      	str	r3, [r2, #0]
 80052f4:	4b75      	ldr	r3, [pc, #468]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a74      	ldr	r2, [pc, #464]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 80052fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d013      	beq.n	8005330 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005308:	f7fe fbb8 	bl	8003a7c <HAL_GetTick>
 800530c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800530e:	e008      	b.n	8005322 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005310:	f7fe fbb4 	bl	8003a7c <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b64      	cmp	r3, #100	@ 0x64
 800531c:	d901      	bls.n	8005322 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e29e      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005322:	4b6a      	ldr	r3, [pc, #424]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d0f0      	beq.n	8005310 <HAL_RCC_OscConfig+0xc0>
 800532e:	e014      	b.n	800535a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005330:	f7fe fba4 	bl	8003a7c <HAL_GetTick>
 8005334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005336:	e008      	b.n	800534a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005338:	f7fe fba0 	bl	8003a7c <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	2b64      	cmp	r3, #100	@ 0x64
 8005344:	d901      	bls.n	800534a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e28a      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800534a:	4b60      	ldr	r3, [pc, #384]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1f0      	bne.n	8005338 <HAL_RCC_OscConfig+0xe8>
 8005356:	e000      	b.n	800535a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005358:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0302 	and.w	r3, r3, #2
 8005362:	2b00      	cmp	r3, #0
 8005364:	d075      	beq.n	8005452 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005366:	4b59      	ldr	r3, [pc, #356]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f003 030c 	and.w	r3, r3, #12
 800536e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005370:	4b56      	ldr	r3, [pc, #344]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f003 0303 	and.w	r3, r3, #3
 8005378:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	2b0c      	cmp	r3, #12
 800537e:	d102      	bne.n	8005386 <HAL_RCC_OscConfig+0x136>
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	2b02      	cmp	r3, #2
 8005384:	d002      	beq.n	800538c <HAL_RCC_OscConfig+0x13c>
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	2b04      	cmp	r3, #4
 800538a:	d11f      	bne.n	80053cc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800538c:	4b4f      	ldr	r3, [pc, #316]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005394:	2b00      	cmp	r3, #0
 8005396:	d005      	beq.n	80053a4 <HAL_RCC_OscConfig+0x154>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d101      	bne.n	80053a4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e25d      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053a4:	4b49      	ldr	r3, [pc, #292]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	061b      	lsls	r3, r3, #24
 80053b2:	4946      	ldr	r1, [pc, #280]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80053b8:	4b45      	ldr	r3, [pc, #276]	@ (80054d0 <HAL_RCC_OscConfig+0x280>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4618      	mov	r0, r3
 80053be:	f7fe fb11 	bl	80039e4 <HAL_InitTick>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d043      	beq.n	8005450 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e249      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d023      	beq.n	800541c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053d4:	4b3d      	ldr	r3, [pc, #244]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a3c      	ldr	r2, [pc, #240]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 80053da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e0:	f7fe fb4c 	bl	8003a7c <HAL_GetTick>
 80053e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053e6:	e008      	b.n	80053fa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053e8:	f7fe fb48 	bl	8003a7c <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d901      	bls.n	80053fa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e232      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053fa:	4b34      	ldr	r3, [pc, #208]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005402:	2b00      	cmp	r3, #0
 8005404:	d0f0      	beq.n	80053e8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005406:	4b31      	ldr	r3, [pc, #196]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	061b      	lsls	r3, r3, #24
 8005414:	492d      	ldr	r1, [pc, #180]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 8005416:	4313      	orrs	r3, r2
 8005418:	604b      	str	r3, [r1, #4]
 800541a:	e01a      	b.n	8005452 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800541c:	4b2b      	ldr	r3, [pc, #172]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a2a      	ldr	r2, [pc, #168]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 8005422:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005426:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005428:	f7fe fb28 	bl	8003a7c <HAL_GetTick>
 800542c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800542e:	e008      	b.n	8005442 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005430:	f7fe fb24 	bl	8003a7c <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b02      	cmp	r3, #2
 800543c:	d901      	bls.n	8005442 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e20e      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005442:	4b22      	ldr	r3, [pc, #136]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1f0      	bne.n	8005430 <HAL_RCC_OscConfig+0x1e0>
 800544e:	e000      	b.n	8005452 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005450:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0308 	and.w	r3, r3, #8
 800545a:	2b00      	cmp	r3, #0
 800545c:	d041      	beq.n	80054e2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d01c      	beq.n	80054a0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005466:	4b19      	ldr	r3, [pc, #100]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 8005468:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800546c:	4a17      	ldr	r2, [pc, #92]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 800546e:	f043 0301 	orr.w	r3, r3, #1
 8005472:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005476:	f7fe fb01 	bl	8003a7c <HAL_GetTick>
 800547a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800547c:	e008      	b.n	8005490 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800547e:	f7fe fafd 	bl	8003a7c <HAL_GetTick>
 8005482:	4602      	mov	r2, r0
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	2b02      	cmp	r3, #2
 800548a:	d901      	bls.n	8005490 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e1e7      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005490:	4b0e      	ldr	r3, [pc, #56]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 8005492:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005496:	f003 0302 	and.w	r3, r3, #2
 800549a:	2b00      	cmp	r3, #0
 800549c:	d0ef      	beq.n	800547e <HAL_RCC_OscConfig+0x22e>
 800549e:	e020      	b.n	80054e2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054a0:	4b0a      	ldr	r3, [pc, #40]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 80054a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054a6:	4a09      	ldr	r2, [pc, #36]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 80054a8:	f023 0301 	bic.w	r3, r3, #1
 80054ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054b0:	f7fe fae4 	bl	8003a7c <HAL_GetTick>
 80054b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80054b6:	e00d      	b.n	80054d4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054b8:	f7fe fae0 	bl	8003a7c <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d906      	bls.n	80054d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e1ca      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
 80054ca:	bf00      	nop
 80054cc:	40021000 	.word	0x40021000
 80054d0:	20000050 	.word	0x20000050
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80054d4:	4b8c      	ldr	r3, [pc, #560]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 80054d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054da:	f003 0302 	and.w	r3, r3, #2
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1ea      	bne.n	80054b8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0304 	and.w	r3, r3, #4
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	f000 80a6 	beq.w	800563c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054f0:	2300      	movs	r3, #0
 80054f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80054f4:	4b84      	ldr	r3, [pc, #528]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 80054f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d101      	bne.n	8005504 <HAL_RCC_OscConfig+0x2b4>
 8005500:	2301      	movs	r3, #1
 8005502:	e000      	b.n	8005506 <HAL_RCC_OscConfig+0x2b6>
 8005504:	2300      	movs	r3, #0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00d      	beq.n	8005526 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800550a:	4b7f      	ldr	r3, [pc, #508]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 800550c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800550e:	4a7e      	ldr	r2, [pc, #504]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 8005510:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005514:	6593      	str	r3, [r2, #88]	@ 0x58
 8005516:	4b7c      	ldr	r3, [pc, #496]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 8005518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800551a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800551e:	60fb      	str	r3, [r7, #12]
 8005520:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005522:	2301      	movs	r3, #1
 8005524:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005526:	4b79      	ldr	r3, [pc, #484]	@ (800570c <HAL_RCC_OscConfig+0x4bc>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800552e:	2b00      	cmp	r3, #0
 8005530:	d118      	bne.n	8005564 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005532:	4b76      	ldr	r3, [pc, #472]	@ (800570c <HAL_RCC_OscConfig+0x4bc>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a75      	ldr	r2, [pc, #468]	@ (800570c <HAL_RCC_OscConfig+0x4bc>)
 8005538:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800553c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800553e:	f7fe fa9d 	bl	8003a7c <HAL_GetTick>
 8005542:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005544:	e008      	b.n	8005558 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005546:	f7fe fa99 	bl	8003a7c <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	2b02      	cmp	r3, #2
 8005552:	d901      	bls.n	8005558 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e183      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005558:	4b6c      	ldr	r3, [pc, #432]	@ (800570c <HAL_RCC_OscConfig+0x4bc>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005560:	2b00      	cmp	r3, #0
 8005562:	d0f0      	beq.n	8005546 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	2b01      	cmp	r3, #1
 800556a:	d108      	bne.n	800557e <HAL_RCC_OscConfig+0x32e>
 800556c:	4b66      	ldr	r3, [pc, #408]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 800556e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005572:	4a65      	ldr	r2, [pc, #404]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 8005574:	f043 0301 	orr.w	r3, r3, #1
 8005578:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800557c:	e024      	b.n	80055c8 <HAL_RCC_OscConfig+0x378>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	2b05      	cmp	r3, #5
 8005584:	d110      	bne.n	80055a8 <HAL_RCC_OscConfig+0x358>
 8005586:	4b60      	ldr	r3, [pc, #384]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 8005588:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800558c:	4a5e      	ldr	r2, [pc, #376]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 800558e:	f043 0304 	orr.w	r3, r3, #4
 8005592:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005596:	4b5c      	ldr	r3, [pc, #368]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 8005598:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800559c:	4a5a      	ldr	r2, [pc, #360]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 800559e:	f043 0301 	orr.w	r3, r3, #1
 80055a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80055a6:	e00f      	b.n	80055c8 <HAL_RCC_OscConfig+0x378>
 80055a8:	4b57      	ldr	r3, [pc, #348]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 80055aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ae:	4a56      	ldr	r2, [pc, #344]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 80055b0:	f023 0301 	bic.w	r3, r3, #1
 80055b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80055b8:	4b53      	ldr	r3, [pc, #332]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 80055ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055be:	4a52      	ldr	r2, [pc, #328]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 80055c0:	f023 0304 	bic.w	r3, r3, #4
 80055c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d016      	beq.n	80055fe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055d0:	f7fe fa54 	bl	8003a7c <HAL_GetTick>
 80055d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055d6:	e00a      	b.n	80055ee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055d8:	f7fe fa50 	bl	8003a7c <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d901      	bls.n	80055ee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e138      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055ee:	4b46      	ldr	r3, [pc, #280]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 80055f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055f4:	f003 0302 	and.w	r3, r3, #2
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d0ed      	beq.n	80055d8 <HAL_RCC_OscConfig+0x388>
 80055fc:	e015      	b.n	800562a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055fe:	f7fe fa3d 	bl	8003a7c <HAL_GetTick>
 8005602:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005604:	e00a      	b.n	800561c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005606:	f7fe fa39 	bl	8003a7c <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005614:	4293      	cmp	r3, r2
 8005616:	d901      	bls.n	800561c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e121      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800561c:	4b3a      	ldr	r3, [pc, #232]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 800561e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005622:	f003 0302 	and.w	r3, r3, #2
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1ed      	bne.n	8005606 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800562a:	7ffb      	ldrb	r3, [r7, #31]
 800562c:	2b01      	cmp	r3, #1
 800562e:	d105      	bne.n	800563c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005630:	4b35      	ldr	r3, [pc, #212]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 8005632:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005634:	4a34      	ldr	r2, [pc, #208]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 8005636:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800563a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0320 	and.w	r3, r3, #32
 8005644:	2b00      	cmp	r3, #0
 8005646:	d03c      	beq.n	80056c2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d01c      	beq.n	800568a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005650:	4b2d      	ldr	r3, [pc, #180]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 8005652:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005656:	4a2c      	ldr	r2, [pc, #176]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 8005658:	f043 0301 	orr.w	r3, r3, #1
 800565c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005660:	f7fe fa0c 	bl	8003a7c <HAL_GetTick>
 8005664:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005666:	e008      	b.n	800567a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005668:	f7fe fa08 	bl	8003a7c <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	2b02      	cmp	r3, #2
 8005674:	d901      	bls.n	800567a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e0f2      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800567a:	4b23      	ldr	r3, [pc, #140]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 800567c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005680:	f003 0302 	and.w	r3, r3, #2
 8005684:	2b00      	cmp	r3, #0
 8005686:	d0ef      	beq.n	8005668 <HAL_RCC_OscConfig+0x418>
 8005688:	e01b      	b.n	80056c2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800568a:	4b1f      	ldr	r3, [pc, #124]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 800568c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005690:	4a1d      	ldr	r2, [pc, #116]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 8005692:	f023 0301 	bic.w	r3, r3, #1
 8005696:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800569a:	f7fe f9ef 	bl	8003a7c <HAL_GetTick>
 800569e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80056a0:	e008      	b.n	80056b4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056a2:	f7fe f9eb 	bl	8003a7c <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d901      	bls.n	80056b4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e0d5      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80056b4:	4b14      	ldr	r3, [pc, #80]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 80056b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056ba:	f003 0302 	and.w	r3, r3, #2
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1ef      	bne.n	80056a2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	69db      	ldr	r3, [r3, #28]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	f000 80c9 	beq.w	800585e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80056cc:	4b0e      	ldr	r3, [pc, #56]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f003 030c 	and.w	r3, r3, #12
 80056d4:	2b0c      	cmp	r3, #12
 80056d6:	f000 8083 	beq.w	80057e0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	69db      	ldr	r3, [r3, #28]
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d15e      	bne.n	80057a0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056e2:	4b09      	ldr	r3, [pc, #36]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a08      	ldr	r2, [pc, #32]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 80056e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80056ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ee:	f7fe f9c5 	bl	8003a7c <HAL_GetTick>
 80056f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056f4:	e00c      	b.n	8005710 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056f6:	f7fe f9c1 	bl	8003a7c <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	2b02      	cmp	r3, #2
 8005702:	d905      	bls.n	8005710 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e0ab      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
 8005708:	40021000 	.word	0x40021000
 800570c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005710:	4b55      	ldr	r3, [pc, #340]	@ (8005868 <HAL_RCC_OscConfig+0x618>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1ec      	bne.n	80056f6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800571c:	4b52      	ldr	r3, [pc, #328]	@ (8005868 <HAL_RCC_OscConfig+0x618>)
 800571e:	68da      	ldr	r2, [r3, #12]
 8005720:	4b52      	ldr	r3, [pc, #328]	@ (800586c <HAL_RCC_OscConfig+0x61c>)
 8005722:	4013      	ands	r3, r2
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	6a11      	ldr	r1, [r2, #32]
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800572c:	3a01      	subs	r2, #1
 800572e:	0112      	lsls	r2, r2, #4
 8005730:	4311      	orrs	r1, r2
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005736:	0212      	lsls	r2, r2, #8
 8005738:	4311      	orrs	r1, r2
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800573e:	0852      	lsrs	r2, r2, #1
 8005740:	3a01      	subs	r2, #1
 8005742:	0552      	lsls	r2, r2, #21
 8005744:	4311      	orrs	r1, r2
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800574a:	0852      	lsrs	r2, r2, #1
 800574c:	3a01      	subs	r2, #1
 800574e:	0652      	lsls	r2, r2, #25
 8005750:	4311      	orrs	r1, r2
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005756:	06d2      	lsls	r2, r2, #27
 8005758:	430a      	orrs	r2, r1
 800575a:	4943      	ldr	r1, [pc, #268]	@ (8005868 <HAL_RCC_OscConfig+0x618>)
 800575c:	4313      	orrs	r3, r2
 800575e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005760:	4b41      	ldr	r3, [pc, #260]	@ (8005868 <HAL_RCC_OscConfig+0x618>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a40      	ldr	r2, [pc, #256]	@ (8005868 <HAL_RCC_OscConfig+0x618>)
 8005766:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800576a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800576c:	4b3e      	ldr	r3, [pc, #248]	@ (8005868 <HAL_RCC_OscConfig+0x618>)
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	4a3d      	ldr	r2, [pc, #244]	@ (8005868 <HAL_RCC_OscConfig+0x618>)
 8005772:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005776:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005778:	f7fe f980 	bl	8003a7c <HAL_GetTick>
 800577c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800577e:	e008      	b.n	8005792 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005780:	f7fe f97c 	bl	8003a7c <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	2b02      	cmp	r3, #2
 800578c:	d901      	bls.n	8005792 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e066      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005792:	4b35      	ldr	r3, [pc, #212]	@ (8005868 <HAL_RCC_OscConfig+0x618>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d0f0      	beq.n	8005780 <HAL_RCC_OscConfig+0x530>
 800579e:	e05e      	b.n	800585e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057a0:	4b31      	ldr	r3, [pc, #196]	@ (8005868 <HAL_RCC_OscConfig+0x618>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a30      	ldr	r2, [pc, #192]	@ (8005868 <HAL_RCC_OscConfig+0x618>)
 80057a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ac:	f7fe f966 	bl	8003a7c <HAL_GetTick>
 80057b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057b2:	e008      	b.n	80057c6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057b4:	f7fe f962 	bl	8003a7c <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d901      	bls.n	80057c6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e04c      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057c6:	4b28      	ldr	r3, [pc, #160]	@ (8005868 <HAL_RCC_OscConfig+0x618>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1f0      	bne.n	80057b4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80057d2:	4b25      	ldr	r3, [pc, #148]	@ (8005868 <HAL_RCC_OscConfig+0x618>)
 80057d4:	68da      	ldr	r2, [r3, #12]
 80057d6:	4924      	ldr	r1, [pc, #144]	@ (8005868 <HAL_RCC_OscConfig+0x618>)
 80057d8:	4b25      	ldr	r3, [pc, #148]	@ (8005870 <HAL_RCC_OscConfig+0x620>)
 80057da:	4013      	ands	r3, r2
 80057dc:	60cb      	str	r3, [r1, #12]
 80057de:	e03e      	b.n	800585e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	69db      	ldr	r3, [r3, #28]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d101      	bne.n	80057ec <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e039      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80057ec:	4b1e      	ldr	r3, [pc, #120]	@ (8005868 <HAL_RCC_OscConfig+0x618>)
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	f003 0203 	and.w	r2, r3, #3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a1b      	ldr	r3, [r3, #32]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d12c      	bne.n	800585a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800580a:	3b01      	subs	r3, #1
 800580c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800580e:	429a      	cmp	r2, r3
 8005810:	d123      	bne.n	800585a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800581c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800581e:	429a      	cmp	r2, r3
 8005820:	d11b      	bne.n	800585a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800582c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800582e:	429a      	cmp	r2, r3
 8005830:	d113      	bne.n	800585a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800583c:	085b      	lsrs	r3, r3, #1
 800583e:	3b01      	subs	r3, #1
 8005840:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005842:	429a      	cmp	r2, r3
 8005844:	d109      	bne.n	800585a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005850:	085b      	lsrs	r3, r3, #1
 8005852:	3b01      	subs	r3, #1
 8005854:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005856:	429a      	cmp	r2, r3
 8005858:	d001      	beq.n	800585e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e000      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3720      	adds	r7, #32
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	40021000 	.word	0x40021000
 800586c:	019f800c 	.word	0x019f800c
 8005870:	feeefffc 	.word	0xfeeefffc

08005874 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b086      	sub	sp, #24
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800587e:	2300      	movs	r3, #0
 8005880:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d101      	bne.n	800588c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e11e      	b.n	8005aca <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800588c:	4b91      	ldr	r3, [pc, #580]	@ (8005ad4 <HAL_RCC_ClockConfig+0x260>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 030f 	and.w	r3, r3, #15
 8005894:	683a      	ldr	r2, [r7, #0]
 8005896:	429a      	cmp	r2, r3
 8005898:	d910      	bls.n	80058bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800589a:	4b8e      	ldr	r3, [pc, #568]	@ (8005ad4 <HAL_RCC_ClockConfig+0x260>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f023 020f 	bic.w	r2, r3, #15
 80058a2:	498c      	ldr	r1, [pc, #560]	@ (8005ad4 <HAL_RCC_ClockConfig+0x260>)
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058aa:	4b8a      	ldr	r3, [pc, #552]	@ (8005ad4 <HAL_RCC_ClockConfig+0x260>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 030f 	and.w	r3, r3, #15
 80058b2:	683a      	ldr	r2, [r7, #0]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d001      	beq.n	80058bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e106      	b.n	8005aca <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0301 	and.w	r3, r3, #1
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d073      	beq.n	80059b0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	2b03      	cmp	r3, #3
 80058ce:	d129      	bne.n	8005924 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058d0:	4b81      	ldr	r3, [pc, #516]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d101      	bne.n	80058e0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e0f4      	b.n	8005aca <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80058e0:	f000 f966 	bl	8005bb0 <RCC_GetSysClockFreqFromPLLSource>
 80058e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	4a7c      	ldr	r2, [pc, #496]	@ (8005adc <HAL_RCC_ClockConfig+0x268>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d93f      	bls.n	800596e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80058ee:	4b7a      	ldr	r3, [pc, #488]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d009      	beq.n	800590e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005902:	2b00      	cmp	r3, #0
 8005904:	d033      	beq.n	800596e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800590a:	2b00      	cmp	r3, #0
 800590c:	d12f      	bne.n	800596e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800590e:	4b72      	ldr	r3, [pc, #456]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005916:	4a70      	ldr	r2, [pc, #448]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 8005918:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800591c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800591e:	2380      	movs	r3, #128	@ 0x80
 8005920:	617b      	str	r3, [r7, #20]
 8005922:	e024      	b.n	800596e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	2b02      	cmp	r3, #2
 800592a:	d107      	bne.n	800593c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800592c:	4b6a      	ldr	r3, [pc, #424]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d109      	bne.n	800594c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e0c6      	b.n	8005aca <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800593c:	4b66      	ldr	r3, [pc, #408]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005944:	2b00      	cmp	r3, #0
 8005946:	d101      	bne.n	800594c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e0be      	b.n	8005aca <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800594c:	f000 f8ce 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 8005950:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	4a61      	ldr	r2, [pc, #388]	@ (8005adc <HAL_RCC_ClockConfig+0x268>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d909      	bls.n	800596e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800595a:	4b5f      	ldr	r3, [pc, #380]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005962:	4a5d      	ldr	r2, [pc, #372]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 8005964:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005968:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800596a:	2380      	movs	r3, #128	@ 0x80
 800596c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800596e:	4b5a      	ldr	r3, [pc, #360]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f023 0203 	bic.w	r2, r3, #3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	4957      	ldr	r1, [pc, #348]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 800597c:	4313      	orrs	r3, r2
 800597e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005980:	f7fe f87c 	bl	8003a7c <HAL_GetTick>
 8005984:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005986:	e00a      	b.n	800599e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005988:	f7fe f878 	bl	8003a7c <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005996:	4293      	cmp	r3, r2
 8005998:	d901      	bls.n	800599e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e095      	b.n	8005aca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800599e:	4b4e      	ldr	r3, [pc, #312]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f003 020c 	and.w	r2, r3, #12
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d1eb      	bne.n	8005988 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0302 	and.w	r3, r3, #2
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d023      	beq.n	8005a04 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0304 	and.w	r3, r3, #4
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d005      	beq.n	80059d4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059c8:	4b43      	ldr	r3, [pc, #268]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	4a42      	ldr	r2, [pc, #264]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 80059ce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80059d2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0308 	and.w	r3, r3, #8
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d007      	beq.n	80059f0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80059e0:	4b3d      	ldr	r3, [pc, #244]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80059e8:	4a3b      	ldr	r2, [pc, #236]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 80059ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80059ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059f0:	4b39      	ldr	r3, [pc, #228]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	4936      	ldr	r1, [pc, #216]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	608b      	str	r3, [r1, #8]
 8005a02:	e008      	b.n	8005a16 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	2b80      	cmp	r3, #128	@ 0x80
 8005a08:	d105      	bne.n	8005a16 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005a0a:	4b33      	ldr	r3, [pc, #204]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	4a32      	ldr	r2, [pc, #200]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 8005a10:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a14:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a16:	4b2f      	ldr	r3, [pc, #188]	@ (8005ad4 <HAL_RCC_ClockConfig+0x260>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 030f 	and.w	r3, r3, #15
 8005a1e:	683a      	ldr	r2, [r7, #0]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d21d      	bcs.n	8005a60 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a24:	4b2b      	ldr	r3, [pc, #172]	@ (8005ad4 <HAL_RCC_ClockConfig+0x260>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f023 020f 	bic.w	r2, r3, #15
 8005a2c:	4929      	ldr	r1, [pc, #164]	@ (8005ad4 <HAL_RCC_ClockConfig+0x260>)
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005a34:	f7fe f822 	bl	8003a7c <HAL_GetTick>
 8005a38:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a3a:	e00a      	b.n	8005a52 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a3c:	f7fe f81e 	bl	8003a7c <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d901      	bls.n	8005a52 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e03b      	b.n	8005aca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a52:	4b20      	ldr	r3, [pc, #128]	@ (8005ad4 <HAL_RCC_ClockConfig+0x260>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 030f 	and.w	r3, r3, #15
 8005a5a:	683a      	ldr	r2, [r7, #0]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d1ed      	bne.n	8005a3c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 0304 	and.w	r3, r3, #4
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d008      	beq.n	8005a7e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	4917      	ldr	r1, [pc, #92]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0308 	and.w	r3, r3, #8
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d009      	beq.n	8005a9e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a8a:	4b13      	ldr	r3, [pc, #76]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	00db      	lsls	r3, r3, #3
 8005a98:	490f      	ldr	r1, [pc, #60]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005a9e:	f000 f825 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	091b      	lsrs	r3, r3, #4
 8005aaa:	f003 030f 	and.w	r3, r3, #15
 8005aae:	490c      	ldr	r1, [pc, #48]	@ (8005ae0 <HAL_RCC_ClockConfig+0x26c>)
 8005ab0:	5ccb      	ldrb	r3, [r1, r3]
 8005ab2:	f003 031f 	and.w	r3, r3, #31
 8005ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8005aba:	4a0a      	ldr	r2, [pc, #40]	@ (8005ae4 <HAL_RCC_ClockConfig+0x270>)
 8005abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005abe:	4b0a      	ldr	r3, [pc, #40]	@ (8005ae8 <HAL_RCC_ClockConfig+0x274>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7fd ff8e 	bl	80039e4 <HAL_InitTick>
 8005ac8:	4603      	mov	r3, r0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3718      	adds	r7, #24
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	40022000 	.word	0x40022000
 8005ad8:	40021000 	.word	0x40021000
 8005adc:	04c4b400 	.word	0x04c4b400
 8005ae0:	0800aa20 	.word	0x0800aa20
 8005ae4:	20000008 	.word	0x20000008
 8005ae8:	20000050 	.word	0x20000050

08005aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b087      	sub	sp, #28
 8005af0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005af2:	4b2c      	ldr	r3, [pc, #176]	@ (8005ba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f003 030c 	and.w	r3, r3, #12
 8005afa:	2b04      	cmp	r3, #4
 8005afc:	d102      	bne.n	8005b04 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005afe:	4b2a      	ldr	r3, [pc, #168]	@ (8005ba8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005b00:	613b      	str	r3, [r7, #16]
 8005b02:	e047      	b.n	8005b94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005b04:	4b27      	ldr	r3, [pc, #156]	@ (8005ba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f003 030c 	and.w	r3, r3, #12
 8005b0c:	2b08      	cmp	r3, #8
 8005b0e:	d102      	bne.n	8005b16 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005b10:	4b26      	ldr	r3, [pc, #152]	@ (8005bac <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b12:	613b      	str	r3, [r7, #16]
 8005b14:	e03e      	b.n	8005b94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005b16:	4b23      	ldr	r3, [pc, #140]	@ (8005ba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f003 030c 	and.w	r3, r3, #12
 8005b1e:	2b0c      	cmp	r3, #12
 8005b20:	d136      	bne.n	8005b90 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b22:	4b20      	ldr	r3, [pc, #128]	@ (8005ba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	f003 0303 	and.w	r3, r3, #3
 8005b2a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b2c:	4b1d      	ldr	r3, [pc, #116]	@ (8005ba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	091b      	lsrs	r3, r3, #4
 8005b32:	f003 030f 	and.w	r3, r3, #15
 8005b36:	3301      	adds	r3, #1
 8005b38:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2b03      	cmp	r3, #3
 8005b3e:	d10c      	bne.n	8005b5a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b40:	4a1a      	ldr	r2, [pc, #104]	@ (8005bac <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b48:	4a16      	ldr	r2, [pc, #88]	@ (8005ba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b4a:	68d2      	ldr	r2, [r2, #12]
 8005b4c:	0a12      	lsrs	r2, r2, #8
 8005b4e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005b52:	fb02 f303 	mul.w	r3, r2, r3
 8005b56:	617b      	str	r3, [r7, #20]
      break;
 8005b58:	e00c      	b.n	8005b74 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b5a:	4a13      	ldr	r2, [pc, #76]	@ (8005ba8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b62:	4a10      	ldr	r2, [pc, #64]	@ (8005ba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b64:	68d2      	ldr	r2, [r2, #12]
 8005b66:	0a12      	lsrs	r2, r2, #8
 8005b68:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005b6c:	fb02 f303 	mul.w	r3, r2, r3
 8005b70:	617b      	str	r3, [r7, #20]
      break;
 8005b72:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b74:	4b0b      	ldr	r3, [pc, #44]	@ (8005ba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	0e5b      	lsrs	r3, r3, #25
 8005b7a:	f003 0303 	and.w	r3, r3, #3
 8005b7e:	3301      	adds	r3, #1
 8005b80:	005b      	lsls	r3, r3, #1
 8005b82:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b8c:	613b      	str	r3, [r7, #16]
 8005b8e:	e001      	b.n	8005b94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005b90:	2300      	movs	r3, #0
 8005b92:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005b94:	693b      	ldr	r3, [r7, #16]
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	371c      	adds	r7, #28
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	40021000 	.word	0x40021000
 8005ba8:	00f42400 	.word	0x00f42400
 8005bac:	016e3600 	.word	0x016e3600

08005bb0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b087      	sub	sp, #28
 8005bb4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8005c30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	f003 0303 	and.w	r3, r3, #3
 8005bbe:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005bc0:	4b1b      	ldr	r3, [pc, #108]	@ (8005c30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	091b      	lsrs	r3, r3, #4
 8005bc6:	f003 030f 	and.w	r3, r3, #15
 8005bca:	3301      	adds	r3, #1
 8005bcc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	2b03      	cmp	r3, #3
 8005bd2:	d10c      	bne.n	8005bee <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005bd4:	4a17      	ldr	r2, [pc, #92]	@ (8005c34 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bdc:	4a14      	ldr	r2, [pc, #80]	@ (8005c30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005bde:	68d2      	ldr	r2, [r2, #12]
 8005be0:	0a12      	lsrs	r2, r2, #8
 8005be2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005be6:	fb02 f303 	mul.w	r3, r2, r3
 8005bea:	617b      	str	r3, [r7, #20]
    break;
 8005bec:	e00c      	b.n	8005c08 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005bee:	4a12      	ldr	r2, [pc, #72]	@ (8005c38 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bf6:	4a0e      	ldr	r2, [pc, #56]	@ (8005c30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005bf8:	68d2      	ldr	r2, [r2, #12]
 8005bfa:	0a12      	lsrs	r2, r2, #8
 8005bfc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005c00:	fb02 f303 	mul.w	r3, r2, r3
 8005c04:	617b      	str	r3, [r7, #20]
    break;
 8005c06:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c08:	4b09      	ldr	r3, [pc, #36]	@ (8005c30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	0e5b      	lsrs	r3, r3, #25
 8005c0e:	f003 0303 	and.w	r3, r3, #3
 8005c12:	3301      	adds	r3, #1
 8005c14:	005b      	lsls	r3, r3, #1
 8005c16:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c20:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005c22:	687b      	ldr	r3, [r7, #4]
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	371c      	adds	r7, #28
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr
 8005c30:	40021000 	.word	0x40021000
 8005c34:	016e3600 	.word	0x016e3600
 8005c38:	00f42400 	.word	0x00f42400

08005c3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b086      	sub	sp, #24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c44:	2300      	movs	r3, #0
 8005c46:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c48:	2300      	movs	r3, #0
 8005c4a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	f000 8098 	beq.w	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c5e:	4b43      	ldr	r3, [pc, #268]	@ (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d10d      	bne.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c6a:	4b40      	ldr	r3, [pc, #256]	@ (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c6e:	4a3f      	ldr	r2, [pc, #252]	@ (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c74:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c76:	4b3d      	ldr	r3, [pc, #244]	@ (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c7e:	60bb      	str	r3, [r7, #8]
 8005c80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c82:	2301      	movs	r3, #1
 8005c84:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c86:	4b3a      	ldr	r3, [pc, #232]	@ (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a39      	ldr	r2, [pc, #228]	@ (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c90:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c92:	f7fd fef3 	bl	8003a7c <HAL_GetTick>
 8005c96:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c98:	e009      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c9a:	f7fd feef 	bl	8003a7c <HAL_GetTick>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d902      	bls.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	74fb      	strb	r3, [r7, #19]
        break;
 8005cac:	e005      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005cae:	4b30      	ldr	r3, [pc, #192]	@ (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d0ef      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005cba:	7cfb      	ldrb	r3, [r7, #19]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d159      	bne.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005cc0:	4b2a      	ldr	r3, [pc, #168]	@ (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cca:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d01e      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d019      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005cdc:	4b23      	ldr	r3, [pc, #140]	@ (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ce2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ce6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ce8:	4b20      	ldr	r3, [pc, #128]	@ (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cee:	4a1f      	ldr	r2, [pc, #124]	@ (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cf4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005cf8:	4b1c      	ldr	r3, [pc, #112]	@ (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cfe:	4a1b      	ldr	r2, [pc, #108]	@ (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005d08:	4a18      	ldr	r2, [pc, #96]	@ (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	f003 0301 	and.w	r3, r3, #1
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d016      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d1a:	f7fd feaf 	bl	8003a7c <HAL_GetTick>
 8005d1e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d20:	e00b      	b.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d22:	f7fd feab 	bl	8003a7c <HAL_GetTick>
 8005d26:	4602      	mov	r2, r0
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	1ad3      	subs	r3, r2, r3
 8005d2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d902      	bls.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	74fb      	strb	r3, [r7, #19]
            break;
 8005d38:	e006      	b.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d40:	f003 0302 	and.w	r3, r3, #2
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d0ec      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005d48:	7cfb      	ldrb	r3, [r7, #19]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10b      	bne.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d4e:	4b07      	ldr	r3, [pc, #28]	@ (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d54:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d5c:	4903      	ldr	r1, [pc, #12]	@ (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005d64:	e008      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d66:	7cfb      	ldrb	r3, [r7, #19]
 8005d68:	74bb      	strb	r3, [r7, #18]
 8005d6a:	e005      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005d6c:	40021000 	.word	0x40021000
 8005d70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d74:	7cfb      	ldrb	r3, [r7, #19]
 8005d76:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d78:	7c7b      	ldrb	r3, [r7, #17]
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d105      	bne.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d7e:	4ba7      	ldr	r3, [pc, #668]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d82:	4aa6      	ldr	r2, [pc, #664]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d88:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0301 	and.w	r3, r3, #1
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00a      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d96:	4ba1      	ldr	r3, [pc, #644]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d9c:	f023 0203 	bic.w	r2, r3, #3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	499d      	ldr	r1, [pc, #628]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005da6:	4313      	orrs	r3, r2
 8005da8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 0302 	and.w	r3, r3, #2
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00a      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005db8:	4b98      	ldr	r3, [pc, #608]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dbe:	f023 020c 	bic.w	r2, r3, #12
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	4995      	ldr	r1, [pc, #596]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 0304 	and.w	r3, r3, #4
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00a      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005dda:	4b90      	ldr	r3, [pc, #576]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005de0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	498c      	ldr	r1, [pc, #560]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0308 	and.w	r3, r3, #8
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00a      	beq.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005dfc:	4b87      	ldr	r3, [pc, #540]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e02:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	4984      	ldr	r1, [pc, #528]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0310 	and.w	r3, r3, #16
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00a      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005e1e:	4b7f      	ldr	r3, [pc, #508]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e24:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	695b      	ldr	r3, [r3, #20]
 8005e2c:	497b      	ldr	r1, [pc, #492]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0320 	and.w	r3, r3, #32
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d00a      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e40:	4b76      	ldr	r3, [pc, #472]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e46:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	699b      	ldr	r3, [r3, #24]
 8005e4e:	4973      	ldr	r1, [pc, #460]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e50:	4313      	orrs	r3, r2
 8005e52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00a      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e62:	4b6e      	ldr	r3, [pc, #440]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e68:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	69db      	ldr	r3, [r3, #28]
 8005e70:	496a      	ldr	r1, [pc, #424]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e72:	4313      	orrs	r3, r2
 8005e74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00a      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e84:	4b65      	ldr	r3, [pc, #404]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e8a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	4962      	ldr	r1, [pc, #392]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e94:	4313      	orrs	r3, r2
 8005e96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00a      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005ea6:	4b5d      	ldr	r3, [pc, #372]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb4:	4959      	ldr	r1, [pc, #356]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00a      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005ec8:	4b54      	ldr	r3, [pc, #336]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ece:	f023 0203 	bic.w	r2, r3, #3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ed6:	4951      	ldr	r1, [pc, #324]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00a      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005eea:	4b4c      	ldr	r3, [pc, #304]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ef0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ef8:	4948      	ldr	r1, [pc, #288]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005efa:	4313      	orrs	r3, r2
 8005efc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d015      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f0c:	4b43      	ldr	r3, [pc, #268]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f12:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f1a:	4940      	ldr	r1, [pc, #256]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f2a:	d105      	bne.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f2c:	4b3b      	ldr	r3, [pc, #236]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	4a3a      	ldr	r2, [pc, #232]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f36:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d015      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005f44:	4b35      	ldr	r3, [pc, #212]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f4a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f52:	4932      	ldr	r1, [pc, #200]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f54:	4313      	orrs	r3, r2
 8005f56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f62:	d105      	bne.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f64:	4b2d      	ldr	r3, [pc, #180]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	4a2c      	ldr	r2, [pc, #176]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f6e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d015      	beq.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005f7c:	4b27      	ldr	r3, [pc, #156]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f82:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f8a:	4924      	ldr	r1, [pc, #144]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f9a:	d105      	bne.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f9c:	4b1f      	ldr	r3, [pc, #124]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	4a1e      	ldr	r2, [pc, #120]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fa2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005fa6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d015      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005fb4:	4b19      	ldr	r3, [pc, #100]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fc2:	4916      	ldr	r1, [pc, #88]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005fd2:	d105      	bne.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fd4:	4b11      	ldr	r3, [pc, #68]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	4a10      	ldr	r2, [pc, #64]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005fde:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d019      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005fec:	4b0b      	ldr	r3, [pc, #44]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ff2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ffa:	4908      	ldr	r1, [pc, #32]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006006:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800600a:	d109      	bne.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800600c:	4b03      	ldr	r3, [pc, #12]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	4a02      	ldr	r2, [pc, #8]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006012:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006016:	60d3      	str	r3, [r2, #12]
 8006018:	e002      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800601a:	bf00      	nop
 800601c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006028:	2b00      	cmp	r3, #0
 800602a:	d015      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800602c:	4b29      	ldr	r3, [pc, #164]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800602e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006032:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800603a:	4926      	ldr	r1, [pc, #152]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800603c:	4313      	orrs	r3, r2
 800603e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006046:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800604a:	d105      	bne.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800604c:	4b21      	ldr	r3, [pc, #132]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	4a20      	ldr	r2, [pc, #128]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006052:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006056:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d015      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006064:	4b1b      	ldr	r3, [pc, #108]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006066:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800606a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006072:	4918      	ldr	r1, [pc, #96]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006074:	4313      	orrs	r3, r2
 8006076:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800607e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006082:	d105      	bne.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006084:	4b13      	ldr	r3, [pc, #76]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	4a12      	ldr	r2, [pc, #72]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800608a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800608e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d015      	beq.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800609c:	4b0d      	ldr	r3, [pc, #52]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800609e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80060a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060aa:	490a      	ldr	r1, [pc, #40]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060ac:	4313      	orrs	r3, r2
 80060ae:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80060ba:	d105      	bne.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060bc:	4b05      	ldr	r3, [pc, #20]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	4a04      	ldr	r2, [pc, #16]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80060c6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80060c8:	7cbb      	ldrb	r3, [r7, #18]
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3718      	adds	r7, #24
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	40021000 	.word	0x40021000

080060d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d101      	bne.n	80060ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e09d      	b.n	8006226 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d108      	bne.n	8006104 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060fa:	d009      	beq.n	8006110 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	61da      	str	r2, [r3, #28]
 8006102:	e005      	b.n	8006110 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	d106      	bne.n	8006130 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f7fc fca0 	bl	8002a70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2202      	movs	r2, #2
 8006134:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006146:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006150:	d902      	bls.n	8006158 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006152:	2300      	movs	r3, #0
 8006154:	60fb      	str	r3, [r7, #12]
 8006156:	e002      	b.n	800615e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006158:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800615c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006166:	d007      	beq.n	8006178 <HAL_SPI_Init+0xa0>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006170:	d002      	beq.n	8006178 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006188:	431a      	orrs	r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	f003 0302 	and.w	r3, r3, #2
 8006192:	431a      	orrs	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	695b      	ldr	r3, [r3, #20]
 8006198:	f003 0301 	and.w	r3, r3, #1
 800619c:	431a      	orrs	r2, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80061a6:	431a      	orrs	r2, r3
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	69db      	ldr	r3, [r3, #28]
 80061ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80061b0:	431a      	orrs	r2, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061ba:	ea42 0103 	orr.w	r1, r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061c2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	430a      	orrs	r2, r1
 80061cc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	0c1b      	lsrs	r3, r3, #16
 80061d4:	f003 0204 	and.w	r2, r3, #4
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061dc:	f003 0310 	and.w	r3, r3, #16
 80061e0:	431a      	orrs	r2, r3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061e6:	f003 0308 	and.w	r3, r3, #8
 80061ea:	431a      	orrs	r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80061f4:	ea42 0103 	orr.w	r1, r2, r3
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	430a      	orrs	r2, r1
 8006204:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	69da      	ldr	r2, [r3, #28]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006214:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b088      	sub	sp, #32
 8006232:	af00      	add	r7, sp, #0
 8006234:	60f8      	str	r0, [r7, #12]
 8006236:	60b9      	str	r1, [r7, #8]
 8006238:	603b      	str	r3, [r7, #0]
 800623a:	4613      	mov	r3, r2
 800623c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800623e:	f7fd fc1d 	bl	8003a7c <HAL_GetTick>
 8006242:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006244:	88fb      	ldrh	r3, [r7, #6]
 8006246:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800624e:	b2db      	uxtb	r3, r3
 8006250:	2b01      	cmp	r3, #1
 8006252:	d001      	beq.n	8006258 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006254:	2302      	movs	r3, #2
 8006256:	e15c      	b.n	8006512 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d002      	beq.n	8006264 <HAL_SPI_Transmit+0x36>
 800625e:	88fb      	ldrh	r3, [r7, #6]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d101      	bne.n	8006268 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e154      	b.n	8006512 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800626e:	2b01      	cmp	r3, #1
 8006270:	d101      	bne.n	8006276 <HAL_SPI_Transmit+0x48>
 8006272:	2302      	movs	r3, #2
 8006274:	e14d      	b.n	8006512 <HAL_SPI_Transmit+0x2e4>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2201      	movs	r2, #1
 800627a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2203      	movs	r2, #3
 8006282:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2200      	movs	r2, #0
 800628a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	88fa      	ldrh	r2, [r7, #6]
 8006296:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	88fa      	ldrh	r2, [r7, #6]
 800629c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2200      	movs	r2, #0
 80062a2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2200      	movs	r2, #0
 80062b8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2200      	movs	r2, #0
 80062be:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062c8:	d10f      	bne.n	80062ea <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80062e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062f4:	2b40      	cmp	r3, #64	@ 0x40
 80062f6:	d007      	beq.n	8006308 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006306:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006310:	d952      	bls.n	80063b8 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d002      	beq.n	8006320 <HAL_SPI_Transmit+0xf2>
 800631a:	8b7b      	ldrh	r3, [r7, #26]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d145      	bne.n	80063ac <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006324:	881a      	ldrh	r2, [r3, #0]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006330:	1c9a      	adds	r2, r3, #2
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800633a:	b29b      	uxth	r3, r3
 800633c:	3b01      	subs	r3, #1
 800633e:	b29a      	uxth	r2, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006344:	e032      	b.n	80063ac <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f003 0302 	and.w	r3, r3, #2
 8006350:	2b02      	cmp	r3, #2
 8006352:	d112      	bne.n	800637a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006358:	881a      	ldrh	r2, [r3, #0]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006364:	1c9a      	adds	r2, r3, #2
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800636e:	b29b      	uxth	r3, r3
 8006370:	3b01      	subs	r3, #1
 8006372:	b29a      	uxth	r2, r3
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006378:	e018      	b.n	80063ac <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800637a:	f7fd fb7f 	bl	8003a7c <HAL_GetTick>
 800637e:	4602      	mov	r2, r0
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	683a      	ldr	r2, [r7, #0]
 8006386:	429a      	cmp	r2, r3
 8006388:	d803      	bhi.n	8006392 <HAL_SPI_Transmit+0x164>
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006390:	d102      	bne.n	8006398 <HAL_SPI_Transmit+0x16a>
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d109      	bne.n	80063ac <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80063a8:	2303      	movs	r3, #3
 80063aa:	e0b2      	b.n	8006512 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d1c7      	bne.n	8006346 <HAL_SPI_Transmit+0x118>
 80063b6:	e083      	b.n	80064c0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d002      	beq.n	80063c6 <HAL_SPI_Transmit+0x198>
 80063c0:	8b7b      	ldrh	r3, [r7, #26]
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d177      	bne.n	80064b6 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d912      	bls.n	80063f6 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063d4:	881a      	ldrh	r2, [r3, #0]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063e0:	1c9a      	adds	r2, r3, #2
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	3b02      	subs	r3, #2
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80063f4:	e05f      	b.n	80064b6 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	330c      	adds	r3, #12
 8006400:	7812      	ldrb	r2, [r2, #0]
 8006402:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006408:	1c5a      	adds	r2, r3, #1
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006412:	b29b      	uxth	r3, r3
 8006414:	3b01      	subs	r3, #1
 8006416:	b29a      	uxth	r2, r3
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800641c:	e04b      	b.n	80064b6 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	f003 0302 	and.w	r3, r3, #2
 8006428:	2b02      	cmp	r3, #2
 800642a:	d12b      	bne.n	8006484 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006430:	b29b      	uxth	r3, r3
 8006432:	2b01      	cmp	r3, #1
 8006434:	d912      	bls.n	800645c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800643a:	881a      	ldrh	r2, [r3, #0]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006446:	1c9a      	adds	r2, r3, #2
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006450:	b29b      	uxth	r3, r3
 8006452:	3b02      	subs	r3, #2
 8006454:	b29a      	uxth	r2, r3
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800645a:	e02c      	b.n	80064b6 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	330c      	adds	r3, #12
 8006466:	7812      	ldrb	r2, [r2, #0]
 8006468:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800646e:	1c5a      	adds	r2, r3, #1
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006478:	b29b      	uxth	r3, r3
 800647a:	3b01      	subs	r3, #1
 800647c:	b29a      	uxth	r2, r3
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006482:	e018      	b.n	80064b6 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006484:	f7fd fafa 	bl	8003a7c <HAL_GetTick>
 8006488:	4602      	mov	r2, r0
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	683a      	ldr	r2, [r7, #0]
 8006490:	429a      	cmp	r2, r3
 8006492:	d803      	bhi.n	800649c <HAL_SPI_Transmit+0x26e>
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800649a:	d102      	bne.n	80064a2 <HAL_SPI_Transmit+0x274>
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d109      	bne.n	80064b6 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e02d      	b.n	8006512 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d1ae      	bne.n	800641e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064c0:	69fa      	ldr	r2, [r7, #28]
 80064c2:	6839      	ldr	r1, [r7, #0]
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f001 fa03 	bl	80078d0 <SPI_EndRxTxTransaction>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d002      	beq.n	80064d6 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2220      	movs	r2, #32
 80064d4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d10a      	bne.n	80064f4 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064de:	2300      	movs	r3, #0
 80064e0:	617b      	str	r3, [r7, #20]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	617b      	str	r3, [r7, #20]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	617b      	str	r3, [r7, #20]
 80064f2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2200      	movs	r2, #0
 8006500:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006508:	2b00      	cmp	r3, #0
 800650a:	d001      	beq.n	8006510 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	e000      	b.n	8006512 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8006510:	2300      	movs	r3, #0
  }
}
 8006512:	4618      	mov	r0, r3
 8006514:	3720      	adds	r7, #32
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}

0800651a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800651a:	b580      	push	{r7, lr}
 800651c:	b088      	sub	sp, #32
 800651e:	af02      	add	r7, sp, #8
 8006520:	60f8      	str	r0, [r7, #12]
 8006522:	60b9      	str	r1, [r7, #8]
 8006524:	603b      	str	r3, [r7, #0]
 8006526:	4613      	mov	r3, r2
 8006528:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006530:	b2db      	uxtb	r3, r3
 8006532:	2b01      	cmp	r3, #1
 8006534:	d001      	beq.n	800653a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8006536:	2302      	movs	r3, #2
 8006538:	e123      	b.n	8006782 <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d002      	beq.n	8006546 <HAL_SPI_Receive+0x2c>
 8006540:	88fb      	ldrh	r3, [r7, #6]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d101      	bne.n	800654a <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e11b      	b.n	8006782 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006552:	d112      	bne.n	800657a <HAL_SPI_Receive+0x60>
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d10e      	bne.n	800657a <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2204      	movs	r2, #4
 8006560:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006564:	88fa      	ldrh	r2, [r7, #6]
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	9300      	str	r3, [sp, #0]
 800656a:	4613      	mov	r3, r2
 800656c:	68ba      	ldr	r2, [r7, #8]
 800656e:	68b9      	ldr	r1, [r7, #8]
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f000 f90a 	bl	800678a <HAL_SPI_TransmitReceive>
 8006576:	4603      	mov	r3, r0
 8006578:	e103      	b.n	8006782 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800657a:	f7fd fa7f 	bl	8003a7c <HAL_GetTick>
 800657e:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006586:	2b01      	cmp	r3, #1
 8006588:	d101      	bne.n	800658e <HAL_SPI_Receive+0x74>
 800658a:	2302      	movs	r3, #2
 800658c:	e0f9      	b.n	8006782 <HAL_SPI_Receive+0x268>
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2201      	movs	r2, #1
 8006592:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2204      	movs	r2, #4
 800659a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	68ba      	ldr	r2, [r7, #8]
 80065a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	88fa      	ldrh	r2, [r7, #6]
 80065ae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	88fa      	ldrh	r2, [r7, #6]
 80065b6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2200      	movs	r2, #0
 80065be:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2200      	movs	r2, #0
 80065d0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80065e0:	d908      	bls.n	80065f4 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	685a      	ldr	r2, [r3, #4]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80065f0:	605a      	str	r2, [r3, #4]
 80065f2:	e007      	b.n	8006604 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	685a      	ldr	r2, [r3, #4]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006602:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800660c:	d10f      	bne.n	800662e <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800661c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800662c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006638:	2b40      	cmp	r3, #64	@ 0x40
 800663a:	d007      	beq.n	800664c <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800664a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006654:	d875      	bhi.n	8006742 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006656:	e037      	b.n	80066c8 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	f003 0301 	and.w	r3, r3, #1
 8006662:	2b01      	cmp	r3, #1
 8006664:	d117      	bne.n	8006696 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f103 020c 	add.w	r2, r3, #12
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006672:	7812      	ldrb	r2, [r2, #0]
 8006674:	b2d2      	uxtb	r2, r2
 8006676:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800667c:	1c5a      	adds	r2, r3, #1
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006688:	b29b      	uxth	r3, r3
 800668a:	3b01      	subs	r3, #1
 800668c:	b29a      	uxth	r2, r3
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8006694:	e018      	b.n	80066c8 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006696:	f7fd f9f1 	bl	8003a7c <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	683a      	ldr	r2, [r7, #0]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d803      	bhi.n	80066ae <HAL_SPI_Receive+0x194>
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80066ac:	d102      	bne.n	80066b4 <HAL_SPI_Receive+0x19a>
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d109      	bne.n	80066c8 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80066c4:	2303      	movs	r3, #3
 80066c6:	e05c      	b.n	8006782 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d1c1      	bne.n	8006658 <HAL_SPI_Receive+0x13e>
 80066d4:	e03b      	b.n	800674e <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	f003 0301 	and.w	r3, r3, #1
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d115      	bne.n	8006710 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68da      	ldr	r2, [r3, #12]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ee:	b292      	uxth	r2, r2
 80066f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066f6:	1c9a      	adds	r2, r3, #2
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006702:	b29b      	uxth	r3, r3
 8006704:	3b01      	subs	r3, #1
 8006706:	b29a      	uxth	r2, r3
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800670e:	e018      	b.n	8006742 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006710:	f7fd f9b4 	bl	8003a7c <HAL_GetTick>
 8006714:	4602      	mov	r2, r0
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	683a      	ldr	r2, [r7, #0]
 800671c:	429a      	cmp	r2, r3
 800671e:	d803      	bhi.n	8006728 <HAL_SPI_Receive+0x20e>
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006726:	d102      	bne.n	800672e <HAL_SPI_Receive+0x214>
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d109      	bne.n	8006742 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2201      	movs	r2, #1
 8006732:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e01f      	b.n	8006782 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006748:	b29b      	uxth	r3, r3
 800674a:	2b00      	cmp	r3, #0
 800674c:	d1c3      	bne.n	80066d6 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800674e:	697a      	ldr	r2, [r7, #20]
 8006750:	6839      	ldr	r1, [r7, #0]
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f001 f864 	bl	8007820 <SPI_EndRxTransaction>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d002      	beq.n	8006764 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2220      	movs	r2, #32
 8006762:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006778:	2b00      	cmp	r3, #0
 800677a:	d001      	beq.n	8006780 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e000      	b.n	8006782 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8006780:	2300      	movs	r3, #0
  }
}
 8006782:	4618      	mov	r0, r3
 8006784:	3718      	adds	r7, #24
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}

0800678a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b08a      	sub	sp, #40	@ 0x28
 800678e:	af00      	add	r7, sp, #0
 8006790:	60f8      	str	r0, [r7, #12]
 8006792:	60b9      	str	r1, [r7, #8]
 8006794:	607a      	str	r2, [r7, #4]
 8006796:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006798:	2301      	movs	r3, #1
 800679a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800679c:	f7fd f96e 	bl	8003a7c <HAL_GetTick>
 80067a0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80067a8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80067b0:	887b      	ldrh	r3, [r7, #2]
 80067b2:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80067b4:	887b      	ldrh	r3, [r7, #2]
 80067b6:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80067b8:	7ffb      	ldrb	r3, [r7, #31]
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d00c      	beq.n	80067d8 <HAL_SPI_TransmitReceive+0x4e>
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80067c4:	d106      	bne.n	80067d4 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d102      	bne.n	80067d4 <HAL_SPI_TransmitReceive+0x4a>
 80067ce:	7ffb      	ldrb	r3, [r7, #31]
 80067d0:	2b04      	cmp	r3, #4
 80067d2:	d001      	beq.n	80067d8 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80067d4:	2302      	movs	r3, #2
 80067d6:	e1f3      	b.n	8006bc0 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d005      	beq.n	80067ea <HAL_SPI_TransmitReceive+0x60>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d002      	beq.n	80067ea <HAL_SPI_TransmitReceive+0x60>
 80067e4:	887b      	ldrh	r3, [r7, #2]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d101      	bne.n	80067ee <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e1e8      	b.n	8006bc0 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d101      	bne.n	80067fc <HAL_SPI_TransmitReceive+0x72>
 80067f8:	2302      	movs	r3, #2
 80067fa:	e1e1      	b.n	8006bc0 <HAL_SPI_TransmitReceive+0x436>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800680a:	b2db      	uxtb	r3, r3
 800680c:	2b04      	cmp	r3, #4
 800680e:	d003      	beq.n	8006818 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2205      	movs	r2, #5
 8006814:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2200      	movs	r2, #0
 800681c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	887a      	ldrh	r2, [r7, #2]
 8006828:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	887a      	ldrh	r2, [r7, #2]
 8006830:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	68ba      	ldr	r2, [r7, #8]
 8006838:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	887a      	ldrh	r2, [r7, #2]
 800683e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	887a      	ldrh	r2, [r7, #2]
 8006844:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2200      	movs	r2, #0
 800684a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2200      	movs	r2, #0
 8006850:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800685a:	d802      	bhi.n	8006862 <HAL_SPI_TransmitReceive+0xd8>
 800685c:	8abb      	ldrh	r3, [r7, #20]
 800685e:	2b01      	cmp	r3, #1
 8006860:	d908      	bls.n	8006874 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	685a      	ldr	r2, [r3, #4]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006870:	605a      	str	r2, [r3, #4]
 8006872:	e007      	b.n	8006884 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	685a      	ldr	r2, [r3, #4]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006882:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800688e:	2b40      	cmp	r3, #64	@ 0x40
 8006890:	d007      	beq.n	80068a2 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80068a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80068aa:	f240 8083 	bls.w	80069b4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d002      	beq.n	80068bc <HAL_SPI_TransmitReceive+0x132>
 80068b6:	8afb      	ldrh	r3, [r7, #22]
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d16f      	bne.n	800699c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068c0:	881a      	ldrh	r2, [r3, #0]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068cc:	1c9a      	adds	r2, r3, #2
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	3b01      	subs	r3, #1
 80068da:	b29a      	uxth	r2, r3
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068e0:	e05c      	b.n	800699c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	f003 0302 	and.w	r3, r3, #2
 80068ec:	2b02      	cmp	r3, #2
 80068ee:	d11b      	bne.n	8006928 <HAL_SPI_TransmitReceive+0x19e>
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d016      	beq.n	8006928 <HAL_SPI_TransmitReceive+0x19e>
 80068fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d113      	bne.n	8006928 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006904:	881a      	ldrh	r2, [r3, #0]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006910:	1c9a      	adds	r2, r3, #2
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800691a:	b29b      	uxth	r3, r3
 800691c:	3b01      	subs	r3, #1
 800691e:	b29a      	uxth	r2, r3
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006924:	2300      	movs	r3, #0
 8006926:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	f003 0301 	and.w	r3, r3, #1
 8006932:	2b01      	cmp	r3, #1
 8006934:	d11c      	bne.n	8006970 <HAL_SPI_TransmitReceive+0x1e6>
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800693c:	b29b      	uxth	r3, r3
 800693e:	2b00      	cmp	r3, #0
 8006940:	d016      	beq.n	8006970 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	68da      	ldr	r2, [r3, #12]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800694c:	b292      	uxth	r2, r2
 800694e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006954:	1c9a      	adds	r2, r3, #2
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006960:	b29b      	uxth	r3, r3
 8006962:	3b01      	subs	r3, #1
 8006964:	b29a      	uxth	r2, r3
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800696c:	2301      	movs	r3, #1
 800696e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006970:	f7fd f884 	bl	8003a7c <HAL_GetTick>
 8006974:	4602      	mov	r2, r0
 8006976:	6a3b      	ldr	r3, [r7, #32]
 8006978:	1ad3      	subs	r3, r2, r3
 800697a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800697c:	429a      	cmp	r2, r3
 800697e:	d80d      	bhi.n	800699c <HAL_SPI_TransmitReceive+0x212>
 8006980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006982:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006986:	d009      	beq.n	800699c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	e111      	b.n	8006bc0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d19d      	bne.n	80068e2 <HAL_SPI_TransmitReceive+0x158>
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d197      	bne.n	80068e2 <HAL_SPI_TransmitReceive+0x158>
 80069b2:	e0e5      	b.n	8006b80 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d003      	beq.n	80069c4 <HAL_SPI_TransmitReceive+0x23a>
 80069bc:	8afb      	ldrh	r3, [r7, #22]
 80069be:	2b01      	cmp	r3, #1
 80069c0:	f040 80d1 	bne.w	8006b66 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d912      	bls.n	80069f4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069d2:	881a      	ldrh	r2, [r3, #0]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069de:	1c9a      	adds	r2, r3, #2
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	3b02      	subs	r3, #2
 80069ec:	b29a      	uxth	r2, r3
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80069f2:	e0b8      	b.n	8006b66 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	330c      	adds	r3, #12
 80069fe:	7812      	ldrb	r2, [r2, #0]
 8006a00:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a06:	1c5a      	adds	r2, r3, #1
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	3b01      	subs	r3, #1
 8006a14:	b29a      	uxth	r2, r3
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a1a:	e0a4      	b.n	8006b66 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	f003 0302 	and.w	r3, r3, #2
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	d134      	bne.n	8006a94 <HAL_SPI_TransmitReceive+0x30a>
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d02f      	beq.n	8006a94 <HAL_SPI_TransmitReceive+0x30a>
 8006a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d12c      	bne.n	8006a94 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d912      	bls.n	8006a6a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a48:	881a      	ldrh	r2, [r3, #0]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a54:	1c9a      	adds	r2, r3, #2
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	3b02      	subs	r3, #2
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006a68:	e012      	b.n	8006a90 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	330c      	adds	r3, #12
 8006a74:	7812      	ldrb	r2, [r2, #0]
 8006a76:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a7c:	1c5a      	adds	r2, r3, #1
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	b29a      	uxth	r2, r3
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a90:	2300      	movs	r3, #0
 8006a92:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	f003 0301 	and.w	r3, r3, #1
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d148      	bne.n	8006b34 <HAL_SPI_TransmitReceive+0x3aa>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d042      	beq.n	8006b34 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d923      	bls.n	8006b02 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	68da      	ldr	r2, [r3, #12]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ac4:	b292      	uxth	r2, r2
 8006ac6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006acc:	1c9a      	adds	r2, r3, #2
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	3b02      	subs	r3, #2
 8006adc:	b29a      	uxth	r2, r3
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d81f      	bhi.n	8006b30 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	685a      	ldr	r2, [r3, #4]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006afe:	605a      	str	r2, [r3, #4]
 8006b00:	e016      	b.n	8006b30 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f103 020c 	add.w	r2, r3, #12
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b0e:	7812      	ldrb	r2, [r2, #0]
 8006b10:	b2d2      	uxtb	r2, r2
 8006b12:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b18:	1c5a      	adds	r2, r3, #1
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	3b01      	subs	r3, #1
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b30:	2301      	movs	r3, #1
 8006b32:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006b34:	f7fc ffa2 	bl	8003a7c <HAL_GetTick>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	6a3b      	ldr	r3, [r7, #32]
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d803      	bhi.n	8006b4c <HAL_SPI_TransmitReceive+0x3c2>
 8006b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b4a:	d102      	bne.n	8006b52 <HAL_SPI_TransmitReceive+0x3c8>
 8006b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d109      	bne.n	8006b66 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2201      	movs	r2, #1
 8006b56:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e02c      	b.n	8006bc0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f47f af55 	bne.w	8006a1c <HAL_SPI_TransmitReceive+0x292>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	f47f af4e 	bne.w	8006a1c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b80:	6a3a      	ldr	r2, [r7, #32]
 8006b82:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f000 fea3 	bl	80078d0 <SPI_EndRxTxTransaction>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d008      	beq.n	8006ba2 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2220      	movs	r2, #32
 8006b94:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e00e      	b.n	8006bc0 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d001      	beq.n	8006bbe <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e000      	b.n	8006bc0 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
  }
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3728      	adds	r7, #40	@ 0x28
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d001      	beq.n	8006be6 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8006be2:	2302      	movs	r3, #2
 8006be4:	e0d4      	b.n	8006d90 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d002      	beq.n	8006bf2 <HAL_SPI_Transmit_DMA+0x2a>
 8006bec:	88fb      	ldrh	r3, [r7, #6]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d101      	bne.n	8006bf6 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e0cc      	b.n	8006d90 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d101      	bne.n	8006c04 <HAL_SPI_Transmit_DMA+0x3c>
 8006c00:	2302      	movs	r3, #2
 8006c02:	e0c5      	b.n	8006d90 <HAL_SPI_Transmit_DMA+0x1c8>
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2203      	movs	r2, #3
 8006c10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2200      	movs	r2, #0
 8006c18:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	68ba      	ldr	r2, [r7, #8]
 8006c1e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	88fa      	ldrh	r2, [r7, #6]
 8006c24:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	88fa      	ldrh	r2, [r7, #6]
 8006c2a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2200      	movs	r2, #0
 8006c36:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c56:	d10f      	bne.n	8006c78 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c66:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006c76:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c7c:	4a46      	ldr	r2, [pc, #280]	@ (8006d98 <HAL_SPI_Transmit_DMA+0x1d0>)
 8006c7e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c84:	4a45      	ldr	r2, [pc, #276]	@ (8006d9c <HAL_SPI_Transmit_DMA+0x1d4>)
 8006c86:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c8c:	4a44      	ldr	r2, [pc, #272]	@ (8006da0 <HAL_SPI_Transmit_DMA+0x1d8>)
 8006c8e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c94:	2200      	movs	r2, #0
 8006c96:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	685a      	ldr	r2, [r3, #4]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006ca6:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006cb0:	d82d      	bhi.n	8006d0e <HAL_SPI_Transmit_DMA+0x146>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cb6:	699b      	ldr	r3, [r3, #24]
 8006cb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cbc:	d127      	bne.n	8006d0e <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	f003 0301 	and.w	r3, r3, #1
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d10f      	bne.n	8006cec <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	685a      	ldr	r2, [r3, #4]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006cda:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	085b      	lsrs	r3, r3, #1
 8006ce4:	b29a      	uxth	r2, r3
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006cea:	e010      	b.n	8006d0e <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	685a      	ldr	r2, [r3, #4]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006cfa:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	085b      	lsrs	r3, r3, #1
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	3301      	adds	r3, #1
 8006d08:	b29a      	uxth	r2, r3
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d16:	4619      	mov	r1, r3
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	330c      	adds	r3, #12
 8006d1e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d24:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006d26:	f7fd f88f 	bl	8003e48 <HAL_DMA_Start_IT>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d00b      	beq.n	8006d48 <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d34:	f043 0210 	orr.w	r2, r3, #16
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	e023      	b.n	8006d90 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d52:	2b40      	cmp	r3, #64	@ 0x40
 8006d54:	d007      	beq.n	8006d66 <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d64:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	685a      	ldr	r2, [r3, #4]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f042 0220 	orr.w	r2, r2, #32
 8006d7c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	685a      	ldr	r2, [r3, #4]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f042 0202 	orr.w	r2, r2, #2
 8006d8c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	0800754f 	.word	0x0800754f
 8006d9c:	08007371 	.word	0x08007371
 8006da0:	080075a3 	.word	0x080075a3

08006da4 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	4613      	mov	r3, r2
 8006db0:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d001      	beq.n	8006dc2 <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 8006dbe:	2302      	movs	r3, #2
 8006dc0:	e105      	b.n	8006fce <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d002      	beq.n	8006dce <HAL_SPI_Receive_DMA+0x2a>
 8006dc8:	88fb      	ldrh	r3, [r7, #6]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d101      	bne.n	8006dd2 <HAL_SPI_Receive_DMA+0x2e>
  {
    return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e0fd      	b.n	8006fce <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d110      	bne.n	8006dfc <HAL_SPI_Receive_DMA+0x58>
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006de2:	d10b      	bne.n	8006dfc <HAL_SPI_Receive_DMA+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2204      	movs	r2, #4
 8006de8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8006dec:	88fb      	ldrh	r3, [r7, #6]
 8006dee:	68ba      	ldr	r2, [r7, #8]
 8006df0:	68b9      	ldr	r1, [r7, #8]
 8006df2:	68f8      	ldr	r0, [r7, #12]
 8006df4:	f000 f8f6 	bl	8006fe4 <HAL_SPI_TransmitReceive_DMA>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	e0e8      	b.n	8006fce <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d101      	bne.n	8006e0a <HAL_SPI_Receive_DMA+0x66>
 8006e06:	2302      	movs	r3, #2
 8006e08:	e0e1      	b.n	8006fce <HAL_SPI_Receive_DMA+0x22a>
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2204      	movs	r2, #4
 8006e16:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	68ba      	ldr	r2, [r7, #8]
 8006e24:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	88fa      	ldrh	r2, [r7, #6]
 8006e2a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	88fa      	ldrh	r2, [r7, #6]
 8006e32:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2200      	movs	r2, #0
 8006e46:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e56:	d10f      	bne.n	8006e78 <HAL_SPI_Receive_DMA+0xd4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e66:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006e76:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	685a      	ldr	r2, [r3, #4]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e86:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006e90:	d908      	bls.n	8006ea4 <HAL_SPI_Receive_DMA+0x100>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	685a      	ldr	r2, [r3, #4]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006ea0:	605a      	str	r2, [r3, #4]
 8006ea2:	e042      	b.n	8006f2a <HAL_SPI_Receive_DMA+0x186>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	685a      	ldr	r2, [r3, #4]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006eb2:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ebe:	d134      	bne.n	8006f2a <HAL_SPI_Receive_DMA+0x186>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	685a      	ldr	r2, [r3, #4]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006ece:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	f003 0301 	and.w	r3, r3, #1
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d111      	bne.n	8006f04 <HAL_SPI_Receive_DMA+0x160>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	685a      	ldr	r2, [r3, #4]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006eee:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	085b      	lsrs	r3, r3, #1
 8006efa:	b29a      	uxth	r2, r3
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8006f02:	e012      	b.n	8006f2a <HAL_SPI_Receive_DMA+0x186>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	685a      	ldr	r2, [r3, #4]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006f12:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	085b      	lsrs	r3, r3, #1
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	3301      	adds	r3, #1
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f2e:	4a2a      	ldr	r2, [pc, #168]	@ (8006fd8 <HAL_SPI_Receive_DMA+0x234>)
 8006f30:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f36:	4a29      	ldr	r2, [pc, #164]	@ (8006fdc <HAL_SPI_Receive_DMA+0x238>)
 8006f38:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f3e:	4a28      	ldr	r2, [pc, #160]	@ (8006fe0 <HAL_SPI_Receive_DMA+0x23c>)
 8006f40:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f46:	2200      	movs	r2, #0
 8006f48:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	330c      	adds	r3, #12
 8006f54:	4619      	mov	r1, r3
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f5a:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f62:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006f64:	f7fc ff70 	bl	8003e48 <HAL_DMA_Start_IT>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00b      	beq.n	8006f86 <HAL_SPI_Receive_DMA+0x1e2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f72:	f043 0210 	orr.w	r2, r3, #16
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	e023      	b.n	8006fce <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f90:	2b40      	cmp	r3, #64	@ 0x40
 8006f92:	d007      	beq.n	8006fa4 <HAL_SPI_Receive_DMA+0x200>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006fa2:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	685a      	ldr	r2, [r3, #4]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f042 0220 	orr.w	r2, r2, #32
 8006fba:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	685a      	ldr	r2, [r3, #4]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f042 0201 	orr.w	r2, r2, #1
 8006fca:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	0800756b 	.word	0x0800756b
 8006fdc:	08007417 	.word	0x08007417
 8006fe0:	080075a3 	.word	0x080075a3

08006fe4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b086      	sub	sp, #24
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	607a      	str	r2, [r7, #4]
 8006ff0:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006ff8:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8007000:	7dfb      	ldrb	r3, [r7, #23]
 8007002:	2b01      	cmp	r3, #1
 8007004:	d00c      	beq.n	8007020 <HAL_SPI_TransmitReceive_DMA+0x3c>
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800700c:	d106      	bne.n	800701c <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d102      	bne.n	800701c <HAL_SPI_TransmitReceive_DMA+0x38>
 8007016:	7dfb      	ldrb	r3, [r7, #23]
 8007018:	2b04      	cmp	r3, #4
 800701a:	d001      	beq.n	8007020 <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800701c:	2302      	movs	r3, #2
 800701e:	e158      	b.n	80072d2 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d005      	beq.n	8007032 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d002      	beq.n	8007032 <HAL_SPI_TransmitReceive_DMA+0x4e>
 800702c:	887b      	ldrh	r3, [r7, #2]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d101      	bne.n	8007036 <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	e14d      	b.n	80072d2 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800703c:	2b01      	cmp	r3, #1
 800703e:	d101      	bne.n	8007044 <HAL_SPI_TransmitReceive_DMA+0x60>
 8007040:	2302      	movs	r3, #2
 8007042:	e146      	b.n	80072d2 <HAL_SPI_TransmitReceive_DMA+0x2ee>
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007052:	b2db      	uxtb	r3, r3
 8007054:	2b04      	cmp	r3, #4
 8007056:	d003      	beq.n	8007060 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2205      	movs	r2, #5
 800705c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2200      	movs	r2, #0
 8007064:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	68ba      	ldr	r2, [r7, #8]
 800706a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	887a      	ldrh	r2, [r7, #2]
 8007070:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	887a      	ldrh	r2, [r7, #2]
 8007076:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	887a      	ldrh	r2, [r7, #2]
 8007082:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	887a      	ldrh	r2, [r7, #2]
 800708a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2200      	movs	r2, #0
 8007098:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	685a      	ldr	r2, [r3, #4]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 80070a8:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80070b2:	d908      	bls.n	80070c6 <HAL_SPI_TransmitReceive_DMA+0xe2>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	685a      	ldr	r2, [r3, #4]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80070c2:	605a      	str	r2, [r3, #4]
 80070c4:	e06f      	b.n	80071a6 <HAL_SPI_TransmitReceive_DMA+0x1c2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	685a      	ldr	r2, [r3, #4]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80070d4:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070da:	699b      	ldr	r3, [r3, #24]
 80070dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070e0:	d126      	bne.n	8007130 <HAL_SPI_TransmitReceive_DMA+0x14c>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80070e6:	f003 0301 	and.w	r3, r3, #1
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d10f      	bne.n	800710e <HAL_SPI_TransmitReceive_DMA+0x12a>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	685a      	ldr	r2, [r3, #4]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80070fc:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007102:	b29b      	uxth	r3, r3
 8007104:	085b      	lsrs	r3, r3, #1
 8007106:	b29a      	uxth	r2, r3
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800710c:	e010      	b.n	8007130 <HAL_SPI_TransmitReceive_DMA+0x14c>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	685a      	ldr	r2, [r3, #4]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800711c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007122:	b29b      	uxth	r3, r3
 8007124:	085b      	lsrs	r3, r3, #1
 8007126:	b29b      	uxth	r3, r3
 8007128:	3301      	adds	r3, #1
 800712a:	b29a      	uxth	r2, r3
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007134:	699b      	ldr	r3, [r3, #24]
 8007136:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800713a:	d134      	bne.n	80071a6 <HAL_SPI_TransmitReceive_DMA+0x1c2>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	685a      	ldr	r2, [r3, #4]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800714a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007152:	b29b      	uxth	r3, r3
 8007154:	f003 0301 	and.w	r3, r3, #1
 8007158:	2b00      	cmp	r3, #0
 800715a:	d111      	bne.n	8007180 <HAL_SPI_TransmitReceive_DMA+0x19c>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	685a      	ldr	r2, [r3, #4]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800716a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007172:	b29b      	uxth	r3, r3
 8007174:	085b      	lsrs	r3, r3, #1
 8007176:	b29a      	uxth	r2, r3
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800717e:	e012      	b.n	80071a6 <HAL_SPI_TransmitReceive_DMA+0x1c2>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	685a      	ldr	r2, [r3, #4]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800718e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007196:	b29b      	uxth	r3, r3
 8007198:	085b      	lsrs	r3, r3, #1
 800719a:	b29b      	uxth	r3, r3
 800719c:	3301      	adds	r3, #1
 800719e:	b29a      	uxth	r2, r3
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	2b04      	cmp	r3, #4
 80071b0:	d108      	bne.n	80071c4 <HAL_SPI_TransmitReceive_DMA+0x1e0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071b6:	4a49      	ldr	r2, [pc, #292]	@ (80072dc <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 80071b8:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071be:	4a48      	ldr	r2, [pc, #288]	@ (80072e0 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 80071c0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80071c2:	e007      	b.n	80071d4 <HAL_SPI_TransmitReceive_DMA+0x1f0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071c8:	4a46      	ldr	r2, [pc, #280]	@ (80072e4 <HAL_SPI_TransmitReceive_DMA+0x300>)
 80071ca:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071d0:	4a45      	ldr	r2, [pc, #276]	@ (80072e8 <HAL_SPI_TransmitReceive_DMA+0x304>)
 80071d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071d8:	4a44      	ldr	r2, [pc, #272]	@ (80072ec <HAL_SPI_TransmitReceive_DMA+0x308>)
 80071da:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071e0:	2200      	movs	r2, #0
 80071e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	330c      	adds	r3, #12
 80071ee:	4619      	mov	r1, r3
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071f4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80071fc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80071fe:	f7fc fe23 	bl	8003e48 <HAL_DMA_Start_IT>
 8007202:	4603      	mov	r3, r0
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00b      	beq.n	8007220 <HAL_SPI_TransmitReceive_DMA+0x23c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800720c:	f043 0210 	orr.w	r2, r3, #16
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2200      	movs	r2, #0
 8007218:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	e058      	b.n	80072d2 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	685a      	ldr	r2, [r3, #4]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f042 0201 	orr.w	r2, r2, #1
 800722e:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007234:	2200      	movs	r2, #0
 8007236:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800723c:	2200      	movs	r2, #0
 800723e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007244:	2200      	movs	r2, #0
 8007246:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800724c:	2200      	movs	r2, #0
 800724e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007258:	4619      	mov	r1, r3
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	330c      	adds	r3, #12
 8007260:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007266:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007268:	f7fc fdee 	bl	8003e48 <HAL_DMA_Start_IT>
 800726c:	4603      	mov	r3, r0
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00b      	beq.n	800728a <HAL_SPI_TransmitReceive_DMA+0x2a6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007276:	f043 0210 	orr.w	r2, r3, #16
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2200      	movs	r2, #0
 8007282:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	e023      	b.n	80072d2 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007294:	2b40      	cmp	r3, #64	@ 0x40
 8007296:	d007      	beq.n	80072a8 <HAL_SPI_TransmitReceive_DMA+0x2c4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80072a6:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2200      	movs	r2, #0
 80072ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	685a      	ldr	r2, [r3, #4]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f042 0220 	orr.w	r2, r2, #32
 80072be:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	685a      	ldr	r2, [r3, #4]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f042 0202 	orr.w	r2, r2, #2
 80072ce:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3718      	adds	r7, #24
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	0800756b 	.word	0x0800756b
 80072e0:	08007417 	.word	0x08007417
 80072e4:	08007587 	.word	0x08007587
 80072e8:	080074bf 	.word	0x080074bf
 80072ec:	080075a3 	.word	0x080075a3

080072f0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80072f8:	bf00      	nop
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800730c:	bf00      	nop
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007318:	b480      	push	{r7}
 800731a:	b083      	sub	sp, #12
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8007320:	bf00      	nop
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8007334:	bf00      	nop
 8007336:	370c      	adds	r7, #12
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007348:	bf00      	nop
 800734a:	370c      	adds	r7, #12
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8007354:	b480      	push	{r7}
 8007356:	b083      	sub	sp, #12
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007362:	b2db      	uxtb	r3, r3
}
 8007364:	4618      	mov	r0, r3
 8007366:	370c      	adds	r7, #12
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b086      	sub	sp, #24
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800737c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800737e:	f7fc fb7d 	bl	8003a7c <HAL_GetTick>
 8007382:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f003 0320 	and.w	r3, r3, #32
 800738e:	2b20      	cmp	r3, #32
 8007390:	d03b      	beq.n	800740a <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	685a      	ldr	r2, [r3, #4]
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f022 0220 	bic.w	r2, r2, #32
 80073a0:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	685a      	ldr	r2, [r3, #4]
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f022 0202 	bic.w	r2, r2, #2
 80073b0:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80073b2:	693a      	ldr	r2, [r7, #16]
 80073b4:	2164      	movs	r1, #100	@ 0x64
 80073b6:	6978      	ldr	r0, [r7, #20]
 80073b8:	f000 fa8a 	bl	80078d0 <SPI_EndRxTxTransaction>
 80073bc:	4603      	mov	r3, r0
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d005      	beq.n	80073ce <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073c6:	f043 0220 	orr.w	r2, r3, #32
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d10a      	bne.n	80073ec <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80073d6:	2300      	movs	r3, #0
 80073d8:	60fb      	str	r3, [r7, #12]
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	60fb      	str	r3, [r7, #12]
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	60fb      	str	r3, [r7, #12]
 80073ea:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	2200      	movs	r2, #0
 80073f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	2201      	movs	r2, #1
 80073f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d003      	beq.n	800740a <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007402:	6978      	ldr	r0, [r7, #20]
 8007404:	f7ff ff9c 	bl	8007340 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007408:	e002      	b.n	8007410 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800740a:	6978      	ldr	r0, [r7, #20]
 800740c:	f7fb fda0 	bl	8002f50 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007410:	3718      	adds	r7, #24
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}

08007416 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007416:	b580      	push	{r7, lr}
 8007418:	b084      	sub	sp, #16
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007422:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007424:	f7fc fb2a 	bl	8003a7c <HAL_GetTick>
 8007428:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 0320 	and.w	r3, r3, #32
 8007434:	2b20      	cmp	r3, #32
 8007436:	d03c      	beq.n	80074b2 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	685a      	ldr	r2, [r3, #4]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f022 0220 	bic.w	r2, r2, #32
 8007446:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d10d      	bne.n	800746c <SPI_DMAReceiveCplt+0x56>
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007458:	d108      	bne.n	800746c <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	685a      	ldr	r2, [r3, #4]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f022 0203 	bic.w	r2, r2, #3
 8007468:	605a      	str	r2, [r3, #4]
 800746a:	e007      	b.n	800747c <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	685a      	ldr	r2, [r3, #4]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f022 0201 	bic.w	r2, r2, #1
 800747a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800747c:	68ba      	ldr	r2, [r7, #8]
 800747e:	2164      	movs	r1, #100	@ 0x64
 8007480:	68f8      	ldr	r0, [r7, #12]
 8007482:	f000 f9cd 	bl	8007820 <SPI_EndRxTransaction>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d002      	beq.n	8007492 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2220      	movs	r2, #32
 8007490:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2200      	movs	r2, #0
 8007496:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2201      	movs	r2, #1
 800749e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d003      	beq.n	80074b2 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80074aa:	68f8      	ldr	r0, [r7, #12]
 80074ac:	f7ff ff48 	bl	8007340 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80074b0:	e002      	b.n	80074b8 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f7fb fd62 	bl	8002f7c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80074b8:	3710      	adds	r7, #16
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}

080074be <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80074be:	b580      	push	{r7, lr}
 80074c0:	b084      	sub	sp, #16
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074ca:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074cc:	f7fc fad6 	bl	8003a7c <HAL_GetTick>
 80074d0:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f003 0320 	and.w	r3, r3, #32
 80074dc:	2b20      	cmp	r3, #32
 80074de:	d030      	beq.n	8007542 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	685a      	ldr	r2, [r3, #4]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f022 0220 	bic.w	r2, r2, #32
 80074ee:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80074f0:	68ba      	ldr	r2, [r7, #8]
 80074f2:	2164      	movs	r1, #100	@ 0x64
 80074f4:	68f8      	ldr	r0, [r7, #12]
 80074f6:	f000 f9eb 	bl	80078d0 <SPI_EndRxTxTransaction>
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d005      	beq.n	800750c <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007504:	f043 0220 	orr.w	r2, r3, #32
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	685a      	ldr	r2, [r3, #4]
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f022 0203 	bic.w	r2, r2, #3
 800751a:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2200      	movs	r2, #0
 8007520:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2200      	movs	r2, #0
 8007526:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2201      	movs	r2, #1
 800752e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007536:	2b00      	cmp	r3, #0
 8007538:	d003      	beq.n	8007542 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800753a:	68f8      	ldr	r0, [r7, #12]
 800753c:	f7ff ff00 	bl	8007340 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007540:	e002      	b.n	8007548 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8007542:	68f8      	ldr	r0, [r7, #12]
 8007544:	f7ff fed4 	bl	80072f0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007548:	3710      	adds	r7, #16
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}

0800754e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800754e:	b580      	push	{r7, lr}
 8007550:	b084      	sub	sp, #16
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800755a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800755c:	68f8      	ldr	r0, [r7, #12]
 800755e:	f7ff fed1 	bl	8007304 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007562:	bf00      	nop
 8007564:	3710      	adds	r7, #16
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}

0800756a <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800756a:	b580      	push	{r7, lr}
 800756c:	b084      	sub	sp, #16
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007576:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8007578:	68f8      	ldr	r0, [r7, #12]
 800757a:	f7ff fecd 	bl	8007318 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800757e:	bf00      	nop
 8007580:	3710      	adds	r7, #16
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b084      	sub	sp, #16
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007592:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8007594:	68f8      	ldr	r0, [r7, #12]
 8007596:	f7ff fec9 	bl	800732c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800759a:	bf00      	nop
 800759c:	3710      	adds	r7, #16
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b084      	sub	sp, #16
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ae:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	685a      	ldr	r2, [r3, #4]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f022 0203 	bic.w	r2, r2, #3
 80075be:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075c4:	f043 0210 	orr.w	r2, r3, #16
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80075d4:	68f8      	ldr	r0, [r7, #12]
 80075d6:	f7ff feb3 	bl	8007340 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80075da:	bf00      	nop
 80075dc:	3710      	adds	r7, #16
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
	...

080075e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b088      	sub	sp, #32
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	603b      	str	r3, [r7, #0]
 80075f0:	4613      	mov	r3, r2
 80075f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80075f4:	f7fc fa42 	bl	8003a7c <HAL_GetTick>
 80075f8:	4602      	mov	r2, r0
 80075fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075fc:	1a9b      	subs	r3, r3, r2
 80075fe:	683a      	ldr	r2, [r7, #0]
 8007600:	4413      	add	r3, r2
 8007602:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007604:	f7fc fa3a 	bl	8003a7c <HAL_GetTick>
 8007608:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800760a:	4b39      	ldr	r3, [pc, #228]	@ (80076f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	015b      	lsls	r3, r3, #5
 8007610:	0d1b      	lsrs	r3, r3, #20
 8007612:	69fa      	ldr	r2, [r7, #28]
 8007614:	fb02 f303 	mul.w	r3, r2, r3
 8007618:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800761a:	e054      	b.n	80076c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007622:	d050      	beq.n	80076c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007624:	f7fc fa2a 	bl	8003a7c <HAL_GetTick>
 8007628:	4602      	mov	r2, r0
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	1ad3      	subs	r3, r2, r3
 800762e:	69fa      	ldr	r2, [r7, #28]
 8007630:	429a      	cmp	r2, r3
 8007632:	d902      	bls.n	800763a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d13d      	bne.n	80076b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	685a      	ldr	r2, [r3, #4]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007648:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007652:	d111      	bne.n	8007678 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800765c:	d004      	beq.n	8007668 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007666:	d107      	bne.n	8007678 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007676:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800767c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007680:	d10f      	bne.n	80076a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007690:	601a      	str	r2, [r3, #0]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80076a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80076b2:	2303      	movs	r3, #3
 80076b4:	e017      	b.n	80076e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d101      	bne.n	80076c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80076bc:	2300      	movs	r3, #0
 80076be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	3b01      	subs	r3, #1
 80076c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	689a      	ldr	r2, [r3, #8]
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	4013      	ands	r3, r2
 80076d0:	68ba      	ldr	r2, [r7, #8]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	bf0c      	ite	eq
 80076d6:	2301      	moveq	r3, #1
 80076d8:	2300      	movne	r3, #0
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	461a      	mov	r2, r3
 80076de:	79fb      	ldrb	r3, [r7, #7]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d19b      	bne.n	800761c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3720      	adds	r7, #32
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
 80076ee:	bf00      	nop
 80076f0:	20000008 	.word	0x20000008

080076f4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b08a      	sub	sp, #40	@ 0x28
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	607a      	str	r2, [r7, #4]
 8007700:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007702:	2300      	movs	r3, #0
 8007704:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007706:	f7fc f9b9 	bl	8003a7c <HAL_GetTick>
 800770a:	4602      	mov	r2, r0
 800770c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800770e:	1a9b      	subs	r3, r3, r2
 8007710:	683a      	ldr	r2, [r7, #0]
 8007712:	4413      	add	r3, r2
 8007714:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007716:	f7fc f9b1 	bl	8003a7c <HAL_GetTick>
 800771a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	330c      	adds	r3, #12
 8007722:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007724:	4b3d      	ldr	r3, [pc, #244]	@ (800781c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	4613      	mov	r3, r2
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	4413      	add	r3, r2
 800772e:	00da      	lsls	r2, r3, #3
 8007730:	1ad3      	subs	r3, r2, r3
 8007732:	0d1b      	lsrs	r3, r3, #20
 8007734:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007736:	fb02 f303 	mul.w	r3, r2, r3
 800773a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800773c:	e060      	b.n	8007800 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007744:	d107      	bne.n	8007756 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d104      	bne.n	8007756 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800774c:	69fb      	ldr	r3, [r7, #28]
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	b2db      	uxtb	r3, r3
 8007752:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007754:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800775c:	d050      	beq.n	8007800 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800775e:	f7fc f98d 	bl	8003a7c <HAL_GetTick>
 8007762:	4602      	mov	r2, r0
 8007764:	6a3b      	ldr	r3, [r7, #32]
 8007766:	1ad3      	subs	r3, r2, r3
 8007768:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800776a:	429a      	cmp	r2, r3
 800776c:	d902      	bls.n	8007774 <SPI_WaitFifoStateUntilTimeout+0x80>
 800776e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007770:	2b00      	cmp	r3, #0
 8007772:	d13d      	bne.n	80077f0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	685a      	ldr	r2, [r3, #4]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007782:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800778c:	d111      	bne.n	80077b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007796:	d004      	beq.n	80077a2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077a0:	d107      	bne.n	80077b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077b0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077ba:	d10f      	bne.n	80077dc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80077ca:	601a      	str	r2, [r3, #0]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80077da:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2201      	movs	r2, #1
 80077e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2200      	movs	r2, #0
 80077e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80077ec:	2303      	movs	r3, #3
 80077ee:	e010      	b.n	8007812 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d101      	bne.n	80077fa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80077f6:	2300      	movs	r3, #0
 80077f8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	3b01      	subs	r3, #1
 80077fe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	689a      	ldr	r2, [r3, #8]
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	4013      	ands	r3, r2
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	429a      	cmp	r2, r3
 800780e:	d196      	bne.n	800773e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	3728      	adds	r7, #40	@ 0x28
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop
 800781c:	20000008 	.word	0x20000008

08007820 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b086      	sub	sp, #24
 8007824:	af02      	add	r7, sp, #8
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007834:	d111      	bne.n	800785a <SPI_EndRxTransaction+0x3a>
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800783e:	d004      	beq.n	800784a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007848:	d107      	bne.n	800785a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007858:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	9300      	str	r3, [sp, #0]
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	2200      	movs	r2, #0
 8007862:	2180      	movs	r1, #128	@ 0x80
 8007864:	68f8      	ldr	r0, [r7, #12]
 8007866:	f7ff febd 	bl	80075e4 <SPI_WaitFlagStateUntilTimeout>
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d007      	beq.n	8007880 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007874:	f043 0220 	orr.w	r2, r3, #32
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800787c:	2303      	movs	r3, #3
 800787e:	e023      	b.n	80078c8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007888:	d11d      	bne.n	80078c6 <SPI_EndRxTransaction+0xa6>
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007892:	d004      	beq.n	800789e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800789c:	d113      	bne.n	80078c6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	9300      	str	r3, [sp, #0]
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80078aa:	68f8      	ldr	r0, [r7, #12]
 80078ac:	f7ff ff22 	bl	80076f4 <SPI_WaitFifoStateUntilTimeout>
 80078b0:	4603      	mov	r3, r0
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d007      	beq.n	80078c6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078ba:	f043 0220 	orr.w	r2, r3, #32
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80078c2:	2303      	movs	r3, #3
 80078c4:	e000      	b.n	80078c8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80078c6:	2300      	movs	r3, #0
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3710      	adds	r7, #16
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b086      	sub	sp, #24
 80078d4:	af02      	add	r7, sp, #8
 80078d6:	60f8      	str	r0, [r7, #12]
 80078d8:	60b9      	str	r1, [r7, #8]
 80078da:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	9300      	str	r3, [sp, #0]
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80078e8:	68f8      	ldr	r0, [r7, #12]
 80078ea:	f7ff ff03 	bl	80076f4 <SPI_WaitFifoStateUntilTimeout>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d007      	beq.n	8007904 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078f8:	f043 0220 	orr.w	r2, r3, #32
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007900:	2303      	movs	r3, #3
 8007902:	e027      	b.n	8007954 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	9300      	str	r3, [sp, #0]
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	2200      	movs	r2, #0
 800790c:	2180      	movs	r1, #128	@ 0x80
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	f7ff fe68 	bl	80075e4 <SPI_WaitFlagStateUntilTimeout>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d007      	beq.n	800792a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800791e:	f043 0220 	orr.w	r2, r3, #32
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007926:	2303      	movs	r3, #3
 8007928:	e014      	b.n	8007954 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	9300      	str	r3, [sp, #0]
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	2200      	movs	r2, #0
 8007932:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007936:	68f8      	ldr	r0, [r7, #12]
 8007938:	f7ff fedc 	bl	80076f4 <SPI_WaitFifoStateUntilTimeout>
 800793c:	4603      	mov	r3, r0
 800793e:	2b00      	cmp	r3, #0
 8007940:	d007      	beq.n	8007952 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007946:	f043 0220 	orr.w	r2, r3, #32
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800794e:	2303      	movs	r3, #3
 8007950:	e000      	b.n	8007954 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007952:	2300      	movs	r3, #0
}
 8007954:	4618      	mov	r0, r3
 8007956:	3710      	adds	r7, #16
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d101      	bne.n	800796e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800796a:	2301      	movs	r3, #1
 800796c:	e049      	b.n	8007a02 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007974:	b2db      	uxtb	r3, r3
 8007976:	2b00      	cmp	r3, #0
 8007978:	d106      	bne.n	8007988 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f7fb f924 	bl	8002bd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2202      	movs	r2, #2
 800798c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	3304      	adds	r3, #4
 8007998:	4619      	mov	r1, r3
 800799a:	4610      	mov	r0, r2
 800799c:	f000 f9c4 	bl	8007d28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a00:	2300      	movs	r3, #0
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3708      	adds	r7, #8
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
	...

08007a0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b085      	sub	sp, #20
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d001      	beq.n	8007a24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007a20:	2301      	movs	r3, #1
 8007a22:	e054      	b.n	8007ace <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2202      	movs	r2, #2
 8007a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	68da      	ldr	r2, [r3, #12]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f042 0201 	orr.w	r2, r2, #1
 8007a3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a26      	ldr	r2, [pc, #152]	@ (8007adc <HAL_TIM_Base_Start_IT+0xd0>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d022      	beq.n	8007a8c <HAL_TIM_Base_Start_IT+0x80>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a4e:	d01d      	beq.n	8007a8c <HAL_TIM_Base_Start_IT+0x80>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a22      	ldr	r2, [pc, #136]	@ (8007ae0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d018      	beq.n	8007a8c <HAL_TIM_Base_Start_IT+0x80>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a21      	ldr	r2, [pc, #132]	@ (8007ae4 <HAL_TIM_Base_Start_IT+0xd8>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d013      	beq.n	8007a8c <HAL_TIM_Base_Start_IT+0x80>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a1f      	ldr	r2, [pc, #124]	@ (8007ae8 <HAL_TIM_Base_Start_IT+0xdc>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d00e      	beq.n	8007a8c <HAL_TIM_Base_Start_IT+0x80>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a1e      	ldr	r2, [pc, #120]	@ (8007aec <HAL_TIM_Base_Start_IT+0xe0>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d009      	beq.n	8007a8c <HAL_TIM_Base_Start_IT+0x80>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a1c      	ldr	r2, [pc, #112]	@ (8007af0 <HAL_TIM_Base_Start_IT+0xe4>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d004      	beq.n	8007a8c <HAL_TIM_Base_Start_IT+0x80>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a1b      	ldr	r2, [pc, #108]	@ (8007af4 <HAL_TIM_Base_Start_IT+0xe8>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d115      	bne.n	8007ab8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	689a      	ldr	r2, [r3, #8]
 8007a92:	4b19      	ldr	r3, [pc, #100]	@ (8007af8 <HAL_TIM_Base_Start_IT+0xec>)
 8007a94:	4013      	ands	r3, r2
 8007a96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2b06      	cmp	r3, #6
 8007a9c:	d015      	beq.n	8007aca <HAL_TIM_Base_Start_IT+0xbe>
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007aa4:	d011      	beq.n	8007aca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f042 0201 	orr.w	r2, r2, #1
 8007ab4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ab6:	e008      	b.n	8007aca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f042 0201 	orr.w	r2, r2, #1
 8007ac6:	601a      	str	r2, [r3, #0]
 8007ac8:	e000      	b.n	8007acc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007aca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3714      	adds	r7, #20
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	40012c00 	.word	0x40012c00
 8007ae0:	40000400 	.word	0x40000400
 8007ae4:	40000800 	.word	0x40000800
 8007ae8:	40000c00 	.word	0x40000c00
 8007aec:	40013400 	.word	0x40013400
 8007af0:	40014000 	.word	0x40014000
 8007af4:	40015000 	.word	0x40015000
 8007af8:	00010007 	.word	0x00010007

08007afc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b06:	2300      	movs	r3, #0
 8007b08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d101      	bne.n	8007b18 <HAL_TIM_ConfigClockSource+0x1c>
 8007b14:	2302      	movs	r3, #2
 8007b16:	e0f6      	b.n	8007d06 <HAL_TIM_ConfigClockSource+0x20a>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2202      	movs	r2, #2
 8007b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007b36:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007b3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007b42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	68ba      	ldr	r2, [r7, #8]
 8007b4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a6f      	ldr	r2, [pc, #444]	@ (8007d10 <HAL_TIM_ConfigClockSource+0x214>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	f000 80c1 	beq.w	8007cda <HAL_TIM_ConfigClockSource+0x1de>
 8007b58:	4a6d      	ldr	r2, [pc, #436]	@ (8007d10 <HAL_TIM_ConfigClockSource+0x214>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	f200 80c6 	bhi.w	8007cec <HAL_TIM_ConfigClockSource+0x1f0>
 8007b60:	4a6c      	ldr	r2, [pc, #432]	@ (8007d14 <HAL_TIM_ConfigClockSource+0x218>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	f000 80b9 	beq.w	8007cda <HAL_TIM_ConfigClockSource+0x1de>
 8007b68:	4a6a      	ldr	r2, [pc, #424]	@ (8007d14 <HAL_TIM_ConfigClockSource+0x218>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	f200 80be 	bhi.w	8007cec <HAL_TIM_ConfigClockSource+0x1f0>
 8007b70:	4a69      	ldr	r2, [pc, #420]	@ (8007d18 <HAL_TIM_ConfigClockSource+0x21c>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	f000 80b1 	beq.w	8007cda <HAL_TIM_ConfigClockSource+0x1de>
 8007b78:	4a67      	ldr	r2, [pc, #412]	@ (8007d18 <HAL_TIM_ConfigClockSource+0x21c>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	f200 80b6 	bhi.w	8007cec <HAL_TIM_ConfigClockSource+0x1f0>
 8007b80:	4a66      	ldr	r2, [pc, #408]	@ (8007d1c <HAL_TIM_ConfigClockSource+0x220>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	f000 80a9 	beq.w	8007cda <HAL_TIM_ConfigClockSource+0x1de>
 8007b88:	4a64      	ldr	r2, [pc, #400]	@ (8007d1c <HAL_TIM_ConfigClockSource+0x220>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	f200 80ae 	bhi.w	8007cec <HAL_TIM_ConfigClockSource+0x1f0>
 8007b90:	4a63      	ldr	r2, [pc, #396]	@ (8007d20 <HAL_TIM_ConfigClockSource+0x224>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	f000 80a1 	beq.w	8007cda <HAL_TIM_ConfigClockSource+0x1de>
 8007b98:	4a61      	ldr	r2, [pc, #388]	@ (8007d20 <HAL_TIM_ConfigClockSource+0x224>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	f200 80a6 	bhi.w	8007cec <HAL_TIM_ConfigClockSource+0x1f0>
 8007ba0:	4a60      	ldr	r2, [pc, #384]	@ (8007d24 <HAL_TIM_ConfigClockSource+0x228>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	f000 8099 	beq.w	8007cda <HAL_TIM_ConfigClockSource+0x1de>
 8007ba8:	4a5e      	ldr	r2, [pc, #376]	@ (8007d24 <HAL_TIM_ConfigClockSource+0x228>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	f200 809e 	bhi.w	8007cec <HAL_TIM_ConfigClockSource+0x1f0>
 8007bb0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007bb4:	f000 8091 	beq.w	8007cda <HAL_TIM_ConfigClockSource+0x1de>
 8007bb8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007bbc:	f200 8096 	bhi.w	8007cec <HAL_TIM_ConfigClockSource+0x1f0>
 8007bc0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007bc4:	f000 8089 	beq.w	8007cda <HAL_TIM_ConfigClockSource+0x1de>
 8007bc8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007bcc:	f200 808e 	bhi.w	8007cec <HAL_TIM_ConfigClockSource+0x1f0>
 8007bd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bd4:	d03e      	beq.n	8007c54 <HAL_TIM_ConfigClockSource+0x158>
 8007bd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bda:	f200 8087 	bhi.w	8007cec <HAL_TIM_ConfigClockSource+0x1f0>
 8007bde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007be2:	f000 8086 	beq.w	8007cf2 <HAL_TIM_ConfigClockSource+0x1f6>
 8007be6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bea:	d87f      	bhi.n	8007cec <HAL_TIM_ConfigClockSource+0x1f0>
 8007bec:	2b70      	cmp	r3, #112	@ 0x70
 8007bee:	d01a      	beq.n	8007c26 <HAL_TIM_ConfigClockSource+0x12a>
 8007bf0:	2b70      	cmp	r3, #112	@ 0x70
 8007bf2:	d87b      	bhi.n	8007cec <HAL_TIM_ConfigClockSource+0x1f0>
 8007bf4:	2b60      	cmp	r3, #96	@ 0x60
 8007bf6:	d050      	beq.n	8007c9a <HAL_TIM_ConfigClockSource+0x19e>
 8007bf8:	2b60      	cmp	r3, #96	@ 0x60
 8007bfa:	d877      	bhi.n	8007cec <HAL_TIM_ConfigClockSource+0x1f0>
 8007bfc:	2b50      	cmp	r3, #80	@ 0x50
 8007bfe:	d03c      	beq.n	8007c7a <HAL_TIM_ConfigClockSource+0x17e>
 8007c00:	2b50      	cmp	r3, #80	@ 0x50
 8007c02:	d873      	bhi.n	8007cec <HAL_TIM_ConfigClockSource+0x1f0>
 8007c04:	2b40      	cmp	r3, #64	@ 0x40
 8007c06:	d058      	beq.n	8007cba <HAL_TIM_ConfigClockSource+0x1be>
 8007c08:	2b40      	cmp	r3, #64	@ 0x40
 8007c0a:	d86f      	bhi.n	8007cec <HAL_TIM_ConfigClockSource+0x1f0>
 8007c0c:	2b30      	cmp	r3, #48	@ 0x30
 8007c0e:	d064      	beq.n	8007cda <HAL_TIM_ConfigClockSource+0x1de>
 8007c10:	2b30      	cmp	r3, #48	@ 0x30
 8007c12:	d86b      	bhi.n	8007cec <HAL_TIM_ConfigClockSource+0x1f0>
 8007c14:	2b20      	cmp	r3, #32
 8007c16:	d060      	beq.n	8007cda <HAL_TIM_ConfigClockSource+0x1de>
 8007c18:	2b20      	cmp	r3, #32
 8007c1a:	d867      	bhi.n	8007cec <HAL_TIM_ConfigClockSource+0x1f0>
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d05c      	beq.n	8007cda <HAL_TIM_ConfigClockSource+0x1de>
 8007c20:	2b10      	cmp	r3, #16
 8007c22:	d05a      	beq.n	8007cda <HAL_TIM_ConfigClockSource+0x1de>
 8007c24:	e062      	b.n	8007cec <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c36:	f000 f9a7 	bl	8007f88 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007c48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	68ba      	ldr	r2, [r7, #8]
 8007c50:	609a      	str	r2, [r3, #8]
      break;
 8007c52:	e04f      	b.n	8007cf4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c64:	f000 f990 	bl	8007f88 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	689a      	ldr	r2, [r3, #8]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007c76:	609a      	str	r2, [r3, #8]
      break;
 8007c78:	e03c      	b.n	8007cf4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c86:	461a      	mov	r2, r3
 8007c88:	f000 f902 	bl	8007e90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2150      	movs	r1, #80	@ 0x50
 8007c92:	4618      	mov	r0, r3
 8007c94:	f000 f95b 	bl	8007f4e <TIM_ITRx_SetConfig>
      break;
 8007c98:	e02c      	b.n	8007cf4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	f000 f921 	bl	8007eee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2160      	movs	r1, #96	@ 0x60
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f000 f94b 	bl	8007f4e <TIM_ITRx_SetConfig>
      break;
 8007cb8:	e01c      	b.n	8007cf4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	f000 f8e2 	bl	8007e90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	2140      	movs	r1, #64	@ 0x40
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f000 f93b 	bl	8007f4e <TIM_ITRx_SetConfig>
      break;
 8007cd8:	e00c      	b.n	8007cf4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	4610      	mov	r0, r2
 8007ce6:	f000 f932 	bl	8007f4e <TIM_ITRx_SetConfig>
      break;
 8007cea:	e003      	b.n	8007cf4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	73fb      	strb	r3, [r7, #15]
      break;
 8007cf0:	e000      	b.n	8007cf4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8007cf2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3710      	adds	r7, #16
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	bf00      	nop
 8007d10:	00100070 	.word	0x00100070
 8007d14:	00100060 	.word	0x00100060
 8007d18:	00100050 	.word	0x00100050
 8007d1c:	00100040 	.word	0x00100040
 8007d20:	00100030 	.word	0x00100030
 8007d24:	00100020 	.word	0x00100020

08007d28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b085      	sub	sp, #20
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	4a4c      	ldr	r2, [pc, #304]	@ (8007e6c <TIM_Base_SetConfig+0x144>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d017      	beq.n	8007d70 <TIM_Base_SetConfig+0x48>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d46:	d013      	beq.n	8007d70 <TIM_Base_SetConfig+0x48>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	4a49      	ldr	r2, [pc, #292]	@ (8007e70 <TIM_Base_SetConfig+0x148>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d00f      	beq.n	8007d70 <TIM_Base_SetConfig+0x48>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	4a48      	ldr	r2, [pc, #288]	@ (8007e74 <TIM_Base_SetConfig+0x14c>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d00b      	beq.n	8007d70 <TIM_Base_SetConfig+0x48>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	4a47      	ldr	r2, [pc, #284]	@ (8007e78 <TIM_Base_SetConfig+0x150>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d007      	beq.n	8007d70 <TIM_Base_SetConfig+0x48>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	4a46      	ldr	r2, [pc, #280]	@ (8007e7c <TIM_Base_SetConfig+0x154>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d003      	beq.n	8007d70 <TIM_Base_SetConfig+0x48>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	4a45      	ldr	r2, [pc, #276]	@ (8007e80 <TIM_Base_SetConfig+0x158>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d108      	bne.n	8007d82 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	68fa      	ldr	r2, [r7, #12]
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4a39      	ldr	r2, [pc, #228]	@ (8007e6c <TIM_Base_SetConfig+0x144>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d023      	beq.n	8007dd2 <TIM_Base_SetConfig+0xaa>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d90:	d01f      	beq.n	8007dd2 <TIM_Base_SetConfig+0xaa>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4a36      	ldr	r2, [pc, #216]	@ (8007e70 <TIM_Base_SetConfig+0x148>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d01b      	beq.n	8007dd2 <TIM_Base_SetConfig+0xaa>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4a35      	ldr	r2, [pc, #212]	@ (8007e74 <TIM_Base_SetConfig+0x14c>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d017      	beq.n	8007dd2 <TIM_Base_SetConfig+0xaa>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4a34      	ldr	r2, [pc, #208]	@ (8007e78 <TIM_Base_SetConfig+0x150>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d013      	beq.n	8007dd2 <TIM_Base_SetConfig+0xaa>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4a33      	ldr	r2, [pc, #204]	@ (8007e7c <TIM_Base_SetConfig+0x154>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d00f      	beq.n	8007dd2 <TIM_Base_SetConfig+0xaa>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a33      	ldr	r2, [pc, #204]	@ (8007e84 <TIM_Base_SetConfig+0x15c>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d00b      	beq.n	8007dd2 <TIM_Base_SetConfig+0xaa>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4a32      	ldr	r2, [pc, #200]	@ (8007e88 <TIM_Base_SetConfig+0x160>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d007      	beq.n	8007dd2 <TIM_Base_SetConfig+0xaa>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4a31      	ldr	r2, [pc, #196]	@ (8007e8c <TIM_Base_SetConfig+0x164>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d003      	beq.n	8007dd2 <TIM_Base_SetConfig+0xaa>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4a2c      	ldr	r2, [pc, #176]	@ (8007e80 <TIM_Base_SetConfig+0x158>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d108      	bne.n	8007de4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007dd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	68fa      	ldr	r2, [r7, #12]
 8007de0:	4313      	orrs	r3, r2
 8007de2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	695b      	ldr	r3, [r3, #20]
 8007dee:	4313      	orrs	r3, r2
 8007df0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	68fa      	ldr	r2, [r7, #12]
 8007df6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	689a      	ldr	r2, [r3, #8]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	4a18      	ldr	r2, [pc, #96]	@ (8007e6c <TIM_Base_SetConfig+0x144>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d013      	beq.n	8007e38 <TIM_Base_SetConfig+0x110>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4a1a      	ldr	r2, [pc, #104]	@ (8007e7c <TIM_Base_SetConfig+0x154>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d00f      	beq.n	8007e38 <TIM_Base_SetConfig+0x110>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	4a1a      	ldr	r2, [pc, #104]	@ (8007e84 <TIM_Base_SetConfig+0x15c>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d00b      	beq.n	8007e38 <TIM_Base_SetConfig+0x110>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	4a19      	ldr	r2, [pc, #100]	@ (8007e88 <TIM_Base_SetConfig+0x160>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d007      	beq.n	8007e38 <TIM_Base_SetConfig+0x110>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	4a18      	ldr	r2, [pc, #96]	@ (8007e8c <TIM_Base_SetConfig+0x164>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d003      	beq.n	8007e38 <TIM_Base_SetConfig+0x110>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	4a13      	ldr	r2, [pc, #76]	@ (8007e80 <TIM_Base_SetConfig+0x158>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d103      	bne.n	8007e40 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	691a      	ldr	r2, [r3, #16]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2201      	movs	r2, #1
 8007e44:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	691b      	ldr	r3, [r3, #16]
 8007e4a:	f003 0301 	and.w	r3, r3, #1
 8007e4e:	2b01      	cmp	r3, #1
 8007e50:	d105      	bne.n	8007e5e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	691b      	ldr	r3, [r3, #16]
 8007e56:	f023 0201 	bic.w	r2, r3, #1
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	611a      	str	r2, [r3, #16]
  }
}
 8007e5e:	bf00      	nop
 8007e60:	3714      	adds	r7, #20
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop
 8007e6c:	40012c00 	.word	0x40012c00
 8007e70:	40000400 	.word	0x40000400
 8007e74:	40000800 	.word	0x40000800
 8007e78:	40000c00 	.word	0x40000c00
 8007e7c:	40013400 	.word	0x40013400
 8007e80:	40015000 	.word	0x40015000
 8007e84:	40014000 	.word	0x40014000
 8007e88:	40014400 	.word	0x40014400
 8007e8c:	40014800 	.word	0x40014800

08007e90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b087      	sub	sp, #28
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	6a1b      	ldr	r3, [r3, #32]
 8007ea0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	6a1b      	ldr	r3, [r3, #32]
 8007ea6:	f023 0201 	bic.w	r2, r3, #1
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	699b      	ldr	r3, [r3, #24]
 8007eb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007eba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	011b      	lsls	r3, r3, #4
 8007ec0:	693a      	ldr	r2, [r7, #16]
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	f023 030a 	bic.w	r3, r3, #10
 8007ecc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ece:	697a      	ldr	r2, [r7, #20]
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	693a      	ldr	r2, [r7, #16]
 8007eda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	697a      	ldr	r2, [r7, #20]
 8007ee0:	621a      	str	r2, [r3, #32]
}
 8007ee2:	bf00      	nop
 8007ee4:	371c      	adds	r7, #28
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr

08007eee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007eee:	b480      	push	{r7}
 8007ef0:	b087      	sub	sp, #28
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	60f8      	str	r0, [r7, #12]
 8007ef6:	60b9      	str	r1, [r7, #8]
 8007ef8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	6a1b      	ldr	r3, [r3, #32]
 8007efe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6a1b      	ldr	r3, [r3, #32]
 8007f04:	f023 0210 	bic.w	r2, r3, #16
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	699b      	ldr	r3, [r3, #24]
 8007f10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007f18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	031b      	lsls	r3, r3, #12
 8007f1e:	693a      	ldr	r2, [r7, #16]
 8007f20:	4313      	orrs	r3, r2
 8007f22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007f2a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	011b      	lsls	r3, r3, #4
 8007f30:	697a      	ldr	r2, [r7, #20]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	693a      	ldr	r2, [r7, #16]
 8007f3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	697a      	ldr	r2, [r7, #20]
 8007f40:	621a      	str	r2, [r3, #32]
}
 8007f42:	bf00      	nop
 8007f44:	371c      	adds	r7, #28
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr

08007f4e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f4e:	b480      	push	{r7}
 8007f50:	b085      	sub	sp, #20
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
 8007f56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007f64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f6a:	683a      	ldr	r2, [r7, #0]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	f043 0307 	orr.w	r3, r3, #7
 8007f74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	68fa      	ldr	r2, [r7, #12]
 8007f7a:	609a      	str	r2, [r3, #8]
}
 8007f7c:	bf00      	nop
 8007f7e:	3714      	adds	r7, #20
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b087      	sub	sp, #28
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	60b9      	str	r1, [r7, #8]
 8007f92:	607a      	str	r2, [r7, #4]
 8007f94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007fa2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	021a      	lsls	r2, r3, #8
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	431a      	orrs	r2, r3
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	697a      	ldr	r2, [r7, #20]
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	697a      	ldr	r2, [r7, #20]
 8007fba:	609a      	str	r2, [r3, #8]
}
 8007fbc:	bf00      	nop
 8007fbe:	371c      	adds	r7, #28
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr

08007fc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b085      	sub	sp, #20
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d101      	bne.n	8007fe0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007fdc:	2302      	movs	r3, #2
 8007fde:	e074      	b.n	80080ca <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2202      	movs	r2, #2
 8007fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a34      	ldr	r2, [pc, #208]	@ (80080d8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d009      	beq.n	800801e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a33      	ldr	r2, [pc, #204]	@ (80080dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d004      	beq.n	800801e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a31      	ldr	r2, [pc, #196]	@ (80080e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d108      	bne.n	8008030 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008024:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	68fa      	ldr	r2, [r7, #12]
 800802c:	4313      	orrs	r3, r2
 800802e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008036:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800803a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	68fa      	ldr	r2, [r7, #12]
 8008042:	4313      	orrs	r3, r2
 8008044:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a21      	ldr	r2, [pc, #132]	@ (80080d8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d022      	beq.n	800809e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008060:	d01d      	beq.n	800809e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a1f      	ldr	r2, [pc, #124]	@ (80080e4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d018      	beq.n	800809e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a1d      	ldr	r2, [pc, #116]	@ (80080e8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d013      	beq.n	800809e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a1c      	ldr	r2, [pc, #112]	@ (80080ec <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d00e      	beq.n	800809e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a15      	ldr	r2, [pc, #84]	@ (80080dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d009      	beq.n	800809e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a18      	ldr	r2, [pc, #96]	@ (80080f0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d004      	beq.n	800809e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a11      	ldr	r2, [pc, #68]	@ (80080e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d10c      	bne.n	80080b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	68ba      	ldr	r2, [r7, #8]
 80080ac:	4313      	orrs	r3, r2
 80080ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	68ba      	ldr	r2, [r7, #8]
 80080b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2200      	movs	r2, #0
 80080c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80080c8:	2300      	movs	r3, #0
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3714      	adds	r7, #20
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop
 80080d8:	40012c00 	.word	0x40012c00
 80080dc:	40013400 	.word	0x40013400
 80080e0:	40015000 	.word	0x40015000
 80080e4:	40000400 	.word	0x40000400
 80080e8:	40000800 	.word	0x40000800
 80080ec:	40000c00 	.word	0x40000c00
 80080f0:	40014000 	.word	0x40014000

080080f4 <__cvt>:
 80080f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080f8:	ec57 6b10 	vmov	r6, r7, d0
 80080fc:	2f00      	cmp	r7, #0
 80080fe:	460c      	mov	r4, r1
 8008100:	4619      	mov	r1, r3
 8008102:	463b      	mov	r3, r7
 8008104:	bfbb      	ittet	lt
 8008106:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800810a:	461f      	movlt	r7, r3
 800810c:	2300      	movge	r3, #0
 800810e:	232d      	movlt	r3, #45	@ 0x2d
 8008110:	700b      	strb	r3, [r1, #0]
 8008112:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008114:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008118:	4691      	mov	r9, r2
 800811a:	f023 0820 	bic.w	r8, r3, #32
 800811e:	bfbc      	itt	lt
 8008120:	4632      	movlt	r2, r6
 8008122:	4616      	movlt	r6, r2
 8008124:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008128:	d005      	beq.n	8008136 <__cvt+0x42>
 800812a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800812e:	d100      	bne.n	8008132 <__cvt+0x3e>
 8008130:	3401      	adds	r4, #1
 8008132:	2102      	movs	r1, #2
 8008134:	e000      	b.n	8008138 <__cvt+0x44>
 8008136:	2103      	movs	r1, #3
 8008138:	ab03      	add	r3, sp, #12
 800813a:	9301      	str	r3, [sp, #4]
 800813c:	ab02      	add	r3, sp, #8
 800813e:	9300      	str	r3, [sp, #0]
 8008140:	ec47 6b10 	vmov	d0, r6, r7
 8008144:	4653      	mov	r3, sl
 8008146:	4622      	mov	r2, r4
 8008148:	f000 fe46 	bl	8008dd8 <_dtoa_r>
 800814c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008150:	4605      	mov	r5, r0
 8008152:	d119      	bne.n	8008188 <__cvt+0x94>
 8008154:	f019 0f01 	tst.w	r9, #1
 8008158:	d00e      	beq.n	8008178 <__cvt+0x84>
 800815a:	eb00 0904 	add.w	r9, r0, r4
 800815e:	2200      	movs	r2, #0
 8008160:	2300      	movs	r3, #0
 8008162:	4630      	mov	r0, r6
 8008164:	4639      	mov	r1, r7
 8008166:	f7f8 fcd7 	bl	8000b18 <__aeabi_dcmpeq>
 800816a:	b108      	cbz	r0, 8008170 <__cvt+0x7c>
 800816c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008170:	2230      	movs	r2, #48	@ 0x30
 8008172:	9b03      	ldr	r3, [sp, #12]
 8008174:	454b      	cmp	r3, r9
 8008176:	d31e      	bcc.n	80081b6 <__cvt+0xc2>
 8008178:	9b03      	ldr	r3, [sp, #12]
 800817a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800817c:	1b5b      	subs	r3, r3, r5
 800817e:	4628      	mov	r0, r5
 8008180:	6013      	str	r3, [r2, #0]
 8008182:	b004      	add	sp, #16
 8008184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008188:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800818c:	eb00 0904 	add.w	r9, r0, r4
 8008190:	d1e5      	bne.n	800815e <__cvt+0x6a>
 8008192:	7803      	ldrb	r3, [r0, #0]
 8008194:	2b30      	cmp	r3, #48	@ 0x30
 8008196:	d10a      	bne.n	80081ae <__cvt+0xba>
 8008198:	2200      	movs	r2, #0
 800819a:	2300      	movs	r3, #0
 800819c:	4630      	mov	r0, r6
 800819e:	4639      	mov	r1, r7
 80081a0:	f7f8 fcba 	bl	8000b18 <__aeabi_dcmpeq>
 80081a4:	b918      	cbnz	r0, 80081ae <__cvt+0xba>
 80081a6:	f1c4 0401 	rsb	r4, r4, #1
 80081aa:	f8ca 4000 	str.w	r4, [sl]
 80081ae:	f8da 3000 	ldr.w	r3, [sl]
 80081b2:	4499      	add	r9, r3
 80081b4:	e7d3      	b.n	800815e <__cvt+0x6a>
 80081b6:	1c59      	adds	r1, r3, #1
 80081b8:	9103      	str	r1, [sp, #12]
 80081ba:	701a      	strb	r2, [r3, #0]
 80081bc:	e7d9      	b.n	8008172 <__cvt+0x7e>

080081be <__exponent>:
 80081be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081c0:	2900      	cmp	r1, #0
 80081c2:	bfba      	itte	lt
 80081c4:	4249      	neglt	r1, r1
 80081c6:	232d      	movlt	r3, #45	@ 0x2d
 80081c8:	232b      	movge	r3, #43	@ 0x2b
 80081ca:	2909      	cmp	r1, #9
 80081cc:	7002      	strb	r2, [r0, #0]
 80081ce:	7043      	strb	r3, [r0, #1]
 80081d0:	dd29      	ble.n	8008226 <__exponent+0x68>
 80081d2:	f10d 0307 	add.w	r3, sp, #7
 80081d6:	461d      	mov	r5, r3
 80081d8:	270a      	movs	r7, #10
 80081da:	461a      	mov	r2, r3
 80081dc:	fbb1 f6f7 	udiv	r6, r1, r7
 80081e0:	fb07 1416 	mls	r4, r7, r6, r1
 80081e4:	3430      	adds	r4, #48	@ 0x30
 80081e6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80081ea:	460c      	mov	r4, r1
 80081ec:	2c63      	cmp	r4, #99	@ 0x63
 80081ee:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80081f2:	4631      	mov	r1, r6
 80081f4:	dcf1      	bgt.n	80081da <__exponent+0x1c>
 80081f6:	3130      	adds	r1, #48	@ 0x30
 80081f8:	1e94      	subs	r4, r2, #2
 80081fa:	f803 1c01 	strb.w	r1, [r3, #-1]
 80081fe:	1c41      	adds	r1, r0, #1
 8008200:	4623      	mov	r3, r4
 8008202:	42ab      	cmp	r3, r5
 8008204:	d30a      	bcc.n	800821c <__exponent+0x5e>
 8008206:	f10d 0309 	add.w	r3, sp, #9
 800820a:	1a9b      	subs	r3, r3, r2
 800820c:	42ac      	cmp	r4, r5
 800820e:	bf88      	it	hi
 8008210:	2300      	movhi	r3, #0
 8008212:	3302      	adds	r3, #2
 8008214:	4403      	add	r3, r0
 8008216:	1a18      	subs	r0, r3, r0
 8008218:	b003      	add	sp, #12
 800821a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800821c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008220:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008224:	e7ed      	b.n	8008202 <__exponent+0x44>
 8008226:	2330      	movs	r3, #48	@ 0x30
 8008228:	3130      	adds	r1, #48	@ 0x30
 800822a:	7083      	strb	r3, [r0, #2]
 800822c:	70c1      	strb	r1, [r0, #3]
 800822e:	1d03      	adds	r3, r0, #4
 8008230:	e7f1      	b.n	8008216 <__exponent+0x58>
	...

08008234 <_printf_float>:
 8008234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008238:	b08d      	sub	sp, #52	@ 0x34
 800823a:	460c      	mov	r4, r1
 800823c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008240:	4616      	mov	r6, r2
 8008242:	461f      	mov	r7, r3
 8008244:	4605      	mov	r5, r0
 8008246:	f000 fcb9 	bl	8008bbc <_localeconv_r>
 800824a:	6803      	ldr	r3, [r0, #0]
 800824c:	9304      	str	r3, [sp, #16]
 800824e:	4618      	mov	r0, r3
 8008250:	f7f8 f836 	bl	80002c0 <strlen>
 8008254:	2300      	movs	r3, #0
 8008256:	930a      	str	r3, [sp, #40]	@ 0x28
 8008258:	f8d8 3000 	ldr.w	r3, [r8]
 800825c:	9005      	str	r0, [sp, #20]
 800825e:	3307      	adds	r3, #7
 8008260:	f023 0307 	bic.w	r3, r3, #7
 8008264:	f103 0208 	add.w	r2, r3, #8
 8008268:	f894 a018 	ldrb.w	sl, [r4, #24]
 800826c:	f8d4 b000 	ldr.w	fp, [r4]
 8008270:	f8c8 2000 	str.w	r2, [r8]
 8008274:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008278:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800827c:	9307      	str	r3, [sp, #28]
 800827e:	f8cd 8018 	str.w	r8, [sp, #24]
 8008282:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008286:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800828a:	4b9c      	ldr	r3, [pc, #624]	@ (80084fc <_printf_float+0x2c8>)
 800828c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008290:	f7f8 fc74 	bl	8000b7c <__aeabi_dcmpun>
 8008294:	bb70      	cbnz	r0, 80082f4 <_printf_float+0xc0>
 8008296:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800829a:	4b98      	ldr	r3, [pc, #608]	@ (80084fc <_printf_float+0x2c8>)
 800829c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80082a0:	f7f8 fc4e 	bl	8000b40 <__aeabi_dcmple>
 80082a4:	bb30      	cbnz	r0, 80082f4 <_printf_float+0xc0>
 80082a6:	2200      	movs	r2, #0
 80082a8:	2300      	movs	r3, #0
 80082aa:	4640      	mov	r0, r8
 80082ac:	4649      	mov	r1, r9
 80082ae:	f7f8 fc3d 	bl	8000b2c <__aeabi_dcmplt>
 80082b2:	b110      	cbz	r0, 80082ba <_printf_float+0x86>
 80082b4:	232d      	movs	r3, #45	@ 0x2d
 80082b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80082ba:	4a91      	ldr	r2, [pc, #580]	@ (8008500 <_printf_float+0x2cc>)
 80082bc:	4b91      	ldr	r3, [pc, #580]	@ (8008504 <_printf_float+0x2d0>)
 80082be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80082c2:	bf8c      	ite	hi
 80082c4:	4690      	movhi	r8, r2
 80082c6:	4698      	movls	r8, r3
 80082c8:	2303      	movs	r3, #3
 80082ca:	6123      	str	r3, [r4, #16]
 80082cc:	f02b 0304 	bic.w	r3, fp, #4
 80082d0:	6023      	str	r3, [r4, #0]
 80082d2:	f04f 0900 	mov.w	r9, #0
 80082d6:	9700      	str	r7, [sp, #0]
 80082d8:	4633      	mov	r3, r6
 80082da:	aa0b      	add	r2, sp, #44	@ 0x2c
 80082dc:	4621      	mov	r1, r4
 80082de:	4628      	mov	r0, r5
 80082e0:	f000 f9d2 	bl	8008688 <_printf_common>
 80082e4:	3001      	adds	r0, #1
 80082e6:	f040 808d 	bne.w	8008404 <_printf_float+0x1d0>
 80082ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80082ee:	b00d      	add	sp, #52	@ 0x34
 80082f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082f4:	4642      	mov	r2, r8
 80082f6:	464b      	mov	r3, r9
 80082f8:	4640      	mov	r0, r8
 80082fa:	4649      	mov	r1, r9
 80082fc:	f7f8 fc3e 	bl	8000b7c <__aeabi_dcmpun>
 8008300:	b140      	cbz	r0, 8008314 <_printf_float+0xe0>
 8008302:	464b      	mov	r3, r9
 8008304:	2b00      	cmp	r3, #0
 8008306:	bfbc      	itt	lt
 8008308:	232d      	movlt	r3, #45	@ 0x2d
 800830a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800830e:	4a7e      	ldr	r2, [pc, #504]	@ (8008508 <_printf_float+0x2d4>)
 8008310:	4b7e      	ldr	r3, [pc, #504]	@ (800850c <_printf_float+0x2d8>)
 8008312:	e7d4      	b.n	80082be <_printf_float+0x8a>
 8008314:	6863      	ldr	r3, [r4, #4]
 8008316:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800831a:	9206      	str	r2, [sp, #24]
 800831c:	1c5a      	adds	r2, r3, #1
 800831e:	d13b      	bne.n	8008398 <_printf_float+0x164>
 8008320:	2306      	movs	r3, #6
 8008322:	6063      	str	r3, [r4, #4]
 8008324:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008328:	2300      	movs	r3, #0
 800832a:	6022      	str	r2, [r4, #0]
 800832c:	9303      	str	r3, [sp, #12]
 800832e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008330:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008334:	ab09      	add	r3, sp, #36	@ 0x24
 8008336:	9300      	str	r3, [sp, #0]
 8008338:	6861      	ldr	r1, [r4, #4]
 800833a:	ec49 8b10 	vmov	d0, r8, r9
 800833e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008342:	4628      	mov	r0, r5
 8008344:	f7ff fed6 	bl	80080f4 <__cvt>
 8008348:	9b06      	ldr	r3, [sp, #24]
 800834a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800834c:	2b47      	cmp	r3, #71	@ 0x47
 800834e:	4680      	mov	r8, r0
 8008350:	d129      	bne.n	80083a6 <_printf_float+0x172>
 8008352:	1cc8      	adds	r0, r1, #3
 8008354:	db02      	blt.n	800835c <_printf_float+0x128>
 8008356:	6863      	ldr	r3, [r4, #4]
 8008358:	4299      	cmp	r1, r3
 800835a:	dd41      	ble.n	80083e0 <_printf_float+0x1ac>
 800835c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008360:	fa5f fa8a 	uxtb.w	sl, sl
 8008364:	3901      	subs	r1, #1
 8008366:	4652      	mov	r2, sl
 8008368:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800836c:	9109      	str	r1, [sp, #36]	@ 0x24
 800836e:	f7ff ff26 	bl	80081be <__exponent>
 8008372:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008374:	1813      	adds	r3, r2, r0
 8008376:	2a01      	cmp	r2, #1
 8008378:	4681      	mov	r9, r0
 800837a:	6123      	str	r3, [r4, #16]
 800837c:	dc02      	bgt.n	8008384 <_printf_float+0x150>
 800837e:	6822      	ldr	r2, [r4, #0]
 8008380:	07d2      	lsls	r2, r2, #31
 8008382:	d501      	bpl.n	8008388 <_printf_float+0x154>
 8008384:	3301      	adds	r3, #1
 8008386:	6123      	str	r3, [r4, #16]
 8008388:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800838c:	2b00      	cmp	r3, #0
 800838e:	d0a2      	beq.n	80082d6 <_printf_float+0xa2>
 8008390:	232d      	movs	r3, #45	@ 0x2d
 8008392:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008396:	e79e      	b.n	80082d6 <_printf_float+0xa2>
 8008398:	9a06      	ldr	r2, [sp, #24]
 800839a:	2a47      	cmp	r2, #71	@ 0x47
 800839c:	d1c2      	bne.n	8008324 <_printf_float+0xf0>
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d1c0      	bne.n	8008324 <_printf_float+0xf0>
 80083a2:	2301      	movs	r3, #1
 80083a4:	e7bd      	b.n	8008322 <_printf_float+0xee>
 80083a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80083aa:	d9db      	bls.n	8008364 <_printf_float+0x130>
 80083ac:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80083b0:	d118      	bne.n	80083e4 <_printf_float+0x1b0>
 80083b2:	2900      	cmp	r1, #0
 80083b4:	6863      	ldr	r3, [r4, #4]
 80083b6:	dd0b      	ble.n	80083d0 <_printf_float+0x19c>
 80083b8:	6121      	str	r1, [r4, #16]
 80083ba:	b913      	cbnz	r3, 80083c2 <_printf_float+0x18e>
 80083bc:	6822      	ldr	r2, [r4, #0]
 80083be:	07d0      	lsls	r0, r2, #31
 80083c0:	d502      	bpl.n	80083c8 <_printf_float+0x194>
 80083c2:	3301      	adds	r3, #1
 80083c4:	440b      	add	r3, r1
 80083c6:	6123      	str	r3, [r4, #16]
 80083c8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80083ca:	f04f 0900 	mov.w	r9, #0
 80083ce:	e7db      	b.n	8008388 <_printf_float+0x154>
 80083d0:	b913      	cbnz	r3, 80083d8 <_printf_float+0x1a4>
 80083d2:	6822      	ldr	r2, [r4, #0]
 80083d4:	07d2      	lsls	r2, r2, #31
 80083d6:	d501      	bpl.n	80083dc <_printf_float+0x1a8>
 80083d8:	3302      	adds	r3, #2
 80083da:	e7f4      	b.n	80083c6 <_printf_float+0x192>
 80083dc:	2301      	movs	r3, #1
 80083de:	e7f2      	b.n	80083c6 <_printf_float+0x192>
 80083e0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80083e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083e6:	4299      	cmp	r1, r3
 80083e8:	db05      	blt.n	80083f6 <_printf_float+0x1c2>
 80083ea:	6823      	ldr	r3, [r4, #0]
 80083ec:	6121      	str	r1, [r4, #16]
 80083ee:	07d8      	lsls	r0, r3, #31
 80083f0:	d5ea      	bpl.n	80083c8 <_printf_float+0x194>
 80083f2:	1c4b      	adds	r3, r1, #1
 80083f4:	e7e7      	b.n	80083c6 <_printf_float+0x192>
 80083f6:	2900      	cmp	r1, #0
 80083f8:	bfd4      	ite	le
 80083fa:	f1c1 0202 	rsble	r2, r1, #2
 80083fe:	2201      	movgt	r2, #1
 8008400:	4413      	add	r3, r2
 8008402:	e7e0      	b.n	80083c6 <_printf_float+0x192>
 8008404:	6823      	ldr	r3, [r4, #0]
 8008406:	055a      	lsls	r2, r3, #21
 8008408:	d407      	bmi.n	800841a <_printf_float+0x1e6>
 800840a:	6923      	ldr	r3, [r4, #16]
 800840c:	4642      	mov	r2, r8
 800840e:	4631      	mov	r1, r6
 8008410:	4628      	mov	r0, r5
 8008412:	47b8      	blx	r7
 8008414:	3001      	adds	r0, #1
 8008416:	d12b      	bne.n	8008470 <_printf_float+0x23c>
 8008418:	e767      	b.n	80082ea <_printf_float+0xb6>
 800841a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800841e:	f240 80dd 	bls.w	80085dc <_printf_float+0x3a8>
 8008422:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008426:	2200      	movs	r2, #0
 8008428:	2300      	movs	r3, #0
 800842a:	f7f8 fb75 	bl	8000b18 <__aeabi_dcmpeq>
 800842e:	2800      	cmp	r0, #0
 8008430:	d033      	beq.n	800849a <_printf_float+0x266>
 8008432:	4a37      	ldr	r2, [pc, #220]	@ (8008510 <_printf_float+0x2dc>)
 8008434:	2301      	movs	r3, #1
 8008436:	4631      	mov	r1, r6
 8008438:	4628      	mov	r0, r5
 800843a:	47b8      	blx	r7
 800843c:	3001      	adds	r0, #1
 800843e:	f43f af54 	beq.w	80082ea <_printf_float+0xb6>
 8008442:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008446:	4543      	cmp	r3, r8
 8008448:	db02      	blt.n	8008450 <_printf_float+0x21c>
 800844a:	6823      	ldr	r3, [r4, #0]
 800844c:	07d8      	lsls	r0, r3, #31
 800844e:	d50f      	bpl.n	8008470 <_printf_float+0x23c>
 8008450:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008454:	4631      	mov	r1, r6
 8008456:	4628      	mov	r0, r5
 8008458:	47b8      	blx	r7
 800845a:	3001      	adds	r0, #1
 800845c:	f43f af45 	beq.w	80082ea <_printf_float+0xb6>
 8008460:	f04f 0900 	mov.w	r9, #0
 8008464:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8008468:	f104 0a1a 	add.w	sl, r4, #26
 800846c:	45c8      	cmp	r8, r9
 800846e:	dc09      	bgt.n	8008484 <_printf_float+0x250>
 8008470:	6823      	ldr	r3, [r4, #0]
 8008472:	079b      	lsls	r3, r3, #30
 8008474:	f100 8103 	bmi.w	800867e <_printf_float+0x44a>
 8008478:	68e0      	ldr	r0, [r4, #12]
 800847a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800847c:	4298      	cmp	r0, r3
 800847e:	bfb8      	it	lt
 8008480:	4618      	movlt	r0, r3
 8008482:	e734      	b.n	80082ee <_printf_float+0xba>
 8008484:	2301      	movs	r3, #1
 8008486:	4652      	mov	r2, sl
 8008488:	4631      	mov	r1, r6
 800848a:	4628      	mov	r0, r5
 800848c:	47b8      	blx	r7
 800848e:	3001      	adds	r0, #1
 8008490:	f43f af2b 	beq.w	80082ea <_printf_float+0xb6>
 8008494:	f109 0901 	add.w	r9, r9, #1
 8008498:	e7e8      	b.n	800846c <_printf_float+0x238>
 800849a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800849c:	2b00      	cmp	r3, #0
 800849e:	dc39      	bgt.n	8008514 <_printf_float+0x2e0>
 80084a0:	4a1b      	ldr	r2, [pc, #108]	@ (8008510 <_printf_float+0x2dc>)
 80084a2:	2301      	movs	r3, #1
 80084a4:	4631      	mov	r1, r6
 80084a6:	4628      	mov	r0, r5
 80084a8:	47b8      	blx	r7
 80084aa:	3001      	adds	r0, #1
 80084ac:	f43f af1d 	beq.w	80082ea <_printf_float+0xb6>
 80084b0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80084b4:	ea59 0303 	orrs.w	r3, r9, r3
 80084b8:	d102      	bne.n	80084c0 <_printf_float+0x28c>
 80084ba:	6823      	ldr	r3, [r4, #0]
 80084bc:	07d9      	lsls	r1, r3, #31
 80084be:	d5d7      	bpl.n	8008470 <_printf_float+0x23c>
 80084c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084c4:	4631      	mov	r1, r6
 80084c6:	4628      	mov	r0, r5
 80084c8:	47b8      	blx	r7
 80084ca:	3001      	adds	r0, #1
 80084cc:	f43f af0d 	beq.w	80082ea <_printf_float+0xb6>
 80084d0:	f04f 0a00 	mov.w	sl, #0
 80084d4:	f104 0b1a 	add.w	fp, r4, #26
 80084d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084da:	425b      	negs	r3, r3
 80084dc:	4553      	cmp	r3, sl
 80084de:	dc01      	bgt.n	80084e4 <_printf_float+0x2b0>
 80084e0:	464b      	mov	r3, r9
 80084e2:	e793      	b.n	800840c <_printf_float+0x1d8>
 80084e4:	2301      	movs	r3, #1
 80084e6:	465a      	mov	r2, fp
 80084e8:	4631      	mov	r1, r6
 80084ea:	4628      	mov	r0, r5
 80084ec:	47b8      	blx	r7
 80084ee:	3001      	adds	r0, #1
 80084f0:	f43f aefb 	beq.w	80082ea <_printf_float+0xb6>
 80084f4:	f10a 0a01 	add.w	sl, sl, #1
 80084f8:	e7ee      	b.n	80084d8 <_printf_float+0x2a4>
 80084fa:	bf00      	nop
 80084fc:	7fefffff 	.word	0x7fefffff
 8008500:	0800aa44 	.word	0x0800aa44
 8008504:	0800aa40 	.word	0x0800aa40
 8008508:	0800aa4c 	.word	0x0800aa4c
 800850c:	0800aa48 	.word	0x0800aa48
 8008510:	0800aa50 	.word	0x0800aa50
 8008514:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008516:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800851a:	4553      	cmp	r3, sl
 800851c:	bfa8      	it	ge
 800851e:	4653      	movge	r3, sl
 8008520:	2b00      	cmp	r3, #0
 8008522:	4699      	mov	r9, r3
 8008524:	dc36      	bgt.n	8008594 <_printf_float+0x360>
 8008526:	f04f 0b00 	mov.w	fp, #0
 800852a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800852e:	f104 021a 	add.w	r2, r4, #26
 8008532:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008534:	9306      	str	r3, [sp, #24]
 8008536:	eba3 0309 	sub.w	r3, r3, r9
 800853a:	455b      	cmp	r3, fp
 800853c:	dc31      	bgt.n	80085a2 <_printf_float+0x36e>
 800853e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008540:	459a      	cmp	sl, r3
 8008542:	dc3a      	bgt.n	80085ba <_printf_float+0x386>
 8008544:	6823      	ldr	r3, [r4, #0]
 8008546:	07da      	lsls	r2, r3, #31
 8008548:	d437      	bmi.n	80085ba <_printf_float+0x386>
 800854a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800854c:	ebaa 0903 	sub.w	r9, sl, r3
 8008550:	9b06      	ldr	r3, [sp, #24]
 8008552:	ebaa 0303 	sub.w	r3, sl, r3
 8008556:	4599      	cmp	r9, r3
 8008558:	bfa8      	it	ge
 800855a:	4699      	movge	r9, r3
 800855c:	f1b9 0f00 	cmp.w	r9, #0
 8008560:	dc33      	bgt.n	80085ca <_printf_float+0x396>
 8008562:	f04f 0800 	mov.w	r8, #0
 8008566:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800856a:	f104 0b1a 	add.w	fp, r4, #26
 800856e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008570:	ebaa 0303 	sub.w	r3, sl, r3
 8008574:	eba3 0309 	sub.w	r3, r3, r9
 8008578:	4543      	cmp	r3, r8
 800857a:	f77f af79 	ble.w	8008470 <_printf_float+0x23c>
 800857e:	2301      	movs	r3, #1
 8008580:	465a      	mov	r2, fp
 8008582:	4631      	mov	r1, r6
 8008584:	4628      	mov	r0, r5
 8008586:	47b8      	blx	r7
 8008588:	3001      	adds	r0, #1
 800858a:	f43f aeae 	beq.w	80082ea <_printf_float+0xb6>
 800858e:	f108 0801 	add.w	r8, r8, #1
 8008592:	e7ec      	b.n	800856e <_printf_float+0x33a>
 8008594:	4642      	mov	r2, r8
 8008596:	4631      	mov	r1, r6
 8008598:	4628      	mov	r0, r5
 800859a:	47b8      	blx	r7
 800859c:	3001      	adds	r0, #1
 800859e:	d1c2      	bne.n	8008526 <_printf_float+0x2f2>
 80085a0:	e6a3      	b.n	80082ea <_printf_float+0xb6>
 80085a2:	2301      	movs	r3, #1
 80085a4:	4631      	mov	r1, r6
 80085a6:	4628      	mov	r0, r5
 80085a8:	9206      	str	r2, [sp, #24]
 80085aa:	47b8      	blx	r7
 80085ac:	3001      	adds	r0, #1
 80085ae:	f43f ae9c 	beq.w	80082ea <_printf_float+0xb6>
 80085b2:	9a06      	ldr	r2, [sp, #24]
 80085b4:	f10b 0b01 	add.w	fp, fp, #1
 80085b8:	e7bb      	b.n	8008532 <_printf_float+0x2fe>
 80085ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085be:	4631      	mov	r1, r6
 80085c0:	4628      	mov	r0, r5
 80085c2:	47b8      	blx	r7
 80085c4:	3001      	adds	r0, #1
 80085c6:	d1c0      	bne.n	800854a <_printf_float+0x316>
 80085c8:	e68f      	b.n	80082ea <_printf_float+0xb6>
 80085ca:	9a06      	ldr	r2, [sp, #24]
 80085cc:	464b      	mov	r3, r9
 80085ce:	4442      	add	r2, r8
 80085d0:	4631      	mov	r1, r6
 80085d2:	4628      	mov	r0, r5
 80085d4:	47b8      	blx	r7
 80085d6:	3001      	adds	r0, #1
 80085d8:	d1c3      	bne.n	8008562 <_printf_float+0x32e>
 80085da:	e686      	b.n	80082ea <_printf_float+0xb6>
 80085dc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80085e0:	f1ba 0f01 	cmp.w	sl, #1
 80085e4:	dc01      	bgt.n	80085ea <_printf_float+0x3b6>
 80085e6:	07db      	lsls	r3, r3, #31
 80085e8:	d536      	bpl.n	8008658 <_printf_float+0x424>
 80085ea:	2301      	movs	r3, #1
 80085ec:	4642      	mov	r2, r8
 80085ee:	4631      	mov	r1, r6
 80085f0:	4628      	mov	r0, r5
 80085f2:	47b8      	blx	r7
 80085f4:	3001      	adds	r0, #1
 80085f6:	f43f ae78 	beq.w	80082ea <_printf_float+0xb6>
 80085fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085fe:	4631      	mov	r1, r6
 8008600:	4628      	mov	r0, r5
 8008602:	47b8      	blx	r7
 8008604:	3001      	adds	r0, #1
 8008606:	f43f ae70 	beq.w	80082ea <_printf_float+0xb6>
 800860a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800860e:	2200      	movs	r2, #0
 8008610:	2300      	movs	r3, #0
 8008612:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008616:	f7f8 fa7f 	bl	8000b18 <__aeabi_dcmpeq>
 800861a:	b9c0      	cbnz	r0, 800864e <_printf_float+0x41a>
 800861c:	4653      	mov	r3, sl
 800861e:	f108 0201 	add.w	r2, r8, #1
 8008622:	4631      	mov	r1, r6
 8008624:	4628      	mov	r0, r5
 8008626:	47b8      	blx	r7
 8008628:	3001      	adds	r0, #1
 800862a:	d10c      	bne.n	8008646 <_printf_float+0x412>
 800862c:	e65d      	b.n	80082ea <_printf_float+0xb6>
 800862e:	2301      	movs	r3, #1
 8008630:	465a      	mov	r2, fp
 8008632:	4631      	mov	r1, r6
 8008634:	4628      	mov	r0, r5
 8008636:	47b8      	blx	r7
 8008638:	3001      	adds	r0, #1
 800863a:	f43f ae56 	beq.w	80082ea <_printf_float+0xb6>
 800863e:	f108 0801 	add.w	r8, r8, #1
 8008642:	45d0      	cmp	r8, sl
 8008644:	dbf3      	blt.n	800862e <_printf_float+0x3fa>
 8008646:	464b      	mov	r3, r9
 8008648:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800864c:	e6df      	b.n	800840e <_printf_float+0x1da>
 800864e:	f04f 0800 	mov.w	r8, #0
 8008652:	f104 0b1a 	add.w	fp, r4, #26
 8008656:	e7f4      	b.n	8008642 <_printf_float+0x40e>
 8008658:	2301      	movs	r3, #1
 800865a:	4642      	mov	r2, r8
 800865c:	e7e1      	b.n	8008622 <_printf_float+0x3ee>
 800865e:	2301      	movs	r3, #1
 8008660:	464a      	mov	r2, r9
 8008662:	4631      	mov	r1, r6
 8008664:	4628      	mov	r0, r5
 8008666:	47b8      	blx	r7
 8008668:	3001      	adds	r0, #1
 800866a:	f43f ae3e 	beq.w	80082ea <_printf_float+0xb6>
 800866e:	f108 0801 	add.w	r8, r8, #1
 8008672:	68e3      	ldr	r3, [r4, #12]
 8008674:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008676:	1a5b      	subs	r3, r3, r1
 8008678:	4543      	cmp	r3, r8
 800867a:	dcf0      	bgt.n	800865e <_printf_float+0x42a>
 800867c:	e6fc      	b.n	8008478 <_printf_float+0x244>
 800867e:	f04f 0800 	mov.w	r8, #0
 8008682:	f104 0919 	add.w	r9, r4, #25
 8008686:	e7f4      	b.n	8008672 <_printf_float+0x43e>

08008688 <_printf_common>:
 8008688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800868c:	4616      	mov	r6, r2
 800868e:	4698      	mov	r8, r3
 8008690:	688a      	ldr	r2, [r1, #8]
 8008692:	690b      	ldr	r3, [r1, #16]
 8008694:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008698:	4293      	cmp	r3, r2
 800869a:	bfb8      	it	lt
 800869c:	4613      	movlt	r3, r2
 800869e:	6033      	str	r3, [r6, #0]
 80086a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80086a4:	4607      	mov	r7, r0
 80086a6:	460c      	mov	r4, r1
 80086a8:	b10a      	cbz	r2, 80086ae <_printf_common+0x26>
 80086aa:	3301      	adds	r3, #1
 80086ac:	6033      	str	r3, [r6, #0]
 80086ae:	6823      	ldr	r3, [r4, #0]
 80086b0:	0699      	lsls	r1, r3, #26
 80086b2:	bf42      	ittt	mi
 80086b4:	6833      	ldrmi	r3, [r6, #0]
 80086b6:	3302      	addmi	r3, #2
 80086b8:	6033      	strmi	r3, [r6, #0]
 80086ba:	6825      	ldr	r5, [r4, #0]
 80086bc:	f015 0506 	ands.w	r5, r5, #6
 80086c0:	d106      	bne.n	80086d0 <_printf_common+0x48>
 80086c2:	f104 0a19 	add.w	sl, r4, #25
 80086c6:	68e3      	ldr	r3, [r4, #12]
 80086c8:	6832      	ldr	r2, [r6, #0]
 80086ca:	1a9b      	subs	r3, r3, r2
 80086cc:	42ab      	cmp	r3, r5
 80086ce:	dc26      	bgt.n	800871e <_printf_common+0x96>
 80086d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80086d4:	6822      	ldr	r2, [r4, #0]
 80086d6:	3b00      	subs	r3, #0
 80086d8:	bf18      	it	ne
 80086da:	2301      	movne	r3, #1
 80086dc:	0692      	lsls	r2, r2, #26
 80086de:	d42b      	bmi.n	8008738 <_printf_common+0xb0>
 80086e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80086e4:	4641      	mov	r1, r8
 80086e6:	4638      	mov	r0, r7
 80086e8:	47c8      	blx	r9
 80086ea:	3001      	adds	r0, #1
 80086ec:	d01e      	beq.n	800872c <_printf_common+0xa4>
 80086ee:	6823      	ldr	r3, [r4, #0]
 80086f0:	6922      	ldr	r2, [r4, #16]
 80086f2:	f003 0306 	and.w	r3, r3, #6
 80086f6:	2b04      	cmp	r3, #4
 80086f8:	bf02      	ittt	eq
 80086fa:	68e5      	ldreq	r5, [r4, #12]
 80086fc:	6833      	ldreq	r3, [r6, #0]
 80086fe:	1aed      	subeq	r5, r5, r3
 8008700:	68a3      	ldr	r3, [r4, #8]
 8008702:	bf0c      	ite	eq
 8008704:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008708:	2500      	movne	r5, #0
 800870a:	4293      	cmp	r3, r2
 800870c:	bfc4      	itt	gt
 800870e:	1a9b      	subgt	r3, r3, r2
 8008710:	18ed      	addgt	r5, r5, r3
 8008712:	2600      	movs	r6, #0
 8008714:	341a      	adds	r4, #26
 8008716:	42b5      	cmp	r5, r6
 8008718:	d11a      	bne.n	8008750 <_printf_common+0xc8>
 800871a:	2000      	movs	r0, #0
 800871c:	e008      	b.n	8008730 <_printf_common+0xa8>
 800871e:	2301      	movs	r3, #1
 8008720:	4652      	mov	r2, sl
 8008722:	4641      	mov	r1, r8
 8008724:	4638      	mov	r0, r7
 8008726:	47c8      	blx	r9
 8008728:	3001      	adds	r0, #1
 800872a:	d103      	bne.n	8008734 <_printf_common+0xac>
 800872c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008734:	3501      	adds	r5, #1
 8008736:	e7c6      	b.n	80086c6 <_printf_common+0x3e>
 8008738:	18e1      	adds	r1, r4, r3
 800873a:	1c5a      	adds	r2, r3, #1
 800873c:	2030      	movs	r0, #48	@ 0x30
 800873e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008742:	4422      	add	r2, r4
 8008744:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008748:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800874c:	3302      	adds	r3, #2
 800874e:	e7c7      	b.n	80086e0 <_printf_common+0x58>
 8008750:	2301      	movs	r3, #1
 8008752:	4622      	mov	r2, r4
 8008754:	4641      	mov	r1, r8
 8008756:	4638      	mov	r0, r7
 8008758:	47c8      	blx	r9
 800875a:	3001      	adds	r0, #1
 800875c:	d0e6      	beq.n	800872c <_printf_common+0xa4>
 800875e:	3601      	adds	r6, #1
 8008760:	e7d9      	b.n	8008716 <_printf_common+0x8e>
	...

08008764 <_printf_i>:
 8008764:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008768:	7e0f      	ldrb	r7, [r1, #24]
 800876a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800876c:	2f78      	cmp	r7, #120	@ 0x78
 800876e:	4691      	mov	r9, r2
 8008770:	4680      	mov	r8, r0
 8008772:	460c      	mov	r4, r1
 8008774:	469a      	mov	sl, r3
 8008776:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800877a:	d807      	bhi.n	800878c <_printf_i+0x28>
 800877c:	2f62      	cmp	r7, #98	@ 0x62
 800877e:	d80a      	bhi.n	8008796 <_printf_i+0x32>
 8008780:	2f00      	cmp	r7, #0
 8008782:	f000 80d1 	beq.w	8008928 <_printf_i+0x1c4>
 8008786:	2f58      	cmp	r7, #88	@ 0x58
 8008788:	f000 80b8 	beq.w	80088fc <_printf_i+0x198>
 800878c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008790:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008794:	e03a      	b.n	800880c <_printf_i+0xa8>
 8008796:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800879a:	2b15      	cmp	r3, #21
 800879c:	d8f6      	bhi.n	800878c <_printf_i+0x28>
 800879e:	a101      	add	r1, pc, #4	@ (adr r1, 80087a4 <_printf_i+0x40>)
 80087a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80087a4:	080087fd 	.word	0x080087fd
 80087a8:	08008811 	.word	0x08008811
 80087ac:	0800878d 	.word	0x0800878d
 80087b0:	0800878d 	.word	0x0800878d
 80087b4:	0800878d 	.word	0x0800878d
 80087b8:	0800878d 	.word	0x0800878d
 80087bc:	08008811 	.word	0x08008811
 80087c0:	0800878d 	.word	0x0800878d
 80087c4:	0800878d 	.word	0x0800878d
 80087c8:	0800878d 	.word	0x0800878d
 80087cc:	0800878d 	.word	0x0800878d
 80087d0:	0800890f 	.word	0x0800890f
 80087d4:	0800883b 	.word	0x0800883b
 80087d8:	080088c9 	.word	0x080088c9
 80087dc:	0800878d 	.word	0x0800878d
 80087e0:	0800878d 	.word	0x0800878d
 80087e4:	08008931 	.word	0x08008931
 80087e8:	0800878d 	.word	0x0800878d
 80087ec:	0800883b 	.word	0x0800883b
 80087f0:	0800878d 	.word	0x0800878d
 80087f4:	0800878d 	.word	0x0800878d
 80087f8:	080088d1 	.word	0x080088d1
 80087fc:	6833      	ldr	r3, [r6, #0]
 80087fe:	1d1a      	adds	r2, r3, #4
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	6032      	str	r2, [r6, #0]
 8008804:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008808:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800880c:	2301      	movs	r3, #1
 800880e:	e09c      	b.n	800894a <_printf_i+0x1e6>
 8008810:	6833      	ldr	r3, [r6, #0]
 8008812:	6820      	ldr	r0, [r4, #0]
 8008814:	1d19      	adds	r1, r3, #4
 8008816:	6031      	str	r1, [r6, #0]
 8008818:	0606      	lsls	r6, r0, #24
 800881a:	d501      	bpl.n	8008820 <_printf_i+0xbc>
 800881c:	681d      	ldr	r5, [r3, #0]
 800881e:	e003      	b.n	8008828 <_printf_i+0xc4>
 8008820:	0645      	lsls	r5, r0, #25
 8008822:	d5fb      	bpl.n	800881c <_printf_i+0xb8>
 8008824:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008828:	2d00      	cmp	r5, #0
 800882a:	da03      	bge.n	8008834 <_printf_i+0xd0>
 800882c:	232d      	movs	r3, #45	@ 0x2d
 800882e:	426d      	negs	r5, r5
 8008830:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008834:	4858      	ldr	r0, [pc, #352]	@ (8008998 <_printf_i+0x234>)
 8008836:	230a      	movs	r3, #10
 8008838:	e011      	b.n	800885e <_printf_i+0xfa>
 800883a:	6821      	ldr	r1, [r4, #0]
 800883c:	6833      	ldr	r3, [r6, #0]
 800883e:	0608      	lsls	r0, r1, #24
 8008840:	f853 5b04 	ldr.w	r5, [r3], #4
 8008844:	d402      	bmi.n	800884c <_printf_i+0xe8>
 8008846:	0649      	lsls	r1, r1, #25
 8008848:	bf48      	it	mi
 800884a:	b2ad      	uxthmi	r5, r5
 800884c:	2f6f      	cmp	r7, #111	@ 0x6f
 800884e:	4852      	ldr	r0, [pc, #328]	@ (8008998 <_printf_i+0x234>)
 8008850:	6033      	str	r3, [r6, #0]
 8008852:	bf14      	ite	ne
 8008854:	230a      	movne	r3, #10
 8008856:	2308      	moveq	r3, #8
 8008858:	2100      	movs	r1, #0
 800885a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800885e:	6866      	ldr	r6, [r4, #4]
 8008860:	60a6      	str	r6, [r4, #8]
 8008862:	2e00      	cmp	r6, #0
 8008864:	db05      	blt.n	8008872 <_printf_i+0x10e>
 8008866:	6821      	ldr	r1, [r4, #0]
 8008868:	432e      	orrs	r6, r5
 800886a:	f021 0104 	bic.w	r1, r1, #4
 800886e:	6021      	str	r1, [r4, #0]
 8008870:	d04b      	beq.n	800890a <_printf_i+0x1a6>
 8008872:	4616      	mov	r6, r2
 8008874:	fbb5 f1f3 	udiv	r1, r5, r3
 8008878:	fb03 5711 	mls	r7, r3, r1, r5
 800887c:	5dc7      	ldrb	r7, [r0, r7]
 800887e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008882:	462f      	mov	r7, r5
 8008884:	42bb      	cmp	r3, r7
 8008886:	460d      	mov	r5, r1
 8008888:	d9f4      	bls.n	8008874 <_printf_i+0x110>
 800888a:	2b08      	cmp	r3, #8
 800888c:	d10b      	bne.n	80088a6 <_printf_i+0x142>
 800888e:	6823      	ldr	r3, [r4, #0]
 8008890:	07df      	lsls	r7, r3, #31
 8008892:	d508      	bpl.n	80088a6 <_printf_i+0x142>
 8008894:	6923      	ldr	r3, [r4, #16]
 8008896:	6861      	ldr	r1, [r4, #4]
 8008898:	4299      	cmp	r1, r3
 800889a:	bfde      	ittt	le
 800889c:	2330      	movle	r3, #48	@ 0x30
 800889e:	f806 3c01 	strble.w	r3, [r6, #-1]
 80088a2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80088a6:	1b92      	subs	r2, r2, r6
 80088a8:	6122      	str	r2, [r4, #16]
 80088aa:	f8cd a000 	str.w	sl, [sp]
 80088ae:	464b      	mov	r3, r9
 80088b0:	aa03      	add	r2, sp, #12
 80088b2:	4621      	mov	r1, r4
 80088b4:	4640      	mov	r0, r8
 80088b6:	f7ff fee7 	bl	8008688 <_printf_common>
 80088ba:	3001      	adds	r0, #1
 80088bc:	d14a      	bne.n	8008954 <_printf_i+0x1f0>
 80088be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80088c2:	b004      	add	sp, #16
 80088c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088c8:	6823      	ldr	r3, [r4, #0]
 80088ca:	f043 0320 	orr.w	r3, r3, #32
 80088ce:	6023      	str	r3, [r4, #0]
 80088d0:	4832      	ldr	r0, [pc, #200]	@ (800899c <_printf_i+0x238>)
 80088d2:	2778      	movs	r7, #120	@ 0x78
 80088d4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80088d8:	6823      	ldr	r3, [r4, #0]
 80088da:	6831      	ldr	r1, [r6, #0]
 80088dc:	061f      	lsls	r7, r3, #24
 80088de:	f851 5b04 	ldr.w	r5, [r1], #4
 80088e2:	d402      	bmi.n	80088ea <_printf_i+0x186>
 80088e4:	065f      	lsls	r7, r3, #25
 80088e6:	bf48      	it	mi
 80088e8:	b2ad      	uxthmi	r5, r5
 80088ea:	6031      	str	r1, [r6, #0]
 80088ec:	07d9      	lsls	r1, r3, #31
 80088ee:	bf44      	itt	mi
 80088f0:	f043 0320 	orrmi.w	r3, r3, #32
 80088f4:	6023      	strmi	r3, [r4, #0]
 80088f6:	b11d      	cbz	r5, 8008900 <_printf_i+0x19c>
 80088f8:	2310      	movs	r3, #16
 80088fa:	e7ad      	b.n	8008858 <_printf_i+0xf4>
 80088fc:	4826      	ldr	r0, [pc, #152]	@ (8008998 <_printf_i+0x234>)
 80088fe:	e7e9      	b.n	80088d4 <_printf_i+0x170>
 8008900:	6823      	ldr	r3, [r4, #0]
 8008902:	f023 0320 	bic.w	r3, r3, #32
 8008906:	6023      	str	r3, [r4, #0]
 8008908:	e7f6      	b.n	80088f8 <_printf_i+0x194>
 800890a:	4616      	mov	r6, r2
 800890c:	e7bd      	b.n	800888a <_printf_i+0x126>
 800890e:	6833      	ldr	r3, [r6, #0]
 8008910:	6825      	ldr	r5, [r4, #0]
 8008912:	6961      	ldr	r1, [r4, #20]
 8008914:	1d18      	adds	r0, r3, #4
 8008916:	6030      	str	r0, [r6, #0]
 8008918:	062e      	lsls	r6, r5, #24
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	d501      	bpl.n	8008922 <_printf_i+0x1be>
 800891e:	6019      	str	r1, [r3, #0]
 8008920:	e002      	b.n	8008928 <_printf_i+0x1c4>
 8008922:	0668      	lsls	r0, r5, #25
 8008924:	d5fb      	bpl.n	800891e <_printf_i+0x1ba>
 8008926:	8019      	strh	r1, [r3, #0]
 8008928:	2300      	movs	r3, #0
 800892a:	6123      	str	r3, [r4, #16]
 800892c:	4616      	mov	r6, r2
 800892e:	e7bc      	b.n	80088aa <_printf_i+0x146>
 8008930:	6833      	ldr	r3, [r6, #0]
 8008932:	1d1a      	adds	r2, r3, #4
 8008934:	6032      	str	r2, [r6, #0]
 8008936:	681e      	ldr	r6, [r3, #0]
 8008938:	6862      	ldr	r2, [r4, #4]
 800893a:	2100      	movs	r1, #0
 800893c:	4630      	mov	r0, r6
 800893e:	f7f7 fc6f 	bl	8000220 <memchr>
 8008942:	b108      	cbz	r0, 8008948 <_printf_i+0x1e4>
 8008944:	1b80      	subs	r0, r0, r6
 8008946:	6060      	str	r0, [r4, #4]
 8008948:	6863      	ldr	r3, [r4, #4]
 800894a:	6123      	str	r3, [r4, #16]
 800894c:	2300      	movs	r3, #0
 800894e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008952:	e7aa      	b.n	80088aa <_printf_i+0x146>
 8008954:	6923      	ldr	r3, [r4, #16]
 8008956:	4632      	mov	r2, r6
 8008958:	4649      	mov	r1, r9
 800895a:	4640      	mov	r0, r8
 800895c:	47d0      	blx	sl
 800895e:	3001      	adds	r0, #1
 8008960:	d0ad      	beq.n	80088be <_printf_i+0x15a>
 8008962:	6823      	ldr	r3, [r4, #0]
 8008964:	079b      	lsls	r3, r3, #30
 8008966:	d413      	bmi.n	8008990 <_printf_i+0x22c>
 8008968:	68e0      	ldr	r0, [r4, #12]
 800896a:	9b03      	ldr	r3, [sp, #12]
 800896c:	4298      	cmp	r0, r3
 800896e:	bfb8      	it	lt
 8008970:	4618      	movlt	r0, r3
 8008972:	e7a6      	b.n	80088c2 <_printf_i+0x15e>
 8008974:	2301      	movs	r3, #1
 8008976:	4632      	mov	r2, r6
 8008978:	4649      	mov	r1, r9
 800897a:	4640      	mov	r0, r8
 800897c:	47d0      	blx	sl
 800897e:	3001      	adds	r0, #1
 8008980:	d09d      	beq.n	80088be <_printf_i+0x15a>
 8008982:	3501      	adds	r5, #1
 8008984:	68e3      	ldr	r3, [r4, #12]
 8008986:	9903      	ldr	r1, [sp, #12]
 8008988:	1a5b      	subs	r3, r3, r1
 800898a:	42ab      	cmp	r3, r5
 800898c:	dcf2      	bgt.n	8008974 <_printf_i+0x210>
 800898e:	e7eb      	b.n	8008968 <_printf_i+0x204>
 8008990:	2500      	movs	r5, #0
 8008992:	f104 0619 	add.w	r6, r4, #25
 8008996:	e7f5      	b.n	8008984 <_printf_i+0x220>
 8008998:	0800aa52 	.word	0x0800aa52
 800899c:	0800aa63 	.word	0x0800aa63

080089a0 <std>:
 80089a0:	2300      	movs	r3, #0
 80089a2:	b510      	push	{r4, lr}
 80089a4:	4604      	mov	r4, r0
 80089a6:	e9c0 3300 	strd	r3, r3, [r0]
 80089aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80089ae:	6083      	str	r3, [r0, #8]
 80089b0:	8181      	strh	r1, [r0, #12]
 80089b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80089b4:	81c2      	strh	r2, [r0, #14]
 80089b6:	6183      	str	r3, [r0, #24]
 80089b8:	4619      	mov	r1, r3
 80089ba:	2208      	movs	r2, #8
 80089bc:	305c      	adds	r0, #92	@ 0x5c
 80089be:	f000 f8f4 	bl	8008baa <memset>
 80089c2:	4b0d      	ldr	r3, [pc, #52]	@ (80089f8 <std+0x58>)
 80089c4:	6263      	str	r3, [r4, #36]	@ 0x24
 80089c6:	4b0d      	ldr	r3, [pc, #52]	@ (80089fc <std+0x5c>)
 80089c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80089ca:	4b0d      	ldr	r3, [pc, #52]	@ (8008a00 <std+0x60>)
 80089cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80089ce:	4b0d      	ldr	r3, [pc, #52]	@ (8008a04 <std+0x64>)
 80089d0:	6323      	str	r3, [r4, #48]	@ 0x30
 80089d2:	4b0d      	ldr	r3, [pc, #52]	@ (8008a08 <std+0x68>)
 80089d4:	6224      	str	r4, [r4, #32]
 80089d6:	429c      	cmp	r4, r3
 80089d8:	d006      	beq.n	80089e8 <std+0x48>
 80089da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80089de:	4294      	cmp	r4, r2
 80089e0:	d002      	beq.n	80089e8 <std+0x48>
 80089e2:	33d0      	adds	r3, #208	@ 0xd0
 80089e4:	429c      	cmp	r4, r3
 80089e6:	d105      	bne.n	80089f4 <std+0x54>
 80089e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80089ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089f0:	f000 b958 	b.w	8008ca4 <__retarget_lock_init_recursive>
 80089f4:	bd10      	pop	{r4, pc}
 80089f6:	bf00      	nop
 80089f8:	08008b25 	.word	0x08008b25
 80089fc:	08008b47 	.word	0x08008b47
 8008a00:	08008b7f 	.word	0x08008b7f
 8008a04:	08008ba3 	.word	0x08008ba3
 8008a08:	20000600 	.word	0x20000600

08008a0c <stdio_exit_handler>:
 8008a0c:	4a02      	ldr	r2, [pc, #8]	@ (8008a18 <stdio_exit_handler+0xc>)
 8008a0e:	4903      	ldr	r1, [pc, #12]	@ (8008a1c <stdio_exit_handler+0x10>)
 8008a10:	4803      	ldr	r0, [pc, #12]	@ (8008a20 <stdio_exit_handler+0x14>)
 8008a12:	f000 b869 	b.w	8008ae8 <_fwalk_sglue>
 8008a16:	bf00      	nop
 8008a18:	20000058 	.word	0x20000058
 8008a1c:	0800a375 	.word	0x0800a375
 8008a20:	20000068 	.word	0x20000068

08008a24 <cleanup_stdio>:
 8008a24:	6841      	ldr	r1, [r0, #4]
 8008a26:	4b0c      	ldr	r3, [pc, #48]	@ (8008a58 <cleanup_stdio+0x34>)
 8008a28:	4299      	cmp	r1, r3
 8008a2a:	b510      	push	{r4, lr}
 8008a2c:	4604      	mov	r4, r0
 8008a2e:	d001      	beq.n	8008a34 <cleanup_stdio+0x10>
 8008a30:	f001 fca0 	bl	800a374 <_fflush_r>
 8008a34:	68a1      	ldr	r1, [r4, #8]
 8008a36:	4b09      	ldr	r3, [pc, #36]	@ (8008a5c <cleanup_stdio+0x38>)
 8008a38:	4299      	cmp	r1, r3
 8008a3a:	d002      	beq.n	8008a42 <cleanup_stdio+0x1e>
 8008a3c:	4620      	mov	r0, r4
 8008a3e:	f001 fc99 	bl	800a374 <_fflush_r>
 8008a42:	68e1      	ldr	r1, [r4, #12]
 8008a44:	4b06      	ldr	r3, [pc, #24]	@ (8008a60 <cleanup_stdio+0x3c>)
 8008a46:	4299      	cmp	r1, r3
 8008a48:	d004      	beq.n	8008a54 <cleanup_stdio+0x30>
 8008a4a:	4620      	mov	r0, r4
 8008a4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a50:	f001 bc90 	b.w	800a374 <_fflush_r>
 8008a54:	bd10      	pop	{r4, pc}
 8008a56:	bf00      	nop
 8008a58:	20000600 	.word	0x20000600
 8008a5c:	20000668 	.word	0x20000668
 8008a60:	200006d0 	.word	0x200006d0

08008a64 <global_stdio_init.part.0>:
 8008a64:	b510      	push	{r4, lr}
 8008a66:	4b0b      	ldr	r3, [pc, #44]	@ (8008a94 <global_stdio_init.part.0+0x30>)
 8008a68:	4c0b      	ldr	r4, [pc, #44]	@ (8008a98 <global_stdio_init.part.0+0x34>)
 8008a6a:	4a0c      	ldr	r2, [pc, #48]	@ (8008a9c <global_stdio_init.part.0+0x38>)
 8008a6c:	601a      	str	r2, [r3, #0]
 8008a6e:	4620      	mov	r0, r4
 8008a70:	2200      	movs	r2, #0
 8008a72:	2104      	movs	r1, #4
 8008a74:	f7ff ff94 	bl	80089a0 <std>
 8008a78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	2109      	movs	r1, #9
 8008a80:	f7ff ff8e 	bl	80089a0 <std>
 8008a84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008a88:	2202      	movs	r2, #2
 8008a8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a8e:	2112      	movs	r1, #18
 8008a90:	f7ff bf86 	b.w	80089a0 <std>
 8008a94:	20000738 	.word	0x20000738
 8008a98:	20000600 	.word	0x20000600
 8008a9c:	08008a0d 	.word	0x08008a0d

08008aa0 <__sfp_lock_acquire>:
 8008aa0:	4801      	ldr	r0, [pc, #4]	@ (8008aa8 <__sfp_lock_acquire+0x8>)
 8008aa2:	f000 b900 	b.w	8008ca6 <__retarget_lock_acquire_recursive>
 8008aa6:	bf00      	nop
 8008aa8:	20000741 	.word	0x20000741

08008aac <__sfp_lock_release>:
 8008aac:	4801      	ldr	r0, [pc, #4]	@ (8008ab4 <__sfp_lock_release+0x8>)
 8008aae:	f000 b8fb 	b.w	8008ca8 <__retarget_lock_release_recursive>
 8008ab2:	bf00      	nop
 8008ab4:	20000741 	.word	0x20000741

08008ab8 <__sinit>:
 8008ab8:	b510      	push	{r4, lr}
 8008aba:	4604      	mov	r4, r0
 8008abc:	f7ff fff0 	bl	8008aa0 <__sfp_lock_acquire>
 8008ac0:	6a23      	ldr	r3, [r4, #32]
 8008ac2:	b11b      	cbz	r3, 8008acc <__sinit+0x14>
 8008ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ac8:	f7ff bff0 	b.w	8008aac <__sfp_lock_release>
 8008acc:	4b04      	ldr	r3, [pc, #16]	@ (8008ae0 <__sinit+0x28>)
 8008ace:	6223      	str	r3, [r4, #32]
 8008ad0:	4b04      	ldr	r3, [pc, #16]	@ (8008ae4 <__sinit+0x2c>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d1f5      	bne.n	8008ac4 <__sinit+0xc>
 8008ad8:	f7ff ffc4 	bl	8008a64 <global_stdio_init.part.0>
 8008adc:	e7f2      	b.n	8008ac4 <__sinit+0xc>
 8008ade:	bf00      	nop
 8008ae0:	08008a25 	.word	0x08008a25
 8008ae4:	20000738 	.word	0x20000738

08008ae8 <_fwalk_sglue>:
 8008ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008aec:	4607      	mov	r7, r0
 8008aee:	4688      	mov	r8, r1
 8008af0:	4614      	mov	r4, r2
 8008af2:	2600      	movs	r6, #0
 8008af4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008af8:	f1b9 0901 	subs.w	r9, r9, #1
 8008afc:	d505      	bpl.n	8008b0a <_fwalk_sglue+0x22>
 8008afe:	6824      	ldr	r4, [r4, #0]
 8008b00:	2c00      	cmp	r4, #0
 8008b02:	d1f7      	bne.n	8008af4 <_fwalk_sglue+0xc>
 8008b04:	4630      	mov	r0, r6
 8008b06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b0a:	89ab      	ldrh	r3, [r5, #12]
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d907      	bls.n	8008b20 <_fwalk_sglue+0x38>
 8008b10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b14:	3301      	adds	r3, #1
 8008b16:	d003      	beq.n	8008b20 <_fwalk_sglue+0x38>
 8008b18:	4629      	mov	r1, r5
 8008b1a:	4638      	mov	r0, r7
 8008b1c:	47c0      	blx	r8
 8008b1e:	4306      	orrs	r6, r0
 8008b20:	3568      	adds	r5, #104	@ 0x68
 8008b22:	e7e9      	b.n	8008af8 <_fwalk_sglue+0x10>

08008b24 <__sread>:
 8008b24:	b510      	push	{r4, lr}
 8008b26:	460c      	mov	r4, r1
 8008b28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b2c:	f000 f86c 	bl	8008c08 <_read_r>
 8008b30:	2800      	cmp	r0, #0
 8008b32:	bfab      	itete	ge
 8008b34:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008b36:	89a3      	ldrhlt	r3, [r4, #12]
 8008b38:	181b      	addge	r3, r3, r0
 8008b3a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008b3e:	bfac      	ite	ge
 8008b40:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008b42:	81a3      	strhlt	r3, [r4, #12]
 8008b44:	bd10      	pop	{r4, pc}

08008b46 <__swrite>:
 8008b46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b4a:	461f      	mov	r7, r3
 8008b4c:	898b      	ldrh	r3, [r1, #12]
 8008b4e:	05db      	lsls	r3, r3, #23
 8008b50:	4605      	mov	r5, r0
 8008b52:	460c      	mov	r4, r1
 8008b54:	4616      	mov	r6, r2
 8008b56:	d505      	bpl.n	8008b64 <__swrite+0x1e>
 8008b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b5c:	2302      	movs	r3, #2
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f000 f840 	bl	8008be4 <_lseek_r>
 8008b64:	89a3      	ldrh	r3, [r4, #12]
 8008b66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008b6e:	81a3      	strh	r3, [r4, #12]
 8008b70:	4632      	mov	r2, r6
 8008b72:	463b      	mov	r3, r7
 8008b74:	4628      	mov	r0, r5
 8008b76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b7a:	f000 b857 	b.w	8008c2c <_write_r>

08008b7e <__sseek>:
 8008b7e:	b510      	push	{r4, lr}
 8008b80:	460c      	mov	r4, r1
 8008b82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b86:	f000 f82d 	bl	8008be4 <_lseek_r>
 8008b8a:	1c43      	adds	r3, r0, #1
 8008b8c:	89a3      	ldrh	r3, [r4, #12]
 8008b8e:	bf15      	itete	ne
 8008b90:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008b92:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008b96:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008b9a:	81a3      	strheq	r3, [r4, #12]
 8008b9c:	bf18      	it	ne
 8008b9e:	81a3      	strhne	r3, [r4, #12]
 8008ba0:	bd10      	pop	{r4, pc}

08008ba2 <__sclose>:
 8008ba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ba6:	f000 b80d 	b.w	8008bc4 <_close_r>

08008baa <memset>:
 8008baa:	4402      	add	r2, r0
 8008bac:	4603      	mov	r3, r0
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d100      	bne.n	8008bb4 <memset+0xa>
 8008bb2:	4770      	bx	lr
 8008bb4:	f803 1b01 	strb.w	r1, [r3], #1
 8008bb8:	e7f9      	b.n	8008bae <memset+0x4>
	...

08008bbc <_localeconv_r>:
 8008bbc:	4800      	ldr	r0, [pc, #0]	@ (8008bc0 <_localeconv_r+0x4>)
 8008bbe:	4770      	bx	lr
 8008bc0:	200001a4 	.word	0x200001a4

08008bc4 <_close_r>:
 8008bc4:	b538      	push	{r3, r4, r5, lr}
 8008bc6:	4d06      	ldr	r5, [pc, #24]	@ (8008be0 <_close_r+0x1c>)
 8008bc8:	2300      	movs	r3, #0
 8008bca:	4604      	mov	r4, r0
 8008bcc:	4608      	mov	r0, r1
 8008bce:	602b      	str	r3, [r5, #0]
 8008bd0:	f7fa f8c6 	bl	8002d60 <_close>
 8008bd4:	1c43      	adds	r3, r0, #1
 8008bd6:	d102      	bne.n	8008bde <_close_r+0x1a>
 8008bd8:	682b      	ldr	r3, [r5, #0]
 8008bda:	b103      	cbz	r3, 8008bde <_close_r+0x1a>
 8008bdc:	6023      	str	r3, [r4, #0]
 8008bde:	bd38      	pop	{r3, r4, r5, pc}
 8008be0:	2000073c 	.word	0x2000073c

08008be4 <_lseek_r>:
 8008be4:	b538      	push	{r3, r4, r5, lr}
 8008be6:	4d07      	ldr	r5, [pc, #28]	@ (8008c04 <_lseek_r+0x20>)
 8008be8:	4604      	mov	r4, r0
 8008bea:	4608      	mov	r0, r1
 8008bec:	4611      	mov	r1, r2
 8008bee:	2200      	movs	r2, #0
 8008bf0:	602a      	str	r2, [r5, #0]
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	f7fa f8db 	bl	8002dae <_lseek>
 8008bf8:	1c43      	adds	r3, r0, #1
 8008bfa:	d102      	bne.n	8008c02 <_lseek_r+0x1e>
 8008bfc:	682b      	ldr	r3, [r5, #0]
 8008bfe:	b103      	cbz	r3, 8008c02 <_lseek_r+0x1e>
 8008c00:	6023      	str	r3, [r4, #0]
 8008c02:	bd38      	pop	{r3, r4, r5, pc}
 8008c04:	2000073c 	.word	0x2000073c

08008c08 <_read_r>:
 8008c08:	b538      	push	{r3, r4, r5, lr}
 8008c0a:	4d07      	ldr	r5, [pc, #28]	@ (8008c28 <_read_r+0x20>)
 8008c0c:	4604      	mov	r4, r0
 8008c0e:	4608      	mov	r0, r1
 8008c10:	4611      	mov	r1, r2
 8008c12:	2200      	movs	r2, #0
 8008c14:	602a      	str	r2, [r5, #0]
 8008c16:	461a      	mov	r2, r3
 8008c18:	f7fa f869 	bl	8002cee <_read>
 8008c1c:	1c43      	adds	r3, r0, #1
 8008c1e:	d102      	bne.n	8008c26 <_read_r+0x1e>
 8008c20:	682b      	ldr	r3, [r5, #0]
 8008c22:	b103      	cbz	r3, 8008c26 <_read_r+0x1e>
 8008c24:	6023      	str	r3, [r4, #0]
 8008c26:	bd38      	pop	{r3, r4, r5, pc}
 8008c28:	2000073c 	.word	0x2000073c

08008c2c <_write_r>:
 8008c2c:	b538      	push	{r3, r4, r5, lr}
 8008c2e:	4d07      	ldr	r5, [pc, #28]	@ (8008c4c <_write_r+0x20>)
 8008c30:	4604      	mov	r4, r0
 8008c32:	4608      	mov	r0, r1
 8008c34:	4611      	mov	r1, r2
 8008c36:	2200      	movs	r2, #0
 8008c38:	602a      	str	r2, [r5, #0]
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	f7fa f874 	bl	8002d28 <_write>
 8008c40:	1c43      	adds	r3, r0, #1
 8008c42:	d102      	bne.n	8008c4a <_write_r+0x1e>
 8008c44:	682b      	ldr	r3, [r5, #0]
 8008c46:	b103      	cbz	r3, 8008c4a <_write_r+0x1e>
 8008c48:	6023      	str	r3, [r4, #0]
 8008c4a:	bd38      	pop	{r3, r4, r5, pc}
 8008c4c:	2000073c 	.word	0x2000073c

08008c50 <__errno>:
 8008c50:	4b01      	ldr	r3, [pc, #4]	@ (8008c58 <__errno+0x8>)
 8008c52:	6818      	ldr	r0, [r3, #0]
 8008c54:	4770      	bx	lr
 8008c56:	bf00      	nop
 8008c58:	20000064 	.word	0x20000064

08008c5c <__libc_init_array>:
 8008c5c:	b570      	push	{r4, r5, r6, lr}
 8008c5e:	4d0d      	ldr	r5, [pc, #52]	@ (8008c94 <__libc_init_array+0x38>)
 8008c60:	4c0d      	ldr	r4, [pc, #52]	@ (8008c98 <__libc_init_array+0x3c>)
 8008c62:	1b64      	subs	r4, r4, r5
 8008c64:	10a4      	asrs	r4, r4, #2
 8008c66:	2600      	movs	r6, #0
 8008c68:	42a6      	cmp	r6, r4
 8008c6a:	d109      	bne.n	8008c80 <__libc_init_array+0x24>
 8008c6c:	4d0b      	ldr	r5, [pc, #44]	@ (8008c9c <__libc_init_array+0x40>)
 8008c6e:	4c0c      	ldr	r4, [pc, #48]	@ (8008ca0 <__libc_init_array+0x44>)
 8008c70:	f001 fec0 	bl	800a9f4 <_init>
 8008c74:	1b64      	subs	r4, r4, r5
 8008c76:	10a4      	asrs	r4, r4, #2
 8008c78:	2600      	movs	r6, #0
 8008c7a:	42a6      	cmp	r6, r4
 8008c7c:	d105      	bne.n	8008c8a <__libc_init_array+0x2e>
 8008c7e:	bd70      	pop	{r4, r5, r6, pc}
 8008c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c84:	4798      	blx	r3
 8008c86:	3601      	adds	r6, #1
 8008c88:	e7ee      	b.n	8008c68 <__libc_init_array+0xc>
 8008c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c8e:	4798      	blx	r3
 8008c90:	3601      	adds	r6, #1
 8008c92:	e7f2      	b.n	8008c7a <__libc_init_array+0x1e>
 8008c94:	0800adbc 	.word	0x0800adbc
 8008c98:	0800adbc 	.word	0x0800adbc
 8008c9c:	0800adbc 	.word	0x0800adbc
 8008ca0:	0800adc0 	.word	0x0800adc0

08008ca4 <__retarget_lock_init_recursive>:
 8008ca4:	4770      	bx	lr

08008ca6 <__retarget_lock_acquire_recursive>:
 8008ca6:	4770      	bx	lr

08008ca8 <__retarget_lock_release_recursive>:
 8008ca8:	4770      	bx	lr

08008caa <memcpy>:
 8008caa:	440a      	add	r2, r1
 8008cac:	4291      	cmp	r1, r2
 8008cae:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008cb2:	d100      	bne.n	8008cb6 <memcpy+0xc>
 8008cb4:	4770      	bx	lr
 8008cb6:	b510      	push	{r4, lr}
 8008cb8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cbc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008cc0:	4291      	cmp	r1, r2
 8008cc2:	d1f9      	bne.n	8008cb8 <memcpy+0xe>
 8008cc4:	bd10      	pop	{r4, pc}

08008cc6 <quorem>:
 8008cc6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cca:	6903      	ldr	r3, [r0, #16]
 8008ccc:	690c      	ldr	r4, [r1, #16]
 8008cce:	42a3      	cmp	r3, r4
 8008cd0:	4607      	mov	r7, r0
 8008cd2:	db7e      	blt.n	8008dd2 <quorem+0x10c>
 8008cd4:	3c01      	subs	r4, #1
 8008cd6:	f101 0814 	add.w	r8, r1, #20
 8008cda:	00a3      	lsls	r3, r4, #2
 8008cdc:	f100 0514 	add.w	r5, r0, #20
 8008ce0:	9300      	str	r3, [sp, #0]
 8008ce2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ce6:	9301      	str	r3, [sp, #4]
 8008ce8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008cec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008cf8:	fbb2 f6f3 	udiv	r6, r2, r3
 8008cfc:	d32e      	bcc.n	8008d5c <quorem+0x96>
 8008cfe:	f04f 0a00 	mov.w	sl, #0
 8008d02:	46c4      	mov	ip, r8
 8008d04:	46ae      	mov	lr, r5
 8008d06:	46d3      	mov	fp, sl
 8008d08:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008d0c:	b298      	uxth	r0, r3
 8008d0e:	fb06 a000 	mla	r0, r6, r0, sl
 8008d12:	0c02      	lsrs	r2, r0, #16
 8008d14:	0c1b      	lsrs	r3, r3, #16
 8008d16:	fb06 2303 	mla	r3, r6, r3, r2
 8008d1a:	f8de 2000 	ldr.w	r2, [lr]
 8008d1e:	b280      	uxth	r0, r0
 8008d20:	b292      	uxth	r2, r2
 8008d22:	1a12      	subs	r2, r2, r0
 8008d24:	445a      	add	r2, fp
 8008d26:	f8de 0000 	ldr.w	r0, [lr]
 8008d2a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008d34:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008d38:	b292      	uxth	r2, r2
 8008d3a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008d3e:	45e1      	cmp	r9, ip
 8008d40:	f84e 2b04 	str.w	r2, [lr], #4
 8008d44:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008d48:	d2de      	bcs.n	8008d08 <quorem+0x42>
 8008d4a:	9b00      	ldr	r3, [sp, #0]
 8008d4c:	58eb      	ldr	r3, [r5, r3]
 8008d4e:	b92b      	cbnz	r3, 8008d5c <quorem+0x96>
 8008d50:	9b01      	ldr	r3, [sp, #4]
 8008d52:	3b04      	subs	r3, #4
 8008d54:	429d      	cmp	r5, r3
 8008d56:	461a      	mov	r2, r3
 8008d58:	d32f      	bcc.n	8008dba <quorem+0xf4>
 8008d5a:	613c      	str	r4, [r7, #16]
 8008d5c:	4638      	mov	r0, r7
 8008d5e:	f001 f97d 	bl	800a05c <__mcmp>
 8008d62:	2800      	cmp	r0, #0
 8008d64:	db25      	blt.n	8008db2 <quorem+0xec>
 8008d66:	4629      	mov	r1, r5
 8008d68:	2000      	movs	r0, #0
 8008d6a:	f858 2b04 	ldr.w	r2, [r8], #4
 8008d6e:	f8d1 c000 	ldr.w	ip, [r1]
 8008d72:	fa1f fe82 	uxth.w	lr, r2
 8008d76:	fa1f f38c 	uxth.w	r3, ip
 8008d7a:	eba3 030e 	sub.w	r3, r3, lr
 8008d7e:	4403      	add	r3, r0
 8008d80:	0c12      	lsrs	r2, r2, #16
 8008d82:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008d86:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d90:	45c1      	cmp	r9, r8
 8008d92:	f841 3b04 	str.w	r3, [r1], #4
 8008d96:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008d9a:	d2e6      	bcs.n	8008d6a <quorem+0xa4>
 8008d9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008da0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008da4:	b922      	cbnz	r2, 8008db0 <quorem+0xea>
 8008da6:	3b04      	subs	r3, #4
 8008da8:	429d      	cmp	r5, r3
 8008daa:	461a      	mov	r2, r3
 8008dac:	d30b      	bcc.n	8008dc6 <quorem+0x100>
 8008dae:	613c      	str	r4, [r7, #16]
 8008db0:	3601      	adds	r6, #1
 8008db2:	4630      	mov	r0, r6
 8008db4:	b003      	add	sp, #12
 8008db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dba:	6812      	ldr	r2, [r2, #0]
 8008dbc:	3b04      	subs	r3, #4
 8008dbe:	2a00      	cmp	r2, #0
 8008dc0:	d1cb      	bne.n	8008d5a <quorem+0x94>
 8008dc2:	3c01      	subs	r4, #1
 8008dc4:	e7c6      	b.n	8008d54 <quorem+0x8e>
 8008dc6:	6812      	ldr	r2, [r2, #0]
 8008dc8:	3b04      	subs	r3, #4
 8008dca:	2a00      	cmp	r2, #0
 8008dcc:	d1ef      	bne.n	8008dae <quorem+0xe8>
 8008dce:	3c01      	subs	r4, #1
 8008dd0:	e7ea      	b.n	8008da8 <quorem+0xe2>
 8008dd2:	2000      	movs	r0, #0
 8008dd4:	e7ee      	b.n	8008db4 <quorem+0xee>
	...

08008dd8 <_dtoa_r>:
 8008dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ddc:	69c7      	ldr	r7, [r0, #28]
 8008dde:	b097      	sub	sp, #92	@ 0x5c
 8008de0:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008de4:	ec55 4b10 	vmov	r4, r5, d0
 8008de8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008dea:	9107      	str	r1, [sp, #28]
 8008dec:	4681      	mov	r9, r0
 8008dee:	920c      	str	r2, [sp, #48]	@ 0x30
 8008df0:	9311      	str	r3, [sp, #68]	@ 0x44
 8008df2:	b97f      	cbnz	r7, 8008e14 <_dtoa_r+0x3c>
 8008df4:	2010      	movs	r0, #16
 8008df6:	f000 fe09 	bl	8009a0c <malloc>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	f8c9 001c 	str.w	r0, [r9, #28]
 8008e00:	b920      	cbnz	r0, 8008e0c <_dtoa_r+0x34>
 8008e02:	4ba9      	ldr	r3, [pc, #676]	@ (80090a8 <_dtoa_r+0x2d0>)
 8008e04:	21ef      	movs	r1, #239	@ 0xef
 8008e06:	48a9      	ldr	r0, [pc, #676]	@ (80090ac <_dtoa_r+0x2d4>)
 8008e08:	f001 faec 	bl	800a3e4 <__assert_func>
 8008e0c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008e10:	6007      	str	r7, [r0, #0]
 8008e12:	60c7      	str	r7, [r0, #12]
 8008e14:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008e18:	6819      	ldr	r1, [r3, #0]
 8008e1a:	b159      	cbz	r1, 8008e34 <_dtoa_r+0x5c>
 8008e1c:	685a      	ldr	r2, [r3, #4]
 8008e1e:	604a      	str	r2, [r1, #4]
 8008e20:	2301      	movs	r3, #1
 8008e22:	4093      	lsls	r3, r2
 8008e24:	608b      	str	r3, [r1, #8]
 8008e26:	4648      	mov	r0, r9
 8008e28:	f000 fee6 	bl	8009bf8 <_Bfree>
 8008e2c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008e30:	2200      	movs	r2, #0
 8008e32:	601a      	str	r2, [r3, #0]
 8008e34:	1e2b      	subs	r3, r5, #0
 8008e36:	bfb9      	ittee	lt
 8008e38:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008e3c:	9305      	strlt	r3, [sp, #20]
 8008e3e:	2300      	movge	r3, #0
 8008e40:	6033      	strge	r3, [r6, #0]
 8008e42:	9f05      	ldr	r7, [sp, #20]
 8008e44:	4b9a      	ldr	r3, [pc, #616]	@ (80090b0 <_dtoa_r+0x2d8>)
 8008e46:	bfbc      	itt	lt
 8008e48:	2201      	movlt	r2, #1
 8008e4a:	6032      	strlt	r2, [r6, #0]
 8008e4c:	43bb      	bics	r3, r7
 8008e4e:	d112      	bne.n	8008e76 <_dtoa_r+0x9e>
 8008e50:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008e52:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008e56:	6013      	str	r3, [r2, #0]
 8008e58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008e5c:	4323      	orrs	r3, r4
 8008e5e:	f000 855a 	beq.w	8009916 <_dtoa_r+0xb3e>
 8008e62:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008e64:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80090c4 <_dtoa_r+0x2ec>
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	f000 855c 	beq.w	8009926 <_dtoa_r+0xb4e>
 8008e6e:	f10a 0303 	add.w	r3, sl, #3
 8008e72:	f000 bd56 	b.w	8009922 <_dtoa_r+0xb4a>
 8008e76:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	ec51 0b17 	vmov	r0, r1, d7
 8008e80:	2300      	movs	r3, #0
 8008e82:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8008e86:	f7f7 fe47 	bl	8000b18 <__aeabi_dcmpeq>
 8008e8a:	4680      	mov	r8, r0
 8008e8c:	b158      	cbz	r0, 8008ea6 <_dtoa_r+0xce>
 8008e8e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008e90:	2301      	movs	r3, #1
 8008e92:	6013      	str	r3, [r2, #0]
 8008e94:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008e96:	b113      	cbz	r3, 8008e9e <_dtoa_r+0xc6>
 8008e98:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008e9a:	4b86      	ldr	r3, [pc, #536]	@ (80090b4 <_dtoa_r+0x2dc>)
 8008e9c:	6013      	str	r3, [r2, #0]
 8008e9e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80090c8 <_dtoa_r+0x2f0>
 8008ea2:	f000 bd40 	b.w	8009926 <_dtoa_r+0xb4e>
 8008ea6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008eaa:	aa14      	add	r2, sp, #80	@ 0x50
 8008eac:	a915      	add	r1, sp, #84	@ 0x54
 8008eae:	4648      	mov	r0, r9
 8008eb0:	f001 f984 	bl	800a1bc <__d2b>
 8008eb4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008eb8:	9002      	str	r0, [sp, #8]
 8008eba:	2e00      	cmp	r6, #0
 8008ebc:	d078      	beq.n	8008fb0 <_dtoa_r+0x1d8>
 8008ebe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ec0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8008ec4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ec8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008ecc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008ed0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008ed4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008ed8:	4619      	mov	r1, r3
 8008eda:	2200      	movs	r2, #0
 8008edc:	4b76      	ldr	r3, [pc, #472]	@ (80090b8 <_dtoa_r+0x2e0>)
 8008ede:	f7f7 f9fb 	bl	80002d8 <__aeabi_dsub>
 8008ee2:	a36b      	add	r3, pc, #428	@ (adr r3, 8009090 <_dtoa_r+0x2b8>)
 8008ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee8:	f7f7 fbae 	bl	8000648 <__aeabi_dmul>
 8008eec:	a36a      	add	r3, pc, #424	@ (adr r3, 8009098 <_dtoa_r+0x2c0>)
 8008eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef2:	f7f7 f9f3 	bl	80002dc <__adddf3>
 8008ef6:	4604      	mov	r4, r0
 8008ef8:	4630      	mov	r0, r6
 8008efa:	460d      	mov	r5, r1
 8008efc:	f7f7 fb3a 	bl	8000574 <__aeabi_i2d>
 8008f00:	a367      	add	r3, pc, #412	@ (adr r3, 80090a0 <_dtoa_r+0x2c8>)
 8008f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f06:	f7f7 fb9f 	bl	8000648 <__aeabi_dmul>
 8008f0a:	4602      	mov	r2, r0
 8008f0c:	460b      	mov	r3, r1
 8008f0e:	4620      	mov	r0, r4
 8008f10:	4629      	mov	r1, r5
 8008f12:	f7f7 f9e3 	bl	80002dc <__adddf3>
 8008f16:	4604      	mov	r4, r0
 8008f18:	460d      	mov	r5, r1
 8008f1a:	f7f7 fe45 	bl	8000ba8 <__aeabi_d2iz>
 8008f1e:	2200      	movs	r2, #0
 8008f20:	4607      	mov	r7, r0
 8008f22:	2300      	movs	r3, #0
 8008f24:	4620      	mov	r0, r4
 8008f26:	4629      	mov	r1, r5
 8008f28:	f7f7 fe00 	bl	8000b2c <__aeabi_dcmplt>
 8008f2c:	b140      	cbz	r0, 8008f40 <_dtoa_r+0x168>
 8008f2e:	4638      	mov	r0, r7
 8008f30:	f7f7 fb20 	bl	8000574 <__aeabi_i2d>
 8008f34:	4622      	mov	r2, r4
 8008f36:	462b      	mov	r3, r5
 8008f38:	f7f7 fdee 	bl	8000b18 <__aeabi_dcmpeq>
 8008f3c:	b900      	cbnz	r0, 8008f40 <_dtoa_r+0x168>
 8008f3e:	3f01      	subs	r7, #1
 8008f40:	2f16      	cmp	r7, #22
 8008f42:	d852      	bhi.n	8008fea <_dtoa_r+0x212>
 8008f44:	4b5d      	ldr	r3, [pc, #372]	@ (80090bc <_dtoa_r+0x2e4>)
 8008f46:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008f52:	f7f7 fdeb 	bl	8000b2c <__aeabi_dcmplt>
 8008f56:	2800      	cmp	r0, #0
 8008f58:	d049      	beq.n	8008fee <_dtoa_r+0x216>
 8008f5a:	3f01      	subs	r7, #1
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008f60:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008f62:	1b9b      	subs	r3, r3, r6
 8008f64:	1e5a      	subs	r2, r3, #1
 8008f66:	bf45      	ittet	mi
 8008f68:	f1c3 0301 	rsbmi	r3, r3, #1
 8008f6c:	9300      	strmi	r3, [sp, #0]
 8008f6e:	2300      	movpl	r3, #0
 8008f70:	2300      	movmi	r3, #0
 8008f72:	9206      	str	r2, [sp, #24]
 8008f74:	bf54      	ite	pl
 8008f76:	9300      	strpl	r3, [sp, #0]
 8008f78:	9306      	strmi	r3, [sp, #24]
 8008f7a:	2f00      	cmp	r7, #0
 8008f7c:	db39      	blt.n	8008ff2 <_dtoa_r+0x21a>
 8008f7e:	9b06      	ldr	r3, [sp, #24]
 8008f80:	970d      	str	r7, [sp, #52]	@ 0x34
 8008f82:	443b      	add	r3, r7
 8008f84:	9306      	str	r3, [sp, #24]
 8008f86:	2300      	movs	r3, #0
 8008f88:	9308      	str	r3, [sp, #32]
 8008f8a:	9b07      	ldr	r3, [sp, #28]
 8008f8c:	2b09      	cmp	r3, #9
 8008f8e:	d863      	bhi.n	8009058 <_dtoa_r+0x280>
 8008f90:	2b05      	cmp	r3, #5
 8008f92:	bfc4      	itt	gt
 8008f94:	3b04      	subgt	r3, #4
 8008f96:	9307      	strgt	r3, [sp, #28]
 8008f98:	9b07      	ldr	r3, [sp, #28]
 8008f9a:	f1a3 0302 	sub.w	r3, r3, #2
 8008f9e:	bfcc      	ite	gt
 8008fa0:	2400      	movgt	r4, #0
 8008fa2:	2401      	movle	r4, #1
 8008fa4:	2b03      	cmp	r3, #3
 8008fa6:	d863      	bhi.n	8009070 <_dtoa_r+0x298>
 8008fa8:	e8df f003 	tbb	[pc, r3]
 8008fac:	2b375452 	.word	0x2b375452
 8008fb0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008fb4:	441e      	add	r6, r3
 8008fb6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008fba:	2b20      	cmp	r3, #32
 8008fbc:	bfc1      	itttt	gt
 8008fbe:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008fc2:	409f      	lslgt	r7, r3
 8008fc4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008fc8:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008fcc:	bfd6      	itet	le
 8008fce:	f1c3 0320 	rsble	r3, r3, #32
 8008fd2:	ea47 0003 	orrgt.w	r0, r7, r3
 8008fd6:	fa04 f003 	lslle.w	r0, r4, r3
 8008fda:	f7f7 fabb 	bl	8000554 <__aeabi_ui2d>
 8008fde:	2201      	movs	r2, #1
 8008fe0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008fe4:	3e01      	subs	r6, #1
 8008fe6:	9212      	str	r2, [sp, #72]	@ 0x48
 8008fe8:	e776      	b.n	8008ed8 <_dtoa_r+0x100>
 8008fea:	2301      	movs	r3, #1
 8008fec:	e7b7      	b.n	8008f5e <_dtoa_r+0x186>
 8008fee:	9010      	str	r0, [sp, #64]	@ 0x40
 8008ff0:	e7b6      	b.n	8008f60 <_dtoa_r+0x188>
 8008ff2:	9b00      	ldr	r3, [sp, #0]
 8008ff4:	1bdb      	subs	r3, r3, r7
 8008ff6:	9300      	str	r3, [sp, #0]
 8008ff8:	427b      	negs	r3, r7
 8008ffa:	9308      	str	r3, [sp, #32]
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	930d      	str	r3, [sp, #52]	@ 0x34
 8009000:	e7c3      	b.n	8008f8a <_dtoa_r+0x1b2>
 8009002:	2301      	movs	r3, #1
 8009004:	9309      	str	r3, [sp, #36]	@ 0x24
 8009006:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009008:	eb07 0b03 	add.w	fp, r7, r3
 800900c:	f10b 0301 	add.w	r3, fp, #1
 8009010:	2b01      	cmp	r3, #1
 8009012:	9303      	str	r3, [sp, #12]
 8009014:	bfb8      	it	lt
 8009016:	2301      	movlt	r3, #1
 8009018:	e006      	b.n	8009028 <_dtoa_r+0x250>
 800901a:	2301      	movs	r3, #1
 800901c:	9309      	str	r3, [sp, #36]	@ 0x24
 800901e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009020:	2b00      	cmp	r3, #0
 8009022:	dd28      	ble.n	8009076 <_dtoa_r+0x29e>
 8009024:	469b      	mov	fp, r3
 8009026:	9303      	str	r3, [sp, #12]
 8009028:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800902c:	2100      	movs	r1, #0
 800902e:	2204      	movs	r2, #4
 8009030:	f102 0514 	add.w	r5, r2, #20
 8009034:	429d      	cmp	r5, r3
 8009036:	d926      	bls.n	8009086 <_dtoa_r+0x2ae>
 8009038:	6041      	str	r1, [r0, #4]
 800903a:	4648      	mov	r0, r9
 800903c:	f000 fd9c 	bl	8009b78 <_Balloc>
 8009040:	4682      	mov	sl, r0
 8009042:	2800      	cmp	r0, #0
 8009044:	d142      	bne.n	80090cc <_dtoa_r+0x2f4>
 8009046:	4b1e      	ldr	r3, [pc, #120]	@ (80090c0 <_dtoa_r+0x2e8>)
 8009048:	4602      	mov	r2, r0
 800904a:	f240 11af 	movw	r1, #431	@ 0x1af
 800904e:	e6da      	b.n	8008e06 <_dtoa_r+0x2e>
 8009050:	2300      	movs	r3, #0
 8009052:	e7e3      	b.n	800901c <_dtoa_r+0x244>
 8009054:	2300      	movs	r3, #0
 8009056:	e7d5      	b.n	8009004 <_dtoa_r+0x22c>
 8009058:	2401      	movs	r4, #1
 800905a:	2300      	movs	r3, #0
 800905c:	9307      	str	r3, [sp, #28]
 800905e:	9409      	str	r4, [sp, #36]	@ 0x24
 8009060:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8009064:	2200      	movs	r2, #0
 8009066:	f8cd b00c 	str.w	fp, [sp, #12]
 800906a:	2312      	movs	r3, #18
 800906c:	920c      	str	r2, [sp, #48]	@ 0x30
 800906e:	e7db      	b.n	8009028 <_dtoa_r+0x250>
 8009070:	2301      	movs	r3, #1
 8009072:	9309      	str	r3, [sp, #36]	@ 0x24
 8009074:	e7f4      	b.n	8009060 <_dtoa_r+0x288>
 8009076:	f04f 0b01 	mov.w	fp, #1
 800907a:	f8cd b00c 	str.w	fp, [sp, #12]
 800907e:	465b      	mov	r3, fp
 8009080:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8009084:	e7d0      	b.n	8009028 <_dtoa_r+0x250>
 8009086:	3101      	adds	r1, #1
 8009088:	0052      	lsls	r2, r2, #1
 800908a:	e7d1      	b.n	8009030 <_dtoa_r+0x258>
 800908c:	f3af 8000 	nop.w
 8009090:	636f4361 	.word	0x636f4361
 8009094:	3fd287a7 	.word	0x3fd287a7
 8009098:	8b60c8b3 	.word	0x8b60c8b3
 800909c:	3fc68a28 	.word	0x3fc68a28
 80090a0:	509f79fb 	.word	0x509f79fb
 80090a4:	3fd34413 	.word	0x3fd34413
 80090a8:	0800aa81 	.word	0x0800aa81
 80090ac:	0800aa98 	.word	0x0800aa98
 80090b0:	7ff00000 	.word	0x7ff00000
 80090b4:	0800aa51 	.word	0x0800aa51
 80090b8:	3ff80000 	.word	0x3ff80000
 80090bc:	0800abe8 	.word	0x0800abe8
 80090c0:	0800aaf0 	.word	0x0800aaf0
 80090c4:	0800aa7d 	.word	0x0800aa7d
 80090c8:	0800aa50 	.word	0x0800aa50
 80090cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80090d0:	6018      	str	r0, [r3, #0]
 80090d2:	9b03      	ldr	r3, [sp, #12]
 80090d4:	2b0e      	cmp	r3, #14
 80090d6:	f200 80a1 	bhi.w	800921c <_dtoa_r+0x444>
 80090da:	2c00      	cmp	r4, #0
 80090dc:	f000 809e 	beq.w	800921c <_dtoa_r+0x444>
 80090e0:	2f00      	cmp	r7, #0
 80090e2:	dd33      	ble.n	800914c <_dtoa_r+0x374>
 80090e4:	4b9c      	ldr	r3, [pc, #624]	@ (8009358 <_dtoa_r+0x580>)
 80090e6:	f007 020f 	and.w	r2, r7, #15
 80090ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090ee:	ed93 7b00 	vldr	d7, [r3]
 80090f2:	05f8      	lsls	r0, r7, #23
 80090f4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80090f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80090fc:	d516      	bpl.n	800912c <_dtoa_r+0x354>
 80090fe:	4b97      	ldr	r3, [pc, #604]	@ (800935c <_dtoa_r+0x584>)
 8009100:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009104:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009108:	f7f7 fbc8 	bl	800089c <__aeabi_ddiv>
 800910c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009110:	f004 040f 	and.w	r4, r4, #15
 8009114:	2603      	movs	r6, #3
 8009116:	4d91      	ldr	r5, [pc, #580]	@ (800935c <_dtoa_r+0x584>)
 8009118:	b954      	cbnz	r4, 8009130 <_dtoa_r+0x358>
 800911a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800911e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009122:	f7f7 fbbb 	bl	800089c <__aeabi_ddiv>
 8009126:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800912a:	e028      	b.n	800917e <_dtoa_r+0x3a6>
 800912c:	2602      	movs	r6, #2
 800912e:	e7f2      	b.n	8009116 <_dtoa_r+0x33e>
 8009130:	07e1      	lsls	r1, r4, #31
 8009132:	d508      	bpl.n	8009146 <_dtoa_r+0x36e>
 8009134:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009138:	e9d5 2300 	ldrd	r2, r3, [r5]
 800913c:	f7f7 fa84 	bl	8000648 <__aeabi_dmul>
 8009140:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009144:	3601      	adds	r6, #1
 8009146:	1064      	asrs	r4, r4, #1
 8009148:	3508      	adds	r5, #8
 800914a:	e7e5      	b.n	8009118 <_dtoa_r+0x340>
 800914c:	f000 80af 	beq.w	80092ae <_dtoa_r+0x4d6>
 8009150:	427c      	negs	r4, r7
 8009152:	4b81      	ldr	r3, [pc, #516]	@ (8009358 <_dtoa_r+0x580>)
 8009154:	4d81      	ldr	r5, [pc, #516]	@ (800935c <_dtoa_r+0x584>)
 8009156:	f004 020f 	and.w	r2, r4, #15
 800915a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800915e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009162:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009166:	f7f7 fa6f 	bl	8000648 <__aeabi_dmul>
 800916a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800916e:	1124      	asrs	r4, r4, #4
 8009170:	2300      	movs	r3, #0
 8009172:	2602      	movs	r6, #2
 8009174:	2c00      	cmp	r4, #0
 8009176:	f040 808f 	bne.w	8009298 <_dtoa_r+0x4c0>
 800917a:	2b00      	cmp	r3, #0
 800917c:	d1d3      	bne.n	8009126 <_dtoa_r+0x34e>
 800917e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009180:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009184:	2b00      	cmp	r3, #0
 8009186:	f000 8094 	beq.w	80092b2 <_dtoa_r+0x4da>
 800918a:	4b75      	ldr	r3, [pc, #468]	@ (8009360 <_dtoa_r+0x588>)
 800918c:	2200      	movs	r2, #0
 800918e:	4620      	mov	r0, r4
 8009190:	4629      	mov	r1, r5
 8009192:	f7f7 fccb 	bl	8000b2c <__aeabi_dcmplt>
 8009196:	2800      	cmp	r0, #0
 8009198:	f000 808b 	beq.w	80092b2 <_dtoa_r+0x4da>
 800919c:	9b03      	ldr	r3, [sp, #12]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	f000 8087 	beq.w	80092b2 <_dtoa_r+0x4da>
 80091a4:	f1bb 0f00 	cmp.w	fp, #0
 80091a8:	dd34      	ble.n	8009214 <_dtoa_r+0x43c>
 80091aa:	4620      	mov	r0, r4
 80091ac:	4b6d      	ldr	r3, [pc, #436]	@ (8009364 <_dtoa_r+0x58c>)
 80091ae:	2200      	movs	r2, #0
 80091b0:	4629      	mov	r1, r5
 80091b2:	f7f7 fa49 	bl	8000648 <__aeabi_dmul>
 80091b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80091ba:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80091be:	3601      	adds	r6, #1
 80091c0:	465c      	mov	r4, fp
 80091c2:	4630      	mov	r0, r6
 80091c4:	f7f7 f9d6 	bl	8000574 <__aeabi_i2d>
 80091c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091cc:	f7f7 fa3c 	bl	8000648 <__aeabi_dmul>
 80091d0:	4b65      	ldr	r3, [pc, #404]	@ (8009368 <_dtoa_r+0x590>)
 80091d2:	2200      	movs	r2, #0
 80091d4:	f7f7 f882 	bl	80002dc <__adddf3>
 80091d8:	4605      	mov	r5, r0
 80091da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80091de:	2c00      	cmp	r4, #0
 80091e0:	d16a      	bne.n	80092b8 <_dtoa_r+0x4e0>
 80091e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80091e6:	4b61      	ldr	r3, [pc, #388]	@ (800936c <_dtoa_r+0x594>)
 80091e8:	2200      	movs	r2, #0
 80091ea:	f7f7 f875 	bl	80002d8 <__aeabi_dsub>
 80091ee:	4602      	mov	r2, r0
 80091f0:	460b      	mov	r3, r1
 80091f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80091f6:	462a      	mov	r2, r5
 80091f8:	4633      	mov	r3, r6
 80091fa:	f7f7 fcb5 	bl	8000b68 <__aeabi_dcmpgt>
 80091fe:	2800      	cmp	r0, #0
 8009200:	f040 8298 	bne.w	8009734 <_dtoa_r+0x95c>
 8009204:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009208:	462a      	mov	r2, r5
 800920a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800920e:	f7f7 fc8d 	bl	8000b2c <__aeabi_dcmplt>
 8009212:	bb38      	cbnz	r0, 8009264 <_dtoa_r+0x48c>
 8009214:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009218:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800921c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800921e:	2b00      	cmp	r3, #0
 8009220:	f2c0 8157 	blt.w	80094d2 <_dtoa_r+0x6fa>
 8009224:	2f0e      	cmp	r7, #14
 8009226:	f300 8154 	bgt.w	80094d2 <_dtoa_r+0x6fa>
 800922a:	4b4b      	ldr	r3, [pc, #300]	@ (8009358 <_dtoa_r+0x580>)
 800922c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009230:	ed93 7b00 	vldr	d7, [r3]
 8009234:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009236:	2b00      	cmp	r3, #0
 8009238:	ed8d 7b00 	vstr	d7, [sp]
 800923c:	f280 80e5 	bge.w	800940a <_dtoa_r+0x632>
 8009240:	9b03      	ldr	r3, [sp, #12]
 8009242:	2b00      	cmp	r3, #0
 8009244:	f300 80e1 	bgt.w	800940a <_dtoa_r+0x632>
 8009248:	d10c      	bne.n	8009264 <_dtoa_r+0x48c>
 800924a:	4b48      	ldr	r3, [pc, #288]	@ (800936c <_dtoa_r+0x594>)
 800924c:	2200      	movs	r2, #0
 800924e:	ec51 0b17 	vmov	r0, r1, d7
 8009252:	f7f7 f9f9 	bl	8000648 <__aeabi_dmul>
 8009256:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800925a:	f7f7 fc7b 	bl	8000b54 <__aeabi_dcmpge>
 800925e:	2800      	cmp	r0, #0
 8009260:	f000 8266 	beq.w	8009730 <_dtoa_r+0x958>
 8009264:	2400      	movs	r4, #0
 8009266:	4625      	mov	r5, r4
 8009268:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800926a:	4656      	mov	r6, sl
 800926c:	ea6f 0803 	mvn.w	r8, r3
 8009270:	2700      	movs	r7, #0
 8009272:	4621      	mov	r1, r4
 8009274:	4648      	mov	r0, r9
 8009276:	f000 fcbf 	bl	8009bf8 <_Bfree>
 800927a:	2d00      	cmp	r5, #0
 800927c:	f000 80bd 	beq.w	80093fa <_dtoa_r+0x622>
 8009280:	b12f      	cbz	r7, 800928e <_dtoa_r+0x4b6>
 8009282:	42af      	cmp	r7, r5
 8009284:	d003      	beq.n	800928e <_dtoa_r+0x4b6>
 8009286:	4639      	mov	r1, r7
 8009288:	4648      	mov	r0, r9
 800928a:	f000 fcb5 	bl	8009bf8 <_Bfree>
 800928e:	4629      	mov	r1, r5
 8009290:	4648      	mov	r0, r9
 8009292:	f000 fcb1 	bl	8009bf8 <_Bfree>
 8009296:	e0b0      	b.n	80093fa <_dtoa_r+0x622>
 8009298:	07e2      	lsls	r2, r4, #31
 800929a:	d505      	bpl.n	80092a8 <_dtoa_r+0x4d0>
 800929c:	e9d5 2300 	ldrd	r2, r3, [r5]
 80092a0:	f7f7 f9d2 	bl	8000648 <__aeabi_dmul>
 80092a4:	3601      	adds	r6, #1
 80092a6:	2301      	movs	r3, #1
 80092a8:	1064      	asrs	r4, r4, #1
 80092aa:	3508      	adds	r5, #8
 80092ac:	e762      	b.n	8009174 <_dtoa_r+0x39c>
 80092ae:	2602      	movs	r6, #2
 80092b0:	e765      	b.n	800917e <_dtoa_r+0x3a6>
 80092b2:	9c03      	ldr	r4, [sp, #12]
 80092b4:	46b8      	mov	r8, r7
 80092b6:	e784      	b.n	80091c2 <_dtoa_r+0x3ea>
 80092b8:	4b27      	ldr	r3, [pc, #156]	@ (8009358 <_dtoa_r+0x580>)
 80092ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80092bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80092c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80092c4:	4454      	add	r4, sl
 80092c6:	2900      	cmp	r1, #0
 80092c8:	d054      	beq.n	8009374 <_dtoa_r+0x59c>
 80092ca:	4929      	ldr	r1, [pc, #164]	@ (8009370 <_dtoa_r+0x598>)
 80092cc:	2000      	movs	r0, #0
 80092ce:	f7f7 fae5 	bl	800089c <__aeabi_ddiv>
 80092d2:	4633      	mov	r3, r6
 80092d4:	462a      	mov	r2, r5
 80092d6:	f7f6 ffff 	bl	80002d8 <__aeabi_dsub>
 80092da:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80092de:	4656      	mov	r6, sl
 80092e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092e4:	f7f7 fc60 	bl	8000ba8 <__aeabi_d2iz>
 80092e8:	4605      	mov	r5, r0
 80092ea:	f7f7 f943 	bl	8000574 <__aeabi_i2d>
 80092ee:	4602      	mov	r2, r0
 80092f0:	460b      	mov	r3, r1
 80092f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092f6:	f7f6 ffef 	bl	80002d8 <__aeabi_dsub>
 80092fa:	3530      	adds	r5, #48	@ 0x30
 80092fc:	4602      	mov	r2, r0
 80092fe:	460b      	mov	r3, r1
 8009300:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009304:	f806 5b01 	strb.w	r5, [r6], #1
 8009308:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800930c:	f7f7 fc0e 	bl	8000b2c <__aeabi_dcmplt>
 8009310:	2800      	cmp	r0, #0
 8009312:	d172      	bne.n	80093fa <_dtoa_r+0x622>
 8009314:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009318:	4911      	ldr	r1, [pc, #68]	@ (8009360 <_dtoa_r+0x588>)
 800931a:	2000      	movs	r0, #0
 800931c:	f7f6 ffdc 	bl	80002d8 <__aeabi_dsub>
 8009320:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009324:	f7f7 fc02 	bl	8000b2c <__aeabi_dcmplt>
 8009328:	2800      	cmp	r0, #0
 800932a:	f040 80b4 	bne.w	8009496 <_dtoa_r+0x6be>
 800932e:	42a6      	cmp	r6, r4
 8009330:	f43f af70 	beq.w	8009214 <_dtoa_r+0x43c>
 8009334:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009338:	4b0a      	ldr	r3, [pc, #40]	@ (8009364 <_dtoa_r+0x58c>)
 800933a:	2200      	movs	r2, #0
 800933c:	f7f7 f984 	bl	8000648 <__aeabi_dmul>
 8009340:	4b08      	ldr	r3, [pc, #32]	@ (8009364 <_dtoa_r+0x58c>)
 8009342:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009346:	2200      	movs	r2, #0
 8009348:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800934c:	f7f7 f97c 	bl	8000648 <__aeabi_dmul>
 8009350:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009354:	e7c4      	b.n	80092e0 <_dtoa_r+0x508>
 8009356:	bf00      	nop
 8009358:	0800abe8 	.word	0x0800abe8
 800935c:	0800abc0 	.word	0x0800abc0
 8009360:	3ff00000 	.word	0x3ff00000
 8009364:	40240000 	.word	0x40240000
 8009368:	401c0000 	.word	0x401c0000
 800936c:	40140000 	.word	0x40140000
 8009370:	3fe00000 	.word	0x3fe00000
 8009374:	4631      	mov	r1, r6
 8009376:	4628      	mov	r0, r5
 8009378:	f7f7 f966 	bl	8000648 <__aeabi_dmul>
 800937c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009380:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009382:	4656      	mov	r6, sl
 8009384:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009388:	f7f7 fc0e 	bl	8000ba8 <__aeabi_d2iz>
 800938c:	4605      	mov	r5, r0
 800938e:	f7f7 f8f1 	bl	8000574 <__aeabi_i2d>
 8009392:	4602      	mov	r2, r0
 8009394:	460b      	mov	r3, r1
 8009396:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800939a:	f7f6 ff9d 	bl	80002d8 <__aeabi_dsub>
 800939e:	3530      	adds	r5, #48	@ 0x30
 80093a0:	f806 5b01 	strb.w	r5, [r6], #1
 80093a4:	4602      	mov	r2, r0
 80093a6:	460b      	mov	r3, r1
 80093a8:	42a6      	cmp	r6, r4
 80093aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80093ae:	f04f 0200 	mov.w	r2, #0
 80093b2:	d124      	bne.n	80093fe <_dtoa_r+0x626>
 80093b4:	4baf      	ldr	r3, [pc, #700]	@ (8009674 <_dtoa_r+0x89c>)
 80093b6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80093ba:	f7f6 ff8f 	bl	80002dc <__adddf3>
 80093be:	4602      	mov	r2, r0
 80093c0:	460b      	mov	r3, r1
 80093c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80093c6:	f7f7 fbcf 	bl	8000b68 <__aeabi_dcmpgt>
 80093ca:	2800      	cmp	r0, #0
 80093cc:	d163      	bne.n	8009496 <_dtoa_r+0x6be>
 80093ce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80093d2:	49a8      	ldr	r1, [pc, #672]	@ (8009674 <_dtoa_r+0x89c>)
 80093d4:	2000      	movs	r0, #0
 80093d6:	f7f6 ff7f 	bl	80002d8 <__aeabi_dsub>
 80093da:	4602      	mov	r2, r0
 80093dc:	460b      	mov	r3, r1
 80093de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80093e2:	f7f7 fba3 	bl	8000b2c <__aeabi_dcmplt>
 80093e6:	2800      	cmp	r0, #0
 80093e8:	f43f af14 	beq.w	8009214 <_dtoa_r+0x43c>
 80093ec:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80093ee:	1e73      	subs	r3, r6, #1
 80093f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80093f2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80093f6:	2b30      	cmp	r3, #48	@ 0x30
 80093f8:	d0f8      	beq.n	80093ec <_dtoa_r+0x614>
 80093fa:	4647      	mov	r7, r8
 80093fc:	e03b      	b.n	8009476 <_dtoa_r+0x69e>
 80093fe:	4b9e      	ldr	r3, [pc, #632]	@ (8009678 <_dtoa_r+0x8a0>)
 8009400:	f7f7 f922 	bl	8000648 <__aeabi_dmul>
 8009404:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009408:	e7bc      	b.n	8009384 <_dtoa_r+0x5ac>
 800940a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800940e:	4656      	mov	r6, sl
 8009410:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009414:	4620      	mov	r0, r4
 8009416:	4629      	mov	r1, r5
 8009418:	f7f7 fa40 	bl	800089c <__aeabi_ddiv>
 800941c:	f7f7 fbc4 	bl	8000ba8 <__aeabi_d2iz>
 8009420:	4680      	mov	r8, r0
 8009422:	f7f7 f8a7 	bl	8000574 <__aeabi_i2d>
 8009426:	e9dd 2300 	ldrd	r2, r3, [sp]
 800942a:	f7f7 f90d 	bl	8000648 <__aeabi_dmul>
 800942e:	4602      	mov	r2, r0
 8009430:	460b      	mov	r3, r1
 8009432:	4620      	mov	r0, r4
 8009434:	4629      	mov	r1, r5
 8009436:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800943a:	f7f6 ff4d 	bl	80002d8 <__aeabi_dsub>
 800943e:	f806 4b01 	strb.w	r4, [r6], #1
 8009442:	9d03      	ldr	r5, [sp, #12]
 8009444:	eba6 040a 	sub.w	r4, r6, sl
 8009448:	42a5      	cmp	r5, r4
 800944a:	4602      	mov	r2, r0
 800944c:	460b      	mov	r3, r1
 800944e:	d133      	bne.n	80094b8 <_dtoa_r+0x6e0>
 8009450:	f7f6 ff44 	bl	80002dc <__adddf3>
 8009454:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009458:	4604      	mov	r4, r0
 800945a:	460d      	mov	r5, r1
 800945c:	f7f7 fb84 	bl	8000b68 <__aeabi_dcmpgt>
 8009460:	b9c0      	cbnz	r0, 8009494 <_dtoa_r+0x6bc>
 8009462:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009466:	4620      	mov	r0, r4
 8009468:	4629      	mov	r1, r5
 800946a:	f7f7 fb55 	bl	8000b18 <__aeabi_dcmpeq>
 800946e:	b110      	cbz	r0, 8009476 <_dtoa_r+0x69e>
 8009470:	f018 0f01 	tst.w	r8, #1
 8009474:	d10e      	bne.n	8009494 <_dtoa_r+0x6bc>
 8009476:	9902      	ldr	r1, [sp, #8]
 8009478:	4648      	mov	r0, r9
 800947a:	f000 fbbd 	bl	8009bf8 <_Bfree>
 800947e:	2300      	movs	r3, #0
 8009480:	7033      	strb	r3, [r6, #0]
 8009482:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009484:	3701      	adds	r7, #1
 8009486:	601f      	str	r7, [r3, #0]
 8009488:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800948a:	2b00      	cmp	r3, #0
 800948c:	f000 824b 	beq.w	8009926 <_dtoa_r+0xb4e>
 8009490:	601e      	str	r6, [r3, #0]
 8009492:	e248      	b.n	8009926 <_dtoa_r+0xb4e>
 8009494:	46b8      	mov	r8, r7
 8009496:	4633      	mov	r3, r6
 8009498:	461e      	mov	r6, r3
 800949a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800949e:	2a39      	cmp	r2, #57	@ 0x39
 80094a0:	d106      	bne.n	80094b0 <_dtoa_r+0x6d8>
 80094a2:	459a      	cmp	sl, r3
 80094a4:	d1f8      	bne.n	8009498 <_dtoa_r+0x6c0>
 80094a6:	2230      	movs	r2, #48	@ 0x30
 80094a8:	f108 0801 	add.w	r8, r8, #1
 80094ac:	f88a 2000 	strb.w	r2, [sl]
 80094b0:	781a      	ldrb	r2, [r3, #0]
 80094b2:	3201      	adds	r2, #1
 80094b4:	701a      	strb	r2, [r3, #0]
 80094b6:	e7a0      	b.n	80093fa <_dtoa_r+0x622>
 80094b8:	4b6f      	ldr	r3, [pc, #444]	@ (8009678 <_dtoa_r+0x8a0>)
 80094ba:	2200      	movs	r2, #0
 80094bc:	f7f7 f8c4 	bl	8000648 <__aeabi_dmul>
 80094c0:	2200      	movs	r2, #0
 80094c2:	2300      	movs	r3, #0
 80094c4:	4604      	mov	r4, r0
 80094c6:	460d      	mov	r5, r1
 80094c8:	f7f7 fb26 	bl	8000b18 <__aeabi_dcmpeq>
 80094cc:	2800      	cmp	r0, #0
 80094ce:	d09f      	beq.n	8009410 <_dtoa_r+0x638>
 80094d0:	e7d1      	b.n	8009476 <_dtoa_r+0x69e>
 80094d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80094d4:	2a00      	cmp	r2, #0
 80094d6:	f000 80ea 	beq.w	80096ae <_dtoa_r+0x8d6>
 80094da:	9a07      	ldr	r2, [sp, #28]
 80094dc:	2a01      	cmp	r2, #1
 80094de:	f300 80cd 	bgt.w	800967c <_dtoa_r+0x8a4>
 80094e2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80094e4:	2a00      	cmp	r2, #0
 80094e6:	f000 80c1 	beq.w	800966c <_dtoa_r+0x894>
 80094ea:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80094ee:	9c08      	ldr	r4, [sp, #32]
 80094f0:	9e00      	ldr	r6, [sp, #0]
 80094f2:	9a00      	ldr	r2, [sp, #0]
 80094f4:	441a      	add	r2, r3
 80094f6:	9200      	str	r2, [sp, #0]
 80094f8:	9a06      	ldr	r2, [sp, #24]
 80094fa:	2101      	movs	r1, #1
 80094fc:	441a      	add	r2, r3
 80094fe:	4648      	mov	r0, r9
 8009500:	9206      	str	r2, [sp, #24]
 8009502:	f000 fc2d 	bl	8009d60 <__i2b>
 8009506:	4605      	mov	r5, r0
 8009508:	b166      	cbz	r6, 8009524 <_dtoa_r+0x74c>
 800950a:	9b06      	ldr	r3, [sp, #24]
 800950c:	2b00      	cmp	r3, #0
 800950e:	dd09      	ble.n	8009524 <_dtoa_r+0x74c>
 8009510:	42b3      	cmp	r3, r6
 8009512:	9a00      	ldr	r2, [sp, #0]
 8009514:	bfa8      	it	ge
 8009516:	4633      	movge	r3, r6
 8009518:	1ad2      	subs	r2, r2, r3
 800951a:	9200      	str	r2, [sp, #0]
 800951c:	9a06      	ldr	r2, [sp, #24]
 800951e:	1af6      	subs	r6, r6, r3
 8009520:	1ad3      	subs	r3, r2, r3
 8009522:	9306      	str	r3, [sp, #24]
 8009524:	9b08      	ldr	r3, [sp, #32]
 8009526:	b30b      	cbz	r3, 800956c <_dtoa_r+0x794>
 8009528:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800952a:	2b00      	cmp	r3, #0
 800952c:	f000 80c6 	beq.w	80096bc <_dtoa_r+0x8e4>
 8009530:	2c00      	cmp	r4, #0
 8009532:	f000 80c0 	beq.w	80096b6 <_dtoa_r+0x8de>
 8009536:	4629      	mov	r1, r5
 8009538:	4622      	mov	r2, r4
 800953a:	4648      	mov	r0, r9
 800953c:	f000 fcc8 	bl	8009ed0 <__pow5mult>
 8009540:	9a02      	ldr	r2, [sp, #8]
 8009542:	4601      	mov	r1, r0
 8009544:	4605      	mov	r5, r0
 8009546:	4648      	mov	r0, r9
 8009548:	f000 fc20 	bl	8009d8c <__multiply>
 800954c:	9902      	ldr	r1, [sp, #8]
 800954e:	4680      	mov	r8, r0
 8009550:	4648      	mov	r0, r9
 8009552:	f000 fb51 	bl	8009bf8 <_Bfree>
 8009556:	9b08      	ldr	r3, [sp, #32]
 8009558:	1b1b      	subs	r3, r3, r4
 800955a:	9308      	str	r3, [sp, #32]
 800955c:	f000 80b1 	beq.w	80096c2 <_dtoa_r+0x8ea>
 8009560:	9a08      	ldr	r2, [sp, #32]
 8009562:	4641      	mov	r1, r8
 8009564:	4648      	mov	r0, r9
 8009566:	f000 fcb3 	bl	8009ed0 <__pow5mult>
 800956a:	9002      	str	r0, [sp, #8]
 800956c:	2101      	movs	r1, #1
 800956e:	4648      	mov	r0, r9
 8009570:	f000 fbf6 	bl	8009d60 <__i2b>
 8009574:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009576:	4604      	mov	r4, r0
 8009578:	2b00      	cmp	r3, #0
 800957a:	f000 81d8 	beq.w	800992e <_dtoa_r+0xb56>
 800957e:	461a      	mov	r2, r3
 8009580:	4601      	mov	r1, r0
 8009582:	4648      	mov	r0, r9
 8009584:	f000 fca4 	bl	8009ed0 <__pow5mult>
 8009588:	9b07      	ldr	r3, [sp, #28]
 800958a:	2b01      	cmp	r3, #1
 800958c:	4604      	mov	r4, r0
 800958e:	f300 809f 	bgt.w	80096d0 <_dtoa_r+0x8f8>
 8009592:	9b04      	ldr	r3, [sp, #16]
 8009594:	2b00      	cmp	r3, #0
 8009596:	f040 8097 	bne.w	80096c8 <_dtoa_r+0x8f0>
 800959a:	9b05      	ldr	r3, [sp, #20]
 800959c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	f040 8093 	bne.w	80096cc <_dtoa_r+0x8f4>
 80095a6:	9b05      	ldr	r3, [sp, #20]
 80095a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80095ac:	0d1b      	lsrs	r3, r3, #20
 80095ae:	051b      	lsls	r3, r3, #20
 80095b0:	b133      	cbz	r3, 80095c0 <_dtoa_r+0x7e8>
 80095b2:	9b00      	ldr	r3, [sp, #0]
 80095b4:	3301      	adds	r3, #1
 80095b6:	9300      	str	r3, [sp, #0]
 80095b8:	9b06      	ldr	r3, [sp, #24]
 80095ba:	3301      	adds	r3, #1
 80095bc:	9306      	str	r3, [sp, #24]
 80095be:	2301      	movs	r3, #1
 80095c0:	9308      	str	r3, [sp, #32]
 80095c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	f000 81b8 	beq.w	800993a <_dtoa_r+0xb62>
 80095ca:	6923      	ldr	r3, [r4, #16]
 80095cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80095d0:	6918      	ldr	r0, [r3, #16]
 80095d2:	f000 fb79 	bl	8009cc8 <__hi0bits>
 80095d6:	f1c0 0020 	rsb	r0, r0, #32
 80095da:	9b06      	ldr	r3, [sp, #24]
 80095dc:	4418      	add	r0, r3
 80095de:	f010 001f 	ands.w	r0, r0, #31
 80095e2:	f000 8082 	beq.w	80096ea <_dtoa_r+0x912>
 80095e6:	f1c0 0320 	rsb	r3, r0, #32
 80095ea:	2b04      	cmp	r3, #4
 80095ec:	dd73      	ble.n	80096d6 <_dtoa_r+0x8fe>
 80095ee:	9b00      	ldr	r3, [sp, #0]
 80095f0:	f1c0 001c 	rsb	r0, r0, #28
 80095f4:	4403      	add	r3, r0
 80095f6:	9300      	str	r3, [sp, #0]
 80095f8:	9b06      	ldr	r3, [sp, #24]
 80095fa:	4403      	add	r3, r0
 80095fc:	4406      	add	r6, r0
 80095fe:	9306      	str	r3, [sp, #24]
 8009600:	9b00      	ldr	r3, [sp, #0]
 8009602:	2b00      	cmp	r3, #0
 8009604:	dd05      	ble.n	8009612 <_dtoa_r+0x83a>
 8009606:	9902      	ldr	r1, [sp, #8]
 8009608:	461a      	mov	r2, r3
 800960a:	4648      	mov	r0, r9
 800960c:	f000 fcba 	bl	8009f84 <__lshift>
 8009610:	9002      	str	r0, [sp, #8]
 8009612:	9b06      	ldr	r3, [sp, #24]
 8009614:	2b00      	cmp	r3, #0
 8009616:	dd05      	ble.n	8009624 <_dtoa_r+0x84c>
 8009618:	4621      	mov	r1, r4
 800961a:	461a      	mov	r2, r3
 800961c:	4648      	mov	r0, r9
 800961e:	f000 fcb1 	bl	8009f84 <__lshift>
 8009622:	4604      	mov	r4, r0
 8009624:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009626:	2b00      	cmp	r3, #0
 8009628:	d061      	beq.n	80096ee <_dtoa_r+0x916>
 800962a:	9802      	ldr	r0, [sp, #8]
 800962c:	4621      	mov	r1, r4
 800962e:	f000 fd15 	bl	800a05c <__mcmp>
 8009632:	2800      	cmp	r0, #0
 8009634:	da5b      	bge.n	80096ee <_dtoa_r+0x916>
 8009636:	2300      	movs	r3, #0
 8009638:	9902      	ldr	r1, [sp, #8]
 800963a:	220a      	movs	r2, #10
 800963c:	4648      	mov	r0, r9
 800963e:	f000 fafd 	bl	8009c3c <__multadd>
 8009642:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009644:	9002      	str	r0, [sp, #8]
 8009646:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800964a:	2b00      	cmp	r3, #0
 800964c:	f000 8177 	beq.w	800993e <_dtoa_r+0xb66>
 8009650:	4629      	mov	r1, r5
 8009652:	2300      	movs	r3, #0
 8009654:	220a      	movs	r2, #10
 8009656:	4648      	mov	r0, r9
 8009658:	f000 faf0 	bl	8009c3c <__multadd>
 800965c:	f1bb 0f00 	cmp.w	fp, #0
 8009660:	4605      	mov	r5, r0
 8009662:	dc6f      	bgt.n	8009744 <_dtoa_r+0x96c>
 8009664:	9b07      	ldr	r3, [sp, #28]
 8009666:	2b02      	cmp	r3, #2
 8009668:	dc49      	bgt.n	80096fe <_dtoa_r+0x926>
 800966a:	e06b      	b.n	8009744 <_dtoa_r+0x96c>
 800966c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800966e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009672:	e73c      	b.n	80094ee <_dtoa_r+0x716>
 8009674:	3fe00000 	.word	0x3fe00000
 8009678:	40240000 	.word	0x40240000
 800967c:	9b03      	ldr	r3, [sp, #12]
 800967e:	1e5c      	subs	r4, r3, #1
 8009680:	9b08      	ldr	r3, [sp, #32]
 8009682:	42a3      	cmp	r3, r4
 8009684:	db09      	blt.n	800969a <_dtoa_r+0x8c2>
 8009686:	1b1c      	subs	r4, r3, r4
 8009688:	9b03      	ldr	r3, [sp, #12]
 800968a:	2b00      	cmp	r3, #0
 800968c:	f6bf af30 	bge.w	80094f0 <_dtoa_r+0x718>
 8009690:	9b00      	ldr	r3, [sp, #0]
 8009692:	9a03      	ldr	r2, [sp, #12]
 8009694:	1a9e      	subs	r6, r3, r2
 8009696:	2300      	movs	r3, #0
 8009698:	e72b      	b.n	80094f2 <_dtoa_r+0x71a>
 800969a:	9b08      	ldr	r3, [sp, #32]
 800969c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800969e:	9408      	str	r4, [sp, #32]
 80096a0:	1ae3      	subs	r3, r4, r3
 80096a2:	441a      	add	r2, r3
 80096a4:	9e00      	ldr	r6, [sp, #0]
 80096a6:	9b03      	ldr	r3, [sp, #12]
 80096a8:	920d      	str	r2, [sp, #52]	@ 0x34
 80096aa:	2400      	movs	r4, #0
 80096ac:	e721      	b.n	80094f2 <_dtoa_r+0x71a>
 80096ae:	9c08      	ldr	r4, [sp, #32]
 80096b0:	9e00      	ldr	r6, [sp, #0]
 80096b2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80096b4:	e728      	b.n	8009508 <_dtoa_r+0x730>
 80096b6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80096ba:	e751      	b.n	8009560 <_dtoa_r+0x788>
 80096bc:	9a08      	ldr	r2, [sp, #32]
 80096be:	9902      	ldr	r1, [sp, #8]
 80096c0:	e750      	b.n	8009564 <_dtoa_r+0x78c>
 80096c2:	f8cd 8008 	str.w	r8, [sp, #8]
 80096c6:	e751      	b.n	800956c <_dtoa_r+0x794>
 80096c8:	2300      	movs	r3, #0
 80096ca:	e779      	b.n	80095c0 <_dtoa_r+0x7e8>
 80096cc:	9b04      	ldr	r3, [sp, #16]
 80096ce:	e777      	b.n	80095c0 <_dtoa_r+0x7e8>
 80096d0:	2300      	movs	r3, #0
 80096d2:	9308      	str	r3, [sp, #32]
 80096d4:	e779      	b.n	80095ca <_dtoa_r+0x7f2>
 80096d6:	d093      	beq.n	8009600 <_dtoa_r+0x828>
 80096d8:	9a00      	ldr	r2, [sp, #0]
 80096da:	331c      	adds	r3, #28
 80096dc:	441a      	add	r2, r3
 80096de:	9200      	str	r2, [sp, #0]
 80096e0:	9a06      	ldr	r2, [sp, #24]
 80096e2:	441a      	add	r2, r3
 80096e4:	441e      	add	r6, r3
 80096e6:	9206      	str	r2, [sp, #24]
 80096e8:	e78a      	b.n	8009600 <_dtoa_r+0x828>
 80096ea:	4603      	mov	r3, r0
 80096ec:	e7f4      	b.n	80096d8 <_dtoa_r+0x900>
 80096ee:	9b03      	ldr	r3, [sp, #12]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	46b8      	mov	r8, r7
 80096f4:	dc20      	bgt.n	8009738 <_dtoa_r+0x960>
 80096f6:	469b      	mov	fp, r3
 80096f8:	9b07      	ldr	r3, [sp, #28]
 80096fa:	2b02      	cmp	r3, #2
 80096fc:	dd1e      	ble.n	800973c <_dtoa_r+0x964>
 80096fe:	f1bb 0f00 	cmp.w	fp, #0
 8009702:	f47f adb1 	bne.w	8009268 <_dtoa_r+0x490>
 8009706:	4621      	mov	r1, r4
 8009708:	465b      	mov	r3, fp
 800970a:	2205      	movs	r2, #5
 800970c:	4648      	mov	r0, r9
 800970e:	f000 fa95 	bl	8009c3c <__multadd>
 8009712:	4601      	mov	r1, r0
 8009714:	4604      	mov	r4, r0
 8009716:	9802      	ldr	r0, [sp, #8]
 8009718:	f000 fca0 	bl	800a05c <__mcmp>
 800971c:	2800      	cmp	r0, #0
 800971e:	f77f ada3 	ble.w	8009268 <_dtoa_r+0x490>
 8009722:	4656      	mov	r6, sl
 8009724:	2331      	movs	r3, #49	@ 0x31
 8009726:	f806 3b01 	strb.w	r3, [r6], #1
 800972a:	f108 0801 	add.w	r8, r8, #1
 800972e:	e59f      	b.n	8009270 <_dtoa_r+0x498>
 8009730:	9c03      	ldr	r4, [sp, #12]
 8009732:	46b8      	mov	r8, r7
 8009734:	4625      	mov	r5, r4
 8009736:	e7f4      	b.n	8009722 <_dtoa_r+0x94a>
 8009738:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800973c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800973e:	2b00      	cmp	r3, #0
 8009740:	f000 8101 	beq.w	8009946 <_dtoa_r+0xb6e>
 8009744:	2e00      	cmp	r6, #0
 8009746:	dd05      	ble.n	8009754 <_dtoa_r+0x97c>
 8009748:	4629      	mov	r1, r5
 800974a:	4632      	mov	r2, r6
 800974c:	4648      	mov	r0, r9
 800974e:	f000 fc19 	bl	8009f84 <__lshift>
 8009752:	4605      	mov	r5, r0
 8009754:	9b08      	ldr	r3, [sp, #32]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d05c      	beq.n	8009814 <_dtoa_r+0xa3c>
 800975a:	6869      	ldr	r1, [r5, #4]
 800975c:	4648      	mov	r0, r9
 800975e:	f000 fa0b 	bl	8009b78 <_Balloc>
 8009762:	4606      	mov	r6, r0
 8009764:	b928      	cbnz	r0, 8009772 <_dtoa_r+0x99a>
 8009766:	4b82      	ldr	r3, [pc, #520]	@ (8009970 <_dtoa_r+0xb98>)
 8009768:	4602      	mov	r2, r0
 800976a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800976e:	f7ff bb4a 	b.w	8008e06 <_dtoa_r+0x2e>
 8009772:	692a      	ldr	r2, [r5, #16]
 8009774:	3202      	adds	r2, #2
 8009776:	0092      	lsls	r2, r2, #2
 8009778:	f105 010c 	add.w	r1, r5, #12
 800977c:	300c      	adds	r0, #12
 800977e:	f7ff fa94 	bl	8008caa <memcpy>
 8009782:	2201      	movs	r2, #1
 8009784:	4631      	mov	r1, r6
 8009786:	4648      	mov	r0, r9
 8009788:	f000 fbfc 	bl	8009f84 <__lshift>
 800978c:	f10a 0301 	add.w	r3, sl, #1
 8009790:	9300      	str	r3, [sp, #0]
 8009792:	eb0a 030b 	add.w	r3, sl, fp
 8009796:	9308      	str	r3, [sp, #32]
 8009798:	9b04      	ldr	r3, [sp, #16]
 800979a:	f003 0301 	and.w	r3, r3, #1
 800979e:	462f      	mov	r7, r5
 80097a0:	9306      	str	r3, [sp, #24]
 80097a2:	4605      	mov	r5, r0
 80097a4:	9b00      	ldr	r3, [sp, #0]
 80097a6:	9802      	ldr	r0, [sp, #8]
 80097a8:	4621      	mov	r1, r4
 80097aa:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80097ae:	f7ff fa8a 	bl	8008cc6 <quorem>
 80097b2:	4603      	mov	r3, r0
 80097b4:	3330      	adds	r3, #48	@ 0x30
 80097b6:	9003      	str	r0, [sp, #12]
 80097b8:	4639      	mov	r1, r7
 80097ba:	9802      	ldr	r0, [sp, #8]
 80097bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80097be:	f000 fc4d 	bl	800a05c <__mcmp>
 80097c2:	462a      	mov	r2, r5
 80097c4:	9004      	str	r0, [sp, #16]
 80097c6:	4621      	mov	r1, r4
 80097c8:	4648      	mov	r0, r9
 80097ca:	f000 fc63 	bl	800a094 <__mdiff>
 80097ce:	68c2      	ldr	r2, [r0, #12]
 80097d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097d2:	4606      	mov	r6, r0
 80097d4:	bb02      	cbnz	r2, 8009818 <_dtoa_r+0xa40>
 80097d6:	4601      	mov	r1, r0
 80097d8:	9802      	ldr	r0, [sp, #8]
 80097da:	f000 fc3f 	bl	800a05c <__mcmp>
 80097de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097e0:	4602      	mov	r2, r0
 80097e2:	4631      	mov	r1, r6
 80097e4:	4648      	mov	r0, r9
 80097e6:	920c      	str	r2, [sp, #48]	@ 0x30
 80097e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80097ea:	f000 fa05 	bl	8009bf8 <_Bfree>
 80097ee:	9b07      	ldr	r3, [sp, #28]
 80097f0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80097f2:	9e00      	ldr	r6, [sp, #0]
 80097f4:	ea42 0103 	orr.w	r1, r2, r3
 80097f8:	9b06      	ldr	r3, [sp, #24]
 80097fa:	4319      	orrs	r1, r3
 80097fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097fe:	d10d      	bne.n	800981c <_dtoa_r+0xa44>
 8009800:	2b39      	cmp	r3, #57	@ 0x39
 8009802:	d027      	beq.n	8009854 <_dtoa_r+0xa7c>
 8009804:	9a04      	ldr	r2, [sp, #16]
 8009806:	2a00      	cmp	r2, #0
 8009808:	dd01      	ble.n	800980e <_dtoa_r+0xa36>
 800980a:	9b03      	ldr	r3, [sp, #12]
 800980c:	3331      	adds	r3, #49	@ 0x31
 800980e:	f88b 3000 	strb.w	r3, [fp]
 8009812:	e52e      	b.n	8009272 <_dtoa_r+0x49a>
 8009814:	4628      	mov	r0, r5
 8009816:	e7b9      	b.n	800978c <_dtoa_r+0x9b4>
 8009818:	2201      	movs	r2, #1
 800981a:	e7e2      	b.n	80097e2 <_dtoa_r+0xa0a>
 800981c:	9904      	ldr	r1, [sp, #16]
 800981e:	2900      	cmp	r1, #0
 8009820:	db04      	blt.n	800982c <_dtoa_r+0xa54>
 8009822:	9807      	ldr	r0, [sp, #28]
 8009824:	4301      	orrs	r1, r0
 8009826:	9806      	ldr	r0, [sp, #24]
 8009828:	4301      	orrs	r1, r0
 800982a:	d120      	bne.n	800986e <_dtoa_r+0xa96>
 800982c:	2a00      	cmp	r2, #0
 800982e:	ddee      	ble.n	800980e <_dtoa_r+0xa36>
 8009830:	9902      	ldr	r1, [sp, #8]
 8009832:	9300      	str	r3, [sp, #0]
 8009834:	2201      	movs	r2, #1
 8009836:	4648      	mov	r0, r9
 8009838:	f000 fba4 	bl	8009f84 <__lshift>
 800983c:	4621      	mov	r1, r4
 800983e:	9002      	str	r0, [sp, #8]
 8009840:	f000 fc0c 	bl	800a05c <__mcmp>
 8009844:	2800      	cmp	r0, #0
 8009846:	9b00      	ldr	r3, [sp, #0]
 8009848:	dc02      	bgt.n	8009850 <_dtoa_r+0xa78>
 800984a:	d1e0      	bne.n	800980e <_dtoa_r+0xa36>
 800984c:	07da      	lsls	r2, r3, #31
 800984e:	d5de      	bpl.n	800980e <_dtoa_r+0xa36>
 8009850:	2b39      	cmp	r3, #57	@ 0x39
 8009852:	d1da      	bne.n	800980a <_dtoa_r+0xa32>
 8009854:	2339      	movs	r3, #57	@ 0x39
 8009856:	f88b 3000 	strb.w	r3, [fp]
 800985a:	4633      	mov	r3, r6
 800985c:	461e      	mov	r6, r3
 800985e:	3b01      	subs	r3, #1
 8009860:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009864:	2a39      	cmp	r2, #57	@ 0x39
 8009866:	d04e      	beq.n	8009906 <_dtoa_r+0xb2e>
 8009868:	3201      	adds	r2, #1
 800986a:	701a      	strb	r2, [r3, #0]
 800986c:	e501      	b.n	8009272 <_dtoa_r+0x49a>
 800986e:	2a00      	cmp	r2, #0
 8009870:	dd03      	ble.n	800987a <_dtoa_r+0xaa2>
 8009872:	2b39      	cmp	r3, #57	@ 0x39
 8009874:	d0ee      	beq.n	8009854 <_dtoa_r+0xa7c>
 8009876:	3301      	adds	r3, #1
 8009878:	e7c9      	b.n	800980e <_dtoa_r+0xa36>
 800987a:	9a00      	ldr	r2, [sp, #0]
 800987c:	9908      	ldr	r1, [sp, #32]
 800987e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009882:	428a      	cmp	r2, r1
 8009884:	d028      	beq.n	80098d8 <_dtoa_r+0xb00>
 8009886:	9902      	ldr	r1, [sp, #8]
 8009888:	2300      	movs	r3, #0
 800988a:	220a      	movs	r2, #10
 800988c:	4648      	mov	r0, r9
 800988e:	f000 f9d5 	bl	8009c3c <__multadd>
 8009892:	42af      	cmp	r7, r5
 8009894:	9002      	str	r0, [sp, #8]
 8009896:	f04f 0300 	mov.w	r3, #0
 800989a:	f04f 020a 	mov.w	r2, #10
 800989e:	4639      	mov	r1, r7
 80098a0:	4648      	mov	r0, r9
 80098a2:	d107      	bne.n	80098b4 <_dtoa_r+0xadc>
 80098a4:	f000 f9ca 	bl	8009c3c <__multadd>
 80098a8:	4607      	mov	r7, r0
 80098aa:	4605      	mov	r5, r0
 80098ac:	9b00      	ldr	r3, [sp, #0]
 80098ae:	3301      	adds	r3, #1
 80098b0:	9300      	str	r3, [sp, #0]
 80098b2:	e777      	b.n	80097a4 <_dtoa_r+0x9cc>
 80098b4:	f000 f9c2 	bl	8009c3c <__multadd>
 80098b8:	4629      	mov	r1, r5
 80098ba:	4607      	mov	r7, r0
 80098bc:	2300      	movs	r3, #0
 80098be:	220a      	movs	r2, #10
 80098c0:	4648      	mov	r0, r9
 80098c2:	f000 f9bb 	bl	8009c3c <__multadd>
 80098c6:	4605      	mov	r5, r0
 80098c8:	e7f0      	b.n	80098ac <_dtoa_r+0xad4>
 80098ca:	f1bb 0f00 	cmp.w	fp, #0
 80098ce:	bfcc      	ite	gt
 80098d0:	465e      	movgt	r6, fp
 80098d2:	2601      	movle	r6, #1
 80098d4:	4456      	add	r6, sl
 80098d6:	2700      	movs	r7, #0
 80098d8:	9902      	ldr	r1, [sp, #8]
 80098da:	9300      	str	r3, [sp, #0]
 80098dc:	2201      	movs	r2, #1
 80098de:	4648      	mov	r0, r9
 80098e0:	f000 fb50 	bl	8009f84 <__lshift>
 80098e4:	4621      	mov	r1, r4
 80098e6:	9002      	str	r0, [sp, #8]
 80098e8:	f000 fbb8 	bl	800a05c <__mcmp>
 80098ec:	2800      	cmp	r0, #0
 80098ee:	dcb4      	bgt.n	800985a <_dtoa_r+0xa82>
 80098f0:	d102      	bne.n	80098f8 <_dtoa_r+0xb20>
 80098f2:	9b00      	ldr	r3, [sp, #0]
 80098f4:	07db      	lsls	r3, r3, #31
 80098f6:	d4b0      	bmi.n	800985a <_dtoa_r+0xa82>
 80098f8:	4633      	mov	r3, r6
 80098fa:	461e      	mov	r6, r3
 80098fc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009900:	2a30      	cmp	r2, #48	@ 0x30
 8009902:	d0fa      	beq.n	80098fa <_dtoa_r+0xb22>
 8009904:	e4b5      	b.n	8009272 <_dtoa_r+0x49a>
 8009906:	459a      	cmp	sl, r3
 8009908:	d1a8      	bne.n	800985c <_dtoa_r+0xa84>
 800990a:	2331      	movs	r3, #49	@ 0x31
 800990c:	f108 0801 	add.w	r8, r8, #1
 8009910:	f88a 3000 	strb.w	r3, [sl]
 8009914:	e4ad      	b.n	8009272 <_dtoa_r+0x49a>
 8009916:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009918:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8009974 <_dtoa_r+0xb9c>
 800991c:	b11b      	cbz	r3, 8009926 <_dtoa_r+0xb4e>
 800991e:	f10a 0308 	add.w	r3, sl, #8
 8009922:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009924:	6013      	str	r3, [r2, #0]
 8009926:	4650      	mov	r0, sl
 8009928:	b017      	add	sp, #92	@ 0x5c
 800992a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800992e:	9b07      	ldr	r3, [sp, #28]
 8009930:	2b01      	cmp	r3, #1
 8009932:	f77f ae2e 	ble.w	8009592 <_dtoa_r+0x7ba>
 8009936:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009938:	9308      	str	r3, [sp, #32]
 800993a:	2001      	movs	r0, #1
 800993c:	e64d      	b.n	80095da <_dtoa_r+0x802>
 800993e:	f1bb 0f00 	cmp.w	fp, #0
 8009942:	f77f aed9 	ble.w	80096f8 <_dtoa_r+0x920>
 8009946:	4656      	mov	r6, sl
 8009948:	9802      	ldr	r0, [sp, #8]
 800994a:	4621      	mov	r1, r4
 800994c:	f7ff f9bb 	bl	8008cc6 <quorem>
 8009950:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009954:	f806 3b01 	strb.w	r3, [r6], #1
 8009958:	eba6 020a 	sub.w	r2, r6, sl
 800995c:	4593      	cmp	fp, r2
 800995e:	ddb4      	ble.n	80098ca <_dtoa_r+0xaf2>
 8009960:	9902      	ldr	r1, [sp, #8]
 8009962:	2300      	movs	r3, #0
 8009964:	220a      	movs	r2, #10
 8009966:	4648      	mov	r0, r9
 8009968:	f000 f968 	bl	8009c3c <__multadd>
 800996c:	9002      	str	r0, [sp, #8]
 800996e:	e7eb      	b.n	8009948 <_dtoa_r+0xb70>
 8009970:	0800aaf0 	.word	0x0800aaf0
 8009974:	0800aa74 	.word	0x0800aa74

08009978 <_free_r>:
 8009978:	b538      	push	{r3, r4, r5, lr}
 800997a:	4605      	mov	r5, r0
 800997c:	2900      	cmp	r1, #0
 800997e:	d041      	beq.n	8009a04 <_free_r+0x8c>
 8009980:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009984:	1f0c      	subs	r4, r1, #4
 8009986:	2b00      	cmp	r3, #0
 8009988:	bfb8      	it	lt
 800998a:	18e4      	addlt	r4, r4, r3
 800998c:	f000 f8e8 	bl	8009b60 <__malloc_lock>
 8009990:	4a1d      	ldr	r2, [pc, #116]	@ (8009a08 <_free_r+0x90>)
 8009992:	6813      	ldr	r3, [r2, #0]
 8009994:	b933      	cbnz	r3, 80099a4 <_free_r+0x2c>
 8009996:	6063      	str	r3, [r4, #4]
 8009998:	6014      	str	r4, [r2, #0]
 800999a:	4628      	mov	r0, r5
 800999c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099a0:	f000 b8e4 	b.w	8009b6c <__malloc_unlock>
 80099a4:	42a3      	cmp	r3, r4
 80099a6:	d908      	bls.n	80099ba <_free_r+0x42>
 80099a8:	6820      	ldr	r0, [r4, #0]
 80099aa:	1821      	adds	r1, r4, r0
 80099ac:	428b      	cmp	r3, r1
 80099ae:	bf01      	itttt	eq
 80099b0:	6819      	ldreq	r1, [r3, #0]
 80099b2:	685b      	ldreq	r3, [r3, #4]
 80099b4:	1809      	addeq	r1, r1, r0
 80099b6:	6021      	streq	r1, [r4, #0]
 80099b8:	e7ed      	b.n	8009996 <_free_r+0x1e>
 80099ba:	461a      	mov	r2, r3
 80099bc:	685b      	ldr	r3, [r3, #4]
 80099be:	b10b      	cbz	r3, 80099c4 <_free_r+0x4c>
 80099c0:	42a3      	cmp	r3, r4
 80099c2:	d9fa      	bls.n	80099ba <_free_r+0x42>
 80099c4:	6811      	ldr	r1, [r2, #0]
 80099c6:	1850      	adds	r0, r2, r1
 80099c8:	42a0      	cmp	r0, r4
 80099ca:	d10b      	bne.n	80099e4 <_free_r+0x6c>
 80099cc:	6820      	ldr	r0, [r4, #0]
 80099ce:	4401      	add	r1, r0
 80099d0:	1850      	adds	r0, r2, r1
 80099d2:	4283      	cmp	r3, r0
 80099d4:	6011      	str	r1, [r2, #0]
 80099d6:	d1e0      	bne.n	800999a <_free_r+0x22>
 80099d8:	6818      	ldr	r0, [r3, #0]
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	6053      	str	r3, [r2, #4]
 80099de:	4408      	add	r0, r1
 80099e0:	6010      	str	r0, [r2, #0]
 80099e2:	e7da      	b.n	800999a <_free_r+0x22>
 80099e4:	d902      	bls.n	80099ec <_free_r+0x74>
 80099e6:	230c      	movs	r3, #12
 80099e8:	602b      	str	r3, [r5, #0]
 80099ea:	e7d6      	b.n	800999a <_free_r+0x22>
 80099ec:	6820      	ldr	r0, [r4, #0]
 80099ee:	1821      	adds	r1, r4, r0
 80099f0:	428b      	cmp	r3, r1
 80099f2:	bf04      	itt	eq
 80099f4:	6819      	ldreq	r1, [r3, #0]
 80099f6:	685b      	ldreq	r3, [r3, #4]
 80099f8:	6063      	str	r3, [r4, #4]
 80099fa:	bf04      	itt	eq
 80099fc:	1809      	addeq	r1, r1, r0
 80099fe:	6021      	streq	r1, [r4, #0]
 8009a00:	6054      	str	r4, [r2, #4]
 8009a02:	e7ca      	b.n	800999a <_free_r+0x22>
 8009a04:	bd38      	pop	{r3, r4, r5, pc}
 8009a06:	bf00      	nop
 8009a08:	20000748 	.word	0x20000748

08009a0c <malloc>:
 8009a0c:	4b02      	ldr	r3, [pc, #8]	@ (8009a18 <malloc+0xc>)
 8009a0e:	4601      	mov	r1, r0
 8009a10:	6818      	ldr	r0, [r3, #0]
 8009a12:	f000 b825 	b.w	8009a60 <_malloc_r>
 8009a16:	bf00      	nop
 8009a18:	20000064 	.word	0x20000064

08009a1c <sbrk_aligned>:
 8009a1c:	b570      	push	{r4, r5, r6, lr}
 8009a1e:	4e0f      	ldr	r6, [pc, #60]	@ (8009a5c <sbrk_aligned+0x40>)
 8009a20:	460c      	mov	r4, r1
 8009a22:	6831      	ldr	r1, [r6, #0]
 8009a24:	4605      	mov	r5, r0
 8009a26:	b911      	cbnz	r1, 8009a2e <sbrk_aligned+0x12>
 8009a28:	f000 fccc 	bl	800a3c4 <_sbrk_r>
 8009a2c:	6030      	str	r0, [r6, #0]
 8009a2e:	4621      	mov	r1, r4
 8009a30:	4628      	mov	r0, r5
 8009a32:	f000 fcc7 	bl	800a3c4 <_sbrk_r>
 8009a36:	1c43      	adds	r3, r0, #1
 8009a38:	d103      	bne.n	8009a42 <sbrk_aligned+0x26>
 8009a3a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009a3e:	4620      	mov	r0, r4
 8009a40:	bd70      	pop	{r4, r5, r6, pc}
 8009a42:	1cc4      	adds	r4, r0, #3
 8009a44:	f024 0403 	bic.w	r4, r4, #3
 8009a48:	42a0      	cmp	r0, r4
 8009a4a:	d0f8      	beq.n	8009a3e <sbrk_aligned+0x22>
 8009a4c:	1a21      	subs	r1, r4, r0
 8009a4e:	4628      	mov	r0, r5
 8009a50:	f000 fcb8 	bl	800a3c4 <_sbrk_r>
 8009a54:	3001      	adds	r0, #1
 8009a56:	d1f2      	bne.n	8009a3e <sbrk_aligned+0x22>
 8009a58:	e7ef      	b.n	8009a3a <sbrk_aligned+0x1e>
 8009a5a:	bf00      	nop
 8009a5c:	20000744 	.word	0x20000744

08009a60 <_malloc_r>:
 8009a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a64:	1ccd      	adds	r5, r1, #3
 8009a66:	f025 0503 	bic.w	r5, r5, #3
 8009a6a:	3508      	adds	r5, #8
 8009a6c:	2d0c      	cmp	r5, #12
 8009a6e:	bf38      	it	cc
 8009a70:	250c      	movcc	r5, #12
 8009a72:	2d00      	cmp	r5, #0
 8009a74:	4606      	mov	r6, r0
 8009a76:	db01      	blt.n	8009a7c <_malloc_r+0x1c>
 8009a78:	42a9      	cmp	r1, r5
 8009a7a:	d904      	bls.n	8009a86 <_malloc_r+0x26>
 8009a7c:	230c      	movs	r3, #12
 8009a7e:	6033      	str	r3, [r6, #0]
 8009a80:	2000      	movs	r0, #0
 8009a82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009b5c <_malloc_r+0xfc>
 8009a8a:	f000 f869 	bl	8009b60 <__malloc_lock>
 8009a8e:	f8d8 3000 	ldr.w	r3, [r8]
 8009a92:	461c      	mov	r4, r3
 8009a94:	bb44      	cbnz	r4, 8009ae8 <_malloc_r+0x88>
 8009a96:	4629      	mov	r1, r5
 8009a98:	4630      	mov	r0, r6
 8009a9a:	f7ff ffbf 	bl	8009a1c <sbrk_aligned>
 8009a9e:	1c43      	adds	r3, r0, #1
 8009aa0:	4604      	mov	r4, r0
 8009aa2:	d158      	bne.n	8009b56 <_malloc_r+0xf6>
 8009aa4:	f8d8 4000 	ldr.w	r4, [r8]
 8009aa8:	4627      	mov	r7, r4
 8009aaa:	2f00      	cmp	r7, #0
 8009aac:	d143      	bne.n	8009b36 <_malloc_r+0xd6>
 8009aae:	2c00      	cmp	r4, #0
 8009ab0:	d04b      	beq.n	8009b4a <_malloc_r+0xea>
 8009ab2:	6823      	ldr	r3, [r4, #0]
 8009ab4:	4639      	mov	r1, r7
 8009ab6:	4630      	mov	r0, r6
 8009ab8:	eb04 0903 	add.w	r9, r4, r3
 8009abc:	f000 fc82 	bl	800a3c4 <_sbrk_r>
 8009ac0:	4581      	cmp	r9, r0
 8009ac2:	d142      	bne.n	8009b4a <_malloc_r+0xea>
 8009ac4:	6821      	ldr	r1, [r4, #0]
 8009ac6:	1a6d      	subs	r5, r5, r1
 8009ac8:	4629      	mov	r1, r5
 8009aca:	4630      	mov	r0, r6
 8009acc:	f7ff ffa6 	bl	8009a1c <sbrk_aligned>
 8009ad0:	3001      	adds	r0, #1
 8009ad2:	d03a      	beq.n	8009b4a <_malloc_r+0xea>
 8009ad4:	6823      	ldr	r3, [r4, #0]
 8009ad6:	442b      	add	r3, r5
 8009ad8:	6023      	str	r3, [r4, #0]
 8009ada:	f8d8 3000 	ldr.w	r3, [r8]
 8009ade:	685a      	ldr	r2, [r3, #4]
 8009ae0:	bb62      	cbnz	r2, 8009b3c <_malloc_r+0xdc>
 8009ae2:	f8c8 7000 	str.w	r7, [r8]
 8009ae6:	e00f      	b.n	8009b08 <_malloc_r+0xa8>
 8009ae8:	6822      	ldr	r2, [r4, #0]
 8009aea:	1b52      	subs	r2, r2, r5
 8009aec:	d420      	bmi.n	8009b30 <_malloc_r+0xd0>
 8009aee:	2a0b      	cmp	r2, #11
 8009af0:	d917      	bls.n	8009b22 <_malloc_r+0xc2>
 8009af2:	1961      	adds	r1, r4, r5
 8009af4:	42a3      	cmp	r3, r4
 8009af6:	6025      	str	r5, [r4, #0]
 8009af8:	bf18      	it	ne
 8009afa:	6059      	strne	r1, [r3, #4]
 8009afc:	6863      	ldr	r3, [r4, #4]
 8009afe:	bf08      	it	eq
 8009b00:	f8c8 1000 	streq.w	r1, [r8]
 8009b04:	5162      	str	r2, [r4, r5]
 8009b06:	604b      	str	r3, [r1, #4]
 8009b08:	4630      	mov	r0, r6
 8009b0a:	f000 f82f 	bl	8009b6c <__malloc_unlock>
 8009b0e:	f104 000b 	add.w	r0, r4, #11
 8009b12:	1d23      	adds	r3, r4, #4
 8009b14:	f020 0007 	bic.w	r0, r0, #7
 8009b18:	1ac2      	subs	r2, r0, r3
 8009b1a:	bf1c      	itt	ne
 8009b1c:	1a1b      	subne	r3, r3, r0
 8009b1e:	50a3      	strne	r3, [r4, r2]
 8009b20:	e7af      	b.n	8009a82 <_malloc_r+0x22>
 8009b22:	6862      	ldr	r2, [r4, #4]
 8009b24:	42a3      	cmp	r3, r4
 8009b26:	bf0c      	ite	eq
 8009b28:	f8c8 2000 	streq.w	r2, [r8]
 8009b2c:	605a      	strne	r2, [r3, #4]
 8009b2e:	e7eb      	b.n	8009b08 <_malloc_r+0xa8>
 8009b30:	4623      	mov	r3, r4
 8009b32:	6864      	ldr	r4, [r4, #4]
 8009b34:	e7ae      	b.n	8009a94 <_malloc_r+0x34>
 8009b36:	463c      	mov	r4, r7
 8009b38:	687f      	ldr	r7, [r7, #4]
 8009b3a:	e7b6      	b.n	8009aaa <_malloc_r+0x4a>
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	685b      	ldr	r3, [r3, #4]
 8009b40:	42a3      	cmp	r3, r4
 8009b42:	d1fb      	bne.n	8009b3c <_malloc_r+0xdc>
 8009b44:	2300      	movs	r3, #0
 8009b46:	6053      	str	r3, [r2, #4]
 8009b48:	e7de      	b.n	8009b08 <_malloc_r+0xa8>
 8009b4a:	230c      	movs	r3, #12
 8009b4c:	6033      	str	r3, [r6, #0]
 8009b4e:	4630      	mov	r0, r6
 8009b50:	f000 f80c 	bl	8009b6c <__malloc_unlock>
 8009b54:	e794      	b.n	8009a80 <_malloc_r+0x20>
 8009b56:	6005      	str	r5, [r0, #0]
 8009b58:	e7d6      	b.n	8009b08 <_malloc_r+0xa8>
 8009b5a:	bf00      	nop
 8009b5c:	20000748 	.word	0x20000748

08009b60 <__malloc_lock>:
 8009b60:	4801      	ldr	r0, [pc, #4]	@ (8009b68 <__malloc_lock+0x8>)
 8009b62:	f7ff b8a0 	b.w	8008ca6 <__retarget_lock_acquire_recursive>
 8009b66:	bf00      	nop
 8009b68:	20000740 	.word	0x20000740

08009b6c <__malloc_unlock>:
 8009b6c:	4801      	ldr	r0, [pc, #4]	@ (8009b74 <__malloc_unlock+0x8>)
 8009b6e:	f7ff b89b 	b.w	8008ca8 <__retarget_lock_release_recursive>
 8009b72:	bf00      	nop
 8009b74:	20000740 	.word	0x20000740

08009b78 <_Balloc>:
 8009b78:	b570      	push	{r4, r5, r6, lr}
 8009b7a:	69c6      	ldr	r6, [r0, #28]
 8009b7c:	4604      	mov	r4, r0
 8009b7e:	460d      	mov	r5, r1
 8009b80:	b976      	cbnz	r6, 8009ba0 <_Balloc+0x28>
 8009b82:	2010      	movs	r0, #16
 8009b84:	f7ff ff42 	bl	8009a0c <malloc>
 8009b88:	4602      	mov	r2, r0
 8009b8a:	61e0      	str	r0, [r4, #28]
 8009b8c:	b920      	cbnz	r0, 8009b98 <_Balloc+0x20>
 8009b8e:	4b18      	ldr	r3, [pc, #96]	@ (8009bf0 <_Balloc+0x78>)
 8009b90:	4818      	ldr	r0, [pc, #96]	@ (8009bf4 <_Balloc+0x7c>)
 8009b92:	216b      	movs	r1, #107	@ 0x6b
 8009b94:	f000 fc26 	bl	800a3e4 <__assert_func>
 8009b98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b9c:	6006      	str	r6, [r0, #0]
 8009b9e:	60c6      	str	r6, [r0, #12]
 8009ba0:	69e6      	ldr	r6, [r4, #28]
 8009ba2:	68f3      	ldr	r3, [r6, #12]
 8009ba4:	b183      	cbz	r3, 8009bc8 <_Balloc+0x50>
 8009ba6:	69e3      	ldr	r3, [r4, #28]
 8009ba8:	68db      	ldr	r3, [r3, #12]
 8009baa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009bae:	b9b8      	cbnz	r0, 8009be0 <_Balloc+0x68>
 8009bb0:	2101      	movs	r1, #1
 8009bb2:	fa01 f605 	lsl.w	r6, r1, r5
 8009bb6:	1d72      	adds	r2, r6, #5
 8009bb8:	0092      	lsls	r2, r2, #2
 8009bba:	4620      	mov	r0, r4
 8009bbc:	f000 fc30 	bl	800a420 <_calloc_r>
 8009bc0:	b160      	cbz	r0, 8009bdc <_Balloc+0x64>
 8009bc2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009bc6:	e00e      	b.n	8009be6 <_Balloc+0x6e>
 8009bc8:	2221      	movs	r2, #33	@ 0x21
 8009bca:	2104      	movs	r1, #4
 8009bcc:	4620      	mov	r0, r4
 8009bce:	f000 fc27 	bl	800a420 <_calloc_r>
 8009bd2:	69e3      	ldr	r3, [r4, #28]
 8009bd4:	60f0      	str	r0, [r6, #12]
 8009bd6:	68db      	ldr	r3, [r3, #12]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d1e4      	bne.n	8009ba6 <_Balloc+0x2e>
 8009bdc:	2000      	movs	r0, #0
 8009bde:	bd70      	pop	{r4, r5, r6, pc}
 8009be0:	6802      	ldr	r2, [r0, #0]
 8009be2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009be6:	2300      	movs	r3, #0
 8009be8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009bec:	e7f7      	b.n	8009bde <_Balloc+0x66>
 8009bee:	bf00      	nop
 8009bf0:	0800aa81 	.word	0x0800aa81
 8009bf4:	0800ab01 	.word	0x0800ab01

08009bf8 <_Bfree>:
 8009bf8:	b570      	push	{r4, r5, r6, lr}
 8009bfa:	69c6      	ldr	r6, [r0, #28]
 8009bfc:	4605      	mov	r5, r0
 8009bfe:	460c      	mov	r4, r1
 8009c00:	b976      	cbnz	r6, 8009c20 <_Bfree+0x28>
 8009c02:	2010      	movs	r0, #16
 8009c04:	f7ff ff02 	bl	8009a0c <malloc>
 8009c08:	4602      	mov	r2, r0
 8009c0a:	61e8      	str	r0, [r5, #28]
 8009c0c:	b920      	cbnz	r0, 8009c18 <_Bfree+0x20>
 8009c0e:	4b09      	ldr	r3, [pc, #36]	@ (8009c34 <_Bfree+0x3c>)
 8009c10:	4809      	ldr	r0, [pc, #36]	@ (8009c38 <_Bfree+0x40>)
 8009c12:	218f      	movs	r1, #143	@ 0x8f
 8009c14:	f000 fbe6 	bl	800a3e4 <__assert_func>
 8009c18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c1c:	6006      	str	r6, [r0, #0]
 8009c1e:	60c6      	str	r6, [r0, #12]
 8009c20:	b13c      	cbz	r4, 8009c32 <_Bfree+0x3a>
 8009c22:	69eb      	ldr	r3, [r5, #28]
 8009c24:	6862      	ldr	r2, [r4, #4]
 8009c26:	68db      	ldr	r3, [r3, #12]
 8009c28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009c2c:	6021      	str	r1, [r4, #0]
 8009c2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009c32:	bd70      	pop	{r4, r5, r6, pc}
 8009c34:	0800aa81 	.word	0x0800aa81
 8009c38:	0800ab01 	.word	0x0800ab01

08009c3c <__multadd>:
 8009c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c40:	690d      	ldr	r5, [r1, #16]
 8009c42:	4607      	mov	r7, r0
 8009c44:	460c      	mov	r4, r1
 8009c46:	461e      	mov	r6, r3
 8009c48:	f101 0c14 	add.w	ip, r1, #20
 8009c4c:	2000      	movs	r0, #0
 8009c4e:	f8dc 3000 	ldr.w	r3, [ip]
 8009c52:	b299      	uxth	r1, r3
 8009c54:	fb02 6101 	mla	r1, r2, r1, r6
 8009c58:	0c1e      	lsrs	r6, r3, #16
 8009c5a:	0c0b      	lsrs	r3, r1, #16
 8009c5c:	fb02 3306 	mla	r3, r2, r6, r3
 8009c60:	b289      	uxth	r1, r1
 8009c62:	3001      	adds	r0, #1
 8009c64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009c68:	4285      	cmp	r5, r0
 8009c6a:	f84c 1b04 	str.w	r1, [ip], #4
 8009c6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009c72:	dcec      	bgt.n	8009c4e <__multadd+0x12>
 8009c74:	b30e      	cbz	r6, 8009cba <__multadd+0x7e>
 8009c76:	68a3      	ldr	r3, [r4, #8]
 8009c78:	42ab      	cmp	r3, r5
 8009c7a:	dc19      	bgt.n	8009cb0 <__multadd+0x74>
 8009c7c:	6861      	ldr	r1, [r4, #4]
 8009c7e:	4638      	mov	r0, r7
 8009c80:	3101      	adds	r1, #1
 8009c82:	f7ff ff79 	bl	8009b78 <_Balloc>
 8009c86:	4680      	mov	r8, r0
 8009c88:	b928      	cbnz	r0, 8009c96 <__multadd+0x5a>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8009cc0 <__multadd+0x84>)
 8009c8e:	480d      	ldr	r0, [pc, #52]	@ (8009cc4 <__multadd+0x88>)
 8009c90:	21ba      	movs	r1, #186	@ 0xba
 8009c92:	f000 fba7 	bl	800a3e4 <__assert_func>
 8009c96:	6922      	ldr	r2, [r4, #16]
 8009c98:	3202      	adds	r2, #2
 8009c9a:	f104 010c 	add.w	r1, r4, #12
 8009c9e:	0092      	lsls	r2, r2, #2
 8009ca0:	300c      	adds	r0, #12
 8009ca2:	f7ff f802 	bl	8008caa <memcpy>
 8009ca6:	4621      	mov	r1, r4
 8009ca8:	4638      	mov	r0, r7
 8009caa:	f7ff ffa5 	bl	8009bf8 <_Bfree>
 8009cae:	4644      	mov	r4, r8
 8009cb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009cb4:	3501      	adds	r5, #1
 8009cb6:	615e      	str	r6, [r3, #20]
 8009cb8:	6125      	str	r5, [r4, #16]
 8009cba:	4620      	mov	r0, r4
 8009cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cc0:	0800aaf0 	.word	0x0800aaf0
 8009cc4:	0800ab01 	.word	0x0800ab01

08009cc8 <__hi0bits>:
 8009cc8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009ccc:	4603      	mov	r3, r0
 8009cce:	bf36      	itet	cc
 8009cd0:	0403      	lslcc	r3, r0, #16
 8009cd2:	2000      	movcs	r0, #0
 8009cd4:	2010      	movcc	r0, #16
 8009cd6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009cda:	bf3c      	itt	cc
 8009cdc:	021b      	lslcc	r3, r3, #8
 8009cde:	3008      	addcc	r0, #8
 8009ce0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009ce4:	bf3c      	itt	cc
 8009ce6:	011b      	lslcc	r3, r3, #4
 8009ce8:	3004      	addcc	r0, #4
 8009cea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cee:	bf3c      	itt	cc
 8009cf0:	009b      	lslcc	r3, r3, #2
 8009cf2:	3002      	addcc	r0, #2
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	db05      	blt.n	8009d04 <__hi0bits+0x3c>
 8009cf8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009cfc:	f100 0001 	add.w	r0, r0, #1
 8009d00:	bf08      	it	eq
 8009d02:	2020      	moveq	r0, #32
 8009d04:	4770      	bx	lr

08009d06 <__lo0bits>:
 8009d06:	6803      	ldr	r3, [r0, #0]
 8009d08:	4602      	mov	r2, r0
 8009d0a:	f013 0007 	ands.w	r0, r3, #7
 8009d0e:	d00b      	beq.n	8009d28 <__lo0bits+0x22>
 8009d10:	07d9      	lsls	r1, r3, #31
 8009d12:	d421      	bmi.n	8009d58 <__lo0bits+0x52>
 8009d14:	0798      	lsls	r0, r3, #30
 8009d16:	bf49      	itett	mi
 8009d18:	085b      	lsrmi	r3, r3, #1
 8009d1a:	089b      	lsrpl	r3, r3, #2
 8009d1c:	2001      	movmi	r0, #1
 8009d1e:	6013      	strmi	r3, [r2, #0]
 8009d20:	bf5c      	itt	pl
 8009d22:	6013      	strpl	r3, [r2, #0]
 8009d24:	2002      	movpl	r0, #2
 8009d26:	4770      	bx	lr
 8009d28:	b299      	uxth	r1, r3
 8009d2a:	b909      	cbnz	r1, 8009d30 <__lo0bits+0x2a>
 8009d2c:	0c1b      	lsrs	r3, r3, #16
 8009d2e:	2010      	movs	r0, #16
 8009d30:	b2d9      	uxtb	r1, r3
 8009d32:	b909      	cbnz	r1, 8009d38 <__lo0bits+0x32>
 8009d34:	3008      	adds	r0, #8
 8009d36:	0a1b      	lsrs	r3, r3, #8
 8009d38:	0719      	lsls	r1, r3, #28
 8009d3a:	bf04      	itt	eq
 8009d3c:	091b      	lsreq	r3, r3, #4
 8009d3e:	3004      	addeq	r0, #4
 8009d40:	0799      	lsls	r1, r3, #30
 8009d42:	bf04      	itt	eq
 8009d44:	089b      	lsreq	r3, r3, #2
 8009d46:	3002      	addeq	r0, #2
 8009d48:	07d9      	lsls	r1, r3, #31
 8009d4a:	d403      	bmi.n	8009d54 <__lo0bits+0x4e>
 8009d4c:	085b      	lsrs	r3, r3, #1
 8009d4e:	f100 0001 	add.w	r0, r0, #1
 8009d52:	d003      	beq.n	8009d5c <__lo0bits+0x56>
 8009d54:	6013      	str	r3, [r2, #0]
 8009d56:	4770      	bx	lr
 8009d58:	2000      	movs	r0, #0
 8009d5a:	4770      	bx	lr
 8009d5c:	2020      	movs	r0, #32
 8009d5e:	4770      	bx	lr

08009d60 <__i2b>:
 8009d60:	b510      	push	{r4, lr}
 8009d62:	460c      	mov	r4, r1
 8009d64:	2101      	movs	r1, #1
 8009d66:	f7ff ff07 	bl	8009b78 <_Balloc>
 8009d6a:	4602      	mov	r2, r0
 8009d6c:	b928      	cbnz	r0, 8009d7a <__i2b+0x1a>
 8009d6e:	4b05      	ldr	r3, [pc, #20]	@ (8009d84 <__i2b+0x24>)
 8009d70:	4805      	ldr	r0, [pc, #20]	@ (8009d88 <__i2b+0x28>)
 8009d72:	f240 1145 	movw	r1, #325	@ 0x145
 8009d76:	f000 fb35 	bl	800a3e4 <__assert_func>
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	6144      	str	r4, [r0, #20]
 8009d7e:	6103      	str	r3, [r0, #16]
 8009d80:	bd10      	pop	{r4, pc}
 8009d82:	bf00      	nop
 8009d84:	0800aaf0 	.word	0x0800aaf0
 8009d88:	0800ab01 	.word	0x0800ab01

08009d8c <__multiply>:
 8009d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d90:	4617      	mov	r7, r2
 8009d92:	690a      	ldr	r2, [r1, #16]
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	429a      	cmp	r2, r3
 8009d98:	bfa8      	it	ge
 8009d9a:	463b      	movge	r3, r7
 8009d9c:	4689      	mov	r9, r1
 8009d9e:	bfa4      	itt	ge
 8009da0:	460f      	movge	r7, r1
 8009da2:	4699      	movge	r9, r3
 8009da4:	693d      	ldr	r5, [r7, #16]
 8009da6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	6879      	ldr	r1, [r7, #4]
 8009dae:	eb05 060a 	add.w	r6, r5, sl
 8009db2:	42b3      	cmp	r3, r6
 8009db4:	b085      	sub	sp, #20
 8009db6:	bfb8      	it	lt
 8009db8:	3101      	addlt	r1, #1
 8009dba:	f7ff fedd 	bl	8009b78 <_Balloc>
 8009dbe:	b930      	cbnz	r0, 8009dce <__multiply+0x42>
 8009dc0:	4602      	mov	r2, r0
 8009dc2:	4b41      	ldr	r3, [pc, #260]	@ (8009ec8 <__multiply+0x13c>)
 8009dc4:	4841      	ldr	r0, [pc, #260]	@ (8009ecc <__multiply+0x140>)
 8009dc6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009dca:	f000 fb0b 	bl	800a3e4 <__assert_func>
 8009dce:	f100 0414 	add.w	r4, r0, #20
 8009dd2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009dd6:	4623      	mov	r3, r4
 8009dd8:	2200      	movs	r2, #0
 8009dda:	4573      	cmp	r3, lr
 8009ddc:	d320      	bcc.n	8009e20 <__multiply+0x94>
 8009dde:	f107 0814 	add.w	r8, r7, #20
 8009de2:	f109 0114 	add.w	r1, r9, #20
 8009de6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009dea:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009dee:	9302      	str	r3, [sp, #8]
 8009df0:	1beb      	subs	r3, r5, r7
 8009df2:	3b15      	subs	r3, #21
 8009df4:	f023 0303 	bic.w	r3, r3, #3
 8009df8:	3304      	adds	r3, #4
 8009dfa:	3715      	adds	r7, #21
 8009dfc:	42bd      	cmp	r5, r7
 8009dfe:	bf38      	it	cc
 8009e00:	2304      	movcc	r3, #4
 8009e02:	9301      	str	r3, [sp, #4]
 8009e04:	9b02      	ldr	r3, [sp, #8]
 8009e06:	9103      	str	r1, [sp, #12]
 8009e08:	428b      	cmp	r3, r1
 8009e0a:	d80c      	bhi.n	8009e26 <__multiply+0x9a>
 8009e0c:	2e00      	cmp	r6, #0
 8009e0e:	dd03      	ble.n	8009e18 <__multiply+0x8c>
 8009e10:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d055      	beq.n	8009ec4 <__multiply+0x138>
 8009e18:	6106      	str	r6, [r0, #16]
 8009e1a:	b005      	add	sp, #20
 8009e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e20:	f843 2b04 	str.w	r2, [r3], #4
 8009e24:	e7d9      	b.n	8009dda <__multiply+0x4e>
 8009e26:	f8b1 a000 	ldrh.w	sl, [r1]
 8009e2a:	f1ba 0f00 	cmp.w	sl, #0
 8009e2e:	d01f      	beq.n	8009e70 <__multiply+0xe4>
 8009e30:	46c4      	mov	ip, r8
 8009e32:	46a1      	mov	r9, r4
 8009e34:	2700      	movs	r7, #0
 8009e36:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009e3a:	f8d9 3000 	ldr.w	r3, [r9]
 8009e3e:	fa1f fb82 	uxth.w	fp, r2
 8009e42:	b29b      	uxth	r3, r3
 8009e44:	fb0a 330b 	mla	r3, sl, fp, r3
 8009e48:	443b      	add	r3, r7
 8009e4a:	f8d9 7000 	ldr.w	r7, [r9]
 8009e4e:	0c12      	lsrs	r2, r2, #16
 8009e50:	0c3f      	lsrs	r7, r7, #16
 8009e52:	fb0a 7202 	mla	r2, sl, r2, r7
 8009e56:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009e5a:	b29b      	uxth	r3, r3
 8009e5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e60:	4565      	cmp	r5, ip
 8009e62:	f849 3b04 	str.w	r3, [r9], #4
 8009e66:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009e6a:	d8e4      	bhi.n	8009e36 <__multiply+0xaa>
 8009e6c:	9b01      	ldr	r3, [sp, #4]
 8009e6e:	50e7      	str	r7, [r4, r3]
 8009e70:	9b03      	ldr	r3, [sp, #12]
 8009e72:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009e76:	3104      	adds	r1, #4
 8009e78:	f1b9 0f00 	cmp.w	r9, #0
 8009e7c:	d020      	beq.n	8009ec0 <__multiply+0x134>
 8009e7e:	6823      	ldr	r3, [r4, #0]
 8009e80:	4647      	mov	r7, r8
 8009e82:	46a4      	mov	ip, r4
 8009e84:	f04f 0a00 	mov.w	sl, #0
 8009e88:	f8b7 b000 	ldrh.w	fp, [r7]
 8009e8c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009e90:	fb09 220b 	mla	r2, r9, fp, r2
 8009e94:	4452      	add	r2, sl
 8009e96:	b29b      	uxth	r3, r3
 8009e98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e9c:	f84c 3b04 	str.w	r3, [ip], #4
 8009ea0:	f857 3b04 	ldr.w	r3, [r7], #4
 8009ea4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009ea8:	f8bc 3000 	ldrh.w	r3, [ip]
 8009eac:	fb09 330a 	mla	r3, r9, sl, r3
 8009eb0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009eb4:	42bd      	cmp	r5, r7
 8009eb6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009eba:	d8e5      	bhi.n	8009e88 <__multiply+0xfc>
 8009ebc:	9a01      	ldr	r2, [sp, #4]
 8009ebe:	50a3      	str	r3, [r4, r2]
 8009ec0:	3404      	adds	r4, #4
 8009ec2:	e79f      	b.n	8009e04 <__multiply+0x78>
 8009ec4:	3e01      	subs	r6, #1
 8009ec6:	e7a1      	b.n	8009e0c <__multiply+0x80>
 8009ec8:	0800aaf0 	.word	0x0800aaf0
 8009ecc:	0800ab01 	.word	0x0800ab01

08009ed0 <__pow5mult>:
 8009ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ed4:	4615      	mov	r5, r2
 8009ed6:	f012 0203 	ands.w	r2, r2, #3
 8009eda:	4607      	mov	r7, r0
 8009edc:	460e      	mov	r6, r1
 8009ede:	d007      	beq.n	8009ef0 <__pow5mult+0x20>
 8009ee0:	4c25      	ldr	r4, [pc, #148]	@ (8009f78 <__pow5mult+0xa8>)
 8009ee2:	3a01      	subs	r2, #1
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009eea:	f7ff fea7 	bl	8009c3c <__multadd>
 8009eee:	4606      	mov	r6, r0
 8009ef0:	10ad      	asrs	r5, r5, #2
 8009ef2:	d03d      	beq.n	8009f70 <__pow5mult+0xa0>
 8009ef4:	69fc      	ldr	r4, [r7, #28]
 8009ef6:	b97c      	cbnz	r4, 8009f18 <__pow5mult+0x48>
 8009ef8:	2010      	movs	r0, #16
 8009efa:	f7ff fd87 	bl	8009a0c <malloc>
 8009efe:	4602      	mov	r2, r0
 8009f00:	61f8      	str	r0, [r7, #28]
 8009f02:	b928      	cbnz	r0, 8009f10 <__pow5mult+0x40>
 8009f04:	4b1d      	ldr	r3, [pc, #116]	@ (8009f7c <__pow5mult+0xac>)
 8009f06:	481e      	ldr	r0, [pc, #120]	@ (8009f80 <__pow5mult+0xb0>)
 8009f08:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009f0c:	f000 fa6a 	bl	800a3e4 <__assert_func>
 8009f10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f14:	6004      	str	r4, [r0, #0]
 8009f16:	60c4      	str	r4, [r0, #12]
 8009f18:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009f1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009f20:	b94c      	cbnz	r4, 8009f36 <__pow5mult+0x66>
 8009f22:	f240 2171 	movw	r1, #625	@ 0x271
 8009f26:	4638      	mov	r0, r7
 8009f28:	f7ff ff1a 	bl	8009d60 <__i2b>
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009f32:	4604      	mov	r4, r0
 8009f34:	6003      	str	r3, [r0, #0]
 8009f36:	f04f 0900 	mov.w	r9, #0
 8009f3a:	07eb      	lsls	r3, r5, #31
 8009f3c:	d50a      	bpl.n	8009f54 <__pow5mult+0x84>
 8009f3e:	4631      	mov	r1, r6
 8009f40:	4622      	mov	r2, r4
 8009f42:	4638      	mov	r0, r7
 8009f44:	f7ff ff22 	bl	8009d8c <__multiply>
 8009f48:	4631      	mov	r1, r6
 8009f4a:	4680      	mov	r8, r0
 8009f4c:	4638      	mov	r0, r7
 8009f4e:	f7ff fe53 	bl	8009bf8 <_Bfree>
 8009f52:	4646      	mov	r6, r8
 8009f54:	106d      	asrs	r5, r5, #1
 8009f56:	d00b      	beq.n	8009f70 <__pow5mult+0xa0>
 8009f58:	6820      	ldr	r0, [r4, #0]
 8009f5a:	b938      	cbnz	r0, 8009f6c <__pow5mult+0x9c>
 8009f5c:	4622      	mov	r2, r4
 8009f5e:	4621      	mov	r1, r4
 8009f60:	4638      	mov	r0, r7
 8009f62:	f7ff ff13 	bl	8009d8c <__multiply>
 8009f66:	6020      	str	r0, [r4, #0]
 8009f68:	f8c0 9000 	str.w	r9, [r0]
 8009f6c:	4604      	mov	r4, r0
 8009f6e:	e7e4      	b.n	8009f3a <__pow5mult+0x6a>
 8009f70:	4630      	mov	r0, r6
 8009f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f76:	bf00      	nop
 8009f78:	0800abb4 	.word	0x0800abb4
 8009f7c:	0800aa81 	.word	0x0800aa81
 8009f80:	0800ab01 	.word	0x0800ab01

08009f84 <__lshift>:
 8009f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f88:	460c      	mov	r4, r1
 8009f8a:	6849      	ldr	r1, [r1, #4]
 8009f8c:	6923      	ldr	r3, [r4, #16]
 8009f8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009f92:	68a3      	ldr	r3, [r4, #8]
 8009f94:	4607      	mov	r7, r0
 8009f96:	4691      	mov	r9, r2
 8009f98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009f9c:	f108 0601 	add.w	r6, r8, #1
 8009fa0:	42b3      	cmp	r3, r6
 8009fa2:	db0b      	blt.n	8009fbc <__lshift+0x38>
 8009fa4:	4638      	mov	r0, r7
 8009fa6:	f7ff fde7 	bl	8009b78 <_Balloc>
 8009faa:	4605      	mov	r5, r0
 8009fac:	b948      	cbnz	r0, 8009fc2 <__lshift+0x3e>
 8009fae:	4602      	mov	r2, r0
 8009fb0:	4b28      	ldr	r3, [pc, #160]	@ (800a054 <__lshift+0xd0>)
 8009fb2:	4829      	ldr	r0, [pc, #164]	@ (800a058 <__lshift+0xd4>)
 8009fb4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009fb8:	f000 fa14 	bl	800a3e4 <__assert_func>
 8009fbc:	3101      	adds	r1, #1
 8009fbe:	005b      	lsls	r3, r3, #1
 8009fc0:	e7ee      	b.n	8009fa0 <__lshift+0x1c>
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	f100 0114 	add.w	r1, r0, #20
 8009fc8:	f100 0210 	add.w	r2, r0, #16
 8009fcc:	4618      	mov	r0, r3
 8009fce:	4553      	cmp	r3, sl
 8009fd0:	db33      	blt.n	800a03a <__lshift+0xb6>
 8009fd2:	6920      	ldr	r0, [r4, #16]
 8009fd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009fd8:	f104 0314 	add.w	r3, r4, #20
 8009fdc:	f019 091f 	ands.w	r9, r9, #31
 8009fe0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009fe4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009fe8:	d02b      	beq.n	800a042 <__lshift+0xbe>
 8009fea:	f1c9 0e20 	rsb	lr, r9, #32
 8009fee:	468a      	mov	sl, r1
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	6818      	ldr	r0, [r3, #0]
 8009ff4:	fa00 f009 	lsl.w	r0, r0, r9
 8009ff8:	4310      	orrs	r0, r2
 8009ffa:	f84a 0b04 	str.w	r0, [sl], #4
 8009ffe:	f853 2b04 	ldr.w	r2, [r3], #4
 800a002:	459c      	cmp	ip, r3
 800a004:	fa22 f20e 	lsr.w	r2, r2, lr
 800a008:	d8f3      	bhi.n	8009ff2 <__lshift+0x6e>
 800a00a:	ebac 0304 	sub.w	r3, ip, r4
 800a00e:	3b15      	subs	r3, #21
 800a010:	f023 0303 	bic.w	r3, r3, #3
 800a014:	3304      	adds	r3, #4
 800a016:	f104 0015 	add.w	r0, r4, #21
 800a01a:	4560      	cmp	r0, ip
 800a01c:	bf88      	it	hi
 800a01e:	2304      	movhi	r3, #4
 800a020:	50ca      	str	r2, [r1, r3]
 800a022:	b10a      	cbz	r2, 800a028 <__lshift+0xa4>
 800a024:	f108 0602 	add.w	r6, r8, #2
 800a028:	3e01      	subs	r6, #1
 800a02a:	4638      	mov	r0, r7
 800a02c:	612e      	str	r6, [r5, #16]
 800a02e:	4621      	mov	r1, r4
 800a030:	f7ff fde2 	bl	8009bf8 <_Bfree>
 800a034:	4628      	mov	r0, r5
 800a036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a03a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a03e:	3301      	adds	r3, #1
 800a040:	e7c5      	b.n	8009fce <__lshift+0x4a>
 800a042:	3904      	subs	r1, #4
 800a044:	f853 2b04 	ldr.w	r2, [r3], #4
 800a048:	f841 2f04 	str.w	r2, [r1, #4]!
 800a04c:	459c      	cmp	ip, r3
 800a04e:	d8f9      	bhi.n	800a044 <__lshift+0xc0>
 800a050:	e7ea      	b.n	800a028 <__lshift+0xa4>
 800a052:	bf00      	nop
 800a054:	0800aaf0 	.word	0x0800aaf0
 800a058:	0800ab01 	.word	0x0800ab01

0800a05c <__mcmp>:
 800a05c:	690a      	ldr	r2, [r1, #16]
 800a05e:	4603      	mov	r3, r0
 800a060:	6900      	ldr	r0, [r0, #16]
 800a062:	1a80      	subs	r0, r0, r2
 800a064:	b530      	push	{r4, r5, lr}
 800a066:	d10e      	bne.n	800a086 <__mcmp+0x2a>
 800a068:	3314      	adds	r3, #20
 800a06a:	3114      	adds	r1, #20
 800a06c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a070:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a074:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a078:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a07c:	4295      	cmp	r5, r2
 800a07e:	d003      	beq.n	800a088 <__mcmp+0x2c>
 800a080:	d205      	bcs.n	800a08e <__mcmp+0x32>
 800a082:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a086:	bd30      	pop	{r4, r5, pc}
 800a088:	42a3      	cmp	r3, r4
 800a08a:	d3f3      	bcc.n	800a074 <__mcmp+0x18>
 800a08c:	e7fb      	b.n	800a086 <__mcmp+0x2a>
 800a08e:	2001      	movs	r0, #1
 800a090:	e7f9      	b.n	800a086 <__mcmp+0x2a>
	...

0800a094 <__mdiff>:
 800a094:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a098:	4689      	mov	r9, r1
 800a09a:	4606      	mov	r6, r0
 800a09c:	4611      	mov	r1, r2
 800a09e:	4648      	mov	r0, r9
 800a0a0:	4614      	mov	r4, r2
 800a0a2:	f7ff ffdb 	bl	800a05c <__mcmp>
 800a0a6:	1e05      	subs	r5, r0, #0
 800a0a8:	d112      	bne.n	800a0d0 <__mdiff+0x3c>
 800a0aa:	4629      	mov	r1, r5
 800a0ac:	4630      	mov	r0, r6
 800a0ae:	f7ff fd63 	bl	8009b78 <_Balloc>
 800a0b2:	4602      	mov	r2, r0
 800a0b4:	b928      	cbnz	r0, 800a0c2 <__mdiff+0x2e>
 800a0b6:	4b3f      	ldr	r3, [pc, #252]	@ (800a1b4 <__mdiff+0x120>)
 800a0b8:	f240 2137 	movw	r1, #567	@ 0x237
 800a0bc:	483e      	ldr	r0, [pc, #248]	@ (800a1b8 <__mdiff+0x124>)
 800a0be:	f000 f991 	bl	800a3e4 <__assert_func>
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a0c8:	4610      	mov	r0, r2
 800a0ca:	b003      	add	sp, #12
 800a0cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0d0:	bfbc      	itt	lt
 800a0d2:	464b      	movlt	r3, r9
 800a0d4:	46a1      	movlt	r9, r4
 800a0d6:	4630      	mov	r0, r6
 800a0d8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a0dc:	bfba      	itte	lt
 800a0de:	461c      	movlt	r4, r3
 800a0e0:	2501      	movlt	r5, #1
 800a0e2:	2500      	movge	r5, #0
 800a0e4:	f7ff fd48 	bl	8009b78 <_Balloc>
 800a0e8:	4602      	mov	r2, r0
 800a0ea:	b918      	cbnz	r0, 800a0f4 <__mdiff+0x60>
 800a0ec:	4b31      	ldr	r3, [pc, #196]	@ (800a1b4 <__mdiff+0x120>)
 800a0ee:	f240 2145 	movw	r1, #581	@ 0x245
 800a0f2:	e7e3      	b.n	800a0bc <__mdiff+0x28>
 800a0f4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a0f8:	6926      	ldr	r6, [r4, #16]
 800a0fa:	60c5      	str	r5, [r0, #12]
 800a0fc:	f109 0310 	add.w	r3, r9, #16
 800a100:	f109 0514 	add.w	r5, r9, #20
 800a104:	f104 0e14 	add.w	lr, r4, #20
 800a108:	f100 0b14 	add.w	fp, r0, #20
 800a10c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a110:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a114:	9301      	str	r3, [sp, #4]
 800a116:	46d9      	mov	r9, fp
 800a118:	f04f 0c00 	mov.w	ip, #0
 800a11c:	9b01      	ldr	r3, [sp, #4]
 800a11e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a122:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a126:	9301      	str	r3, [sp, #4]
 800a128:	fa1f f38a 	uxth.w	r3, sl
 800a12c:	4619      	mov	r1, r3
 800a12e:	b283      	uxth	r3, r0
 800a130:	1acb      	subs	r3, r1, r3
 800a132:	0c00      	lsrs	r0, r0, #16
 800a134:	4463      	add	r3, ip
 800a136:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a13a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a13e:	b29b      	uxth	r3, r3
 800a140:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a144:	4576      	cmp	r6, lr
 800a146:	f849 3b04 	str.w	r3, [r9], #4
 800a14a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a14e:	d8e5      	bhi.n	800a11c <__mdiff+0x88>
 800a150:	1b33      	subs	r3, r6, r4
 800a152:	3b15      	subs	r3, #21
 800a154:	f023 0303 	bic.w	r3, r3, #3
 800a158:	3415      	adds	r4, #21
 800a15a:	3304      	adds	r3, #4
 800a15c:	42a6      	cmp	r6, r4
 800a15e:	bf38      	it	cc
 800a160:	2304      	movcc	r3, #4
 800a162:	441d      	add	r5, r3
 800a164:	445b      	add	r3, fp
 800a166:	461e      	mov	r6, r3
 800a168:	462c      	mov	r4, r5
 800a16a:	4544      	cmp	r4, r8
 800a16c:	d30e      	bcc.n	800a18c <__mdiff+0xf8>
 800a16e:	f108 0103 	add.w	r1, r8, #3
 800a172:	1b49      	subs	r1, r1, r5
 800a174:	f021 0103 	bic.w	r1, r1, #3
 800a178:	3d03      	subs	r5, #3
 800a17a:	45a8      	cmp	r8, r5
 800a17c:	bf38      	it	cc
 800a17e:	2100      	movcc	r1, #0
 800a180:	440b      	add	r3, r1
 800a182:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a186:	b191      	cbz	r1, 800a1ae <__mdiff+0x11a>
 800a188:	6117      	str	r7, [r2, #16]
 800a18a:	e79d      	b.n	800a0c8 <__mdiff+0x34>
 800a18c:	f854 1b04 	ldr.w	r1, [r4], #4
 800a190:	46e6      	mov	lr, ip
 800a192:	0c08      	lsrs	r0, r1, #16
 800a194:	fa1c fc81 	uxtah	ip, ip, r1
 800a198:	4471      	add	r1, lr
 800a19a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a19e:	b289      	uxth	r1, r1
 800a1a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a1a4:	f846 1b04 	str.w	r1, [r6], #4
 800a1a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a1ac:	e7dd      	b.n	800a16a <__mdiff+0xd6>
 800a1ae:	3f01      	subs	r7, #1
 800a1b0:	e7e7      	b.n	800a182 <__mdiff+0xee>
 800a1b2:	bf00      	nop
 800a1b4:	0800aaf0 	.word	0x0800aaf0
 800a1b8:	0800ab01 	.word	0x0800ab01

0800a1bc <__d2b>:
 800a1bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a1c0:	460f      	mov	r7, r1
 800a1c2:	2101      	movs	r1, #1
 800a1c4:	ec59 8b10 	vmov	r8, r9, d0
 800a1c8:	4616      	mov	r6, r2
 800a1ca:	f7ff fcd5 	bl	8009b78 <_Balloc>
 800a1ce:	4604      	mov	r4, r0
 800a1d0:	b930      	cbnz	r0, 800a1e0 <__d2b+0x24>
 800a1d2:	4602      	mov	r2, r0
 800a1d4:	4b23      	ldr	r3, [pc, #140]	@ (800a264 <__d2b+0xa8>)
 800a1d6:	4824      	ldr	r0, [pc, #144]	@ (800a268 <__d2b+0xac>)
 800a1d8:	f240 310f 	movw	r1, #783	@ 0x30f
 800a1dc:	f000 f902 	bl	800a3e4 <__assert_func>
 800a1e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a1e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a1e8:	b10d      	cbz	r5, 800a1ee <__d2b+0x32>
 800a1ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a1ee:	9301      	str	r3, [sp, #4]
 800a1f0:	f1b8 0300 	subs.w	r3, r8, #0
 800a1f4:	d023      	beq.n	800a23e <__d2b+0x82>
 800a1f6:	4668      	mov	r0, sp
 800a1f8:	9300      	str	r3, [sp, #0]
 800a1fa:	f7ff fd84 	bl	8009d06 <__lo0bits>
 800a1fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a202:	b1d0      	cbz	r0, 800a23a <__d2b+0x7e>
 800a204:	f1c0 0320 	rsb	r3, r0, #32
 800a208:	fa02 f303 	lsl.w	r3, r2, r3
 800a20c:	430b      	orrs	r3, r1
 800a20e:	40c2      	lsrs	r2, r0
 800a210:	6163      	str	r3, [r4, #20]
 800a212:	9201      	str	r2, [sp, #4]
 800a214:	9b01      	ldr	r3, [sp, #4]
 800a216:	61a3      	str	r3, [r4, #24]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	bf0c      	ite	eq
 800a21c:	2201      	moveq	r2, #1
 800a21e:	2202      	movne	r2, #2
 800a220:	6122      	str	r2, [r4, #16]
 800a222:	b1a5      	cbz	r5, 800a24e <__d2b+0x92>
 800a224:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a228:	4405      	add	r5, r0
 800a22a:	603d      	str	r5, [r7, #0]
 800a22c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a230:	6030      	str	r0, [r6, #0]
 800a232:	4620      	mov	r0, r4
 800a234:	b003      	add	sp, #12
 800a236:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a23a:	6161      	str	r1, [r4, #20]
 800a23c:	e7ea      	b.n	800a214 <__d2b+0x58>
 800a23e:	a801      	add	r0, sp, #4
 800a240:	f7ff fd61 	bl	8009d06 <__lo0bits>
 800a244:	9b01      	ldr	r3, [sp, #4]
 800a246:	6163      	str	r3, [r4, #20]
 800a248:	3020      	adds	r0, #32
 800a24a:	2201      	movs	r2, #1
 800a24c:	e7e8      	b.n	800a220 <__d2b+0x64>
 800a24e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a252:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a256:	6038      	str	r0, [r7, #0]
 800a258:	6918      	ldr	r0, [r3, #16]
 800a25a:	f7ff fd35 	bl	8009cc8 <__hi0bits>
 800a25e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a262:	e7e5      	b.n	800a230 <__d2b+0x74>
 800a264:	0800aaf0 	.word	0x0800aaf0
 800a268:	0800ab01 	.word	0x0800ab01

0800a26c <__sflush_r>:
 800a26c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a274:	0716      	lsls	r6, r2, #28
 800a276:	4605      	mov	r5, r0
 800a278:	460c      	mov	r4, r1
 800a27a:	d454      	bmi.n	800a326 <__sflush_r+0xba>
 800a27c:	684b      	ldr	r3, [r1, #4]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	dc02      	bgt.n	800a288 <__sflush_r+0x1c>
 800a282:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a284:	2b00      	cmp	r3, #0
 800a286:	dd48      	ble.n	800a31a <__sflush_r+0xae>
 800a288:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a28a:	2e00      	cmp	r6, #0
 800a28c:	d045      	beq.n	800a31a <__sflush_r+0xae>
 800a28e:	2300      	movs	r3, #0
 800a290:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a294:	682f      	ldr	r7, [r5, #0]
 800a296:	6a21      	ldr	r1, [r4, #32]
 800a298:	602b      	str	r3, [r5, #0]
 800a29a:	d030      	beq.n	800a2fe <__sflush_r+0x92>
 800a29c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a29e:	89a3      	ldrh	r3, [r4, #12]
 800a2a0:	0759      	lsls	r1, r3, #29
 800a2a2:	d505      	bpl.n	800a2b0 <__sflush_r+0x44>
 800a2a4:	6863      	ldr	r3, [r4, #4]
 800a2a6:	1ad2      	subs	r2, r2, r3
 800a2a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a2aa:	b10b      	cbz	r3, 800a2b0 <__sflush_r+0x44>
 800a2ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a2ae:	1ad2      	subs	r2, r2, r3
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a2b4:	6a21      	ldr	r1, [r4, #32]
 800a2b6:	4628      	mov	r0, r5
 800a2b8:	47b0      	blx	r6
 800a2ba:	1c43      	adds	r3, r0, #1
 800a2bc:	89a3      	ldrh	r3, [r4, #12]
 800a2be:	d106      	bne.n	800a2ce <__sflush_r+0x62>
 800a2c0:	6829      	ldr	r1, [r5, #0]
 800a2c2:	291d      	cmp	r1, #29
 800a2c4:	d82b      	bhi.n	800a31e <__sflush_r+0xb2>
 800a2c6:	4a2a      	ldr	r2, [pc, #168]	@ (800a370 <__sflush_r+0x104>)
 800a2c8:	40ca      	lsrs	r2, r1
 800a2ca:	07d6      	lsls	r6, r2, #31
 800a2cc:	d527      	bpl.n	800a31e <__sflush_r+0xb2>
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	6062      	str	r2, [r4, #4]
 800a2d2:	04d9      	lsls	r1, r3, #19
 800a2d4:	6922      	ldr	r2, [r4, #16]
 800a2d6:	6022      	str	r2, [r4, #0]
 800a2d8:	d504      	bpl.n	800a2e4 <__sflush_r+0x78>
 800a2da:	1c42      	adds	r2, r0, #1
 800a2dc:	d101      	bne.n	800a2e2 <__sflush_r+0x76>
 800a2de:	682b      	ldr	r3, [r5, #0]
 800a2e0:	b903      	cbnz	r3, 800a2e4 <__sflush_r+0x78>
 800a2e2:	6560      	str	r0, [r4, #84]	@ 0x54
 800a2e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a2e6:	602f      	str	r7, [r5, #0]
 800a2e8:	b1b9      	cbz	r1, 800a31a <__sflush_r+0xae>
 800a2ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a2ee:	4299      	cmp	r1, r3
 800a2f0:	d002      	beq.n	800a2f8 <__sflush_r+0x8c>
 800a2f2:	4628      	mov	r0, r5
 800a2f4:	f7ff fb40 	bl	8009978 <_free_r>
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	6363      	str	r3, [r4, #52]	@ 0x34
 800a2fc:	e00d      	b.n	800a31a <__sflush_r+0xae>
 800a2fe:	2301      	movs	r3, #1
 800a300:	4628      	mov	r0, r5
 800a302:	47b0      	blx	r6
 800a304:	4602      	mov	r2, r0
 800a306:	1c50      	adds	r0, r2, #1
 800a308:	d1c9      	bne.n	800a29e <__sflush_r+0x32>
 800a30a:	682b      	ldr	r3, [r5, #0]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d0c6      	beq.n	800a29e <__sflush_r+0x32>
 800a310:	2b1d      	cmp	r3, #29
 800a312:	d001      	beq.n	800a318 <__sflush_r+0xac>
 800a314:	2b16      	cmp	r3, #22
 800a316:	d11e      	bne.n	800a356 <__sflush_r+0xea>
 800a318:	602f      	str	r7, [r5, #0]
 800a31a:	2000      	movs	r0, #0
 800a31c:	e022      	b.n	800a364 <__sflush_r+0xf8>
 800a31e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a322:	b21b      	sxth	r3, r3
 800a324:	e01b      	b.n	800a35e <__sflush_r+0xf2>
 800a326:	690f      	ldr	r7, [r1, #16]
 800a328:	2f00      	cmp	r7, #0
 800a32a:	d0f6      	beq.n	800a31a <__sflush_r+0xae>
 800a32c:	0793      	lsls	r3, r2, #30
 800a32e:	680e      	ldr	r6, [r1, #0]
 800a330:	bf08      	it	eq
 800a332:	694b      	ldreq	r3, [r1, #20]
 800a334:	600f      	str	r7, [r1, #0]
 800a336:	bf18      	it	ne
 800a338:	2300      	movne	r3, #0
 800a33a:	eba6 0807 	sub.w	r8, r6, r7
 800a33e:	608b      	str	r3, [r1, #8]
 800a340:	f1b8 0f00 	cmp.w	r8, #0
 800a344:	dde9      	ble.n	800a31a <__sflush_r+0xae>
 800a346:	6a21      	ldr	r1, [r4, #32]
 800a348:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a34a:	4643      	mov	r3, r8
 800a34c:	463a      	mov	r2, r7
 800a34e:	4628      	mov	r0, r5
 800a350:	47b0      	blx	r6
 800a352:	2800      	cmp	r0, #0
 800a354:	dc08      	bgt.n	800a368 <__sflush_r+0xfc>
 800a356:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a35a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a35e:	81a3      	strh	r3, [r4, #12]
 800a360:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a368:	4407      	add	r7, r0
 800a36a:	eba8 0800 	sub.w	r8, r8, r0
 800a36e:	e7e7      	b.n	800a340 <__sflush_r+0xd4>
 800a370:	20400001 	.word	0x20400001

0800a374 <_fflush_r>:
 800a374:	b538      	push	{r3, r4, r5, lr}
 800a376:	690b      	ldr	r3, [r1, #16]
 800a378:	4605      	mov	r5, r0
 800a37a:	460c      	mov	r4, r1
 800a37c:	b913      	cbnz	r3, 800a384 <_fflush_r+0x10>
 800a37e:	2500      	movs	r5, #0
 800a380:	4628      	mov	r0, r5
 800a382:	bd38      	pop	{r3, r4, r5, pc}
 800a384:	b118      	cbz	r0, 800a38e <_fflush_r+0x1a>
 800a386:	6a03      	ldr	r3, [r0, #32]
 800a388:	b90b      	cbnz	r3, 800a38e <_fflush_r+0x1a>
 800a38a:	f7fe fb95 	bl	8008ab8 <__sinit>
 800a38e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d0f3      	beq.n	800a37e <_fflush_r+0xa>
 800a396:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a398:	07d0      	lsls	r0, r2, #31
 800a39a:	d404      	bmi.n	800a3a6 <_fflush_r+0x32>
 800a39c:	0599      	lsls	r1, r3, #22
 800a39e:	d402      	bmi.n	800a3a6 <_fflush_r+0x32>
 800a3a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a3a2:	f7fe fc80 	bl	8008ca6 <__retarget_lock_acquire_recursive>
 800a3a6:	4628      	mov	r0, r5
 800a3a8:	4621      	mov	r1, r4
 800a3aa:	f7ff ff5f 	bl	800a26c <__sflush_r>
 800a3ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a3b0:	07da      	lsls	r2, r3, #31
 800a3b2:	4605      	mov	r5, r0
 800a3b4:	d4e4      	bmi.n	800a380 <_fflush_r+0xc>
 800a3b6:	89a3      	ldrh	r3, [r4, #12]
 800a3b8:	059b      	lsls	r3, r3, #22
 800a3ba:	d4e1      	bmi.n	800a380 <_fflush_r+0xc>
 800a3bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a3be:	f7fe fc73 	bl	8008ca8 <__retarget_lock_release_recursive>
 800a3c2:	e7dd      	b.n	800a380 <_fflush_r+0xc>

0800a3c4 <_sbrk_r>:
 800a3c4:	b538      	push	{r3, r4, r5, lr}
 800a3c6:	4d06      	ldr	r5, [pc, #24]	@ (800a3e0 <_sbrk_r+0x1c>)
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	4604      	mov	r4, r0
 800a3cc:	4608      	mov	r0, r1
 800a3ce:	602b      	str	r3, [r5, #0]
 800a3d0:	f7f8 fcfa 	bl	8002dc8 <_sbrk>
 800a3d4:	1c43      	adds	r3, r0, #1
 800a3d6:	d102      	bne.n	800a3de <_sbrk_r+0x1a>
 800a3d8:	682b      	ldr	r3, [r5, #0]
 800a3da:	b103      	cbz	r3, 800a3de <_sbrk_r+0x1a>
 800a3dc:	6023      	str	r3, [r4, #0]
 800a3de:	bd38      	pop	{r3, r4, r5, pc}
 800a3e0:	2000073c 	.word	0x2000073c

0800a3e4 <__assert_func>:
 800a3e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a3e6:	4614      	mov	r4, r2
 800a3e8:	461a      	mov	r2, r3
 800a3ea:	4b09      	ldr	r3, [pc, #36]	@ (800a410 <__assert_func+0x2c>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	4605      	mov	r5, r0
 800a3f0:	68d8      	ldr	r0, [r3, #12]
 800a3f2:	b14c      	cbz	r4, 800a408 <__assert_func+0x24>
 800a3f4:	4b07      	ldr	r3, [pc, #28]	@ (800a414 <__assert_func+0x30>)
 800a3f6:	9100      	str	r1, [sp, #0]
 800a3f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a3fc:	4906      	ldr	r1, [pc, #24]	@ (800a418 <__assert_func+0x34>)
 800a3fe:	462b      	mov	r3, r5
 800a400:	f000 f842 	bl	800a488 <fiprintf>
 800a404:	f000 f852 	bl	800a4ac <abort>
 800a408:	4b04      	ldr	r3, [pc, #16]	@ (800a41c <__assert_func+0x38>)
 800a40a:	461c      	mov	r4, r3
 800a40c:	e7f3      	b.n	800a3f6 <__assert_func+0x12>
 800a40e:	bf00      	nop
 800a410:	20000064 	.word	0x20000064
 800a414:	0800ab64 	.word	0x0800ab64
 800a418:	0800ab71 	.word	0x0800ab71
 800a41c:	0800ab9f 	.word	0x0800ab9f

0800a420 <_calloc_r>:
 800a420:	b570      	push	{r4, r5, r6, lr}
 800a422:	fba1 5402 	umull	r5, r4, r1, r2
 800a426:	b934      	cbnz	r4, 800a436 <_calloc_r+0x16>
 800a428:	4629      	mov	r1, r5
 800a42a:	f7ff fb19 	bl	8009a60 <_malloc_r>
 800a42e:	4606      	mov	r6, r0
 800a430:	b928      	cbnz	r0, 800a43e <_calloc_r+0x1e>
 800a432:	4630      	mov	r0, r6
 800a434:	bd70      	pop	{r4, r5, r6, pc}
 800a436:	220c      	movs	r2, #12
 800a438:	6002      	str	r2, [r0, #0]
 800a43a:	2600      	movs	r6, #0
 800a43c:	e7f9      	b.n	800a432 <_calloc_r+0x12>
 800a43e:	462a      	mov	r2, r5
 800a440:	4621      	mov	r1, r4
 800a442:	f7fe fbb2 	bl	8008baa <memset>
 800a446:	e7f4      	b.n	800a432 <_calloc_r+0x12>

0800a448 <__ascii_mbtowc>:
 800a448:	b082      	sub	sp, #8
 800a44a:	b901      	cbnz	r1, 800a44e <__ascii_mbtowc+0x6>
 800a44c:	a901      	add	r1, sp, #4
 800a44e:	b142      	cbz	r2, 800a462 <__ascii_mbtowc+0x1a>
 800a450:	b14b      	cbz	r3, 800a466 <__ascii_mbtowc+0x1e>
 800a452:	7813      	ldrb	r3, [r2, #0]
 800a454:	600b      	str	r3, [r1, #0]
 800a456:	7812      	ldrb	r2, [r2, #0]
 800a458:	1e10      	subs	r0, r2, #0
 800a45a:	bf18      	it	ne
 800a45c:	2001      	movne	r0, #1
 800a45e:	b002      	add	sp, #8
 800a460:	4770      	bx	lr
 800a462:	4610      	mov	r0, r2
 800a464:	e7fb      	b.n	800a45e <__ascii_mbtowc+0x16>
 800a466:	f06f 0001 	mvn.w	r0, #1
 800a46a:	e7f8      	b.n	800a45e <__ascii_mbtowc+0x16>

0800a46c <__ascii_wctomb>:
 800a46c:	4603      	mov	r3, r0
 800a46e:	4608      	mov	r0, r1
 800a470:	b141      	cbz	r1, 800a484 <__ascii_wctomb+0x18>
 800a472:	2aff      	cmp	r2, #255	@ 0xff
 800a474:	d904      	bls.n	800a480 <__ascii_wctomb+0x14>
 800a476:	228a      	movs	r2, #138	@ 0x8a
 800a478:	601a      	str	r2, [r3, #0]
 800a47a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a47e:	4770      	bx	lr
 800a480:	700a      	strb	r2, [r1, #0]
 800a482:	2001      	movs	r0, #1
 800a484:	4770      	bx	lr
	...

0800a488 <fiprintf>:
 800a488:	b40e      	push	{r1, r2, r3}
 800a48a:	b503      	push	{r0, r1, lr}
 800a48c:	4601      	mov	r1, r0
 800a48e:	ab03      	add	r3, sp, #12
 800a490:	4805      	ldr	r0, [pc, #20]	@ (800a4a8 <fiprintf+0x20>)
 800a492:	f853 2b04 	ldr.w	r2, [r3], #4
 800a496:	6800      	ldr	r0, [r0, #0]
 800a498:	9301      	str	r3, [sp, #4]
 800a49a:	f000 f837 	bl	800a50c <_vfiprintf_r>
 800a49e:	b002      	add	sp, #8
 800a4a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4a4:	b003      	add	sp, #12
 800a4a6:	4770      	bx	lr
 800a4a8:	20000064 	.word	0x20000064

0800a4ac <abort>:
 800a4ac:	b508      	push	{r3, lr}
 800a4ae:	2006      	movs	r0, #6
 800a4b0:	f000 fa00 	bl	800a8b4 <raise>
 800a4b4:	2001      	movs	r0, #1
 800a4b6:	f7f8 fc0f 	bl	8002cd8 <_exit>

0800a4ba <__sfputc_r>:
 800a4ba:	6893      	ldr	r3, [r2, #8]
 800a4bc:	3b01      	subs	r3, #1
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	b410      	push	{r4}
 800a4c2:	6093      	str	r3, [r2, #8]
 800a4c4:	da08      	bge.n	800a4d8 <__sfputc_r+0x1e>
 800a4c6:	6994      	ldr	r4, [r2, #24]
 800a4c8:	42a3      	cmp	r3, r4
 800a4ca:	db01      	blt.n	800a4d0 <__sfputc_r+0x16>
 800a4cc:	290a      	cmp	r1, #10
 800a4ce:	d103      	bne.n	800a4d8 <__sfputc_r+0x1e>
 800a4d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4d4:	f000 b932 	b.w	800a73c <__swbuf_r>
 800a4d8:	6813      	ldr	r3, [r2, #0]
 800a4da:	1c58      	adds	r0, r3, #1
 800a4dc:	6010      	str	r0, [r2, #0]
 800a4de:	7019      	strb	r1, [r3, #0]
 800a4e0:	4608      	mov	r0, r1
 800a4e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4e6:	4770      	bx	lr

0800a4e8 <__sfputs_r>:
 800a4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ea:	4606      	mov	r6, r0
 800a4ec:	460f      	mov	r7, r1
 800a4ee:	4614      	mov	r4, r2
 800a4f0:	18d5      	adds	r5, r2, r3
 800a4f2:	42ac      	cmp	r4, r5
 800a4f4:	d101      	bne.n	800a4fa <__sfputs_r+0x12>
 800a4f6:	2000      	movs	r0, #0
 800a4f8:	e007      	b.n	800a50a <__sfputs_r+0x22>
 800a4fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4fe:	463a      	mov	r2, r7
 800a500:	4630      	mov	r0, r6
 800a502:	f7ff ffda 	bl	800a4ba <__sfputc_r>
 800a506:	1c43      	adds	r3, r0, #1
 800a508:	d1f3      	bne.n	800a4f2 <__sfputs_r+0xa>
 800a50a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a50c <_vfiprintf_r>:
 800a50c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a510:	460d      	mov	r5, r1
 800a512:	b09d      	sub	sp, #116	@ 0x74
 800a514:	4614      	mov	r4, r2
 800a516:	4698      	mov	r8, r3
 800a518:	4606      	mov	r6, r0
 800a51a:	b118      	cbz	r0, 800a524 <_vfiprintf_r+0x18>
 800a51c:	6a03      	ldr	r3, [r0, #32]
 800a51e:	b90b      	cbnz	r3, 800a524 <_vfiprintf_r+0x18>
 800a520:	f7fe faca 	bl	8008ab8 <__sinit>
 800a524:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a526:	07d9      	lsls	r1, r3, #31
 800a528:	d405      	bmi.n	800a536 <_vfiprintf_r+0x2a>
 800a52a:	89ab      	ldrh	r3, [r5, #12]
 800a52c:	059a      	lsls	r2, r3, #22
 800a52e:	d402      	bmi.n	800a536 <_vfiprintf_r+0x2a>
 800a530:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a532:	f7fe fbb8 	bl	8008ca6 <__retarget_lock_acquire_recursive>
 800a536:	89ab      	ldrh	r3, [r5, #12]
 800a538:	071b      	lsls	r3, r3, #28
 800a53a:	d501      	bpl.n	800a540 <_vfiprintf_r+0x34>
 800a53c:	692b      	ldr	r3, [r5, #16]
 800a53e:	b99b      	cbnz	r3, 800a568 <_vfiprintf_r+0x5c>
 800a540:	4629      	mov	r1, r5
 800a542:	4630      	mov	r0, r6
 800a544:	f000 f938 	bl	800a7b8 <__swsetup_r>
 800a548:	b170      	cbz	r0, 800a568 <_vfiprintf_r+0x5c>
 800a54a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a54c:	07dc      	lsls	r4, r3, #31
 800a54e:	d504      	bpl.n	800a55a <_vfiprintf_r+0x4e>
 800a550:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a554:	b01d      	add	sp, #116	@ 0x74
 800a556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a55a:	89ab      	ldrh	r3, [r5, #12]
 800a55c:	0598      	lsls	r0, r3, #22
 800a55e:	d4f7      	bmi.n	800a550 <_vfiprintf_r+0x44>
 800a560:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a562:	f7fe fba1 	bl	8008ca8 <__retarget_lock_release_recursive>
 800a566:	e7f3      	b.n	800a550 <_vfiprintf_r+0x44>
 800a568:	2300      	movs	r3, #0
 800a56a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a56c:	2320      	movs	r3, #32
 800a56e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a572:	f8cd 800c 	str.w	r8, [sp, #12]
 800a576:	2330      	movs	r3, #48	@ 0x30
 800a578:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a728 <_vfiprintf_r+0x21c>
 800a57c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a580:	f04f 0901 	mov.w	r9, #1
 800a584:	4623      	mov	r3, r4
 800a586:	469a      	mov	sl, r3
 800a588:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a58c:	b10a      	cbz	r2, 800a592 <_vfiprintf_r+0x86>
 800a58e:	2a25      	cmp	r2, #37	@ 0x25
 800a590:	d1f9      	bne.n	800a586 <_vfiprintf_r+0x7a>
 800a592:	ebba 0b04 	subs.w	fp, sl, r4
 800a596:	d00b      	beq.n	800a5b0 <_vfiprintf_r+0xa4>
 800a598:	465b      	mov	r3, fp
 800a59a:	4622      	mov	r2, r4
 800a59c:	4629      	mov	r1, r5
 800a59e:	4630      	mov	r0, r6
 800a5a0:	f7ff ffa2 	bl	800a4e8 <__sfputs_r>
 800a5a4:	3001      	adds	r0, #1
 800a5a6:	f000 80a7 	beq.w	800a6f8 <_vfiprintf_r+0x1ec>
 800a5aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a5ac:	445a      	add	r2, fp
 800a5ae:	9209      	str	r2, [sp, #36]	@ 0x24
 800a5b0:	f89a 3000 	ldrb.w	r3, [sl]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	f000 809f 	beq.w	800a6f8 <_vfiprintf_r+0x1ec>
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a5c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5c4:	f10a 0a01 	add.w	sl, sl, #1
 800a5c8:	9304      	str	r3, [sp, #16]
 800a5ca:	9307      	str	r3, [sp, #28]
 800a5cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a5d0:	931a      	str	r3, [sp, #104]	@ 0x68
 800a5d2:	4654      	mov	r4, sl
 800a5d4:	2205      	movs	r2, #5
 800a5d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5da:	4853      	ldr	r0, [pc, #332]	@ (800a728 <_vfiprintf_r+0x21c>)
 800a5dc:	f7f5 fe20 	bl	8000220 <memchr>
 800a5e0:	9a04      	ldr	r2, [sp, #16]
 800a5e2:	b9d8      	cbnz	r0, 800a61c <_vfiprintf_r+0x110>
 800a5e4:	06d1      	lsls	r1, r2, #27
 800a5e6:	bf44      	itt	mi
 800a5e8:	2320      	movmi	r3, #32
 800a5ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a5ee:	0713      	lsls	r3, r2, #28
 800a5f0:	bf44      	itt	mi
 800a5f2:	232b      	movmi	r3, #43	@ 0x2b
 800a5f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a5f8:	f89a 3000 	ldrb.w	r3, [sl]
 800a5fc:	2b2a      	cmp	r3, #42	@ 0x2a
 800a5fe:	d015      	beq.n	800a62c <_vfiprintf_r+0x120>
 800a600:	9a07      	ldr	r2, [sp, #28]
 800a602:	4654      	mov	r4, sl
 800a604:	2000      	movs	r0, #0
 800a606:	f04f 0c0a 	mov.w	ip, #10
 800a60a:	4621      	mov	r1, r4
 800a60c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a610:	3b30      	subs	r3, #48	@ 0x30
 800a612:	2b09      	cmp	r3, #9
 800a614:	d94b      	bls.n	800a6ae <_vfiprintf_r+0x1a2>
 800a616:	b1b0      	cbz	r0, 800a646 <_vfiprintf_r+0x13a>
 800a618:	9207      	str	r2, [sp, #28]
 800a61a:	e014      	b.n	800a646 <_vfiprintf_r+0x13a>
 800a61c:	eba0 0308 	sub.w	r3, r0, r8
 800a620:	fa09 f303 	lsl.w	r3, r9, r3
 800a624:	4313      	orrs	r3, r2
 800a626:	9304      	str	r3, [sp, #16]
 800a628:	46a2      	mov	sl, r4
 800a62a:	e7d2      	b.n	800a5d2 <_vfiprintf_r+0xc6>
 800a62c:	9b03      	ldr	r3, [sp, #12]
 800a62e:	1d19      	adds	r1, r3, #4
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	9103      	str	r1, [sp, #12]
 800a634:	2b00      	cmp	r3, #0
 800a636:	bfbb      	ittet	lt
 800a638:	425b      	neglt	r3, r3
 800a63a:	f042 0202 	orrlt.w	r2, r2, #2
 800a63e:	9307      	strge	r3, [sp, #28]
 800a640:	9307      	strlt	r3, [sp, #28]
 800a642:	bfb8      	it	lt
 800a644:	9204      	strlt	r2, [sp, #16]
 800a646:	7823      	ldrb	r3, [r4, #0]
 800a648:	2b2e      	cmp	r3, #46	@ 0x2e
 800a64a:	d10a      	bne.n	800a662 <_vfiprintf_r+0x156>
 800a64c:	7863      	ldrb	r3, [r4, #1]
 800a64e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a650:	d132      	bne.n	800a6b8 <_vfiprintf_r+0x1ac>
 800a652:	9b03      	ldr	r3, [sp, #12]
 800a654:	1d1a      	adds	r2, r3, #4
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	9203      	str	r2, [sp, #12]
 800a65a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a65e:	3402      	adds	r4, #2
 800a660:	9305      	str	r3, [sp, #20]
 800a662:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a738 <_vfiprintf_r+0x22c>
 800a666:	7821      	ldrb	r1, [r4, #0]
 800a668:	2203      	movs	r2, #3
 800a66a:	4650      	mov	r0, sl
 800a66c:	f7f5 fdd8 	bl	8000220 <memchr>
 800a670:	b138      	cbz	r0, 800a682 <_vfiprintf_r+0x176>
 800a672:	9b04      	ldr	r3, [sp, #16]
 800a674:	eba0 000a 	sub.w	r0, r0, sl
 800a678:	2240      	movs	r2, #64	@ 0x40
 800a67a:	4082      	lsls	r2, r0
 800a67c:	4313      	orrs	r3, r2
 800a67e:	3401      	adds	r4, #1
 800a680:	9304      	str	r3, [sp, #16]
 800a682:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a686:	4829      	ldr	r0, [pc, #164]	@ (800a72c <_vfiprintf_r+0x220>)
 800a688:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a68c:	2206      	movs	r2, #6
 800a68e:	f7f5 fdc7 	bl	8000220 <memchr>
 800a692:	2800      	cmp	r0, #0
 800a694:	d03f      	beq.n	800a716 <_vfiprintf_r+0x20a>
 800a696:	4b26      	ldr	r3, [pc, #152]	@ (800a730 <_vfiprintf_r+0x224>)
 800a698:	bb1b      	cbnz	r3, 800a6e2 <_vfiprintf_r+0x1d6>
 800a69a:	9b03      	ldr	r3, [sp, #12]
 800a69c:	3307      	adds	r3, #7
 800a69e:	f023 0307 	bic.w	r3, r3, #7
 800a6a2:	3308      	adds	r3, #8
 800a6a4:	9303      	str	r3, [sp, #12]
 800a6a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6a8:	443b      	add	r3, r7
 800a6aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6ac:	e76a      	b.n	800a584 <_vfiprintf_r+0x78>
 800a6ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6b2:	460c      	mov	r4, r1
 800a6b4:	2001      	movs	r0, #1
 800a6b6:	e7a8      	b.n	800a60a <_vfiprintf_r+0xfe>
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	3401      	adds	r4, #1
 800a6bc:	9305      	str	r3, [sp, #20]
 800a6be:	4619      	mov	r1, r3
 800a6c0:	f04f 0c0a 	mov.w	ip, #10
 800a6c4:	4620      	mov	r0, r4
 800a6c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6ca:	3a30      	subs	r2, #48	@ 0x30
 800a6cc:	2a09      	cmp	r2, #9
 800a6ce:	d903      	bls.n	800a6d8 <_vfiprintf_r+0x1cc>
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d0c6      	beq.n	800a662 <_vfiprintf_r+0x156>
 800a6d4:	9105      	str	r1, [sp, #20]
 800a6d6:	e7c4      	b.n	800a662 <_vfiprintf_r+0x156>
 800a6d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6dc:	4604      	mov	r4, r0
 800a6de:	2301      	movs	r3, #1
 800a6e0:	e7f0      	b.n	800a6c4 <_vfiprintf_r+0x1b8>
 800a6e2:	ab03      	add	r3, sp, #12
 800a6e4:	9300      	str	r3, [sp, #0]
 800a6e6:	462a      	mov	r2, r5
 800a6e8:	4b12      	ldr	r3, [pc, #72]	@ (800a734 <_vfiprintf_r+0x228>)
 800a6ea:	a904      	add	r1, sp, #16
 800a6ec:	4630      	mov	r0, r6
 800a6ee:	f7fd fda1 	bl	8008234 <_printf_float>
 800a6f2:	4607      	mov	r7, r0
 800a6f4:	1c78      	adds	r0, r7, #1
 800a6f6:	d1d6      	bne.n	800a6a6 <_vfiprintf_r+0x19a>
 800a6f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a6fa:	07d9      	lsls	r1, r3, #31
 800a6fc:	d405      	bmi.n	800a70a <_vfiprintf_r+0x1fe>
 800a6fe:	89ab      	ldrh	r3, [r5, #12]
 800a700:	059a      	lsls	r2, r3, #22
 800a702:	d402      	bmi.n	800a70a <_vfiprintf_r+0x1fe>
 800a704:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a706:	f7fe facf 	bl	8008ca8 <__retarget_lock_release_recursive>
 800a70a:	89ab      	ldrh	r3, [r5, #12]
 800a70c:	065b      	lsls	r3, r3, #25
 800a70e:	f53f af1f 	bmi.w	800a550 <_vfiprintf_r+0x44>
 800a712:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a714:	e71e      	b.n	800a554 <_vfiprintf_r+0x48>
 800a716:	ab03      	add	r3, sp, #12
 800a718:	9300      	str	r3, [sp, #0]
 800a71a:	462a      	mov	r2, r5
 800a71c:	4b05      	ldr	r3, [pc, #20]	@ (800a734 <_vfiprintf_r+0x228>)
 800a71e:	a904      	add	r1, sp, #16
 800a720:	4630      	mov	r0, r6
 800a722:	f7fe f81f 	bl	8008764 <_printf_i>
 800a726:	e7e4      	b.n	800a6f2 <_vfiprintf_r+0x1e6>
 800a728:	0800aba0 	.word	0x0800aba0
 800a72c:	0800abaa 	.word	0x0800abaa
 800a730:	08008235 	.word	0x08008235
 800a734:	0800a4e9 	.word	0x0800a4e9
 800a738:	0800aba6 	.word	0x0800aba6

0800a73c <__swbuf_r>:
 800a73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a73e:	460e      	mov	r6, r1
 800a740:	4614      	mov	r4, r2
 800a742:	4605      	mov	r5, r0
 800a744:	b118      	cbz	r0, 800a74e <__swbuf_r+0x12>
 800a746:	6a03      	ldr	r3, [r0, #32]
 800a748:	b90b      	cbnz	r3, 800a74e <__swbuf_r+0x12>
 800a74a:	f7fe f9b5 	bl	8008ab8 <__sinit>
 800a74e:	69a3      	ldr	r3, [r4, #24]
 800a750:	60a3      	str	r3, [r4, #8]
 800a752:	89a3      	ldrh	r3, [r4, #12]
 800a754:	071a      	lsls	r2, r3, #28
 800a756:	d501      	bpl.n	800a75c <__swbuf_r+0x20>
 800a758:	6923      	ldr	r3, [r4, #16]
 800a75a:	b943      	cbnz	r3, 800a76e <__swbuf_r+0x32>
 800a75c:	4621      	mov	r1, r4
 800a75e:	4628      	mov	r0, r5
 800a760:	f000 f82a 	bl	800a7b8 <__swsetup_r>
 800a764:	b118      	cbz	r0, 800a76e <__swbuf_r+0x32>
 800a766:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800a76a:	4638      	mov	r0, r7
 800a76c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a76e:	6823      	ldr	r3, [r4, #0]
 800a770:	6922      	ldr	r2, [r4, #16]
 800a772:	1a98      	subs	r0, r3, r2
 800a774:	6963      	ldr	r3, [r4, #20]
 800a776:	b2f6      	uxtb	r6, r6
 800a778:	4283      	cmp	r3, r0
 800a77a:	4637      	mov	r7, r6
 800a77c:	dc05      	bgt.n	800a78a <__swbuf_r+0x4e>
 800a77e:	4621      	mov	r1, r4
 800a780:	4628      	mov	r0, r5
 800a782:	f7ff fdf7 	bl	800a374 <_fflush_r>
 800a786:	2800      	cmp	r0, #0
 800a788:	d1ed      	bne.n	800a766 <__swbuf_r+0x2a>
 800a78a:	68a3      	ldr	r3, [r4, #8]
 800a78c:	3b01      	subs	r3, #1
 800a78e:	60a3      	str	r3, [r4, #8]
 800a790:	6823      	ldr	r3, [r4, #0]
 800a792:	1c5a      	adds	r2, r3, #1
 800a794:	6022      	str	r2, [r4, #0]
 800a796:	701e      	strb	r6, [r3, #0]
 800a798:	6962      	ldr	r2, [r4, #20]
 800a79a:	1c43      	adds	r3, r0, #1
 800a79c:	429a      	cmp	r2, r3
 800a79e:	d004      	beq.n	800a7aa <__swbuf_r+0x6e>
 800a7a0:	89a3      	ldrh	r3, [r4, #12]
 800a7a2:	07db      	lsls	r3, r3, #31
 800a7a4:	d5e1      	bpl.n	800a76a <__swbuf_r+0x2e>
 800a7a6:	2e0a      	cmp	r6, #10
 800a7a8:	d1df      	bne.n	800a76a <__swbuf_r+0x2e>
 800a7aa:	4621      	mov	r1, r4
 800a7ac:	4628      	mov	r0, r5
 800a7ae:	f7ff fde1 	bl	800a374 <_fflush_r>
 800a7b2:	2800      	cmp	r0, #0
 800a7b4:	d0d9      	beq.n	800a76a <__swbuf_r+0x2e>
 800a7b6:	e7d6      	b.n	800a766 <__swbuf_r+0x2a>

0800a7b8 <__swsetup_r>:
 800a7b8:	b538      	push	{r3, r4, r5, lr}
 800a7ba:	4b29      	ldr	r3, [pc, #164]	@ (800a860 <__swsetup_r+0xa8>)
 800a7bc:	4605      	mov	r5, r0
 800a7be:	6818      	ldr	r0, [r3, #0]
 800a7c0:	460c      	mov	r4, r1
 800a7c2:	b118      	cbz	r0, 800a7cc <__swsetup_r+0x14>
 800a7c4:	6a03      	ldr	r3, [r0, #32]
 800a7c6:	b90b      	cbnz	r3, 800a7cc <__swsetup_r+0x14>
 800a7c8:	f7fe f976 	bl	8008ab8 <__sinit>
 800a7cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7d0:	0719      	lsls	r1, r3, #28
 800a7d2:	d422      	bmi.n	800a81a <__swsetup_r+0x62>
 800a7d4:	06da      	lsls	r2, r3, #27
 800a7d6:	d407      	bmi.n	800a7e8 <__swsetup_r+0x30>
 800a7d8:	2209      	movs	r2, #9
 800a7da:	602a      	str	r2, [r5, #0]
 800a7dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7e0:	81a3      	strh	r3, [r4, #12]
 800a7e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a7e6:	e033      	b.n	800a850 <__swsetup_r+0x98>
 800a7e8:	0758      	lsls	r0, r3, #29
 800a7ea:	d512      	bpl.n	800a812 <__swsetup_r+0x5a>
 800a7ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a7ee:	b141      	cbz	r1, 800a802 <__swsetup_r+0x4a>
 800a7f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a7f4:	4299      	cmp	r1, r3
 800a7f6:	d002      	beq.n	800a7fe <__swsetup_r+0x46>
 800a7f8:	4628      	mov	r0, r5
 800a7fa:	f7ff f8bd 	bl	8009978 <_free_r>
 800a7fe:	2300      	movs	r3, #0
 800a800:	6363      	str	r3, [r4, #52]	@ 0x34
 800a802:	89a3      	ldrh	r3, [r4, #12]
 800a804:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a808:	81a3      	strh	r3, [r4, #12]
 800a80a:	2300      	movs	r3, #0
 800a80c:	6063      	str	r3, [r4, #4]
 800a80e:	6923      	ldr	r3, [r4, #16]
 800a810:	6023      	str	r3, [r4, #0]
 800a812:	89a3      	ldrh	r3, [r4, #12]
 800a814:	f043 0308 	orr.w	r3, r3, #8
 800a818:	81a3      	strh	r3, [r4, #12]
 800a81a:	6923      	ldr	r3, [r4, #16]
 800a81c:	b94b      	cbnz	r3, 800a832 <__swsetup_r+0x7a>
 800a81e:	89a3      	ldrh	r3, [r4, #12]
 800a820:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a824:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a828:	d003      	beq.n	800a832 <__swsetup_r+0x7a>
 800a82a:	4621      	mov	r1, r4
 800a82c:	4628      	mov	r0, r5
 800a82e:	f000 f883 	bl	800a938 <__smakebuf_r>
 800a832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a836:	f013 0201 	ands.w	r2, r3, #1
 800a83a:	d00a      	beq.n	800a852 <__swsetup_r+0x9a>
 800a83c:	2200      	movs	r2, #0
 800a83e:	60a2      	str	r2, [r4, #8]
 800a840:	6962      	ldr	r2, [r4, #20]
 800a842:	4252      	negs	r2, r2
 800a844:	61a2      	str	r2, [r4, #24]
 800a846:	6922      	ldr	r2, [r4, #16]
 800a848:	b942      	cbnz	r2, 800a85c <__swsetup_r+0xa4>
 800a84a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a84e:	d1c5      	bne.n	800a7dc <__swsetup_r+0x24>
 800a850:	bd38      	pop	{r3, r4, r5, pc}
 800a852:	0799      	lsls	r1, r3, #30
 800a854:	bf58      	it	pl
 800a856:	6962      	ldrpl	r2, [r4, #20]
 800a858:	60a2      	str	r2, [r4, #8]
 800a85a:	e7f4      	b.n	800a846 <__swsetup_r+0x8e>
 800a85c:	2000      	movs	r0, #0
 800a85e:	e7f7      	b.n	800a850 <__swsetup_r+0x98>
 800a860:	20000064 	.word	0x20000064

0800a864 <_raise_r>:
 800a864:	291f      	cmp	r1, #31
 800a866:	b538      	push	{r3, r4, r5, lr}
 800a868:	4605      	mov	r5, r0
 800a86a:	460c      	mov	r4, r1
 800a86c:	d904      	bls.n	800a878 <_raise_r+0x14>
 800a86e:	2316      	movs	r3, #22
 800a870:	6003      	str	r3, [r0, #0]
 800a872:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a876:	bd38      	pop	{r3, r4, r5, pc}
 800a878:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a87a:	b112      	cbz	r2, 800a882 <_raise_r+0x1e>
 800a87c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a880:	b94b      	cbnz	r3, 800a896 <_raise_r+0x32>
 800a882:	4628      	mov	r0, r5
 800a884:	f000 f830 	bl	800a8e8 <_getpid_r>
 800a888:	4622      	mov	r2, r4
 800a88a:	4601      	mov	r1, r0
 800a88c:	4628      	mov	r0, r5
 800a88e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a892:	f000 b817 	b.w	800a8c4 <_kill_r>
 800a896:	2b01      	cmp	r3, #1
 800a898:	d00a      	beq.n	800a8b0 <_raise_r+0x4c>
 800a89a:	1c59      	adds	r1, r3, #1
 800a89c:	d103      	bne.n	800a8a6 <_raise_r+0x42>
 800a89e:	2316      	movs	r3, #22
 800a8a0:	6003      	str	r3, [r0, #0]
 800a8a2:	2001      	movs	r0, #1
 800a8a4:	e7e7      	b.n	800a876 <_raise_r+0x12>
 800a8a6:	2100      	movs	r1, #0
 800a8a8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a8ac:	4620      	mov	r0, r4
 800a8ae:	4798      	blx	r3
 800a8b0:	2000      	movs	r0, #0
 800a8b2:	e7e0      	b.n	800a876 <_raise_r+0x12>

0800a8b4 <raise>:
 800a8b4:	4b02      	ldr	r3, [pc, #8]	@ (800a8c0 <raise+0xc>)
 800a8b6:	4601      	mov	r1, r0
 800a8b8:	6818      	ldr	r0, [r3, #0]
 800a8ba:	f7ff bfd3 	b.w	800a864 <_raise_r>
 800a8be:	bf00      	nop
 800a8c0:	20000064 	.word	0x20000064

0800a8c4 <_kill_r>:
 800a8c4:	b538      	push	{r3, r4, r5, lr}
 800a8c6:	4d07      	ldr	r5, [pc, #28]	@ (800a8e4 <_kill_r+0x20>)
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	4604      	mov	r4, r0
 800a8cc:	4608      	mov	r0, r1
 800a8ce:	4611      	mov	r1, r2
 800a8d0:	602b      	str	r3, [r5, #0]
 800a8d2:	f7f8 f9f1 	bl	8002cb8 <_kill>
 800a8d6:	1c43      	adds	r3, r0, #1
 800a8d8:	d102      	bne.n	800a8e0 <_kill_r+0x1c>
 800a8da:	682b      	ldr	r3, [r5, #0]
 800a8dc:	b103      	cbz	r3, 800a8e0 <_kill_r+0x1c>
 800a8de:	6023      	str	r3, [r4, #0]
 800a8e0:	bd38      	pop	{r3, r4, r5, pc}
 800a8e2:	bf00      	nop
 800a8e4:	2000073c 	.word	0x2000073c

0800a8e8 <_getpid_r>:
 800a8e8:	f7f8 b9de 	b.w	8002ca8 <_getpid>

0800a8ec <__swhatbuf_r>:
 800a8ec:	b570      	push	{r4, r5, r6, lr}
 800a8ee:	460c      	mov	r4, r1
 800a8f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8f4:	2900      	cmp	r1, #0
 800a8f6:	b096      	sub	sp, #88	@ 0x58
 800a8f8:	4615      	mov	r5, r2
 800a8fa:	461e      	mov	r6, r3
 800a8fc:	da0d      	bge.n	800a91a <__swhatbuf_r+0x2e>
 800a8fe:	89a3      	ldrh	r3, [r4, #12]
 800a900:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a904:	f04f 0100 	mov.w	r1, #0
 800a908:	bf14      	ite	ne
 800a90a:	2340      	movne	r3, #64	@ 0x40
 800a90c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a910:	2000      	movs	r0, #0
 800a912:	6031      	str	r1, [r6, #0]
 800a914:	602b      	str	r3, [r5, #0]
 800a916:	b016      	add	sp, #88	@ 0x58
 800a918:	bd70      	pop	{r4, r5, r6, pc}
 800a91a:	466a      	mov	r2, sp
 800a91c:	f000 f848 	bl	800a9b0 <_fstat_r>
 800a920:	2800      	cmp	r0, #0
 800a922:	dbec      	blt.n	800a8fe <__swhatbuf_r+0x12>
 800a924:	9901      	ldr	r1, [sp, #4]
 800a926:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a92a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a92e:	4259      	negs	r1, r3
 800a930:	4159      	adcs	r1, r3
 800a932:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a936:	e7eb      	b.n	800a910 <__swhatbuf_r+0x24>

0800a938 <__smakebuf_r>:
 800a938:	898b      	ldrh	r3, [r1, #12]
 800a93a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a93c:	079d      	lsls	r5, r3, #30
 800a93e:	4606      	mov	r6, r0
 800a940:	460c      	mov	r4, r1
 800a942:	d507      	bpl.n	800a954 <__smakebuf_r+0x1c>
 800a944:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a948:	6023      	str	r3, [r4, #0]
 800a94a:	6123      	str	r3, [r4, #16]
 800a94c:	2301      	movs	r3, #1
 800a94e:	6163      	str	r3, [r4, #20]
 800a950:	b003      	add	sp, #12
 800a952:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a954:	ab01      	add	r3, sp, #4
 800a956:	466a      	mov	r2, sp
 800a958:	f7ff ffc8 	bl	800a8ec <__swhatbuf_r>
 800a95c:	9f00      	ldr	r7, [sp, #0]
 800a95e:	4605      	mov	r5, r0
 800a960:	4639      	mov	r1, r7
 800a962:	4630      	mov	r0, r6
 800a964:	f7ff f87c 	bl	8009a60 <_malloc_r>
 800a968:	b948      	cbnz	r0, 800a97e <__smakebuf_r+0x46>
 800a96a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a96e:	059a      	lsls	r2, r3, #22
 800a970:	d4ee      	bmi.n	800a950 <__smakebuf_r+0x18>
 800a972:	f023 0303 	bic.w	r3, r3, #3
 800a976:	f043 0302 	orr.w	r3, r3, #2
 800a97a:	81a3      	strh	r3, [r4, #12]
 800a97c:	e7e2      	b.n	800a944 <__smakebuf_r+0xc>
 800a97e:	89a3      	ldrh	r3, [r4, #12]
 800a980:	6020      	str	r0, [r4, #0]
 800a982:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a986:	81a3      	strh	r3, [r4, #12]
 800a988:	9b01      	ldr	r3, [sp, #4]
 800a98a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a98e:	b15b      	cbz	r3, 800a9a8 <__smakebuf_r+0x70>
 800a990:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a994:	4630      	mov	r0, r6
 800a996:	f000 f81d 	bl	800a9d4 <_isatty_r>
 800a99a:	b128      	cbz	r0, 800a9a8 <__smakebuf_r+0x70>
 800a99c:	89a3      	ldrh	r3, [r4, #12]
 800a99e:	f023 0303 	bic.w	r3, r3, #3
 800a9a2:	f043 0301 	orr.w	r3, r3, #1
 800a9a6:	81a3      	strh	r3, [r4, #12]
 800a9a8:	89a3      	ldrh	r3, [r4, #12]
 800a9aa:	431d      	orrs	r5, r3
 800a9ac:	81a5      	strh	r5, [r4, #12]
 800a9ae:	e7cf      	b.n	800a950 <__smakebuf_r+0x18>

0800a9b0 <_fstat_r>:
 800a9b0:	b538      	push	{r3, r4, r5, lr}
 800a9b2:	4d07      	ldr	r5, [pc, #28]	@ (800a9d0 <_fstat_r+0x20>)
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	4604      	mov	r4, r0
 800a9b8:	4608      	mov	r0, r1
 800a9ba:	4611      	mov	r1, r2
 800a9bc:	602b      	str	r3, [r5, #0]
 800a9be:	f7f8 f9db 	bl	8002d78 <_fstat>
 800a9c2:	1c43      	adds	r3, r0, #1
 800a9c4:	d102      	bne.n	800a9cc <_fstat_r+0x1c>
 800a9c6:	682b      	ldr	r3, [r5, #0]
 800a9c8:	b103      	cbz	r3, 800a9cc <_fstat_r+0x1c>
 800a9ca:	6023      	str	r3, [r4, #0]
 800a9cc:	bd38      	pop	{r3, r4, r5, pc}
 800a9ce:	bf00      	nop
 800a9d0:	2000073c 	.word	0x2000073c

0800a9d4 <_isatty_r>:
 800a9d4:	b538      	push	{r3, r4, r5, lr}
 800a9d6:	4d06      	ldr	r5, [pc, #24]	@ (800a9f0 <_isatty_r+0x1c>)
 800a9d8:	2300      	movs	r3, #0
 800a9da:	4604      	mov	r4, r0
 800a9dc:	4608      	mov	r0, r1
 800a9de:	602b      	str	r3, [r5, #0]
 800a9e0:	f7f8 f9da 	bl	8002d98 <_isatty>
 800a9e4:	1c43      	adds	r3, r0, #1
 800a9e6:	d102      	bne.n	800a9ee <_isatty_r+0x1a>
 800a9e8:	682b      	ldr	r3, [r5, #0]
 800a9ea:	b103      	cbz	r3, 800a9ee <_isatty_r+0x1a>
 800a9ec:	6023      	str	r3, [r4, #0]
 800a9ee:	bd38      	pop	{r3, r4, r5, pc}
 800a9f0:	2000073c 	.word	0x2000073c

0800a9f4 <_init>:
 800a9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9f6:	bf00      	nop
 800a9f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9fa:	bc08      	pop	{r3}
 800a9fc:	469e      	mov	lr, r3
 800a9fe:	4770      	bx	lr

0800aa00 <_fini>:
 800aa00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa02:	bf00      	nop
 800aa04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa06:	bc08      	pop	{r3}
 800aa08:	469e      	mov	lr, r3
 800aa0a:	4770      	bx	lr
