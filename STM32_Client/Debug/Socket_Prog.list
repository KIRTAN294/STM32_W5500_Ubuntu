
Socket_Prog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a064  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  0800a248  0800a248  0000b248  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a654  0800a654  0000c220  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a654  0800a654  0000b654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a65c  0800a65c  0000c220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a65c  0800a65c  0000b65c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a660  0800a660  0000b660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000220  20000000  0800a664  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000500  20000220  0800a884  0000c220  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000720  0800a884  0000c720  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c220  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016c96  00000000  00000000  0000c250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000345e  00000000  00000000  00022ee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001710  00000000  00000000  00026348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011f0  00000000  00000000  00027a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029400  00000000  00000000  00028c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001830e  00000000  00000000  00052048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010634b  00000000  00000000  0006a356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001706a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071e4  00000000  00000000  001706e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001778c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000220 	.word	0x20000220
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a22c 	.word	0x0800a22c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000224 	.word	0x20000224
 800021c:	0800a22c 	.word	0x0800a22c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <Handlebmsmessage>:
//
//
//
//}

void Handlebmsmessage(uint32_t can_id, uint8_t *RxData, uint8_t length){
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	71fb      	strb	r3, [r7, #7]

	Bms_message = true;
 8000ca6:	4b73      	ldr	r3, [pc, #460]	@ (8000e74 <Handlebmsmessage+0x1dc>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	701a      	strb	r2, [r3, #0]

	switch(can_id){
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	4a72      	ldr	r2, [pc, #456]	@ (8000e78 <Handlebmsmessage+0x1e0>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	f000 80c8 	beq.w	8000e46 <Handlebmsmessage+0x1ae>
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	4a6f      	ldr	r2, [pc, #444]	@ (8000e78 <Handlebmsmessage+0x1e0>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	f200 80d5 	bhi.w	8000e6a <Handlebmsmessage+0x1d2>
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	4a6e      	ldr	r2, [pc, #440]	@ (8000e7c <Handlebmsmessage+0x1e4>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	f000 80ac 	beq.w	8000e22 <Handlebmsmessage+0x18a>
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	4a6b      	ldr	r2, [pc, #428]	@ (8000e7c <Handlebmsmessage+0x1e4>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	f200 80cb 	bhi.w	8000e6a <Handlebmsmessage+0x1d2>
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	4a6a      	ldr	r2, [pc, #424]	@ (8000e80 <Handlebmsmessage+0x1e8>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d077      	beq.n	8000dcc <Handlebmsmessage+0x134>
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	4a68      	ldr	r2, [pc, #416]	@ (8000e80 <Handlebmsmessage+0x1e8>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	f200 80c2 	bhi.w	8000e6a <Handlebmsmessage+0x1d2>
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	4a66      	ldr	r2, [pc, #408]	@ (8000e84 <Handlebmsmessage+0x1ec>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d034      	beq.n	8000d58 <Handlebmsmessage+0xc0>
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	4a64      	ldr	r2, [pc, #400]	@ (8000e84 <Handlebmsmessage+0x1ec>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	f200 80b9 	bhi.w	8000e6a <Handlebmsmessage+0x1d2>
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	4a63      	ldr	r2, [pc, #396]	@ (8000e88 <Handlebmsmessage+0x1f0>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d03d      	beq.n	8000d7c <Handlebmsmessage+0xe4>
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	4a61      	ldr	r2, [pc, #388]	@ (8000e88 <Handlebmsmessage+0x1f0>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	f200 80b0 	bhi.w	8000e6a <Handlebmsmessage+0x1d2>
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	4a5f      	ldr	r2, [pc, #380]	@ (8000e8c <Handlebmsmessage+0x1f4>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d046      	beq.n	8000da0 <Handlebmsmessage+0x108>
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	4a5d      	ldr	r2, [pc, #372]	@ (8000e8c <Handlebmsmessage+0x1f4>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	f200 80a7 	bhi.w	8000e6a <Handlebmsmessage+0x1d2>
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 8000d22:	d004      	beq.n	8000d2e <Handlebmsmessage+0x96>
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4a5a      	ldr	r2, [pc, #360]	@ (8000e90 <Handlebmsmessage+0x1f8>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d061      	beq.n	8000df0 <Handlebmsmessage+0x158>
              eth_msg.length = sizeof(master_data.status7);
              memcpy(eth_msg.payload, &master_data.status7, sizeof(master_data.status7));
              break;

	}
}
 8000d2c:	e09d      	b.n	8000e6a <Handlebmsmessage+0x1d2>
	          eth_msg.can_id = APP_flag_error_CANID;
 8000d2e:	4b59      	ldr	r3, [pc, #356]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000d30:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8000d34:	601a      	str	r2, [r3, #0]
              Unpack_APP_flag_error_bms_can(&master_data.status, RxData, length);
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	68b9      	ldr	r1, [r7, #8]
 8000d3c:	4856      	ldr	r0, [pc, #344]	@ (8000e98 <Handlebmsmessage+0x200>)
 8000d3e:	f000 fae3 	bl	8001308 <Unpack_APP_flag_error_bms_can>
              eth_msg.length = sizeof(master_data.status);
 8000d42:	4b54      	ldr	r3, [pc, #336]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000d44:	2208      	movs	r2, #8
 8000d46:	605a      	str	r2, [r3, #4]
              memcpy(eth_msg.payload, &master_data.status, sizeof(master_data.status));
 8000d48:	4b52      	ldr	r3, [pc, #328]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000d4a:	4a53      	ldr	r2, [pc, #332]	@ (8000e98 <Handlebmsmessage+0x200>)
 8000d4c:	3308      	adds	r3, #8
 8000d4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d52:	e883 0003 	stmia.w	r3, {r0, r1}
              break;
 8000d56:	e088      	b.n	8000e6a <Handlebmsmessage+0x1d2>
	          eth_msg.can_id = BAT_BMS_IntTemp_CANID;
 8000d58:	4b4e      	ldr	r3, [pc, #312]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000d5a:	4a4a      	ldr	r2, [pc, #296]	@ (8000e84 <Handlebmsmessage+0x1ec>)
 8000d5c:	601a      	str	r2, [r3, #0]
              Unpack_BAT_BMS_IntTemp_bms_can(&master_data.status1, RxData, length);
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	461a      	mov	r2, r3
 8000d62:	68b9      	ldr	r1, [r7, #8]
 8000d64:	484d      	ldr	r0, [pc, #308]	@ (8000e9c <Handlebmsmessage+0x204>)
 8000d66:	f000 fc1f 	bl	80015a8 <Unpack_BAT_BMS_IntTemp_bms_can>
              eth_msg.length = sizeof(master_data.status1);
 8000d6a:	4b4a      	ldr	r3, [pc, #296]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000d6c:	2220      	movs	r2, #32
 8000d6e:	605a      	str	r2, [r3, #4]
              memcpy(eth_msg.payload, &master_data.status1, sizeof(master_data.status1));
 8000d70:	2220      	movs	r2, #32
 8000d72:	494a      	ldr	r1, [pc, #296]	@ (8000e9c <Handlebmsmessage+0x204>)
 8000d74:	484a      	ldr	r0, [pc, #296]	@ (8000ea0 <Handlebmsmessage+0x208>)
 8000d76:	f007 fbb4 	bl	80084e2 <memcpy>
              break;
 8000d7a:	e076      	b.n	8000e6a <Handlebmsmessage+0x1d2>
	          eth_msg.can_id = BAT_BMS_ExtTemp_CANID;
 8000d7c:	4b45      	ldr	r3, [pc, #276]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000d7e:	4a42      	ldr	r2, [pc, #264]	@ (8000e88 <Handlebmsmessage+0x1f0>)
 8000d80:	601a      	str	r2, [r3, #0]
              Unpack_BAT_BMS_ExtTemp_bms_can(&master_data.status2, RxData, length);
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	461a      	mov	r2, r3
 8000d86:	68b9      	ldr	r1, [r7, #8]
 8000d88:	4846      	ldr	r0, [pc, #280]	@ (8000ea4 <Handlebmsmessage+0x20c>)
 8000d8a:	f000 fb95 	bl	80014b8 <Unpack_BAT_BMS_ExtTemp_bms_can>
              eth_msg.length = sizeof(master_data.status2);
 8000d8e:	4b41      	ldr	r3, [pc, #260]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000d90:	2228      	movs	r2, #40	@ 0x28
 8000d92:	605a      	str	r2, [r3, #4]
              memcpy(eth_msg.payload, &master_data.status2, sizeof(master_data.status2));
 8000d94:	2228      	movs	r2, #40	@ 0x28
 8000d96:	4943      	ldr	r1, [pc, #268]	@ (8000ea4 <Handlebmsmessage+0x20c>)
 8000d98:	4841      	ldr	r0, [pc, #260]	@ (8000ea0 <Handlebmsmessage+0x208>)
 8000d9a:	f007 fba2 	bl	80084e2 <memcpy>
              break;
 8000d9e:	e064      	b.n	8000e6a <Handlebmsmessage+0x1d2>
	          eth_msg.can_id = BAT_AFE_Fet_Status_CANID;
 8000da0:	4b3c      	ldr	r3, [pc, #240]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000da2:	4a3a      	ldr	r2, [pc, #232]	@ (8000e8c <Handlebmsmessage+0x1f4>)
 8000da4:	601a      	str	r2, [r3, #0]
              Unpack_BAT_AFE_Fet_Status_bms_can(&master_data.status3, RxData, length);
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	461a      	mov	r2, r3
 8000daa:	68b9      	ldr	r1, [r7, #8]
 8000dac:	483e      	ldr	r0, [pc, #248]	@ (8000ea8 <Handlebmsmessage+0x210>)
 8000dae:	f000 fb41 	bl	8001434 <Unpack_BAT_AFE_Fet_Status_bms_can>
              eth_msg.length = sizeof(master_data.status3);
 8000db2:	4b38      	ldr	r3, [pc, #224]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000db4:	2206      	movs	r2, #6
 8000db6:	605a      	str	r2, [r3, #4]
              memcpy(eth_msg.payload, &master_data.status3, sizeof(master_data.status3));
 8000db8:	4b36      	ldr	r3, [pc, #216]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000dba:	4a37      	ldr	r2, [pc, #220]	@ (8000e98 <Handlebmsmessage+0x200>)
 8000dbc:	3308      	adds	r3, #8
 8000dbe:	3250      	adds	r2, #80	@ 0x50
 8000dc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dc4:	6018      	str	r0, [r3, #0]
 8000dc6:	3304      	adds	r3, #4
 8000dc8:	8019      	strh	r1, [r3, #0]
              break;
 8000dca:	e04e      	b.n	8000e6a <Handlebmsmessage+0x1d2>
	          eth_msg.can_id = BAT_BMS_Charger_Load_Status_CANID;
 8000dcc:	4b31      	ldr	r3, [pc, #196]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000dce:	4a2c      	ldr	r2, [pc, #176]	@ (8000e80 <Handlebmsmessage+0x1e8>)
 8000dd0:	601a      	str	r2, [r3, #0]
              Unpack_BAT_BMS_Charger_Load_Status_bms_can(&master_data.status4, RxData,length);
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	68b9      	ldr	r1, [r7, #8]
 8000dd8:	4834      	ldr	r0, [pc, #208]	@ (8000eac <Handlebmsmessage+0x214>)
 8000dda:	f000 fc47 	bl	800166c <Unpack_BAT_BMS_Charger_Load_Status_bms_can>
              eth_msg.length = sizeof(master_data.status4);
 8000dde:	4b2d      	ldr	r3, [pc, #180]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000de0:	2202      	movs	r2, #2
 8000de2:	605a      	str	r2, [r3, #4]
              memcpy(eth_msg.payload, &master_data.status4, sizeof(master_data.status4));
 8000de4:	4b2c      	ldr	r3, [pc, #176]	@ (8000e98 <Handlebmsmessage+0x200>)
 8000de6:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 8000dea:	4b2a      	ldr	r3, [pc, #168]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000dec:	811a      	strh	r2, [r3, #8]
              break;
 8000dee:	e03c      	b.n	8000e6a <Handlebmsmessage+0x1d2>
	          eth_msg.can_id = BMS_Temp_Sensor_Present_CANID;
 8000df0:	4b28      	ldr	r3, [pc, #160]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000df2:	4a27      	ldr	r2, [pc, #156]	@ (8000e90 <Handlebmsmessage+0x1f8>)
 8000df4:	601a      	str	r2, [r3, #0]
              Unpack_BMS_Temp_Sensor_Present_bms_can(&master_data.status5, RxData, length);
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	68b9      	ldr	r1, [r7, #8]
 8000dfc:	482c      	ldr	r0, [pc, #176]	@ (8000eb0 <Handlebmsmessage+0x218>)
 8000dfe:	f000 fad1 	bl	80013a4 <Unpack_BMS_Temp_Sensor_Present_bms_can>
              eth_msg.length = sizeof(master_data.status5);
 8000e02:	4b24      	ldr	r3, [pc, #144]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000e04:	2207      	movs	r2, #7
 8000e06:	605a      	str	r2, [r3, #4]
              memcpy(eth_msg.payload, &master_data.status5, sizeof(master_data.status5));
 8000e08:	4b22      	ldr	r3, [pc, #136]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000e0a:	4a23      	ldr	r2, [pc, #140]	@ (8000e98 <Handlebmsmessage+0x200>)
 8000e0c:	3308      	adds	r3, #8
 8000e0e:	3258      	adds	r2, #88	@ 0x58
 8000e10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e14:	6018      	str	r0, [r3, #0]
 8000e16:	3304      	adds	r3, #4
 8000e18:	8019      	strh	r1, [r3, #0]
 8000e1a:	3302      	adds	r3, #2
 8000e1c:	0c0a      	lsrs	r2, r1, #16
 8000e1e:	701a      	strb	r2, [r3, #0]
              break;
 8000e20:	e023      	b.n	8000e6a <Handlebmsmessage+0x1d2>
	          eth_msg.can_id = BAT_GAUGE_OvrVIEW_CANID;
 8000e22:	4b1c      	ldr	r3, [pc, #112]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000e24:	4a15      	ldr	r2, [pc, #84]	@ (8000e7c <Handlebmsmessage+0x1e4>)
 8000e26:	601a      	str	r2, [r3, #0]
              Unpack_BAT_GAUGE_OvrVIEW_bms_can(&master_data.status6, RxData, length);
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	68b9      	ldr	r1, [r7, #8]
 8000e2e:	4821      	ldr	r0, [pc, #132]	@ (8000eb4 <Handlebmsmessage+0x21c>)
 8000e30:	f000 fc3e 	bl	80016b0 <Unpack_BAT_GAUGE_OvrVIEW_bms_can>
              eth_msg.length = sizeof(master_data.status6);
 8000e34:	4b17      	ldr	r3, [pc, #92]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000e36:	2210      	movs	r2, #16
 8000e38:	605a      	str	r2, [r3, #4]
              memcpy(eth_msg.payload, &master_data.status6, sizeof(master_data.status6));
 8000e3a:	2210      	movs	r2, #16
 8000e3c:	491d      	ldr	r1, [pc, #116]	@ (8000eb4 <Handlebmsmessage+0x21c>)
 8000e3e:	4818      	ldr	r0, [pc, #96]	@ (8000ea0 <Handlebmsmessage+0x208>)
 8000e40:	f007 fb4f 	bl	80084e2 <memcpy>
              break;
 8000e44:	e011      	b.n	8000e6a <Handlebmsmessage+0x1d2>
	          eth_msg.can_id = BAT_GAUGE_ViT_CANID;
 8000e46:	4b13      	ldr	r3, [pc, #76]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000e48:	4a0b      	ldr	r2, [pc, #44]	@ (8000e78 <Handlebmsmessage+0x1e0>)
 8000e4a:	601a      	str	r2, [r3, #0]
              Unpack_BAT_GAUGE_ViT_bms_can(&master_data.status7, RxData, length);
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	68b9      	ldr	r1, [r7, #8]
 8000e52:	4819      	ldr	r0, [pc, #100]	@ (8000eb8 <Handlebmsmessage+0x220>)
 8000e54:	f000 fc7c 	bl	8001750 <Unpack_BAT_GAUGE_ViT_bms_can>
              eth_msg.length = sizeof(master_data.status7);
 8000e58:	4b0e      	ldr	r3, [pc, #56]	@ (8000e94 <Handlebmsmessage+0x1fc>)
 8000e5a:	2230      	movs	r2, #48	@ 0x30
 8000e5c:	605a      	str	r2, [r3, #4]
              memcpy(eth_msg.payload, &master_data.status7, sizeof(master_data.status7));
 8000e5e:	2230      	movs	r2, #48	@ 0x30
 8000e60:	4915      	ldr	r1, [pc, #84]	@ (8000eb8 <Handlebmsmessage+0x220>)
 8000e62:	480f      	ldr	r0, [pc, #60]	@ (8000ea0 <Handlebmsmessage+0x208>)
 8000e64:	f007 fb3d 	bl	80084e2 <memcpy>
              break;
 8000e68:	bf00      	nop
}
 8000e6a:	bf00      	nop
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	2000023c 	.word	0x2000023c
 8000e78:	001ff820 	.word	0x001ff820
 8000e7c:	001ff810 	.word	0x001ff810
 8000e80:	001ff615 	.word	0x001ff615
 8000e84:	001ff612 	.word	0x001ff612
 8000e88:	001ff611 	.word	0x001ff611
 8000e8c:	001ff310 	.word	0x001ff310
 8000e90:	001ff110 	.word	0x001ff110
 8000e94:	200002e0 	.word	0x200002e0
 8000e98:	20000240 	.word	0x20000240
 8000e9c:	20000248 	.word	0x20000248
 8000ea0:	200002e8 	.word	0x200002e8
 8000ea4:	20000268 	.word	0x20000268
 8000ea8:	20000290 	.word	0x20000290
 8000eac:	20000296 	.word	0x20000296
 8000eb0:	20000298 	.word	0x20000298
 8000eb4:	200002a0 	.word	0x200002a0
 8000eb8:	200002b0 	.word	0x200002b0

08000ebc <bytesToFloat>:
EulerAngles last_angles;
EulerAngles txBuffer[MAX_MESSAGES];
uint8_t large_buffer[BUFFER_SIZE];

uint8_t broadcast_ip[4] = {176,162,10,255};
float bytesToFloat(uint8_t *bytes) {
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]

    float value;
    memcpy(&value, bytes, sizeof(float));
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	60fb      	str	r3, [r7, #12]
    return value;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	ee07 3a90 	vmov	s15, r3
}
 8000ed0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ed4:	3714      	adds	r7, #20
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
	...

08000ee0 <Handleimumessage>:

void Handleimumessage(uint32_t can_id, uint8_t *RxData){
 8000ee0:	b5b0      	push	{r4, r5, r7, lr}
 8000ee2:	b088      	sub	sp, #32
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]



	switch(can_id){
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	3b11      	subs	r3, #17
 8000eee:	2b23      	cmp	r3, #35	@ 0x23
 8000ef0:	f200 8175 	bhi.w	80011de <Handleimumessage+0x2fe>
 8000ef4:	a201      	add	r2, pc, #4	@ (adr r2, 8000efc <Handleimumessage+0x1c>)
 8000ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000efa:	bf00      	nop
 8000efc:	08001117 	.word	0x08001117
 8000f00:	0800113d 	.word	0x0800113d
 8000f04:	0800117f 	.word	0x0800117f
 8000f08:	080011df 	.word	0x080011df
 8000f0c:	080011df 	.word	0x080011df
 8000f10:	080011df 	.word	0x080011df
 8000f14:	080011df 	.word	0x080011df
 8000f18:	080011df 	.word	0x080011df
 8000f1c:	080011df 	.word	0x080011df
 8000f20:	080011df 	.word	0x080011df
 8000f24:	080011df 	.word	0x080011df
 8000f28:	080011df 	.word	0x080011df
 8000f2c:	080011df 	.word	0x080011df
 8000f30:	080011df 	.word	0x080011df
 8000f34:	080011df 	.word	0x080011df
 8000f38:	080011df 	.word	0x080011df
 8000f3c:	080011df 	.word	0x080011df
 8000f40:	08000f8d 	.word	0x08000f8d
 8000f44:	080011df 	.word	0x080011df
 8000f48:	080011df 	.word	0x080011df
 8000f4c:	080011df 	.word	0x080011df
 8000f50:	080011df 	.word	0x080011df
 8000f54:	080011df 	.word	0x080011df
 8000f58:	080011df 	.word	0x080011df
 8000f5c:	080011df 	.word	0x080011df
 8000f60:	080011df 	.word	0x080011df
 8000f64:	080011df 	.word	0x080011df
 8000f68:	080011df 	.word	0x080011df
 8000f6c:	080011df 	.word	0x080011df
 8000f70:	080011df 	.word	0x080011df
 8000f74:	080011df 	.word	0x080011df
 8000f78:	080011df 	.word	0x080011df
 8000f7c:	080011df 	.word	0x080011df
 8000f80:	080011df 	.word	0x080011df
 8000f84:	080011df 	.word	0x080011df
 8000f88:	0800105d 	.word	0x0800105d

	        case 0x22:
	             int16_t roll_rad = (RxData[0]<<8 ) | RxData[1];
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	b21b      	sxth	r3, r3
 8000f92:	021b      	lsls	r3, r3, #8
 8000f94:	b21a      	sxth	r2, r3
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	b21b      	sxth	r3, r3
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	833b      	strh	r3, [r7, #24]
	             int16_t pitch_rad= (RxData[2]<<8)| RxData[3];
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	3302      	adds	r3, #2
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	b21b      	sxth	r3, r3
 8000faa:	021b      	lsls	r3, r3, #8
 8000fac:	b21a      	sxth	r2, r3
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	3303      	adds	r3, #3
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	b21b      	sxth	r3, r3
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	82fb      	strh	r3, [r7, #22]
	             int16_t yaw_rad = (RxData[4]<<8 )| RxData[5];
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	b21b      	sxth	r3, r3
 8000fc2:	021b      	lsls	r3, r3, #8
 8000fc4:	b21a      	sxth	r2, r3
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	3305      	adds	r3, #5
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	b21b      	sxth	r3, r3
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	82bb      	strh	r3, [r7, #20]

	              if((roll_rad>=0 && roll_rad<=23040) ||(pitch_rad>=0 && pitch_rad<=23040) || (yaw_rad>=0 && yaw_rad<=23040)){
 8000fd2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	db04      	blt.n	8000fe4 <Handleimumessage+0x104>
 8000fda:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000fde:	f5b3 4fb4 	cmp.w	r3, #23040	@ 0x5a00
 8000fe2:	dd13      	ble.n	800100c <Handleimumessage+0x12c>
 8000fe4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	db04      	blt.n	8000ff6 <Handleimumessage+0x116>
 8000fec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000ff0:	f5b3 4fb4 	cmp.w	r3, #23040	@ 0x5a00
 8000ff4:	dd0a      	ble.n	800100c <Handleimumessage+0x12c>
 8000ff6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	f2c0 80ee 	blt.w	80011dc <Handleimumessage+0x2fc>
 8001000:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001004:	f5b3 4fb4 	cmp.w	r3, #23040	@ 0x5a00
 8001008:	f300 80e8 	bgt.w	80011dc <Handleimumessage+0x2fc>

	             angles.roll= (roll_rad * 0.0078f);
 800100c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001010:	ee07 3a90 	vmov	s15, r3
 8001014:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001018:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8001228 <Handleimumessage+0x348>
 800101c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001020:	4b82      	ldr	r3, [pc, #520]	@ (800122c <Handleimumessage+0x34c>)
 8001022:	edc3 7a00 	vstr	s15, [r3]
	             angles.pitch= (pitch_rad * 0.0078f);
 8001026:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800102a:	ee07 3a90 	vmov	s15, r3
 800102e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001032:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8001228 <Handleimumessage+0x348>
 8001036:	ee67 7a87 	vmul.f32	s15, s15, s14
 800103a:	4b7c      	ldr	r3, [pc, #496]	@ (800122c <Handleimumessage+0x34c>)
 800103c:	edc3 7a01 	vstr	s15, [r3, #4]
	             angles.yaw = (yaw_rad * 0.0078f);
 8001040:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001044:	ee07 3a90 	vmov	s15, r3
 8001048:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800104c:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 8001228 <Handleimumessage+0x348>
 8001050:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001054:	4b75      	ldr	r3, [pc, #468]	@ (800122c <Handleimumessage+0x34c>)
 8001056:	edc3 7a02 	vstr	s15, [r3, #8]
	             angles.roll= (roll_rad - 65536)*0.0078;
	             angles.pitch= (pitch_rad - 65536)*0.0078;
	             angles.yaw = (yaw_rad - 65536)*0.0078;

	              }
	             break;
 800105a:	e0bf      	b.n	80011dc <Handleimumessage+0x2fc>

	        case 0x34:
	             int16_t accX = (RxData[0] << 8) | RxData[1];
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	b21b      	sxth	r3, r3
 8001062:	021b      	lsls	r3, r3, #8
 8001064:	b21a      	sxth	r2, r3
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	3301      	adds	r3, #1
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	b21b      	sxth	r3, r3
 800106e:	4313      	orrs	r3, r2
 8001070:	83fb      	strh	r3, [r7, #30]
	             int16_t accY = (RxData[2] << 8) | RxData[3];
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	3302      	adds	r3, #2
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	b21b      	sxth	r3, r3
 800107a:	021b      	lsls	r3, r3, #8
 800107c:	b21a      	sxth	r2, r3
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	3303      	adds	r3, #3
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	b21b      	sxth	r3, r3
 8001086:	4313      	orrs	r3, r2
 8001088:	83bb      	strh	r3, [r7, #28]
	             int16_t accZ = (RxData[4] << 8) | RxData[5];
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	3304      	adds	r3, #4
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	b21b      	sxth	r3, r3
 8001092:	021b      	lsls	r3, r3, #8
 8001094:	b21a      	sxth	r2, r3
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	3305      	adds	r3, #5
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	b21b      	sxth	r3, r3
 800109e:	4313      	orrs	r3, r2
 80010a0:	837b      	strh	r3, [r7, #26]

	             angles.accx = accX * 0.0039;
 80010a2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fa64 	bl	8000574 <__aeabi_i2d>
 80010ac:	a358      	add	r3, pc, #352	@ (adr r3, 8001210 <Handleimumessage+0x330>)
 80010ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b2:	f7ff fac9 	bl	8000648 <__aeabi_dmul>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	4610      	mov	r0, r2
 80010bc:	4619      	mov	r1, r3
 80010be:	f7ff fd9b 	bl	8000bf8 <__aeabi_d2f>
 80010c2:	4603      	mov	r3, r0
 80010c4:	4a59      	ldr	r2, [pc, #356]	@ (800122c <Handleimumessage+0x34c>)
 80010c6:	60d3      	str	r3, [r2, #12]
	             angles.accy = accY * 0.0039;
 80010c8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fa51 	bl	8000574 <__aeabi_i2d>
 80010d2:	a34f      	add	r3, pc, #316	@ (adr r3, 8001210 <Handleimumessage+0x330>)
 80010d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d8:	f7ff fab6 	bl	8000648 <__aeabi_dmul>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	4610      	mov	r0, r2
 80010e2:	4619      	mov	r1, r3
 80010e4:	f7ff fd88 	bl	8000bf8 <__aeabi_d2f>
 80010e8:	4603      	mov	r3, r0
 80010ea:	4a50      	ldr	r2, [pc, #320]	@ (800122c <Handleimumessage+0x34c>)
 80010ec:	6113      	str	r3, [r2, #16]
	             angles.accz = accZ * 0.0039;
 80010ee:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff fa3e 	bl	8000574 <__aeabi_i2d>
 80010f8:	a345      	add	r3, pc, #276	@ (adr r3, 8001210 <Handleimumessage+0x330>)
 80010fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fe:	f7ff faa3 	bl	8000648 <__aeabi_dmul>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	4610      	mov	r0, r2
 8001108:	4619      	mov	r1, r3
 800110a:	f7ff fd75 	bl	8000bf8 <__aeabi_d2f>
 800110e:	4603      	mov	r3, r0
 8001110:	4a46      	ldr	r2, [pc, #280]	@ (800122c <Handleimumessage+0x34c>)
 8001112:	6153      	str	r3, [r2, #20]

	             break;
 8001114:	e063      	b.n	80011de <Handleimumessage+0x2fe>

			case 0x11:
			    angles.roll = bytesToFloat(&RxData[4]);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	3304      	adds	r3, #4
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff fece 	bl	8000ebc <bytesToFloat>
 8001120:	eef0 7a40 	vmov.f32	s15, s0
 8001124:	4b41      	ldr	r3, [pc, #260]	@ (800122c <Handleimumessage+0x34c>)
 8001126:	edc3 7a00 	vstr	s15, [r3]
			    angles.pitch = bytesToFloat(&RxData[0]);
 800112a:	6838      	ldr	r0, [r7, #0]
 800112c:	f7ff fec6 	bl	8000ebc <bytesToFloat>
 8001130:	eef0 7a40 	vmov.f32	s15, s0
 8001134:	4b3d      	ldr	r3, [pc, #244]	@ (800122c <Handleimumessage+0x34c>)
 8001136:	edc3 7a01 	vstr	s15, [r3, #4]
	            break;
 800113a:	e050      	b.n	80011de <Handleimumessage+0x2fe>

		    case 0x12:
			    angles.yaw = bytesToFloat(&RxData[0]);
 800113c:	6838      	ldr	r0, [r7, #0]
 800113e:	f7ff febd 	bl	8000ebc <bytesToFloat>
 8001142:	eef0 7a40 	vmov.f32	s15, s0
 8001146:	4b39      	ldr	r3, [pc, #228]	@ (800122c <Handleimumessage+0x34c>)
 8001148:	edc3 7a02 	vstr	s15, [r3, #8]
			    float ACCY= bytesToFloat(&RxData[4]);
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	3304      	adds	r3, #4
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff feb3 	bl	8000ebc <bytesToFloat>
 8001156:	ed87 0a02 	vstr	s0, [r7, #8]
			    angles.accy = ACCY * (-9.81);
 800115a:	68b8      	ldr	r0, [r7, #8]
 800115c:	f7ff fa1c 	bl	8000598 <__aeabi_f2d>
 8001160:	a32d      	add	r3, pc, #180	@ (adr r3, 8001218 <Handleimumessage+0x338>)
 8001162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001166:	f7ff fa6f 	bl	8000648 <__aeabi_dmul>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	4610      	mov	r0, r2
 8001170:	4619      	mov	r1, r3
 8001172:	f7ff fd41 	bl	8000bf8 <__aeabi_d2f>
 8001176:	4603      	mov	r3, r0
 8001178:	4a2c      	ldr	r2, [pc, #176]	@ (800122c <Handleimumessage+0x34c>)
 800117a:	6113      	str	r3, [r2, #16]
			    break;
 800117c:	e02f      	b.n	80011de <Handleimumessage+0x2fe>

			case 0x13:
			    float ACCX=bytesToFloat(&RxData[0]);
 800117e:	6838      	ldr	r0, [r7, #0]
 8001180:	f7ff fe9c 	bl	8000ebc <bytesToFloat>
 8001184:	ed87 0a04 	vstr	s0, [r7, #16]
			    angles.accx = ACCX * 9.81;
 8001188:	6938      	ldr	r0, [r7, #16]
 800118a:	f7ff fa05 	bl	8000598 <__aeabi_f2d>
 800118e:	a324      	add	r3, pc, #144	@ (adr r3, 8001220 <Handleimumessage+0x340>)
 8001190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001194:	f7ff fa58 	bl	8000648 <__aeabi_dmul>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4610      	mov	r0, r2
 800119e:	4619      	mov	r1, r3
 80011a0:	f7ff fd2a 	bl	8000bf8 <__aeabi_d2f>
 80011a4:	4603      	mov	r3, r0
 80011a6:	4a21      	ldr	r2, [pc, #132]	@ (800122c <Handleimumessage+0x34c>)
 80011a8:	60d3      	str	r3, [r2, #12]
			    float ACCZ=bytesToFloat(&RxData[4]);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	3304      	adds	r3, #4
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fe84 	bl	8000ebc <bytesToFloat>
 80011b4:	ed87 0a03 	vstr	s0, [r7, #12]
			    angles.accz = ACCZ * 9.81;
 80011b8:	68f8      	ldr	r0, [r7, #12]
 80011ba:	f7ff f9ed 	bl	8000598 <__aeabi_f2d>
 80011be:	a318      	add	r3, pc, #96	@ (adr r3, 8001220 <Handleimumessage+0x340>)
 80011c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c4:	f7ff fa40 	bl	8000648 <__aeabi_dmul>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4610      	mov	r0, r2
 80011ce:	4619      	mov	r1, r3
 80011d0:	f7ff fd12 	bl	8000bf8 <__aeabi_d2f>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4a15      	ldr	r2, [pc, #84]	@ (800122c <Handleimumessage+0x34c>)
 80011d8:	6153      	str	r3, [r2, #20]
			    break;
 80011da:	e000      	b.n	80011de <Handleimumessage+0x2fe>
	             break;
 80011dc:	bf00      	nop

	}

	angles.timestamp = HAL_GetTick();
 80011de:	f002 f88b 	bl	80032f8 <HAL_GetTick>
 80011e2:	4603      	mov	r3, r0
 80011e4:	4a11      	ldr	r2, [pc, #68]	@ (800122c <Handleimumessage+0x34c>)
 80011e6:	6193      	str	r3, [r2, #24]
    last_angles = angles;
 80011e8:	4a11      	ldr	r2, [pc, #68]	@ (8001230 <Handleimumessage+0x350>)
 80011ea:	4b10      	ldr	r3, [pc, #64]	@ (800122c <Handleimumessage+0x34c>)
 80011ec:	4614      	mov	r4, r2
 80011ee:	461d      	mov	r5, r3
 80011f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    Imu_message = true;
 80011fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001234 <Handleimumessage+0x354>)
 80011fe:	2201      	movs	r2, #1
 8001200:	701a      	strb	r2, [r3, #0]
}
 8001202:	bf00      	nop
 8001204:	3720      	adds	r7, #32
 8001206:	46bd      	mov	sp, r7
 8001208:	bdb0      	pop	{r4, r5, r7, pc}
 800120a:	bf00      	nop
 800120c:	f3af 8000 	nop.w
 8001210:	8e8a71de 	.word	0x8e8a71de
 8001214:	3f6ff2e4 	.word	0x3f6ff2e4
 8001218:	51eb851f 	.word	0x51eb851f
 800121c:	c0239eb8 	.word	0xc0239eb8
 8001220:	51eb851f 	.word	0x51eb851f
 8001224:	40239eb8 	.word	0x40239eb8
 8001228:	3bff9724 	.word	0x3bff9724
 800122c:	20000334 	.word	0x20000334
 8001230:	20000350 	.word	0x20000350
 8001234:	2000032c 	.word	0x2000032c

08001238 <sendimudata>:
void sendimudata(void) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af02      	add	r7, sp, #8

	uint32_t now = __HAL_TIM_GET_COUNTER(&htim3);
 800123e:	4b2a      	ldr	r3, [pc, #168]	@ (80012e8 <sendimudata+0xb0>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001244:	607b      	str	r3, [r7, #4]
//    if (Imu_message) {

        if (buffer_index < MAX_MESSAGES) {
 8001246:	4b29      	ldr	r3, [pc, #164]	@ (80012ec <sendimudata+0xb4>)
 8001248:	881b      	ldrh	r3, [r3, #0]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d113      	bne.n	8001276 <sendimudata+0x3e>
            memcpy(&txBuffer[buffer_index], (void*)&last_angles, sizeof(EulerAngles));
 800124e:	4b27      	ldr	r3, [pc, #156]	@ (80012ec <sendimudata+0xb4>)
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	461a      	mov	r2, r3
 8001254:	4613      	mov	r3, r2
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	1a9b      	subs	r3, r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4a24      	ldr	r2, [pc, #144]	@ (80012f0 <sendimudata+0xb8>)
 800125e:	4413      	add	r3, r2
 8001260:	221c      	movs	r2, #28
 8001262:	4924      	ldr	r1, [pc, #144]	@ (80012f4 <sendimudata+0xbc>)
 8001264:	4618      	mov	r0, r3
 8001266:	f007 f93c 	bl	80084e2 <memcpy>
            buffer_index++;
 800126a:	4b20      	ldr	r3, [pc, #128]	@ (80012ec <sendimudata+0xb4>)
 800126c:	881b      	ldrh	r3, [r3, #0]
 800126e:	3301      	adds	r3, #1
 8001270:	b29a      	uxth	r2, r3
 8001272:	4b1e      	ldr	r3, [pc, #120]	@ (80012ec <sendimudata+0xb4>)
 8001274:	801a      	strh	r2, [r3, #0]
        }

        if (buffer_index >= MAX_MESSAGES) {
 8001276:	4b1d      	ldr	r3, [pc, #116]	@ (80012ec <sendimudata+0xb4>)
 8001278:	881b      	ldrh	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d02f      	beq.n	80012de <sendimudata+0xa6>
            total_size = buffer_index * sizeof(EulerAngles);
 800127e:	4b1b      	ldr	r3, [pc, #108]	@ (80012ec <sendimudata+0xb4>)
 8001280:	881b      	ldrh	r3, [r3, #0]
 8001282:	461a      	mov	r2, r3
 8001284:	4613      	mov	r3, r2
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	1a9b      	subs	r3, r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	461a      	mov	r2, r3
 800128e:	4b1a      	ldr	r3, [pc, #104]	@ (80012f8 <sendimudata+0xc0>)
 8001290:	601a      	str	r2, [r3, #0]
            memcpy(large_buffer, txBuffer, total_size);
 8001292:	4b19      	ldr	r3, [pc, #100]	@ (80012f8 <sendimudata+0xc0>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	461a      	mov	r2, r3
 8001298:	4915      	ldr	r1, [pc, #84]	@ (80012f0 <sendimudata+0xb8>)
 800129a:	4818      	ldr	r0, [pc, #96]	@ (80012fc <sendimudata+0xc4>)
 800129c:	f007 f921 	bl	80084e2 <memcpy>

        if (now - last_imu_time >= 1) {
 80012a0:	4b17      	ldr	r3, [pc, #92]	@ (8001300 <sendimudata+0xc8>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d016      	beq.n	80012d8 <sendimudata+0xa0>
            int32_t sent = sendto(UDP_SOCKET, large_buffer, total_size,broadcast_ip,LOCAL_PORT);
 80012aa:	4b13      	ldr	r3, [pc, #76]	@ (80012f8 <sendimudata+0xc0>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	f241 135c 	movw	r3, #4444	@ 0x115c
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	4b13      	ldr	r3, [pc, #76]	@ (8001304 <sendimudata+0xcc>)
 80012b8:	4910      	ldr	r1, [pc, #64]	@ (80012fc <sendimudata+0xc4>)
 80012ba:	2000      	movs	r0, #0
 80012bc:	f000 ff12 	bl	80020e4 <sendto>
 80012c0:	6038      	str	r0, [r7, #0]

        if (sent > 0) {
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	dd07      	ble.n	80012d8 <sendimudata+0xa0>
           	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80012c8:	2101      	movs	r1, #1
 80012ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012ce:	f003 fb0d 	bl	80048ec <HAL_GPIO_TogglePin>
           	last_imu_time = now;
 80012d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001300 <sendimudata+0xc8>)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6013      	str	r3, [r2, #0]
//        if(rec >=2){
//           	recvfrom(UDP_SOCKET,accept,sizeof(accept));
//           	}
           }
         }
            buffer_index = 0;
 80012d8:	4b04      	ldr	r3, [pc, #16]	@ (80012ec <sendimudata+0xb4>)
 80012da:	2200      	movs	r2, #0
 80012dc:	801a      	strh	r2, [r3, #0]
        }
//            Imu_message = false;
//    }

}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	2000052c 	.word	0x2000052c
 80012ec:	2000032e 	.word	0x2000032e
 80012f0:	2000036c 	.word	0x2000036c
 80012f4:	20000350 	.word	0x20000350
 80012f8:	20000328 	.word	0x20000328
 80012fc:	20000388 	.word	0x20000388
 8001300:	20000330 	.word	0x20000330
 8001304:	20000000 	.word	0x20000000

08001308 <Unpack_APP_flag_error_bms_can>:
}

#endif // BMS_CAN_USE_CANSTRUCT

uint32_t Unpack_APP_flag_error_bms_can(APP_flag_error_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	4613      	mov	r3, r2
 8001314:	71fb      	strb	r3, [r7, #7]
  (void)dlc_;
  _m->APP_flag_undervolt = (_d[0] & (0x01U));
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	b2da      	uxtb	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	701a      	strb	r2, [r3, #0]
  _m->APP_flag_overvolt = (_d[1] & (0x01U));
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	3301      	adds	r3, #1
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	b2da      	uxtb	r2, r3
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	705a      	strb	r2, [r3, #1]
  _m->APP_flag_scd_error = (_d[2] & (0x01U));
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	3302      	adds	r3, #2
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	b2da      	uxtb	r2, r3
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	709a      	strb	r2, [r3, #2]
  _m->APP_flag_highCurrent = (_d[3] & (0x01U));
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	3303      	adds	r3, #3
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	b2da      	uxtb	r2, r3
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	70da      	strb	r2, [r3, #3]
  _m->APP_flag_bat_lowTemp = (_d[4] & (0x01U));
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	3304      	adds	r3, #4
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	b2da      	uxtb	r2, r3
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	711a      	strb	r2, [r3, #4]
  _m->APP_flag_bat_highTemp = (_d[5] & (0x01U));
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	3305      	adds	r3, #5
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	b2da      	uxtb	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	715a      	strb	r2, [r3, #5]
  _m->APP_flag_bms_lowTemp = (_d[6] & (0x01U));
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	3306      	adds	r3, #6
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	b2da      	uxtb	r2, r3
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	719a      	strb	r2, [r3, #6]
  _m->APP_flag_bms_highTemp = (_d[7] & (0x01U));
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	3307      	adds	r3, #7
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	b2da      	uxtb	r2, r3
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	71da      	strb	r2, [r3, #7]
  _m->mon1.frame_cnt++;

  FMon_APP_flag_error_bms_can(&_m->mon1, APP_flag_error_CANID);
#endif // BMS_CAN_USE_DIAG_MONITORS

  return APP_flag_error_CANID;
 8001394:	f44f 7388 	mov.w	r3, #272	@ 0x110
}
 8001398:	4618      	mov	r0, r3
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <Unpack_BMS_Temp_Sensor_Present_bms_can>:
}

#endif // BMS_CAN_USE_CANSTRUCT

uint32_t Unpack_BMS_Temp_Sensor_Present_bms_can(BMS_Temp_Sensor_Present_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	4613      	mov	r3, r2
 80013b0:	71fb      	strb	r3, [r7, #7]
  (void)dlc_;
  _m->BMS_ambient_temp_sensor_present = (_d[0] & (0x01U));
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	701a      	strb	r2, [r3, #0]
  _m->BMS_Fet_temp_sensor_present = (_d[1] & (0x01U));
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	3301      	adds	r3, #1
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	705a      	strb	r2, [r3, #1]
  _m->BMS_ext_adc1_temp_sensor_present = (_d[2] & (0x01U));
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	3302      	adds	r3, #2
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	709a      	strb	r2, [r3, #2]
  _m->BMS_ext_adc2_temp_sensor_present = (_d[3] & (0x01U));
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	3303      	adds	r3, #3
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	70da      	strb	r2, [r3, #3]
  _m->BMS_afe_ts1_temp_sensor_present = (_d[4] & (0x01U));
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	3304      	adds	r3, #4
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	711a      	strb	r2, [r3, #4]
  _m->BMS_afe_ts3_temp_sensor_present = (_d[5] & (0x01U));
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	3305      	adds	r3, #5
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	b2da      	uxtb	r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	715a      	strb	r2, [r3, #5]
  _m->BMS_gauge_temp_sensor_present = (_d[6] & (0x01U));
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	3306      	adds	r3, #6
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	b2da      	uxtb	r2, r3
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	719a      	strb	r2, [r3, #6]
  _m->mon1.frame_cnt++;

  FMon_BMS_Temp_Sensor_Present_bms_can(&_m->mon1, BMS_Temp_Sensor_Present_CANID);
#endif // BMS_CAN_USE_DIAG_MONITORS

  return BMS_Temp_Sensor_Present_CANID;
 8001420:	4b03      	ldr	r3, [pc, #12]	@ (8001430 <Unpack_BMS_Temp_Sensor_Present_bms_can+0x8c>)
}
 8001422:	4618      	mov	r0, r3
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	001ff110 	.word	0x001ff110

08001434 <Unpack_BAT_AFE_Fet_Status_bms_can>:
}

#endif // BMS_CAN_USE_CANSTRUCT

uint32_t Unpack_BAT_AFE_Fet_Status_bms_can(BAT_AFE_Fet_Status_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	4613      	mov	r3, r2
 8001440:	71fb      	strb	r3, [r7, #7]
  (void)dlc_;
  _m->BAT_afe_chg = (_d[0] & (0x01U));
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	b2da      	uxtb	r2, r3
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	701a      	strb	r2, [r3, #0]
  _m->BAT_afe_dsg = (_d[1] & (0x01U));
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	3301      	adds	r3, #1
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	b2da      	uxtb	r2, r3
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	705a      	strb	r2, [r3, #1]
  _m->BAT_afe_pchg = (_d[2] & (0x01U));
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	3302      	adds	r3, #2
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	b2da      	uxtb	r2, r3
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	709a      	strb	r2, [r3, #2]
  _m->BAT_afe_pdsg = (_d[3] & (0x01U));
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	3303      	adds	r3, #3
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	b2da      	uxtb	r2, r3
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	70da      	strb	r2, [r3, #3]
  _m->BAT_afe_dchg = (_d[4] & (0x01U));
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	3304      	adds	r3, #4
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	b2da      	uxtb	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	711a      	strb	r2, [r3, #4]
  _m->BAT_afe_ddsg = (_d[5] & (0x01U));
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	3305      	adds	r3, #5
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	b2da      	uxtb	r2, r3
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	715a      	strb	r2, [r3, #5]
  _m->mon1.frame_cnt++;

  FMon_BAT_AFE_Fet_Status_bms_can(&_m->mon1, BAT_AFE_Fet_Status_CANID);
#endif // BMS_CAN_USE_DIAG_MONITORS

  return BAT_AFE_Fet_Status_CANID;
 80014a0:	4b03      	ldr	r3, [pc, #12]	@ (80014b0 <Unpack_BAT_AFE_Fet_Status_bms_can+0x7c>)
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	001ff310 	.word	0x001ff310
 80014b4:	00000000 	.word	0x00000000

080014b8 <Unpack_BAT_BMS_ExtTemp_bms_can>:
}

#endif // BMS_CAN_USE_CANSTRUCT

uint32_t Unpack_BAT_BMS_ExtTemp_bms_can(BAT_BMS_ExtTemp_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	4613      	mov	r3, r2
 80014c4:	71fb      	strb	r3, [r7, #7]
  (void)dlc_;
  _m->BAT_bms_afe_temp1_ro = ((_d[1] & (0xFFU)) << 8) | (_d[0] & (0xFFU));
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	3301      	adds	r3, #1
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	021b      	lsls	r3, r3, #8
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	68ba      	ldr	r2, [r7, #8]
 80014d2:	7812      	ldrb	r2, [r2, #0]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	801a      	strh	r2, [r3, #0]
#ifdef BMS_CAN_USE_SIGFLOAT
  _m->BAT_bms_afe_temp1_phys = (sigfloat_t)(BMS_CAN_BAT_bms_afe_temp1_ro_fromS(_m->BAT_bms_afe_temp1_ro));
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff f847 	bl	8000574 <__aeabi_i2d>
 80014e6:	a32d      	add	r3, pc, #180	@ (adr r3, 800159c <Unpack_BAT_BMS_ExtTemp_bms_can+0xe4>)
 80014e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ec:	f7ff f8ac 	bl	8000648 <__aeabi_dmul>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	4610      	mov	r0, r2
 80014f6:	4619      	mov	r1, r3
 80014f8:	f04f 0200 	mov.w	r2, #0
 80014fc:	f04f 0300 	mov.w	r3, #0
 8001500:	f7fe feec 	bl	80002dc <__adddf3>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	68f9      	ldr	r1, [r7, #12]
 800150a:	e9c1 2302 	strd	r2, r3, [r1, #8]
#endif // BMS_CAN_USE_SIGFLOAT

  _m->BAT_bms_afe_temp2_ro = ((_d[3] & (0xFFU)) << 8) | (_d[2] & (0xFFU));
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	3303      	adds	r3, #3
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	021b      	lsls	r3, r3, #8
 8001516:	b29b      	uxth	r3, r3
 8001518:	68ba      	ldr	r2, [r7, #8]
 800151a:	3202      	adds	r2, #2
 800151c:	7812      	ldrb	r2, [r2, #0]
 800151e:	4313      	orrs	r3, r2
 8001520:	b29a      	uxth	r2, r3
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	821a      	strh	r2, [r3, #16]
#ifdef BMS_CAN_USE_SIGFLOAT
  _m->BAT_bms_afe_temp2_phys = (sigfloat_t)(BMS_CAN_BAT_bms_afe_temp2_ro_fromS(_m->BAT_bms_afe_temp2_ro));
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	8a1b      	ldrh	r3, [r3, #16]
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff f822 	bl	8000574 <__aeabi_i2d>
 8001530:	a31a      	add	r3, pc, #104	@ (adr r3, 800159c <Unpack_BAT_BMS_ExtTemp_bms_can+0xe4>)
 8001532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001536:	f7ff f887 	bl	8000648 <__aeabi_dmul>
 800153a:	4602      	mov	r2, r0
 800153c:	460b      	mov	r3, r1
 800153e:	4610      	mov	r0, r2
 8001540:	4619      	mov	r1, r3
 8001542:	f04f 0200 	mov.w	r2, #0
 8001546:	f04f 0300 	mov.w	r3, #0
 800154a:	f7fe fec7 	bl	80002dc <__adddf3>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	68f9      	ldr	r1, [r7, #12]
 8001554:	e9c1 2306 	strd	r2, r3, [r1, #24]
#endif // BMS_CAN_USE_SIGFLOAT

  _m->BAT_bms_ext_temp1 = ((_d[5] & (0xFFU)) << 8) | (_d[4] & (0xFFU));
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	3305      	adds	r3, #5
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	021b      	lsls	r3, r3, #8
 8001560:	b29b      	uxth	r3, r3
 8001562:	68ba      	ldr	r2, [r7, #8]
 8001564:	3204      	adds	r2, #4
 8001566:	7812      	ldrb	r2, [r2, #0]
 8001568:	4313      	orrs	r3, r2
 800156a:	b29b      	uxth	r3, r3
 800156c:	b21a      	sxth	r2, r3
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	841a      	strh	r2, [r3, #32]
  _m->BAT_bms_ext_temp2 = ((_d[7] & (0xFFU)) << 8) | (_d[6] & (0xFFU));
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	3307      	adds	r3, #7
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	021b      	lsls	r3, r3, #8
 800157a:	b29b      	uxth	r3, r3
 800157c:	68ba      	ldr	r2, [r7, #8]
 800157e:	3206      	adds	r2, #6
 8001580:	7812      	ldrb	r2, [r2, #0]
 8001582:	4313      	orrs	r3, r2
 8001584:	b29b      	uxth	r3, r3
 8001586:	b21a      	sxth	r2, r3
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	845a      	strh	r2, [r3, #34]	@ 0x22
  _m->mon1.frame_cnt++;

  FMon_BAT_BMS_ExtTemp_bms_can(&_m->mon1, BAT_BMS_ExtTemp_CANID);
#endif // BMS_CAN_USE_DIAG_MONITORS

  return BAT_BMS_ExtTemp_CANID;
 800158c:	4b02      	ldr	r3, [pc, #8]	@ (8001598 <Unpack_BAT_BMS_ExtTemp_bms_can+0xe0>)
}
 800158e:	4618      	mov	r0, r3
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	001ff611 	.word	0x001ff611
 800159c:	47ae147b 	.word	0x47ae147b
 80015a0:	3f847ae1 	.word	0x3f847ae1
 80015a4:	00000000 	.word	0x00000000

080015a8 <Unpack_BAT_BMS_IntTemp_bms_can>:
}

#endif // BMS_CAN_USE_CANSTRUCT

uint32_t Unpack_BAT_BMS_IntTemp_bms_can(BAT_BMS_IntTemp_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	4613      	mov	r3, r2
 80015b4:	71fb      	strb	r3, [r7, #7]
  (void)dlc_;
  _m->BAT_bms_ambient_temp_ro = ((_d[1] & (0xFFU)) << 8) | (_d[0] & (0xFFU));
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	3301      	adds	r3, #1
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	021b      	lsls	r3, r3, #8
 80015be:	b29b      	uxth	r3, r3
 80015c0:	68ba      	ldr	r2, [r7, #8]
 80015c2:	7812      	ldrb	r2, [r2, #0]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	b21a      	sxth	r2, r3
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	801a      	strh	r2, [r3, #0]
#ifdef BMS_CAN_USE_SIGFLOAT
  _m->BAT_bms_ambient_temp_phys = (sigfloat_t)(BMS_CAN_BAT_bms_ambient_temp_ro_fromS(_m->BAT_bms_ambient_temp_ro));
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7fe ffcd 	bl	8000574 <__aeabi_i2d>
 80015da:	a322      	add	r3, pc, #136	@ (adr r3, 8001664 <Unpack_BAT_BMS_IntTemp_bms_can+0xbc>)
 80015dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e0:	f7ff f832 	bl	8000648 <__aeabi_dmul>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4610      	mov	r0, r2
 80015ea:	4619      	mov	r1, r3
 80015ec:	f04f 0200 	mov.w	r2, #0
 80015f0:	f04f 0300 	mov.w	r3, #0
 80015f4:	f7fe fe72 	bl	80002dc <__adddf3>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	68f9      	ldr	r1, [r7, #12]
 80015fe:	e9c1 2302 	strd	r2, r3, [r1, #8]
#endif // BMS_CAN_USE_SIGFLOAT

  _m->BAT_bms_fets_temp_ro = ((_d[3] & (0xFFU)) << 8) | (_d[2] & (0xFFU));
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	3303      	adds	r3, #3
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	021b      	lsls	r3, r3, #8
 800160a:	b29b      	uxth	r3, r3
 800160c:	68ba      	ldr	r2, [r7, #8]
 800160e:	3202      	adds	r2, #2
 8001610:	7812      	ldrb	r2, [r2, #0]
 8001612:	4313      	orrs	r3, r2
 8001614:	b29b      	uxth	r3, r3
 8001616:	b21a      	sxth	r2, r3
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	821a      	strh	r2, [r3, #16]
#ifdef BMS_CAN_USE_SIGFLOAT
  _m->BAT_bms_fets_temp_phys = (sigfloat_t)(BMS_CAN_BAT_bms_fets_temp_ro_fromS(_m->BAT_bms_fets_temp_ro));
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001622:	4618      	mov	r0, r3
 8001624:	f7fe ffa6 	bl	8000574 <__aeabi_i2d>
 8001628:	a30e      	add	r3, pc, #56	@ (adr r3, 8001664 <Unpack_BAT_BMS_IntTemp_bms_can+0xbc>)
 800162a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162e:	f7ff f80b 	bl	8000648 <__aeabi_dmul>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	4610      	mov	r0, r2
 8001638:	4619      	mov	r1, r3
 800163a:	f04f 0200 	mov.w	r2, #0
 800163e:	f04f 0300 	mov.w	r3, #0
 8001642:	f7fe fe4b 	bl	80002dc <__adddf3>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	68f9      	ldr	r1, [r7, #12]
 800164c:	e9c1 2306 	strd	r2, r3, [r1, #24]
  _m->mon1.frame_cnt++;

  FMon_BAT_BMS_IntTemp_bms_can(&_m->mon1, BAT_BMS_IntTemp_CANID);
#endif // BMS_CAN_USE_DIAG_MONITORS

  return BAT_BMS_IntTemp_CANID;
 8001650:	4b03      	ldr	r3, [pc, #12]	@ (8001660 <Unpack_BAT_BMS_IntTemp_bms_can+0xb8>)
}
 8001652:	4618      	mov	r0, r3
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	f3af 8000 	nop.w
 8001660:	001ff612 	.word	0x001ff612
 8001664:	47ae147b 	.word	0x47ae147b
 8001668:	3f847ae1 	.word	0x3f847ae1

0800166c <Unpack_BAT_BMS_Charger_Load_Status_bms_can>:
}

#endif // BMS_CAN_USE_CANSTRUCT

uint32_t Unpack_BAT_BMS_Charger_Load_Status_bms_can(BAT_BMS_Charger_Load_Status_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	4613      	mov	r3, r2
 8001678:	71fb      	strb	r3, [r7, #7]
  (void)dlc_;
  _m->APP_bms_load_detect = (_d[0] & (0x01U));
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	b2da      	uxtb	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	701a      	strb	r2, [r3, #0]
  _m->APP_bms_charger_detect = (_d[1] & (0x01U));
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	3301      	adds	r3, #1
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	b2da      	uxtb	r2, r3
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	705a      	strb	r2, [r3, #1]
  _m->mon1.frame_cnt++;

  FMon_BAT_BMS_Charger_Load_Status_bms_can(&_m->mon1, BAT_BMS_Charger_Load_Status_CANID);
#endif // BMS_CAN_USE_DIAG_MONITORS

  return BAT_BMS_Charger_Load_Status_CANID;
 8001698:	4b03      	ldr	r3, [pc, #12]	@ (80016a8 <Unpack_BAT_BMS_Charger_Load_Status_bms_can+0x3c>)
}
 800169a:	4618      	mov	r0, r3
 800169c:	3714      	adds	r7, #20
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	001ff615 	.word	0x001ff615
 80016ac:	00000000 	.word	0x00000000

080016b0 <Unpack_BAT_GAUGE_OvrVIEW_bms_can>:
}

#endif // BMS_CAN_USE_CANSTRUCT

uint32_t Unpack_BAT_GAUGE_OvrVIEW_bms_can(BAT_GAUGE_OvrVIEW_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	4613      	mov	r3, r2
 80016bc:	71fb      	strb	r3, [r7, #7]
  (void)dlc_;
  _m->BAT_gauge_SoC = (_d[0] & (0xFFU));
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	781a      	ldrb	r2, [r3, #0]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	701a      	strb	r2, [r3, #0]
  _m->BAT_gaige_SoH = (_d[1] & (0xFFU));
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	3301      	adds	r3, #1
 80016ca:	781a      	ldrb	r2, [r3, #0]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	705a      	strb	r2, [r3, #1]
  _m->BAT_gauge_cycleCount = ((_d[3] & (0xFFU)) << 8) | (_d[2] & (0xFFU));
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	3303      	adds	r3, #3
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	021b      	lsls	r3, r3, #8
 80016d8:	b29b      	uxth	r3, r3
 80016da:	68ba      	ldr	r2, [r7, #8]
 80016dc:	3202      	adds	r2, #2
 80016de:	7812      	ldrb	r2, [r2, #0]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	b29a      	uxth	r2, r3
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	805a      	strh	r2, [r3, #2]
  _m->BAT_gauge_remainingCap_ro = ((_d[5] & (0xFFU)) << 8) | (_d[4] & (0xFFU));
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	3305      	adds	r3, #5
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	021b      	lsls	r3, r3, #8
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	68ba      	ldr	r2, [r7, #8]
 80016f4:	3204      	adds	r2, #4
 80016f6:	7812      	ldrb	r2, [r2, #0]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	809a      	strh	r2, [r3, #4]
#ifdef BMS_CAN_USE_SIGFLOAT
  _m->BAT_gauge_remainingCap_phys = (sigfloat_t)(BMS_CAN_BAT_gauge_remainingCap_ro_fromS(_m->BAT_gauge_remainingCap_ro));
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	889b      	ldrh	r3, [r3, #4]
 8001704:	4618      	mov	r0, r3
 8001706:	f7fe ff35 	bl	8000574 <__aeabi_i2d>
 800170a:	a30e      	add	r3, pc, #56	@ (adr r3, 8001744 <Unpack_BAT_GAUGE_OvrVIEW_bms_can+0x94>)
 800170c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001710:	f7fe ff9a 	bl	8000648 <__aeabi_dmul>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	4610      	mov	r0, r2
 800171a:	4619      	mov	r1, r3
 800171c:	f04f 0200 	mov.w	r2, #0
 8001720:	f04f 0300 	mov.w	r3, #0
 8001724:	f7fe fdda 	bl	80002dc <__adddf3>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	68f9      	ldr	r1, [r7, #12]
 800172e:	e9c1 2302 	strd	r2, r3, [r1, #8]
  _m->mon1.frame_cnt++;

  FMon_BAT_GAUGE_OvrVIEW_bms_can(&_m->mon1, BAT_GAUGE_OvrVIEW_CANID);
#endif // BMS_CAN_USE_DIAG_MONITORS

  return BAT_GAUGE_OvrVIEW_CANID;
 8001732:	4b03      	ldr	r3, [pc, #12]	@ (8001740 <Unpack_BAT_GAUGE_OvrVIEW_bms_can+0x90>)
}
 8001734:	4618      	mov	r0, r3
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	f3af 8000 	nop.w
 8001740:	001ff810 	.word	0x001ff810
 8001744:	d2f1a9fc 	.word	0xd2f1a9fc
 8001748:	3f50624d 	.word	0x3f50624d
 800174c:	00000000 	.word	0x00000000

08001750 <Unpack_BAT_GAUGE_ViT_bms_can>:
}

#endif // BMS_CAN_USE_CANSTRUCT

uint32_t Unpack_BAT_GAUGE_ViT_bms_can(BAT_GAUGE_ViT_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	4613      	mov	r3, r2
 800175c:	71fb      	strb	r3, [r7, #7]
  (void)dlc_;
  _m->BAT_gauge_vPack_ro = ((_d[1] & (0xFFU)) << 8) | (_d[0] & (0xFFU));
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	3301      	adds	r3, #1
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	021b      	lsls	r3, r3, #8
 8001766:	b29b      	uxth	r3, r3
 8001768:	68ba      	ldr	r2, [r7, #8]
 800176a:	7812      	ldrb	r2, [r2, #0]
 800176c:	4313      	orrs	r3, r2
 800176e:	b29a      	uxth	r2, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	801a      	strh	r2, [r3, #0]
#ifdef BMS_CAN_USE_SIGFLOAT
  _m->BAT_gauge_vPack_phys = (sigfloat_t)(BMS_CAN_BAT_gauge_vPack_ro_fromS(_m->BAT_gauge_vPack_ro));
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	881b      	ldrh	r3, [r3, #0]
 8001778:	4618      	mov	r0, r3
 800177a:	f7fe fefb 	bl	8000574 <__aeabi_i2d>
 800177e:	a333      	add	r3, pc, #204	@ (adr r3, 800184c <Unpack_BAT_GAUGE_ViT_bms_can+0xfc>)
 8001780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001784:	f7fe ff60 	bl	8000648 <__aeabi_dmul>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4610      	mov	r0, r2
 800178e:	4619      	mov	r1, r3
 8001790:	f04f 0200 	mov.w	r2, #0
 8001794:	f04f 0300 	mov.w	r3, #0
 8001798:	f7fe fda0 	bl	80002dc <__adddf3>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	68f9      	ldr	r1, [r7, #12]
 80017a2:	e9c1 2302 	strd	r2, r3, [r1, #8]
#endif // BMS_CAN_USE_SIGFLOAT

  _m->BAT_gauge_iPack_ro = ((_d[3] & (0xFFU)) << 8) | (_d[2] & (0xFFU));
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	3303      	adds	r3, #3
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	021b      	lsls	r3, r3, #8
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	68ba      	ldr	r2, [r7, #8]
 80017b2:	3202      	adds	r2, #2
 80017b4:	7812      	ldrb	r2, [r2, #0]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	b21a      	sxth	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	821a      	strh	r2, [r3, #16]
#ifdef BMS_CAN_USE_SIGFLOAT
  _m->BAT_gauge_iPack_phys = (sigfloat_t)(BMS_CAN_BAT_gauge_iPack_ro_fromS(_m->BAT_gauge_iPack_ro));
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe fed4 	bl	8000574 <__aeabi_i2d>
 80017cc:	a321      	add	r3, pc, #132	@ (adr r3, 8001854 <Unpack_BAT_GAUGE_ViT_bms_can+0x104>)
 80017ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d2:	f7fe ff39 	bl	8000648 <__aeabi_dmul>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	4610      	mov	r0, r2
 80017dc:	4619      	mov	r1, r3
 80017de:	f04f 0200 	mov.w	r2, #0
 80017e2:	f04f 0300 	mov.w	r3, #0
 80017e6:	f7fe fd79 	bl	80002dc <__adddf3>
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	68f9      	ldr	r1, [r7, #12]
 80017f0:	e9c1 2306 	strd	r2, r3, [r1, #24]
#endif // BMS_CAN_USE_SIGFLOAT

  _m->BAT_gauge_tPack_ro = ((_d[5] & (0xFFU)) << 8) | (_d[4] & (0xFFU));
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	3305      	adds	r3, #5
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	021b      	lsls	r3, r3, #8
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	3204      	adds	r2, #4
 8001802:	7812      	ldrb	r2, [r2, #0]
 8001804:	4313      	orrs	r3, r2
 8001806:	b29a      	uxth	r2, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	841a      	strh	r2, [r3, #32]
#ifdef BMS_CAN_USE_SIGFLOAT
  _m->BAT_gauge_tPack_phys = (sigfloat_t)(BMS_CAN_BAT_gauge_tPack_ro_fromS(_m->BAT_gauge_tPack_ro));
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	8c1b      	ldrh	r3, [r3, #32]
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe feaf 	bl	8000574 <__aeabi_i2d>
 8001816:	a30f      	add	r3, pc, #60	@ (adr r3, 8001854 <Unpack_BAT_GAUGE_ViT_bms_can+0x104>)
 8001818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181c:	f7fe ff14 	bl	8000648 <__aeabi_dmul>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4610      	mov	r0, r2
 8001826:	4619      	mov	r1, r3
 8001828:	f04f 0200 	mov.w	r2, #0
 800182c:	f04f 0300 	mov.w	r3, #0
 8001830:	f7fe fd54 	bl	80002dc <__adddf3>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	68f9      	ldr	r1, [r7, #12]
 800183a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
  _m->mon1.frame_cnt++;

  FMon_BAT_GAUGE_ViT_bms_can(&_m->mon1, BAT_GAUGE_ViT_CANID);
#endif // BMS_CAN_USE_DIAG_MONITORS

  return BAT_GAUGE_ViT_CANID;
 800183e:	4b02      	ldr	r3, [pc, #8]	@ (8001848 <Unpack_BAT_GAUGE_ViT_bms_can+0xf8>)
}
 8001840:	4618      	mov	r0, r3
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	001ff820 	.word	0x001ff820
 800184c:	d2f1a9fc 	.word	0xd2f1a9fc
 8001850:	3f50624d 	.word	0x3f50624d
 8001854:	47ae147b 	.word	0x47ae147b
 8001858:	3f847ae1 	.word	0x3f847ae1

0800185c <Handlebmsmessage_wrapper>:
typedef struct {
    uint32_t can_id;
    CAN_HandlerFunc handler;
} CAN_ID_HandlerMap;

void Handlebmsmessage_wrapper(uint32_t id, uint8_t* data, uint8_t dlc) {
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	4613      	mov	r3, r2
 8001868:	71fb      	strb	r3, [r7, #7]
    Handlebmsmessage(id, data, dlc);
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	461a      	mov	r2, r3
 800186e:	68b9      	ldr	r1, [r7, #8]
 8001870:	68f8      	ldr	r0, [r7, #12]
 8001872:	f7ff fa11 	bl	8000c98 <Handlebmsmessage>
}
 8001876:	bf00      	nop
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <Handleimumessage_wrapper>:

void Handleimumessage_wrapper(uint32_t id, uint8_t* data, uint8_t dlc) {
 800187e:	b580      	push	{r7, lr}
 8001880:	b084      	sub	sp, #16
 8001882:	af00      	add	r7, sp, #0
 8001884:	60f8      	str	r0, [r7, #12]
 8001886:	60b9      	str	r1, [r7, #8]
 8001888:	4613      	mov	r3, r2
 800188a:	71fb      	strb	r3, [r7, #7]
    Handleimumessage(id, data);
 800188c:	68b9      	ldr	r1, [r7, #8]
 800188e:	68f8      	ldr	r0, [r7, #12]
 8001890:	f7ff fb26 	bl	8000ee0 <Handleimumessage>
}
 8001894:	bf00      	nop
 8001896:	3710      	adds	r7, #16
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <HAL_FDCAN_RxFifo0Callback>:
};

typedef uint8_t Commandtype;
Commandtype received_cmd;

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]

    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 80018a6:	4b17      	ldr	r3, [pc, #92]	@ (8001904 <HAL_FDCAN_RxFifo0Callback+0x68>)
 80018a8:	4a17      	ldr	r2, [pc, #92]	@ (8001908 <HAL_FDCAN_RxFifo0Callback+0x6c>)
 80018aa:	2140      	movs	r1, #64	@ 0x40
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f002 fa8d 	bl	8003dcc <HAL_FDCAN_GetRxMessage>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d120      	bne.n	80018fa <HAL_FDCAN_RxFifo0Callback+0x5e>

        uint32_t id = RxHeader.Identifier;
 80018b8:	4b13      	ldr	r3, [pc, #76]	@ (8001908 <HAL_FDCAN_RxFifo0Callback+0x6c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	613b      	str	r3, [r7, #16]
        uint8_t dlc = RxHeader.DataLength;
 80018be:	4b12      	ldr	r3, [pc, #72]	@ (8001908 <HAL_FDCAN_RxFifo0Callback+0x6c>)
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	73fb      	strb	r3, [r7, #15]

        for (int i = 0; i < sizeof(can_handlers)/sizeof(can_handlers[0]); i++) {
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	e014      	b.n	80018f4 <HAL_FDCAN_RxFifo0Callback+0x58>
            if (can_handlers[i].can_id == id) {
 80018ca:	4a10      	ldr	r2, [pc, #64]	@ (800190c <HAL_FDCAN_RxFifo0Callback+0x70>)
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d10a      	bne.n	80018ee <HAL_FDCAN_RxFifo0Callback+0x52>
                can_handlers[i].handler(id, RxData, dlc);
 80018d8:	4a0c      	ldr	r2, [pc, #48]	@ (800190c <HAL_FDCAN_RxFifo0Callback+0x70>)
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	4413      	add	r3, r2
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	7bfa      	ldrb	r2, [r7, #15]
 80018e4:	4907      	ldr	r1, [pc, #28]	@ (8001904 <HAL_FDCAN_RxFifo0Callback+0x68>)
 80018e6:	6938      	ldr	r0, [r7, #16]
 80018e8:	4798      	blx	r3
                break;
 80018ea:	bf00      	nop

            }
        }
    }
}
 80018ec:	e005      	b.n	80018fa <HAL_FDCAN_RxFifo0Callback+0x5e>
        for (int i = 0; i < sizeof(can_handlers)/sizeof(can_handlers[0]); i++) {
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	3301      	adds	r3, #1
 80018f2:	617b      	str	r3, [r7, #20]
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	2b0c      	cmp	r3, #12
 80018f8:	d9e7      	bls.n	80018ca <HAL_FDCAN_RxFifo0Callback+0x2e>
}
 80018fa:	bf00      	nop
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20000578 	.word	0x20000578
 8001908:	20000580 	.word	0x20000580
 800190c:	0800a258 	.word	0x0800a258

08001910 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001916:	f001 fc8a 	bl	800322e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800191a:	f000 f83b 	bl	8001994 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800191e:	f000 fa1b 	bl	8001d58 <MX_GPIO_Init>
  MX_DMA_Init();
 8001922:	f000 f9e7 	bl	8001cf4 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8001926:	f000 f881 	bl	8001a2c <MX_FDCAN1_Init>
  MX_TIM3_Init();
 800192a:	f000 f995 	bl	8001c58 <MX_TIM3_Init>
  MX_SPI1_Init();
 800192e:	f000 f955 	bl	8001bdc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8001932:	4815      	ldr	r0, [pc, #84]	@ (8001988 <main+0x78>)
 8001934:	f005 fc86 	bl	8007244 <HAL_TIM_Base_Start_IT>

  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK) Error_Handler();
 8001938:	4814      	ldr	r0, [pc, #80]	@ (800198c <main+0x7c>)
 800193a:	f002 fa1f 	bl	8003d7c <HAL_FDCAN_Start>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <main+0x38>
 8001944:	f000 fa46 	bl	8001dd4 <Error_Handler>

  if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)  Error_Handler();
 8001948:	2200      	movs	r2, #0
 800194a:	2101      	movs	r1, #1
 800194c:	480f      	ldr	r0, [pc, #60]	@ (800198c <main+0x7c>)
 800194e:	f002 fb45 	bl	8003fdc <HAL_FDCAN_ActivateNotification>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <main+0x4c>
 8001958:	f000 fa3c 	bl	8001dd4 <Error_Handler>

 W5500_Init();
 800195c:	f001 f814 	bl	8002988 <W5500_Init>
 wizchip_setnetinfo(&netInfo);
 8001960:	480b      	ldr	r0, [pc, #44]	@ (8001990 <main+0x80>)
 8001962:	f001 fbfb 	bl	800315c <wizchip_setnetinfo>
// uint8_t SOCKET = socket(TCP_SOCKET,Sn_MR_TCP,LOCAL_PORT,0);
// if(SOCKET == TCP_SOCKET){
//
//	  listen(TCP_SOCKET);
//}
 uint8_t UDP_socket = socket(UDP_SOCKET,Sn_MR_UDP ,LOCAL_PORT,0);
 8001966:	2300      	movs	r3, #0
 8001968:	f241 125c 	movw	r2, #4444	@ 0x115c
 800196c:	2102      	movs	r1, #2
 800196e:	2000      	movs	r0, #0
 8001970:	f000 fa36 	bl	8001de0 <socket>
 8001974:	4603      	mov	r3, r0
 8001976:	71fb      	strb	r3, [r7, #7]

  if(UDP_socket != UDP_SOCKET){
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <main+0x72>
 	 Error_Handler();
 800197e:	f000 fa29 	bl	8001dd4 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  sendimudata();
 8001982:	f7ff fc59 	bl	8001238 <sendimudata>
 8001986:	e7fc      	b.n	8001982 <main+0x72>
 8001988:	2000052c 	.word	0x2000052c
 800198c:	200003a4 	.word	0x200003a4
 8001990:	20000010 	.word	0x20000010

08001994 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b094      	sub	sp, #80	@ 0x50
 8001998:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800199a:	f107 0318 	add.w	r3, r7, #24
 800199e:	2238      	movs	r2, #56	@ 0x38
 80019a0:	2100      	movs	r1, #0
 80019a2:	4618      	mov	r0, r3
 80019a4:	f006 fd1d 	bl	80083e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019a8:	1d3b      	adds	r3, r7, #4
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]
 80019b0:	609a      	str	r2, [r3, #8]
 80019b2:	60da      	str	r2, [r3, #12]
 80019b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80019b6:	2000      	movs	r0, #0
 80019b8:	f002 ffb2 	bl	8004920 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019bc:	2302      	movs	r3, #2
 80019be:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019c6:	2340      	movs	r3, #64	@ 0x40
 80019c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ca:	2302      	movs	r3, #2
 80019cc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019ce:	2302      	movs	r3, #2
 80019d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80019d2:	2301      	movs	r3, #1
 80019d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 80019d6:	2314      	movs	r3, #20
 80019d8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019da:	2302      	movs	r3, #2
 80019dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80019de:	2304      	movs	r3, #4
 80019e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80019e2:	2302      	movs	r3, #2
 80019e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019e6:	f107 0318 	add.w	r3, r7, #24
 80019ea:	4618      	mov	r0, r3
 80019ec:	f003 f84c 	bl	8004a88 <HAL_RCC_OscConfig>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80019f6:	f000 f9ed 	bl	8001dd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019fa:	230f      	movs	r3, #15
 80019fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019fe:	2303      	movs	r3, #3
 8001a00:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a06:	2300      	movs	r3, #0
 8001a08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a0e:	1d3b      	adds	r3, r7, #4
 8001a10:	2104      	movs	r1, #4
 8001a12:	4618      	mov	r0, r3
 8001a14:	f003 fb4a 	bl	80050ac <HAL_RCC_ClockConfig>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001a1e:	f000 f9d9 	bl	8001dd4 <Error_Handler>
  }
}
 8001a22:	bf00      	nop
 8001a24:	3750      	adds	r7, #80	@ 0x50
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
	...

08001a2c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08c      	sub	sp, #48	@ 0x30
 8001a30:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001a32:	4b61      	ldr	r3, [pc, #388]	@ (8001bb8 <MX_FDCAN1_Init+0x18c>)
 8001a34:	4a61      	ldr	r2, [pc, #388]	@ (8001bbc <MX_FDCAN1_Init+0x190>)
 8001a36:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001a38:	4b5f      	ldr	r3, [pc, #380]	@ (8001bb8 <MX_FDCAN1_Init+0x18c>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001a3e:	4b5e      	ldr	r3, [pc, #376]	@ (8001bb8 <MX_FDCAN1_Init+0x18c>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001a44:	4b5c      	ldr	r3, [pc, #368]	@ (8001bb8 <MX_FDCAN1_Init+0x18c>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8001a4a:	4b5b      	ldr	r3, [pc, #364]	@ (8001bb8 <MX_FDCAN1_Init+0x18c>)
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001a50:	4b59      	ldr	r3, [pc, #356]	@ (8001bb8 <MX_FDCAN1_Init+0x18c>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001a56:	4b58      	ldr	r3, [pc, #352]	@ (8001bb8 <MX_FDCAN1_Init+0x18c>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8001a5c:	4b56      	ldr	r3, [pc, #344]	@ (8001bb8 <MX_FDCAN1_Init+0x18c>)
 8001a5e:	2201      	movs	r2, #1
 8001a60:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 16;
 8001a62:	4b55      	ldr	r3, [pc, #340]	@ (8001bb8 <MX_FDCAN1_Init+0x18c>)
 8001a64:	2210      	movs	r2, #16
 8001a66:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 63;
 8001a68:	4b53      	ldr	r3, [pc, #332]	@ (8001bb8 <MX_FDCAN1_Init+0x18c>)
 8001a6a:	223f      	movs	r2, #63	@ 0x3f
 8001a6c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 16;
 8001a6e:	4b52      	ldr	r3, [pc, #328]	@ (8001bb8 <MX_FDCAN1_Init+0x18c>)
 8001a70:	2210      	movs	r2, #16
 8001a72:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 8001a74:	4b50      	ldr	r3, [pc, #320]	@ (8001bb8 <MX_FDCAN1_Init+0x18c>)
 8001a76:	2202      	movs	r2, #2
 8001a78:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8001a7a:	4b4f      	ldr	r3, [pc, #316]	@ (8001bb8 <MX_FDCAN1_Init+0x18c>)
 8001a7c:	2204      	movs	r2, #4
 8001a7e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 8001a80:	4b4d      	ldr	r3, [pc, #308]	@ (8001bb8 <MX_FDCAN1_Init+0x18c>)
 8001a82:	2205      	movs	r2, #5
 8001a84:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 8001a86:	4b4c      	ldr	r3, [pc, #304]	@ (8001bb8 <MX_FDCAN1_Init+0x18c>)
 8001a88:	2205      	movs	r2, #5
 8001a8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 3;
 8001a8c:	4b4a      	ldr	r3, [pc, #296]	@ (8001bb8 <MX_FDCAN1_Init+0x18c>)
 8001a8e:	2203      	movs	r2, #3
 8001a90:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 4;
 8001a92:	4b49      	ldr	r3, [pc, #292]	@ (8001bb8 <MX_FDCAN1_Init+0x18c>)
 8001a94:	2204      	movs	r2, #4
 8001a96:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001a98:	4b47      	ldr	r3, [pc, #284]	@ (8001bb8 <MX_FDCAN1_Init+0x18c>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001a9e:	4846      	ldr	r0, [pc, #280]	@ (8001bb8 <MX_FDCAN1_Init+0x18c>)
 8001aa0:	f001 ffb8 	bl	8003a14 <HAL_FDCAN_Init>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8001aaa:	f000 f993 	bl	8001dd4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef s;

        s.FilterConfig = FDCAN_FILTER_TO_RXFIFO0 ;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	627b      	str	r3, [r7, #36]	@ 0x24
        s.FilterType = FDCAN_FILTER_DUAL ;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	623b      	str	r3, [r7, #32]
        s.IdType= FDCAN_STANDARD_ID;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61bb      	str	r3, [r7, #24]
        s.FilterID1 = 0x110;
 8001aba:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001abe:	62bb      	str	r3, [r7, #40]	@ 0x28
        s.FilterID2 = 0x11;
 8001ac0:	2311      	movs	r3, #17
 8001ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        s.FilterIndex = 0;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61fb      	str	r3, [r7, #28]
    if(HAL_FDCAN_ConfigFilter(&hfdcan1,&s)!= HAL_OK){
 8001ac8:	f107 0318 	add.w	r3, r7, #24
 8001acc:	4619      	mov	r1, r3
 8001ace:	483a      	ldr	r0, [pc, #232]	@ (8001bb8 <MX_FDCAN1_Init+0x18c>)
 8001ad0:	f002 f8fa 	bl	8003cc8 <HAL_FDCAN_ConfigFilter>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_FDCAN1_Init+0xb2>

         Error_Handler();
 8001ada:	f000 f97b 	bl	8001dd4 <Error_Handler>

        }
        s.FilterID1 = 0x12;
 8001ade:	2312      	movs	r3, #18
 8001ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
        s.FilterID2 = 0x13;
 8001ae2:	2313      	movs	r3, #19
 8001ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        s.FilterIndex = 1;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	61fb      	str	r3, [r7, #28]

    if(HAL_FDCAN_ConfigFilter(&hfdcan1,&s)!= HAL_OK){
 8001aea:	f107 0318 	add.w	r3, r7, #24
 8001aee:	4619      	mov	r1, r3
 8001af0:	4831      	ldr	r0, [pc, #196]	@ (8001bb8 <MX_FDCAN1_Init+0x18c>)
 8001af2:	f002 f8e9 	bl	8003cc8 <HAL_FDCAN_ConfigFilter>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_FDCAN1_Init+0xd4>

      	 Error_Handler();
 8001afc:	f000 f96a 	bl	8001dd4 <Error_Handler>
        }
        s.FilterID1 = 0x22;
 8001b00:	2322      	movs	r3, #34	@ 0x22
 8001b02:	62bb      	str	r3, [r7, #40]	@ 0x28
        s.FilterID2 = 0x34;
 8001b04:	2334      	movs	r3, #52	@ 0x34
 8001b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
        s.FilterIndex = 2;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	61fb      	str	r3, [r7, #28]

    if(HAL_FDCAN_ConfigFilter(&hfdcan1,&s)!= HAL_OK){
 8001b0c:	f107 0318 	add.w	r3, r7, #24
 8001b10:	4619      	mov	r1, r3
 8001b12:	4829      	ldr	r0, [pc, #164]	@ (8001bb8 <MX_FDCAN1_Init+0x18c>)
 8001b14:	f002 f8d8 	bl	8003cc8 <HAL_FDCAN_ConfigFilter>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_FDCAN1_Init+0xf6>

  	     Error_Handler();
 8001b1e:	f000 f959 	bl	8001dd4 <Error_Handler>
        }
  FDCAN_FilterTypeDef Filterconfigure;

        Filterconfigure.FilterConfig = FDCAN_FILTER_TO_RXFIFO0 ;
 8001b22:	2301      	movs	r3, #1
 8001b24:	60fb      	str	r3, [r7, #12]
        Filterconfigure.FilterType = FDCAN_FILTER_DUAL;
 8001b26:	2301      	movs	r3, #1
 8001b28:	60bb      	str	r3, [r7, #8]
        Filterconfigure.IdType= FDCAN_EXTENDED_ID;
 8001b2a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b2e:	603b      	str	r3, [r7, #0]
        Filterconfigure.FilterIndex = 0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	607b      	str	r3, [r7, #4]
        Filterconfigure.FilterID1 = 0x1FF310;
 8001b34:	4b22      	ldr	r3, [pc, #136]	@ (8001bc0 <MX_FDCAN1_Init+0x194>)
 8001b36:	613b      	str	r3, [r7, #16]
        Filterconfigure.FilterID2 = 0x1FF310;
 8001b38:	4b21      	ldr	r3, [pc, #132]	@ (8001bc0 <MX_FDCAN1_Init+0x194>)
 8001b3a:	617b      	str	r3, [r7, #20]
     if(HAL_FDCAN_ConfigFilter(&hfdcan1,&Filterconfigure)!= HAL_OK){
 8001b3c:	463b      	mov	r3, r7
 8001b3e:	4619      	mov	r1, r3
 8001b40:	481d      	ldr	r0, [pc, #116]	@ (8001bb8 <MX_FDCAN1_Init+0x18c>)
 8001b42:	f002 f8c1 	bl	8003cc8 <HAL_FDCAN_ConfigFilter>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_FDCAN1_Init+0x124>

         Error_Handler();
 8001b4c:	f000 f942 	bl	8001dd4 <Error_Handler>

        }

        Filterconfigure.FilterIndex = 1;
 8001b50:	2301      	movs	r3, #1
 8001b52:	607b      	str	r3, [r7, #4]
        Filterconfigure.FilterID1 = 0x1FF615;
 8001b54:	4b1b      	ldr	r3, [pc, #108]	@ (8001bc4 <MX_FDCAN1_Init+0x198>)
 8001b56:	613b      	str	r3, [r7, #16]
        Filterconfigure.FilterID2 = 0x1FF110;
 8001b58:	4b1b      	ldr	r3, [pc, #108]	@ (8001bc8 <MX_FDCAN1_Init+0x19c>)
 8001b5a:	617b      	str	r3, [r7, #20]
     if(HAL_FDCAN_ConfigFilter(&hfdcan1,&Filterconfigure)!= HAL_OK){
 8001b5c:	463b      	mov	r3, r7
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4815      	ldr	r0, [pc, #84]	@ (8001bb8 <MX_FDCAN1_Init+0x18c>)
 8001b62:	f002 f8b1 	bl	8003cc8 <HAL_FDCAN_ConfigFilter>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_FDCAN1_Init+0x144>

         Error_Handler();
 8001b6c:	f000 f932 	bl	8001dd4 <Error_Handler>

        }

        Filterconfigure.FilterIndex = 2;
 8001b70:	2302      	movs	r3, #2
 8001b72:	607b      	str	r3, [r7, #4]
        Filterconfigure.FilterID1 = 0x1FF611;
 8001b74:	4b15      	ldr	r3, [pc, #84]	@ (8001bcc <MX_FDCAN1_Init+0x1a0>)
 8001b76:	613b      	str	r3, [r7, #16]
        Filterconfigure.FilterID2 = 0x1FF612;
 8001b78:	4b15      	ldr	r3, [pc, #84]	@ (8001bd0 <MX_FDCAN1_Init+0x1a4>)
 8001b7a:	617b      	str	r3, [r7, #20]
     if(HAL_FDCAN_ConfigFilter(&hfdcan1,&Filterconfigure)!= HAL_OK){
 8001b7c:	463b      	mov	r3, r7
 8001b7e:	4619      	mov	r1, r3
 8001b80:	480d      	ldr	r0, [pc, #52]	@ (8001bb8 <MX_FDCAN1_Init+0x18c>)
 8001b82:	f002 f8a1 	bl	8003cc8 <HAL_FDCAN_ConfigFilter>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_FDCAN1_Init+0x164>

         Error_Handler();
 8001b8c:	f000 f922 	bl	8001dd4 <Error_Handler>

        }

        Filterconfigure.FilterIndex = 3;
 8001b90:	2303      	movs	r3, #3
 8001b92:	607b      	str	r3, [r7, #4]
        Filterconfigure.FilterID1 = 0x1FF810;
 8001b94:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd4 <MX_FDCAN1_Init+0x1a8>)
 8001b96:	613b      	str	r3, [r7, #16]
        Filterconfigure.FilterID2 = 0x1FF820;
 8001b98:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd8 <MX_FDCAN1_Init+0x1ac>)
 8001b9a:	617b      	str	r3, [r7, #20]
     if(HAL_FDCAN_ConfigFilter(&hfdcan1,&Filterconfigure)!= HAL_OK){
 8001b9c:	463b      	mov	r3, r7
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4805      	ldr	r0, [pc, #20]	@ (8001bb8 <MX_FDCAN1_Init+0x18c>)
 8001ba2:	f002 f891 	bl	8003cc8 <HAL_FDCAN_ConfigFilter>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_FDCAN1_Init+0x184>

      	 Error_Handler();
 8001bac:	f000 f912 	bl	8001dd4 <Error_Handler>

        }
  /* USER CODE END FDCAN1_Init 2 */

}
 8001bb0:	bf00      	nop
 8001bb2:	3730      	adds	r7, #48	@ 0x30
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	200003a4 	.word	0x200003a4
 8001bbc:	40006400 	.word	0x40006400
 8001bc0:	001ff310 	.word	0x001ff310
 8001bc4:	001ff615 	.word	0x001ff615
 8001bc8:	001ff110 	.word	0x001ff110
 8001bcc:	001ff611 	.word	0x001ff611
 8001bd0:	001ff612 	.word	0x001ff612
 8001bd4:	001ff810 	.word	0x001ff810
 8001bd8:	001ff820 	.word	0x001ff820

08001bdc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001be0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c50 <MX_SPI1_Init+0x74>)
 8001be2:	4a1c      	ldr	r2, [pc, #112]	@ (8001c54 <MX_SPI1_Init+0x78>)
 8001be4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001be6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c50 <MX_SPI1_Init+0x74>)
 8001be8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001bec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bee:	4b18      	ldr	r3, [pc, #96]	@ (8001c50 <MX_SPI1_Init+0x74>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bf4:	4b16      	ldr	r3, [pc, #88]	@ (8001c50 <MX_SPI1_Init+0x74>)
 8001bf6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001bfa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bfc:	4b14      	ldr	r3, [pc, #80]	@ (8001c50 <MX_SPI1_Init+0x74>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c02:	4b13      	ldr	r3, [pc, #76]	@ (8001c50 <MX_SPI1_Init+0x74>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c08:	4b11      	ldr	r3, [pc, #68]	@ (8001c50 <MX_SPI1_Init+0x74>)
 8001c0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c0e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001c10:	4b0f      	ldr	r3, [pc, #60]	@ (8001c50 <MX_SPI1_Init+0x74>)
 8001c12:	2210      	movs	r2, #16
 8001c14:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c16:	4b0e      	ldr	r3, [pc, #56]	@ (8001c50 <MX_SPI1_Init+0x74>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c50 <MX_SPI1_Init+0x74>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c22:	4b0b      	ldr	r3, [pc, #44]	@ (8001c50 <MX_SPI1_Init+0x74>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001c28:	4b09      	ldr	r3, [pc, #36]	@ (8001c50 <MX_SPI1_Init+0x74>)
 8001c2a:	2207      	movs	r2, #7
 8001c2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c2e:	4b08      	ldr	r3, [pc, #32]	@ (8001c50 <MX_SPI1_Init+0x74>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c34:	4b06      	ldr	r3, [pc, #24]	@ (8001c50 <MX_SPI1_Init+0x74>)
 8001c36:	2208      	movs	r2, #8
 8001c38:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c3a:	4805      	ldr	r0, [pc, #20]	@ (8001c50 <MX_SPI1_Init+0x74>)
 8001c3c:	f003 fe68 	bl	8005910 <HAL_SPI_Init>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001c46:	f000 f8c5 	bl	8001dd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20000408 	.word	0x20000408
 8001c54:	40013000 	.word	0x40013000

08001c58 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b088      	sub	sp, #32
 8001c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c5e:	f107 0310 	add.w	r3, r7, #16
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	605a      	str	r2, [r3, #4]
 8001c68:	609a      	str	r2, [r3, #8]
 8001c6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c6c:	1d3b      	adds	r3, r7, #4
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	605a      	str	r2, [r3, #4]
 8001c74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c76:	4b1d      	ldr	r3, [pc, #116]	@ (8001cec <MX_TIM3_Init+0x94>)
 8001c78:	4a1d      	ldr	r2, [pc, #116]	@ (8001cf0 <MX_TIM3_Init+0x98>)
 8001c7a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 159;
 8001c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cec <MX_TIM3_Init+0x94>)
 8001c7e:	229f      	movs	r2, #159	@ 0x9f
 8001c80:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c82:	4b1a      	ldr	r3, [pc, #104]	@ (8001cec <MX_TIM3_Init+0x94>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001c88:	4b18      	ldr	r3, [pc, #96]	@ (8001cec <MX_TIM3_Init+0x94>)
 8001c8a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c8e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c90:	4b16      	ldr	r3, [pc, #88]	@ (8001cec <MX_TIM3_Init+0x94>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c96:	4b15      	ldr	r3, [pc, #84]	@ (8001cec <MX_TIM3_Init+0x94>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c9c:	4813      	ldr	r0, [pc, #76]	@ (8001cec <MX_TIM3_Init+0x94>)
 8001c9e:	f005 fa79 	bl	8007194 <HAL_TIM_Base_Init>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001ca8:	f000 f894 	bl	8001dd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cb0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001cb2:	f107 0310 	add.w	r3, r7, #16
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	480c      	ldr	r0, [pc, #48]	@ (8001cec <MX_TIM3_Init+0x94>)
 8001cba:	f005 fb3b 	bl	8007334 <HAL_TIM_ConfigClockSource>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001cc4:	f000 f886 	bl	8001dd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cd0:	1d3b      	adds	r3, r7, #4
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4805      	ldr	r0, [pc, #20]	@ (8001cec <MX_TIM3_Init+0x94>)
 8001cd6:	f005 fd93 	bl	8007800 <HAL_TIMEx_MasterConfigSynchronization>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001ce0:	f000 f878 	bl	8001dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ce4:	bf00      	nop
 8001ce6:	3720      	adds	r7, #32
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	2000052c 	.word	0x2000052c
 8001cf0:	40000400 	.word	0x40000400

08001cf4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001cfa:	4b16      	ldr	r3, [pc, #88]	@ (8001d54 <MX_DMA_Init+0x60>)
 8001cfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cfe:	4a15      	ldr	r2, [pc, #84]	@ (8001d54 <MX_DMA_Init+0x60>)
 8001d00:	f043 0304 	orr.w	r3, r3, #4
 8001d04:	6493      	str	r3, [r2, #72]	@ 0x48
 8001d06:	4b13      	ldr	r3, [pc, #76]	@ (8001d54 <MX_DMA_Init+0x60>)
 8001d08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d0a:	f003 0304 	and.w	r3, r3, #4
 8001d0e:	607b      	str	r3, [r7, #4]
 8001d10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d12:	4b10      	ldr	r3, [pc, #64]	@ (8001d54 <MX_DMA_Init+0x60>)
 8001d14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d16:	4a0f      	ldr	r2, [pc, #60]	@ (8001d54 <MX_DMA_Init+0x60>)
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	6493      	str	r3, [r2, #72]	@ 0x48
 8001d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d54 <MX_DMA_Init+0x60>)
 8001d20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	603b      	str	r3, [r7, #0]
 8001d28:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	200b      	movs	r0, #11
 8001d30:	f001 fbc9 	bl	80034c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001d34:	200b      	movs	r0, #11
 8001d36:	f001 fbe0 	bl	80034fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	200c      	movs	r0, #12
 8001d40:	f001 fbc1 	bl	80034c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001d44:	200c      	movs	r0, #12
 8001d46:	f001 fbd8 	bl	80034fa <HAL_NVIC_EnableIRQ>

}
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40021000 	.word	0x40021000

08001d58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b088      	sub	sp, #32
 8001d5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5e:	f107 030c 	add.w	r3, r7, #12
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	605a      	str	r2, [r3, #4]
 8001d68:	609a      	str	r2, [r3, #8]
 8001d6a:	60da      	str	r2, [r3, #12]
 8001d6c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d6e:	4b18      	ldr	r3, [pc, #96]	@ (8001dd0 <MX_GPIO_Init+0x78>)
 8001d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d72:	4a17      	ldr	r2, [pc, #92]	@ (8001dd0 <MX_GPIO_Init+0x78>)
 8001d74:	f043 0320 	orr.w	r3, r3, #32
 8001d78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d7a:	4b15      	ldr	r3, [pc, #84]	@ (8001dd0 <MX_GPIO_Init+0x78>)
 8001d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d7e:	f003 0320 	and.w	r3, r3, #32
 8001d82:	60bb      	str	r3, [r7, #8]
 8001d84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d86:	4b12      	ldr	r3, [pc, #72]	@ (8001dd0 <MX_GPIO_Init+0x78>)
 8001d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d8a:	4a11      	ldr	r2, [pc, #68]	@ (8001dd0 <MX_GPIO_Init+0x78>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d92:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd0 <MX_GPIO_Init+0x78>)
 8001d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	607b      	str	r3, [r7, #4]
 8001d9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|CS_PIN_Pin, GPIO_PIN_RESET);
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2113      	movs	r1, #19
 8001da2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001da6:	f002 fd89 	bl	80048bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 CS_PIN_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|CS_PIN_Pin;
 8001daa:	2313      	movs	r3, #19
 8001dac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dae:	2301      	movs	r3, #1
 8001db0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db6:	2300      	movs	r3, #0
 8001db8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dba:	f107 030c 	add.w	r3, r7, #12
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dc4:	f002 fbf8 	bl	80045b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001dc8:	bf00      	nop
 8001dca:	3720      	adds	r7, #32
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40021000 	.word	0x40021000

08001dd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dd8:	b672      	cpsid	i
}
 8001dda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ddc:	bf00      	nop
 8001dde:	e7fd      	b.n	8001ddc <Error_Handler+0x8>

08001de0 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8001de0:	b590      	push	{r4, r7, lr}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4604      	mov	r4, r0
 8001de8:	4608      	mov	r0, r1
 8001dea:	4611      	mov	r1, r2
 8001dec:	461a      	mov	r2, r3
 8001dee:	4623      	mov	r3, r4
 8001df0:	71fb      	strb	r3, [r7, #7]
 8001df2:	4603      	mov	r3, r0
 8001df4:	71bb      	strb	r3, [r7, #6]
 8001df6:	460b      	mov	r3, r1
 8001df8:	80bb      	strh	r3, [r7, #4]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	2b08      	cmp	r3, #8
 8001e02:	d902      	bls.n	8001e0a <socket+0x2a>
 8001e04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e08:	e0ef      	b.n	8001fea <socket+0x20a>
	switch(protocol)
 8001e0a:	79bb      	ldrb	r3, [r7, #6]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d005      	beq.n	8001e1c <socket+0x3c>
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	dd11      	ble.n	8001e38 <socket+0x58>
 8001e14:	3b02      	subs	r3, #2
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d80e      	bhi.n	8001e38 <socket+0x58>
            if(taddr == 0) return SOCKERR_SOCKINIT;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8001e1a:	e010      	b.n	8001e3e <socket+0x5e>
            getSIPR((uint8_t*)&taddr);
 8001e1c:	f107 030c 	add.w	r3, r7, #12
 8001e20:	2204      	movs	r2, #4
 8001e22:	4619      	mov	r1, r3
 8001e24:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8001e28:	f000 fe7c 	bl	8002b24 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d105      	bne.n	8001e3e <socket+0x5e>
 8001e32:	f06f 0302 	mvn.w	r3, #2
 8001e36:	e0d8      	b.n	8001fea <socket+0x20a>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8001e38:	f06f 0304 	mvn.w	r3, #4
 8001e3c:	e0d5      	b.n	8001fea <socket+0x20a>
         break;
 8001e3e:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8001e40:	78fb      	ldrb	r3, [r7, #3]
 8001e42:	f003 0304 	and.w	r3, r3, #4
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d002      	beq.n	8001e50 <socket+0x70>
 8001e4a:	f06f 0305 	mvn.w	r3, #5
 8001e4e:	e0cc      	b.n	8001fea <socket+0x20a>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8001e50:	78fb      	ldrb	r3, [r7, #3]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d028      	beq.n	8001ea8 <socket+0xc8>
	{
   	switch(protocol)
 8001e56:	79bb      	ldrb	r3, [r7, #6]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d002      	beq.n	8001e62 <socket+0x82>
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d008      	beq.n	8001e72 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8001e60:	e022      	b.n	8001ea8 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8001e62:	78fb      	ldrb	r3, [r7, #3]
 8001e64:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d11a      	bne.n	8001ea2 <socket+0xc2>
 8001e6c:	f06f 0305 	mvn.w	r3, #5
 8001e70:	e0bb      	b.n	8001fea <socket+0x20a>
   	      if(flag & SF_IGMP_VER2)
 8001e72:	78fb      	ldrb	r3, [r7, #3]
 8001e74:	f003 0320 	and.w	r3, r3, #32
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d006      	beq.n	8001e8a <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8001e7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	db02      	blt.n	8001e8a <socket+0xaa>
 8001e84:	f06f 0305 	mvn.w	r3, #5
 8001e88:	e0af      	b.n	8001fea <socket+0x20a>
      	      if(flag & SF_UNI_BLOCK)
 8001e8a:	78fb      	ldrb	r3, [r7, #3]
 8001e8c:	f003 0310 	and.w	r3, r3, #16
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d008      	beq.n	8001ea6 <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8001e94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	db04      	blt.n	8001ea6 <socket+0xc6>
 8001e9c:	f06f 0305 	mvn.w	r3, #5
 8001ea0:	e0a3      	b.n	8001fea <socket+0x20a>
   	      break;
 8001ea2:	bf00      	nop
 8001ea4:	e000      	b.n	8001ea8 <socket+0xc8>
   	      break;
 8001ea6:	bf00      	nop
   	}
   }
	close(sn);
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f000 f8ac 	bl	8002008 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8001eb0:	79fb      	ldrb	r3, [r7, #7]
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	00d8      	lsls	r0, r3, #3
 8001eb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ebc:	f023 030f 	bic.w	r3, r3, #15
 8001ec0:	b25a      	sxtb	r2, r3
 8001ec2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	b25b      	sxtb	r3, r3
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	4619      	mov	r1, r3
 8001ece:	f000 fddb 	bl	8002a88 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8001ed2:	88bb      	ldrh	r3, [r7, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d110      	bne.n	8001efa <socket+0x11a>
	{
	   port = sock_any_port++;
 8001ed8:	4b46      	ldr	r3, [pc, #280]	@ (8001ff4 <socket+0x214>)
 8001eda:	881b      	ldrh	r3, [r3, #0]
 8001edc:	1c5a      	adds	r2, r3, #1
 8001ede:	b291      	uxth	r1, r2
 8001ee0:	4a44      	ldr	r2, [pc, #272]	@ (8001ff4 <socket+0x214>)
 8001ee2:	8011      	strh	r1, [r2, #0]
 8001ee4:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8001ee6:	4b43      	ldr	r3, [pc, #268]	@ (8001ff4 <socket+0x214>)
 8001ee8:	881b      	ldrh	r3, [r3, #0]
 8001eea:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d103      	bne.n	8001efa <socket+0x11a>
 8001ef2:	4b40      	ldr	r3, [pc, #256]	@ (8001ff4 <socket+0x214>)
 8001ef4:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8001ef8:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	3301      	adds	r3, #1
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001f06:	461a      	mov	r2, r3
 8001f08:	88bb      	ldrh	r3, [r7, #4]
 8001f0a:	0a1b      	lsrs	r3, r3, #8
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	4619      	mov	r1, r3
 8001f12:	4610      	mov	r0, r2
 8001f14:	f000 fdb8 	bl	8002a88 <WIZCHIP_WRITE>
 8001f18:	79fb      	ldrb	r3, [r7, #7]
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f24:	461a      	mov	r2, r3
 8001f26:	88bb      	ldrh	r3, [r7, #4]
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4610      	mov	r0, r2
 8001f2e:	f000 fdab 	bl	8002a88 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8001f32:	79fb      	ldrb	r3, [r7, #7]
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	3301      	adds	r3, #1
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001f3e:	2101      	movs	r1, #1
 8001f40:	4618      	mov	r0, r3
 8001f42:	f000 fda1 	bl	8002a88 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001f46:	bf00      	nop
 8001f48:	79fb      	ldrb	r3, [r7, #7]
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001f54:	4618      	mov	r0, r3
 8001f56:	f000 fd4b 	bl	80029f0 <WIZCHIP_READ>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1f3      	bne.n	8001f48 <socket+0x168>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8001f60:	79fb      	ldrb	r3, [r7, #7]
 8001f62:	2201      	movs	r2, #1
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	b21b      	sxth	r3, r3
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	b21a      	sxth	r2, r3
 8001f6e:	4b22      	ldr	r3, [pc, #136]	@ (8001ff8 <socket+0x218>)
 8001f70:	881b      	ldrh	r3, [r3, #0]
 8001f72:	b21b      	sxth	r3, r3
 8001f74:	4013      	ands	r3, r2
 8001f76:	b21b      	sxth	r3, r3
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ff8 <socket+0x218>)
 8001f7c:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8001f7e:	78fb      	ldrb	r3, [r7, #3]
 8001f80:	f003 0201 	and.w	r2, r3, #1
 8001f84:	79fb      	ldrb	r3, [r7, #7]
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	b21a      	sxth	r2, r3
 8001f8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ff8 <socket+0x218>)
 8001f8e:	881b      	ldrh	r3, [r3, #0]
 8001f90:	b21b      	sxth	r3, r3
 8001f92:	4313      	orrs	r3, r2
 8001f94:	b21b      	sxth	r3, r3
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	4b17      	ldr	r3, [pc, #92]	@ (8001ff8 <socket+0x218>)
 8001f9a:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	b21b      	sxth	r3, r3
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	b21a      	sxth	r2, r3
 8001faa:	4b14      	ldr	r3, [pc, #80]	@ (8001ffc <socket+0x21c>)
 8001fac:	881b      	ldrh	r3, [r3, #0]
 8001fae:	b21b      	sxth	r3, r3
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	b21b      	sxth	r3, r3
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	4b11      	ldr	r3, [pc, #68]	@ (8001ffc <socket+0x21c>)
 8001fb8:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8001fba:	79fb      	ldrb	r3, [r7, #7]
 8001fbc:	4a10      	ldr	r2, [pc, #64]	@ (8002000 <socket+0x220>)
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8001fc4:	79fb      	ldrb	r3, [r7, #7]
 8001fc6:	4a0f      	ldr	r2, [pc, #60]	@ (8002004 <socket+0x224>)
 8001fc8:	2100      	movs	r1, #0
 8001fca:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8001fcc:	bf00      	nop
 8001fce:	79fb      	ldrb	r3, [r7, #7]
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f000 fd08 	bl	80029f0 <WIZCHIP_READ>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0f3      	beq.n	8001fce <socket+0x1ee>
   return (int8_t)sn;
 8001fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8001fea:	4618      	mov	r0, r3
 8001fec:	3714      	adds	r7, #20
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd90      	pop	{r4, r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20000004 	.word	0x20000004
 8001ff8:	200005a8 	.word	0x200005a8
 8001ffc:	200005aa 	.word	0x200005aa
 8002000:	200005ac 	.word	0x200005ac
 8002004:	200005bc 	.word	0x200005bc

08002008 <close>:

int8_t close(uint8_t sn)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8002012:	79fb      	ldrb	r3, [r7, #7]
 8002014:	2b08      	cmp	r3, #8
 8002016:	d902      	bls.n	800201e <close+0x16>
 8002018:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800201c:	e055      	b.n	80020ca <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 800201e:	79fb      	ldrb	r3, [r7, #7]
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	3301      	adds	r3, #1
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800202a:	2110      	movs	r1, #16
 800202c:	4618      	mov	r0, r3
 800202e:	f000 fd2b 	bl	8002a88 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8002032:	bf00      	nop
 8002034:	79fb      	ldrb	r3, [r7, #7]
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	3301      	adds	r3, #1
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002040:	4618      	mov	r0, r3
 8002042:	f000 fcd5 	bl	80029f0 <WIZCHIP_READ>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1f3      	bne.n	8002034 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 800204c:	79fb      	ldrb	r3, [r7, #7]
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	3301      	adds	r3, #1
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002058:	211f      	movs	r1, #31
 800205a:	4618      	mov	r0, r3
 800205c:	f000 fd14 	bl	8002a88 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	2201      	movs	r2, #1
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	b21b      	sxth	r3, r3
 800206a:	43db      	mvns	r3, r3
 800206c:	b21a      	sxth	r2, r3
 800206e:	4b19      	ldr	r3, [pc, #100]	@ (80020d4 <close+0xcc>)
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	b21b      	sxth	r3, r3
 8002074:	4013      	ands	r3, r2
 8002076:	b21b      	sxth	r3, r3
 8002078:	b29a      	uxth	r2, r3
 800207a:	4b16      	ldr	r3, [pc, #88]	@ (80020d4 <close+0xcc>)
 800207c:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	2201      	movs	r2, #1
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	b21b      	sxth	r3, r3
 8002088:	43db      	mvns	r3, r3
 800208a:	b21a      	sxth	r2, r3
 800208c:	4b12      	ldr	r3, [pc, #72]	@ (80020d8 <close+0xd0>)
 800208e:	881b      	ldrh	r3, [r3, #0]
 8002090:	b21b      	sxth	r3, r3
 8002092:	4013      	ands	r3, r2
 8002094:	b21b      	sxth	r3, r3
 8002096:	b29a      	uxth	r2, r3
 8002098:	4b0f      	ldr	r3, [pc, #60]	@ (80020d8 <close+0xd0>)
 800209a:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 800209c:	79fb      	ldrb	r3, [r7, #7]
 800209e:	4a0f      	ldr	r2, [pc, #60]	@ (80020dc <close+0xd4>)
 80020a0:	2100      	movs	r1, #0
 80020a2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 80020a6:	79fb      	ldrb	r3, [r7, #7]
 80020a8:	4a0d      	ldr	r2, [pc, #52]	@ (80020e0 <close+0xd8>)
 80020aa:	2100      	movs	r1, #0
 80020ac:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 80020ae:	bf00      	nop
 80020b0:	79fb      	ldrb	r3, [r7, #7]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	3301      	adds	r3, #1
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80020bc:	4618      	mov	r0, r3
 80020be:	f000 fc97 	bl	80029f0 <WIZCHIP_READ>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1f3      	bne.n	80020b0 <close+0xa8>
	return SOCK_OK;
 80020c8:	2301      	movs	r3, #1
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	200005a8 	.word	0x200005a8
 80020d8:	200005aa 	.word	0x200005aa
 80020dc:	200005ac 	.word	0x200005ac
 80020e0:	200005bc 	.word	0x200005bc

080020e4 <sendto>:
   //return len;
   return (int32_t)len;
}

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	607b      	str	r3, [r7, #4]
 80020ee:	4603      	mov	r3, r0
 80020f0:	73fb      	strb	r3, [r7, #15]
 80020f2:	4613      	mov	r3, r2
 80020f4:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 80020fe:	7bfb      	ldrb	r3, [r7, #15]
 8002100:	2b08      	cmp	r3, #8
 8002102:	d902      	bls.n	800210a <sendto+0x26>
 8002104:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002108:	e11a      	b.n	8002340 <sendto+0x25c>
   switch(getSn_MR(sn) & 0x0F)
 800210a:	7bfb      	ldrb	r3, [r7, #15]
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	3301      	adds	r3, #1
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	4618      	mov	r0, r3
 8002114:	f000 fc6c 	bl	80029f0 <WIZCHIP_READ>
 8002118:	4603      	mov	r3, r0
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	3b02      	subs	r3, #2
 8002120:	2b02      	cmp	r3, #2
 8002122:	d902      	bls.n	800212a <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8002124:	f06f 0304 	mvn.w	r3, #4
 8002128:	e10a      	b.n	8002340 <sendto+0x25c>
         break;
 800212a:	bf00      	nop
   }
   CHECK_SOCKDATA();
 800212c:	89bb      	ldrh	r3, [r7, #12]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d102      	bne.n	8002138 <sendto+0x54>
 8002132:	f06f 030d 	mvn.w	r3, #13
 8002136:	e103      	b.n	8002340 <sendto+0x25c>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	021b      	lsls	r3, r3, #8
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	3201      	adds	r2, #1
 8002146:	7812      	ldrb	r2, [r2, #0]
 8002148:	4413      	add	r3, r2
 800214a:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	021b      	lsls	r3, r3, #8
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	3202      	adds	r2, #2
 8002154:	7812      	ldrb	r2, [r2, #0]
 8002156:	4413      	add	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	021b      	lsls	r3, r3, #8
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	3203      	adds	r2, #3
 8002162:	7812      	ldrb	r2, [r2, #0]
 8002164:	4413      	add	r3, r2
 8002166:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10e      	bne.n	800218c <sendto+0xa8>
 800216e:	7bfb      	ldrb	r3, [r7, #15]
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	3301      	adds	r3, #1
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	4618      	mov	r0, r3
 8002178:	f000 fc3a 	bl	80029f0 <WIZCHIP_READ>
 800217c:	4603      	mov	r3, r0
 800217e:	f003 0304 	and.w	r3, r3, #4
 8002182:	2b04      	cmp	r3, #4
 8002184:	d002      	beq.n	800218c <sendto+0xa8>
 8002186:	f06f 030b 	mvn.w	r3, #11
 800218a:	e0d9      	b.n	8002340 <sendto+0x25c>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 800218c:	8c3b      	ldrh	r3, [r7, #32]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10e      	bne.n	80021b0 <sendto+0xcc>
 8002192:	7bfb      	ldrb	r3, [r7, #15]
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	3301      	adds	r3, #1
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	4618      	mov	r0, r3
 800219c:	f000 fc28 	bl	80029f0 <WIZCHIP_READ>
 80021a0:	4603      	mov	r3, r0
 80021a2:	f003 0304 	and.w	r3, r3, #4
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	d002      	beq.n	80021b0 <sendto+0xcc>
 80021aa:	f06f 030a 	mvn.w	r3, #10
 80021ae:	e0c7      	b.n	8002340 <sendto+0x25c>
   tmp = getSn_SR(sn);
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	3301      	adds	r3, #1
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80021bc:	4618      	mov	r0, r3
 80021be:	f000 fc17 	bl	80029f0 <WIZCHIP_READ>
 80021c2:	4603      	mov	r3, r0
 80021c4:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 80021c6:	7dfb      	ldrb	r3, [r7, #23]
 80021c8:	2b42      	cmp	r3, #66	@ 0x42
 80021ca:	d008      	beq.n	80021de <sendto+0xfa>
 80021cc:	7dfb      	ldrb	r3, [r7, #23]
 80021ce:	2b22      	cmp	r3, #34	@ 0x22
 80021d0:	d005      	beq.n	80021de <sendto+0xfa>
 80021d2:	7dfb      	ldrb	r3, [r7, #23]
 80021d4:	2b32      	cmp	r3, #50	@ 0x32
 80021d6:	d002      	beq.n	80021de <sendto+0xfa>
 80021d8:	f06f 0306 	mvn.w	r3, #6
 80021dc:	e0b0      	b.n	8002340 <sendto+0x25c>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 80021de:	7bfb      	ldrb	r3, [r7, #15]
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	3301      	adds	r3, #1
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 80021ea:	2204      	movs	r2, #4
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f000 fcf8 	bl	8002be4 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	3301      	adds	r3, #1
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002200:	461a      	mov	r2, r3
 8002202:	8c3b      	ldrh	r3, [r7, #32]
 8002204:	0a1b      	lsrs	r3, r3, #8
 8002206:	b29b      	uxth	r3, r3
 8002208:	b2db      	uxtb	r3, r3
 800220a:	4619      	mov	r1, r3
 800220c:	4610      	mov	r0, r2
 800220e:	f000 fc3b 	bl	8002a88 <WIZCHIP_WRITE>
 8002212:	7bfb      	ldrb	r3, [r7, #15]
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	3301      	adds	r3, #1
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 800221e:	461a      	mov	r2, r3
 8002220:	8c3b      	ldrh	r3, [r7, #32]
 8002222:	b2db      	uxtb	r3, r3
 8002224:	4619      	mov	r1, r3
 8002226:	4610      	mov	r0, r2
 8002228:	f000 fc2e 	bl	8002a88 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 800222c:	7bfb      	ldrb	r3, [r7, #15]
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	3301      	adds	r3, #1
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8002238:	4618      	mov	r0, r3
 800223a:	f000 fbd9 	bl	80029f0 <WIZCHIP_READ>
 800223e:	4603      	mov	r3, r0
 8002240:	029b      	lsls	r3, r3, #10
 8002242:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8002244:	89ba      	ldrh	r2, [r7, #12]
 8002246:	8abb      	ldrh	r3, [r7, #20]
 8002248:	429a      	cmp	r2, r3
 800224a:	d901      	bls.n	8002250 <sendto+0x16c>
 800224c:	8abb      	ldrh	r3, [r7, #20]
 800224e:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	4618      	mov	r0, r3
 8002254:	f000 fd26 	bl	8002ca4 <getSn_TX_FSR>
 8002258:	4603      	mov	r3, r0
 800225a:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 800225c:	7bfb      	ldrb	r3, [r7, #15]
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	3301      	adds	r3, #1
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002268:	4618      	mov	r0, r3
 800226a:	f000 fbc1 	bl	80029f0 <WIZCHIP_READ>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d102      	bne.n	800227a <sendto+0x196>
 8002274:	f06f 0303 	mvn.w	r3, #3
 8002278:	e062      	b.n	8002340 <sendto+0x25c>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800227a:	4b33      	ldr	r3, [pc, #204]	@ (8002348 <sendto+0x264>)
 800227c:	881b      	ldrh	r3, [r3, #0]
 800227e:	461a      	mov	r2, r3
 8002280:	7bfb      	ldrb	r3, [r7, #15]
 8002282:	fa42 f303 	asr.w	r3, r2, r3
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b00      	cmp	r3, #0
 800228c:	d005      	beq.n	800229a <sendto+0x1b6>
 800228e:	89ba      	ldrh	r2, [r7, #12]
 8002290:	8abb      	ldrh	r3, [r7, #20]
 8002292:	429a      	cmp	r2, r3
 8002294:	d901      	bls.n	800229a <sendto+0x1b6>
 8002296:	2300      	movs	r3, #0
 8002298:	e052      	b.n	8002340 <sendto+0x25c>
      if(len <= freesize) break;
 800229a:	89ba      	ldrh	r2, [r7, #12]
 800229c:	8abb      	ldrh	r3, [r7, #20]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d900      	bls.n	80022a4 <sendto+0x1c0>
      freesize = getSn_TX_FSR(sn);
 80022a2:	e7d5      	b.n	8002250 <sendto+0x16c>
      if(len <= freesize) break;
 80022a4:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 80022a6:	89ba      	ldrh	r2, [r7, #12]
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
 80022aa:	68b9      	ldr	r1, [r7, #8]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f000 fd42 	bl	8002d36 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 80022b2:	7bfb      	ldrb	r3, [r7, #15]
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	3301      	adds	r3, #1
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80022be:	2120      	movs	r1, #32
 80022c0:	4618      	mov	r0, r3
 80022c2:	f000 fbe1 	bl	8002a88 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 80022c6:	bf00      	nop
 80022c8:	7bfb      	ldrb	r3, [r7, #15]
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	3301      	adds	r3, #1
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80022d4:	4618      	mov	r0, r3
 80022d6:	f000 fb8b 	bl	80029f0 <WIZCHIP_READ>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1f3      	bne.n	80022c8 <sendto+0x1e4>
   while(1)
   {
      tmp = getSn_IR(sn);
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	3301      	adds	r3, #1
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80022ec:	4618      	mov	r0, r3
 80022ee:	f000 fb7f 	bl	80029f0 <WIZCHIP_READ>
 80022f2:	4603      	mov	r3, r0
 80022f4:	f003 031f 	and.w	r3, r3, #31
 80022f8:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 80022fa:	7dfb      	ldrb	r3, [r7, #23]
 80022fc:	f003 0310 	and.w	r3, r3, #16
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00c      	beq.n	800231e <sendto+0x23a>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8002304:	7bfb      	ldrb	r3, [r7, #15]
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	3301      	adds	r3, #1
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002310:	2110      	movs	r1, #16
 8002312:	4618      	mov	r0, r3
 8002314:	f000 fbb8 	bl	8002a88 <WIZCHIP_WRITE>
         break;
 8002318:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800231a:	89bb      	ldrh	r3, [r7, #12]
 800231c:	e010      	b.n	8002340 <sendto+0x25c>
      else if(tmp & Sn_IR_TIMEOUT)
 800231e:	7dfb      	ldrb	r3, [r7, #23]
 8002320:	f003 0308 	and.w	r3, r3, #8
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0db      	beq.n	80022e0 <sendto+0x1fc>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8002328:	7bfb      	ldrb	r3, [r7, #15]
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	3301      	adds	r3, #1
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002334:	2108      	movs	r1, #8
 8002336:	4618      	mov	r0, r3
 8002338:	f000 fba6 	bl	8002a88 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 800233c:	f06f 030c 	mvn.w	r3, #12
}
 8002340:	4618      	mov	r0, r3
 8002342:	3718      	adds	r7, #24
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	200005a8 	.word	0x200005a8

0800234c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002352:	4b0f      	ldr	r3, [pc, #60]	@ (8002390 <HAL_MspInit+0x44>)
 8002354:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002356:	4a0e      	ldr	r2, [pc, #56]	@ (8002390 <HAL_MspInit+0x44>)
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	6613      	str	r3, [r2, #96]	@ 0x60
 800235e:	4b0c      	ldr	r3, [pc, #48]	@ (8002390 <HAL_MspInit+0x44>)
 8002360:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	607b      	str	r3, [r7, #4]
 8002368:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800236a:	4b09      	ldr	r3, [pc, #36]	@ (8002390 <HAL_MspInit+0x44>)
 800236c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800236e:	4a08      	ldr	r2, [pc, #32]	@ (8002390 <HAL_MspInit+0x44>)
 8002370:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002374:	6593      	str	r3, [r2, #88]	@ 0x58
 8002376:	4b06      	ldr	r3, [pc, #24]	@ (8002390 <HAL_MspInit+0x44>)
 8002378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800237a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800237e:	603b      	str	r3, [r7, #0]
 8002380:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002382:	f002 fb71 	bl	8004a68 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40021000 	.word	0x40021000

08002394 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b09e      	sub	sp, #120	@ 0x78
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800239c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	609a      	str	r2, [r3, #8]
 80023a8:	60da      	str	r2, [r3, #12]
 80023aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023ac:	f107 0310 	add.w	r3, r7, #16
 80023b0:	2254      	movs	r2, #84	@ 0x54
 80023b2:	2100      	movs	r1, #0
 80023b4:	4618      	mov	r0, r3
 80023b6:	f006 f814 	bl	80083e2 <memset>
  if(hfdcan->Instance==FDCAN1)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a24      	ldr	r2, [pc, #144]	@ (8002450 <HAL_FDCAN_MspInit+0xbc>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d141      	bne.n	8002448 <HAL_FDCAN_MspInit+0xb4>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80023c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023c8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80023ca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80023ce:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023d0:	f107 0310 	add.w	r3, r7, #16
 80023d4:	4618      	mov	r0, r3
 80023d6:	f003 f84d 	bl	8005474 <HAL_RCCEx_PeriphCLKConfig>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80023e0:	f7ff fcf8 	bl	8001dd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80023e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002454 <HAL_FDCAN_MspInit+0xc0>)
 80023e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e8:	4a1a      	ldr	r2, [pc, #104]	@ (8002454 <HAL_FDCAN_MspInit+0xc0>)
 80023ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80023ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80023f0:	4b18      	ldr	r3, [pc, #96]	@ (8002454 <HAL_FDCAN_MspInit+0xc0>)
 80023f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023fc:	4b15      	ldr	r3, [pc, #84]	@ (8002454 <HAL_FDCAN_MspInit+0xc0>)
 80023fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002400:	4a14      	ldr	r2, [pc, #80]	@ (8002454 <HAL_FDCAN_MspInit+0xc0>)
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002408:	4b12      	ldr	r3, [pc, #72]	@ (8002454 <HAL_FDCAN_MspInit+0xc0>)
 800240a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	60bb      	str	r3, [r7, #8]
 8002412:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002414:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002418:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241a:	2302      	movs	r3, #2
 800241c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241e:	2300      	movs	r3, #0
 8002420:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002422:	2303      	movs	r3, #3
 8002424:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002426:	2309      	movs	r3, #9
 8002428:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800242e:	4619      	mov	r1, r3
 8002430:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002434:	f002 f8c0 	bl	80045b8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8002438:	2200      	movs	r2, #0
 800243a:	2100      	movs	r1, #0
 800243c:	2015      	movs	r0, #21
 800243e:	f001 f842 	bl	80034c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002442:	2015      	movs	r0, #21
 8002444:	f001 f859 	bl	80034fa <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8002448:	bf00      	nop
 800244a:	3778      	adds	r7, #120	@ 0x78
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40006400 	.word	0x40006400
 8002454:	40021000 	.word	0x40021000

08002458 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b08a      	sub	sp, #40	@ 0x28
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002460:	f107 0314 	add.w	r3, r7, #20
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	605a      	str	r2, [r3, #4]
 800246a:	609a      	str	r2, [r3, #8]
 800246c:	60da      	str	r2, [r3, #12]
 800246e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a49      	ldr	r2, [pc, #292]	@ (800259c <HAL_SPI_MspInit+0x144>)
 8002476:	4293      	cmp	r3, r2
 8002478:	f040 808c 	bne.w	8002594 <HAL_SPI_MspInit+0x13c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800247c:	4b48      	ldr	r3, [pc, #288]	@ (80025a0 <HAL_SPI_MspInit+0x148>)
 800247e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002480:	4a47      	ldr	r2, [pc, #284]	@ (80025a0 <HAL_SPI_MspInit+0x148>)
 8002482:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002486:	6613      	str	r3, [r2, #96]	@ 0x60
 8002488:	4b45      	ldr	r3, [pc, #276]	@ (80025a0 <HAL_SPI_MspInit+0x148>)
 800248a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800248c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002490:	613b      	str	r3, [r7, #16]
 8002492:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002494:	4b42      	ldr	r3, [pc, #264]	@ (80025a0 <HAL_SPI_MspInit+0x148>)
 8002496:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002498:	4a41      	ldr	r2, [pc, #260]	@ (80025a0 <HAL_SPI_MspInit+0x148>)
 800249a:	f043 0301 	orr.w	r3, r3, #1
 800249e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024a0:	4b3f      	ldr	r3, [pc, #252]	@ (80025a0 <HAL_SPI_MspInit+0x148>)
 80024a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	60fb      	str	r3, [r7, #12]
 80024aa:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80024ac:	2320      	movs	r3, #32
 80024ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b0:	2302      	movs	r3, #2
 80024b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b4:	2300      	movs	r3, #0
 80024b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b8:	2300      	movs	r3, #0
 80024ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024bc:	2305      	movs	r3, #5
 80024be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c0:	f107 0314 	add.w	r3, r7, #20
 80024c4:	4619      	mov	r1, r3
 80024c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024ca:	f002 f875 	bl	80045b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024ce:	23c0      	movs	r3, #192	@ 0xc0
 80024d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d2:	2302      	movs	r3, #2
 80024d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024da:	2303      	movs	r3, #3
 80024dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024de:	2305      	movs	r3, #5
 80024e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e2:	f107 0314 	add.w	r3, r7, #20
 80024e6:	4619      	mov	r1, r3
 80024e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024ec:	f002 f864 	bl	80045b8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel1;
 80024f0:	4b2c      	ldr	r3, [pc, #176]	@ (80025a4 <HAL_SPI_MspInit+0x14c>)
 80024f2:	4a2d      	ldr	r2, [pc, #180]	@ (80025a8 <HAL_SPI_MspInit+0x150>)
 80024f4:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80024f6:	4b2b      	ldr	r3, [pc, #172]	@ (80025a4 <HAL_SPI_MspInit+0x14c>)
 80024f8:	220a      	movs	r2, #10
 80024fa:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024fc:	4b29      	ldr	r3, [pc, #164]	@ (80025a4 <HAL_SPI_MspInit+0x14c>)
 80024fe:	2200      	movs	r2, #0
 8002500:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002502:	4b28      	ldr	r3, [pc, #160]	@ (80025a4 <HAL_SPI_MspInit+0x14c>)
 8002504:	2200      	movs	r2, #0
 8002506:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002508:	4b26      	ldr	r3, [pc, #152]	@ (80025a4 <HAL_SPI_MspInit+0x14c>)
 800250a:	2280      	movs	r2, #128	@ 0x80
 800250c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800250e:	4b25      	ldr	r3, [pc, #148]	@ (80025a4 <HAL_SPI_MspInit+0x14c>)
 8002510:	2200      	movs	r2, #0
 8002512:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002514:	4b23      	ldr	r3, [pc, #140]	@ (80025a4 <HAL_SPI_MspInit+0x14c>)
 8002516:	2200      	movs	r2, #0
 8002518:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800251a:	4b22      	ldr	r3, [pc, #136]	@ (80025a4 <HAL_SPI_MspInit+0x14c>)
 800251c:	2200      	movs	r2, #0
 800251e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002520:	4b20      	ldr	r3, [pc, #128]	@ (80025a4 <HAL_SPI_MspInit+0x14c>)
 8002522:	2200      	movs	r2, #0
 8002524:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002526:	481f      	ldr	r0, [pc, #124]	@ (80025a4 <HAL_SPI_MspInit+0x14c>)
 8002528:	f001 f802 	bl	8003530 <HAL_DMA_Init>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <HAL_SPI_MspInit+0xde>
    {
      Error_Handler();
 8002532:	f7ff fc4f 	bl	8001dd4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a1a      	ldr	r2, [pc, #104]	@ (80025a4 <HAL_SPI_MspInit+0x14c>)
 800253a:	659a      	str	r2, [r3, #88]	@ 0x58
 800253c:	4a19      	ldr	r2, [pc, #100]	@ (80025a4 <HAL_SPI_MspInit+0x14c>)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel2;
 8002542:	4b1a      	ldr	r3, [pc, #104]	@ (80025ac <HAL_SPI_MspInit+0x154>)
 8002544:	4a1a      	ldr	r2, [pc, #104]	@ (80025b0 <HAL_SPI_MspInit+0x158>)
 8002546:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8002548:	4b18      	ldr	r3, [pc, #96]	@ (80025ac <HAL_SPI_MspInit+0x154>)
 800254a:	220b      	movs	r2, #11
 800254c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800254e:	4b17      	ldr	r3, [pc, #92]	@ (80025ac <HAL_SPI_MspInit+0x154>)
 8002550:	2210      	movs	r2, #16
 8002552:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002554:	4b15      	ldr	r3, [pc, #84]	@ (80025ac <HAL_SPI_MspInit+0x154>)
 8002556:	2200      	movs	r2, #0
 8002558:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800255a:	4b14      	ldr	r3, [pc, #80]	@ (80025ac <HAL_SPI_MspInit+0x154>)
 800255c:	2280      	movs	r2, #128	@ 0x80
 800255e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002560:	4b12      	ldr	r3, [pc, #72]	@ (80025ac <HAL_SPI_MspInit+0x154>)
 8002562:	2200      	movs	r2, #0
 8002564:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002566:	4b11      	ldr	r3, [pc, #68]	@ (80025ac <HAL_SPI_MspInit+0x154>)
 8002568:	2200      	movs	r2, #0
 800256a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800256c:	4b0f      	ldr	r3, [pc, #60]	@ (80025ac <HAL_SPI_MspInit+0x154>)
 800256e:	2200      	movs	r2, #0
 8002570:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002572:	4b0e      	ldr	r3, [pc, #56]	@ (80025ac <HAL_SPI_MspInit+0x154>)
 8002574:	2200      	movs	r2, #0
 8002576:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002578:	480c      	ldr	r0, [pc, #48]	@ (80025ac <HAL_SPI_MspInit+0x154>)
 800257a:	f000 ffd9 	bl	8003530 <HAL_DMA_Init>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <HAL_SPI_MspInit+0x130>
    {
      Error_Handler();
 8002584:	f7ff fc26 	bl	8001dd4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a08      	ldr	r2, [pc, #32]	@ (80025ac <HAL_SPI_MspInit+0x154>)
 800258c:	655a      	str	r2, [r3, #84]	@ 0x54
 800258e:	4a07      	ldr	r2, [pc, #28]	@ (80025ac <HAL_SPI_MspInit+0x154>)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002594:	bf00      	nop
 8002596:	3728      	adds	r7, #40	@ 0x28
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40013000 	.word	0x40013000
 80025a0:	40021000 	.word	0x40021000
 80025a4:	2000046c 	.word	0x2000046c
 80025a8:	40020008 	.word	0x40020008
 80025ac:	200004cc 	.word	0x200004cc
 80025b0:	4002001c 	.word	0x4002001c

080025b4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a0a      	ldr	r2, [pc, #40]	@ (80025ec <HAL_TIM_Base_MspInit+0x38>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d10b      	bne.n	80025de <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025c6:	4b0a      	ldr	r3, [pc, #40]	@ (80025f0 <HAL_TIM_Base_MspInit+0x3c>)
 80025c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ca:	4a09      	ldr	r2, [pc, #36]	@ (80025f0 <HAL_TIM_Base_MspInit+0x3c>)
 80025cc:	f043 0302 	orr.w	r3, r3, #2
 80025d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80025d2:	4b07      	ldr	r3, [pc, #28]	@ (80025f0 <HAL_TIM_Base_MspInit+0x3c>)
 80025d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 80025de:	bf00      	nop
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	40000400 	.word	0x40000400
 80025f0:	40021000 	.word	0x40021000

080025f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025f8:	bf00      	nop
 80025fa:	e7fd      	b.n	80025f8 <NMI_Handler+0x4>

080025fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002600:	bf00      	nop
 8002602:	e7fd      	b.n	8002600 <HardFault_Handler+0x4>

08002604 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002608:	bf00      	nop
 800260a:	e7fd      	b.n	8002608 <MemManage_Handler+0x4>

0800260c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002610:	bf00      	nop
 8002612:	e7fd      	b.n	8002610 <BusFault_Handler+0x4>

08002614 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002618:	bf00      	nop
 800261a:	e7fd      	b.n	8002618 <UsageFault_Handler+0x4>

0800261c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002620:	bf00      	nop
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800262a:	b480      	push	{r7}
 800262c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800262e:	bf00      	nop
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800263c:	bf00      	nop
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800264a:	f000 fe43 	bl	80032d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800264e:	bf00      	nop
 8002650:	bd80      	pop	{r7, pc}
	...

08002654 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002658:	4802      	ldr	r0, [pc, #8]	@ (8002664 <DMA1_Channel1_IRQHandler+0x10>)
 800265a:	f001 f88c 	bl	8003776 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	2000046c 	.word	0x2000046c

08002668 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800266c:	4802      	ldr	r0, [pc, #8]	@ (8002678 <DMA1_Channel2_IRQHandler+0x10>)
 800266e:	f001 f882 	bl	8003776 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002672:	bf00      	nop
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	200004cc 	.word	0x200004cc

0800267c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002680:	4802      	ldr	r0, [pc, #8]	@ (800268c <FDCAN1_IT0_IRQHandler+0x10>)
 8002682:	f001 fd91 	bl	80041a8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002686:	bf00      	nop
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	200003a4 	.word	0x200003a4

08002690 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  return 1;
 8002694:	2301      	movs	r3, #1
}
 8002696:	4618      	mov	r0, r3
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <_kill>:

int _kill(int pid, int sig)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026aa:	f005 feed 	bl	8008488 <__errno>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2216      	movs	r2, #22
 80026b2:	601a      	str	r2, [r3, #0]
  return -1;
 80026b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <_exit>:

void _exit (int status)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026c8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7ff ffe7 	bl	80026a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80026d2:	bf00      	nop
 80026d4:	e7fd      	b.n	80026d2 <_exit+0x12>

080026d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b086      	sub	sp, #24
 80026da:	af00      	add	r7, sp, #0
 80026dc:	60f8      	str	r0, [r7, #12]
 80026de:	60b9      	str	r1, [r7, #8]
 80026e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e2:	2300      	movs	r3, #0
 80026e4:	617b      	str	r3, [r7, #20]
 80026e6:	e00a      	b.n	80026fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026e8:	f3af 8000 	nop.w
 80026ec:	4601      	mov	r1, r0
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	1c5a      	adds	r2, r3, #1
 80026f2:	60ba      	str	r2, [r7, #8]
 80026f4:	b2ca      	uxtb	r2, r1
 80026f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	3301      	adds	r3, #1
 80026fc:	617b      	str	r3, [r7, #20]
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	429a      	cmp	r2, r3
 8002704:	dbf0      	blt.n	80026e8 <_read+0x12>
  }

  return len;
 8002706:	687b      	ldr	r3, [r7, #4]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800271c:	2300      	movs	r3, #0
 800271e:	617b      	str	r3, [r7, #20]
 8002720:	e009      	b.n	8002736 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	1c5a      	adds	r2, r3, #1
 8002726:	60ba      	str	r2, [r7, #8]
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	3301      	adds	r3, #1
 8002734:	617b      	str	r3, [r7, #20]
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	429a      	cmp	r2, r3
 800273c:	dbf1      	blt.n	8002722 <_write+0x12>
  }
  return len;
 800273e:	687b      	ldr	r3, [r7, #4]
}
 8002740:	4618      	mov	r0, r3
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <_close>:

int _close(int file)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002750:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002754:	4618      	mov	r0, r3
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002770:	605a      	str	r2, [r3, #4]
  return 0;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <_isatty>:

int _isatty(int file)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002788:	2301      	movs	r3, #1
}
 800278a:	4618      	mov	r0, r3
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002796:	b480      	push	{r7}
 8002798:	b085      	sub	sp, #20
 800279a:	af00      	add	r7, sp, #0
 800279c:	60f8      	str	r0, [r7, #12]
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3714      	adds	r7, #20
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027b8:	4a14      	ldr	r2, [pc, #80]	@ (800280c <_sbrk+0x5c>)
 80027ba:	4b15      	ldr	r3, [pc, #84]	@ (8002810 <_sbrk+0x60>)
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027c4:	4b13      	ldr	r3, [pc, #76]	@ (8002814 <_sbrk+0x64>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d102      	bne.n	80027d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027cc:	4b11      	ldr	r3, [pc, #68]	@ (8002814 <_sbrk+0x64>)
 80027ce:	4a12      	ldr	r2, [pc, #72]	@ (8002818 <_sbrk+0x68>)
 80027d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027d2:	4b10      	ldr	r3, [pc, #64]	@ (8002814 <_sbrk+0x64>)
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4413      	add	r3, r2
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d207      	bcs.n	80027f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027e0:	f005 fe52 	bl	8008488 <__errno>
 80027e4:	4603      	mov	r3, r0
 80027e6:	220c      	movs	r2, #12
 80027e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80027ee:	e009      	b.n	8002804 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027f0:	4b08      	ldr	r3, [pc, #32]	@ (8002814 <_sbrk+0x64>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027f6:	4b07      	ldr	r3, [pc, #28]	@ (8002814 <_sbrk+0x64>)
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4413      	add	r3, r2
 80027fe:	4a05      	ldr	r2, [pc, #20]	@ (8002814 <_sbrk+0x64>)
 8002800:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002802:	68fb      	ldr	r3, [r7, #12]
}
 8002804:	4618      	mov	r0, r3
 8002806:	3718      	adds	r7, #24
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	20020000 	.word	0x20020000
 8002810:	00000400 	.word	0x00000400
 8002814:	200005c4 	.word	0x200005c4
 8002818:	20000720 	.word	0x20000720

0800281c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002820:	4b06      	ldr	r3, [pc, #24]	@ (800283c <SystemInit+0x20>)
 8002822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002826:	4a05      	ldr	r2, [pc, #20]	@ (800283c <SystemInit+0x20>)
 8002828:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800282c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002830:	bf00      	nop
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <W5500_Select>:
//    printf("Connected to server\n");
//
//
//}
void W5500_Select(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PIN_GPIO_Port,CS_PIN_Pin,GPIO_PIN_RESET);
 8002844:	2200      	movs	r2, #0
 8002846:	2110      	movs	r1, #16
 8002848:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800284c:	f002 f836 	bl	80048bc <HAL_GPIO_WritePin>
}
 8002850:	bf00      	nop
 8002852:	bd80      	pop	{r7, pc}

08002854 <W5500_Unselect>:

void W5500_Unselect(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_SET);
 8002858:	2201      	movs	r2, #1
 800285a:	2110      	movs	r1, #16
 800285c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002860:	f002 f82c 	bl	80048bc <HAL_GPIO_WritePin>
}
 8002864:	bf00      	nop
 8002866:	bd80      	pop	{r7, pc}

08002868 <W5500_ReadByte>:

uint8_t W5500_ReadByte(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
    uint8_t byte;
    HAL_SPI_Receive(&hspi1, &byte, 1, HAL_MAX_DELAY);
 800286e:	1df9      	adds	r1, r7, #7
 8002870:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002874:	2201      	movs	r2, #1
 8002876:	4804      	ldr	r0, [pc, #16]	@ (8002888 <W5500_ReadByte+0x20>)
 8002878:	f003 fa6b 	bl	8005d52 <HAL_SPI_Receive>
    return byte;
 800287c:	79fb      	ldrb	r3, [r7, #7]
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	20000408 	.word	0x20000408

0800288c <W5500_WriteByte>:
void W5500_WriteByte(uint8_t byte)

{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi1, &byte, 1, HAL_MAX_DELAY);
 8002896:	1df9      	adds	r1, r7, #7
 8002898:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800289c:	2201      	movs	r2, #1
 800289e:	4803      	ldr	r0, [pc, #12]	@ (80028ac <W5500_WriteByte+0x20>)
 80028a0:	f003 f8e1 	bl	8005a66 <HAL_SPI_Transmit>
}
 80028a4:	bf00      	nop
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	20000408 	.word	0x20000408

080028b0 <W5500_ReadBuff>:

void W5500_ReadBuff(uint8_t* buff, uint16_t len)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	460b      	mov	r3, r1
 80028ba:	807b      	strh	r3, [r7, #2]
	 spiRxComplete = 0;
 80028bc:	4b0a      	ldr	r3, [pc, #40]	@ (80028e8 <W5500_ReadBuff+0x38>)
 80028be:	2200      	movs	r2, #0
 80028c0:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Receive_DMA(&hspi1, buff, len);
 80028c2:	887b      	ldrh	r3, [r7, #2]
 80028c4:	461a      	mov	r2, r3
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	4808      	ldr	r0, [pc, #32]	@ (80028ec <W5500_ReadBuff+0x3c>)
 80028ca:	f003 fe87 	bl	80065dc <HAL_SPI_Receive_DMA>
    while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80028ce:	bf00      	nop
 80028d0:	4806      	ldr	r0, [pc, #24]	@ (80028ec <W5500_ReadBuff+0x3c>)
 80028d2:	f004 f95b 	bl	8006b8c <HAL_SPI_GetState>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d1f9      	bne.n	80028d0 <W5500_ReadBuff+0x20>

}
 80028dc:	bf00      	nop
 80028de:	bf00      	nop
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	2000000d 	.word	0x2000000d
 80028ec:	20000408 	.word	0x20000408

080028f0 <W5500_WriteBuff>:
void W5500_WriteBuff(uint8_t* buff, uint16_t len)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	460b      	mov	r3, r1
 80028fa:	807b      	strh	r3, [r7, #2]
	 spiTxComplete = 0;
 80028fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002928 <W5500_WriteBuff+0x38>)
 80028fe:	2200      	movs	r2, #0
 8002900:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit_DMA(&hspi1, buff, len);
 8002902:	887b      	ldrh	r3, [r7, #2]
 8002904:	461a      	mov	r2, r3
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	4808      	ldr	r0, [pc, #32]	@ (800292c <W5500_WriteBuff+0x3c>)
 800290a:	f003 fd79 	bl	8006400 <HAL_SPI_Transmit_DMA>
    while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800290e:	bf00      	nop
 8002910:	4806      	ldr	r0, [pc, #24]	@ (800292c <W5500_WriteBuff+0x3c>)
 8002912:	f004 f93b 	bl	8006b8c <HAL_SPI_GetState>
 8002916:	4603      	mov	r3, r0
 8002918:	2b01      	cmp	r3, #1
 800291a:	d1f9      	bne.n	8002910 <W5500_WriteBuff+0x20>

}
 800291c:	bf00      	nop
 800291e:	bf00      	nop
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	2000000c 	.word	0x2000000c
 800292c:	20000408 	.word	0x20000408

08002930 <HAL_SPI_TxCpltCallback>:
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
    if(hspi->Instance == SPI1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a05      	ldr	r2, [pc, #20]	@ (8002954 <HAL_SPI_TxCpltCallback+0x24>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d102      	bne.n	8002948 <HAL_SPI_TxCpltCallback+0x18>
    {
    	 spiTxComplete = 1;
 8002942:	4b05      	ldr	r3, [pc, #20]	@ (8002958 <HAL_SPI_TxCpltCallback+0x28>)
 8002944:	2201      	movs	r2, #1
 8002946:	701a      	strb	r2, [r3, #0]
    }
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	40013000 	.word	0x40013000
 8002958:	2000000c 	.word	0x2000000c

0800295c <HAL_SPI_RxCpltCallback>:
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
    if(hspi->Instance == SPI1)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a05      	ldr	r2, [pc, #20]	@ (8002980 <HAL_SPI_RxCpltCallback+0x24>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d102      	bne.n	8002974 <HAL_SPI_RxCpltCallback+0x18>
    {
    	 spiRxComplete = 1;
 800296e:	4b05      	ldr	r3, [pc, #20]	@ (8002984 <HAL_SPI_RxCpltCallback+0x28>)
 8002970:	2201      	movs	r2, #1
 8002972:	701a      	strb	r2, [r3, #0]
    }
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	40013000 	.word	0x40013000
 8002984:	2000000d 	.word	0x2000000d

08002988 <W5500_Init>:
void W5500_Init(){
 8002988:	b590      	push	{r4, r7, lr}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0

    reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 800298e:	4911      	ldr	r1, [pc, #68]	@ (80029d4 <W5500_Init+0x4c>)
 8002990:	4811      	ldr	r0, [pc, #68]	@ (80029d8 <W5500_Init+0x50>)
 8002992:	f000 fa8d 	bl	8002eb0 <reg_wizchip_cs_cbfunc>
    reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 8002996:	4911      	ldr	r1, [pc, #68]	@ (80029dc <W5500_Init+0x54>)
 8002998:	4811      	ldr	r0, [pc, #68]	@ (80029e0 <W5500_Init+0x58>)
 800299a:	f000 faaf 	bl	8002efc <reg_wizchip_spi_cbfunc>
    reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 800299e:	4911      	ldr	r1, [pc, #68]	@ (80029e4 <W5500_Init+0x5c>)
 80029a0:	4811      	ldr	r0, [pc, #68]	@ (80029e8 <W5500_Init+0x60>)
 80029a2:	f000 fad7 	bl	8002f54 <reg_wizchip_spiburst_cbfunc>

    uint8_t memsize[2][8] = {{2,2,2,2,2,2,2,2}, {2,2,2,2,2,2,2,2}};
 80029a6:	4b11      	ldr	r3, [pc, #68]	@ (80029ec <W5500_Init+0x64>)
 80029a8:	463c      	mov	r4, r7
 80029aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if(wizchip_init(memsize[0], memsize[1]) < 0)
 80029b0:	463b      	mov	r3, r7
 80029b2:	f103 0208 	add.w	r2, r3, #8
 80029b6:	463b      	mov	r3, r7
 80029b8:	4611      	mov	r1, r2
 80029ba:	4618      	mov	r0, r3
 80029bc:	f000 fb42 	bl	8003044 <wizchip_init>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	da01      	bge.n	80029ca <W5500_Init+0x42>
    {
    	Error_Handler();
 80029c6:	f7ff fa05 	bl	8001dd4 <Error_Handler>
    }

}
 80029ca:	bf00      	nop
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd90      	pop	{r4, r7, pc}
 80029d2:	bf00      	nop
 80029d4:	08002855 	.word	0x08002855
 80029d8:	08002841 	.word	0x08002841
 80029dc:	0800288d 	.word	0x0800288d
 80029e0:	08002869 	.word	0x08002869
 80029e4:	080028f1 	.word	0x080028f1
 80029e8:	080028b1 	.word	0x080028b1
 80029ec:	0800a248 	.word	0x0800a248

080029f0 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 80029f8:	4b22      	ldr	r3, [pc, #136]	@ (8002a84 <WIZCHIP_READ+0x94>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	4798      	blx	r3
   WIZCHIP.CS._select();
 80029fe:	4b21      	ldr	r3, [pc, #132]	@ (8002a84 <WIZCHIP_READ+0x94>)
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002a04:	4b1f      	ldr	r3, [pc, #124]	@ (8002a84 <WIZCHIP_READ+0x94>)
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d003      	beq.n	8002a14 <WIZCHIP_READ+0x24>
 8002a0c:	4b1d      	ldr	r3, [pc, #116]	@ (8002a84 <WIZCHIP_READ+0x94>)
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d114      	bne.n	8002a3e <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002a14:	4b1b      	ldr	r3, [pc, #108]	@ (8002a84 <WIZCHIP_READ+0x94>)
 8002a16:	69db      	ldr	r3, [r3, #28]
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	0c12      	lsrs	r2, r2, #16
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	4610      	mov	r0, r2
 8002a20:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002a22:	4b18      	ldr	r3, [pc, #96]	@ (8002a84 <WIZCHIP_READ+0x94>)
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	0a12      	lsrs	r2, r2, #8
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	4610      	mov	r0, r2
 8002a2e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002a30:	4b14      	ldr	r3, [pc, #80]	@ (8002a84 <WIZCHIP_READ+0x94>)
 8002a32:	69db      	ldr	r3, [r3, #28]
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	4610      	mov	r0, r2
 8002a3a:	4798      	blx	r3
 8002a3c:	e011      	b.n	8002a62 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	0c1b      	lsrs	r3, r3, #16
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	0a1b      	lsrs	r3, r3, #8
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002a54:	4b0b      	ldr	r3, [pc, #44]	@ (8002a84 <WIZCHIP_READ+0x94>)
 8002a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a58:	f107 020c 	add.w	r2, r7, #12
 8002a5c:	2103      	movs	r1, #3
 8002a5e:	4610      	mov	r0, r2
 8002a60:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8002a62:	4b08      	ldr	r3, [pc, #32]	@ (8002a84 <WIZCHIP_READ+0x94>)
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	4798      	blx	r3
 8002a68:	4603      	mov	r3, r0
 8002a6a:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8002a6c:	4b05      	ldr	r3, [pc, #20]	@ (8002a84 <WIZCHIP_READ+0x94>)
 8002a6e:	695b      	ldr	r3, [r3, #20]
 8002a70:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002a72:	4b04      	ldr	r3, [pc, #16]	@ (8002a84 <WIZCHIP_READ+0x94>)
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	4798      	blx	r3
   return ret;
 8002a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	20000028 	.word	0x20000028

08002a88 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	460b      	mov	r3, r1
 8002a92:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8002a94:	4b22      	ldr	r3, [pc, #136]	@ (8002b20 <WIZCHIP_WRITE+0x98>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002a9a:	4b21      	ldr	r3, [pc, #132]	@ (8002b20 <WIZCHIP_WRITE+0x98>)
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f043 0304 	orr.w	r3, r3, #4
 8002aa6:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002aa8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b20 <WIZCHIP_WRITE+0x98>)
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d119      	bne.n	8002ae4 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002ab0:	4b1b      	ldr	r3, [pc, #108]	@ (8002b20 <WIZCHIP_WRITE+0x98>)
 8002ab2:	69db      	ldr	r3, [r3, #28]
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	0c12      	lsrs	r2, r2, #16
 8002ab8:	b2d2      	uxtb	r2, r2
 8002aba:	4610      	mov	r0, r2
 8002abc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002abe:	4b18      	ldr	r3, [pc, #96]	@ (8002b20 <WIZCHIP_WRITE+0x98>)
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	0a12      	lsrs	r2, r2, #8
 8002ac6:	b2d2      	uxtb	r2, r2
 8002ac8:	4610      	mov	r0, r2
 8002aca:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002acc:	4b14      	ldr	r3, [pc, #80]	@ (8002b20 <WIZCHIP_WRITE+0x98>)
 8002ace:	69db      	ldr	r3, [r3, #28]
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	4610      	mov	r0, r2
 8002ad6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8002ad8:	4b11      	ldr	r3, [pc, #68]	@ (8002b20 <WIZCHIP_WRITE+0x98>)
 8002ada:	69db      	ldr	r3, [r3, #28]
 8002adc:	78fa      	ldrb	r2, [r7, #3]
 8002ade:	4610      	mov	r0, r2
 8002ae0:	4798      	blx	r3
 8002ae2:	e013      	b.n	8002b0c <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	0c1b      	lsrs	r3, r3, #16
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	0a1b      	lsrs	r3, r3, #8
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8002afa:	78fb      	ldrb	r3, [r7, #3]
 8002afc:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8002afe:	4b08      	ldr	r3, [pc, #32]	@ (8002b20 <WIZCHIP_WRITE+0x98>)
 8002b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b02:	f107 020c 	add.w	r2, r7, #12
 8002b06:	2104      	movs	r1, #4
 8002b08:	4610      	mov	r0, r2
 8002b0a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002b0c:	4b04      	ldr	r3, [pc, #16]	@ (8002b20 <WIZCHIP_WRITE+0x98>)
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002b12:	4b03      	ldr	r3, [pc, #12]	@ (8002b20 <WIZCHIP_WRITE+0x98>)
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	4798      	blx	r3
}
 8002b18:	bf00      	nop
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	20000028 	.word	0x20000028

08002b24 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002b24:	b590      	push	{r4, r7, lr}
 8002b26:	b087      	sub	sp, #28
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8002b32:	4b2b      	ldr	r3, [pc, #172]	@ (8002be0 <WIZCHIP_READ_BUF+0xbc>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002b38:	4b29      	ldr	r3, [pc, #164]	@ (8002be0 <WIZCHIP_READ_BUF+0xbc>)
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002b3e:	4b28      	ldr	r3, [pc, #160]	@ (8002be0 <WIZCHIP_READ_BUF+0xbc>)
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <WIZCHIP_READ_BUF+0x2a>
 8002b46:	4b26      	ldr	r3, [pc, #152]	@ (8002be0 <WIZCHIP_READ_BUF+0xbc>)
 8002b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d126      	bne.n	8002b9c <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002b4e:	4b24      	ldr	r3, [pc, #144]	@ (8002be0 <WIZCHIP_READ_BUF+0xbc>)
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	0c12      	lsrs	r2, r2, #16
 8002b56:	b2d2      	uxtb	r2, r2
 8002b58:	4610      	mov	r0, r2
 8002b5a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002b5c:	4b20      	ldr	r3, [pc, #128]	@ (8002be0 <WIZCHIP_READ_BUF+0xbc>)
 8002b5e:	69db      	ldr	r3, [r3, #28]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	0a12      	lsrs	r2, r2, #8
 8002b64:	b2d2      	uxtb	r2, r2
 8002b66:	4610      	mov	r0, r2
 8002b68:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002b6a:	4b1d      	ldr	r3, [pc, #116]	@ (8002be0 <WIZCHIP_READ_BUF+0xbc>)
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	b2d2      	uxtb	r2, r2
 8002b72:	4610      	mov	r0, r2
 8002b74:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002b76:	2300      	movs	r3, #0
 8002b78:	82fb      	strh	r3, [r7, #22]
 8002b7a:	e00a      	b.n	8002b92 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8002b7c:	4b18      	ldr	r3, [pc, #96]	@ (8002be0 <WIZCHIP_READ_BUF+0xbc>)
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	8afa      	ldrh	r2, [r7, #22]
 8002b82:	68b9      	ldr	r1, [r7, #8]
 8002b84:	188c      	adds	r4, r1, r2
 8002b86:	4798      	blx	r3
 8002b88:	4603      	mov	r3, r0
 8002b8a:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8002b8c:	8afb      	ldrh	r3, [r7, #22]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	82fb      	strh	r3, [r7, #22]
 8002b92:	8afa      	ldrh	r2, [r7, #22]
 8002b94:	88fb      	ldrh	r3, [r7, #6]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d3f0      	bcc.n	8002b7c <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002b9a:	e017      	b.n	8002bcc <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	0c1b      	lsrs	r3, r3, #16
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	0a1b      	lsrs	r3, r3, #8
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8002be0 <WIZCHIP_READ_BUF+0xbc>)
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb6:	f107 0210 	add.w	r2, r7, #16
 8002bba:	2103      	movs	r1, #3
 8002bbc:	4610      	mov	r0, r2
 8002bbe:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8002bc0:	4b07      	ldr	r3, [pc, #28]	@ (8002be0 <WIZCHIP_READ_BUF+0xbc>)
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	88fa      	ldrh	r2, [r7, #6]
 8002bc6:	4611      	mov	r1, r2
 8002bc8:	68b8      	ldr	r0, [r7, #8]
 8002bca:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002bcc:	4b04      	ldr	r3, [pc, #16]	@ (8002be0 <WIZCHIP_READ_BUF+0xbc>)
 8002bce:	695b      	ldr	r3, [r3, #20]
 8002bd0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002bd2:	4b03      	ldr	r3, [pc, #12]	@ (8002be0 <WIZCHIP_READ_BUF+0xbc>)
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	4798      	blx	r3
}
 8002bd8:	bf00      	nop
 8002bda:	371c      	adds	r7, #28
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd90      	pop	{r4, r7, pc}
 8002be0:	20000028 	.word	0x20000028

08002be4 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8002bf2:	4b2b      	ldr	r3, [pc, #172]	@ (8002ca0 <WIZCHIP_WRITE_BUF+0xbc>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002bf8:	4b29      	ldr	r3, [pc, #164]	@ (8002ca0 <WIZCHIP_WRITE_BUF+0xbc>)
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f043 0304 	orr.w	r3, r3, #4
 8002c04:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002c06:	4b26      	ldr	r3, [pc, #152]	@ (8002ca0 <WIZCHIP_WRITE_BUF+0xbc>)
 8002c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d126      	bne.n	8002c5c <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002c0e:	4b24      	ldr	r3, [pc, #144]	@ (8002ca0 <WIZCHIP_WRITE_BUF+0xbc>)
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	0c12      	lsrs	r2, r2, #16
 8002c16:	b2d2      	uxtb	r2, r2
 8002c18:	4610      	mov	r0, r2
 8002c1a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002c1c:	4b20      	ldr	r3, [pc, #128]	@ (8002ca0 <WIZCHIP_WRITE_BUF+0xbc>)
 8002c1e:	69db      	ldr	r3, [r3, #28]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	0a12      	lsrs	r2, r2, #8
 8002c24:	b2d2      	uxtb	r2, r2
 8002c26:	4610      	mov	r0, r2
 8002c28:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002c2a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ca0 <WIZCHIP_WRITE_BUF+0xbc>)
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	4610      	mov	r0, r2
 8002c34:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002c36:	2300      	movs	r3, #0
 8002c38:	82fb      	strh	r3, [r7, #22]
 8002c3a:	e00a      	b.n	8002c52 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8002c3c:	4b18      	ldr	r3, [pc, #96]	@ (8002ca0 <WIZCHIP_WRITE_BUF+0xbc>)
 8002c3e:	69db      	ldr	r3, [r3, #28]
 8002c40:	8afa      	ldrh	r2, [r7, #22]
 8002c42:	68b9      	ldr	r1, [r7, #8]
 8002c44:	440a      	add	r2, r1
 8002c46:	7812      	ldrb	r2, [r2, #0]
 8002c48:	4610      	mov	r0, r2
 8002c4a:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002c4c:	8afb      	ldrh	r3, [r7, #22]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	82fb      	strh	r3, [r7, #22]
 8002c52:	8afa      	ldrh	r2, [r7, #22]
 8002c54:	88fb      	ldrh	r3, [r7, #6]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d3f0      	bcc.n	8002c3c <WIZCHIP_WRITE_BUF+0x58>
 8002c5a:	e017      	b.n	8002c8c <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	0c1b      	lsrs	r3, r3, #16
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	0a1b      	lsrs	r3, r3, #8
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002c72:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca0 <WIZCHIP_WRITE_BUF+0xbc>)
 8002c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c76:	f107 0210 	add.w	r2, r7, #16
 8002c7a:	2103      	movs	r1, #3
 8002c7c:	4610      	mov	r0, r2
 8002c7e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8002c80:	4b07      	ldr	r3, [pc, #28]	@ (8002ca0 <WIZCHIP_WRITE_BUF+0xbc>)
 8002c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c84:	88fa      	ldrh	r2, [r7, #6]
 8002c86:	4611      	mov	r1, r2
 8002c88:	68b8      	ldr	r0, [r7, #8]
 8002c8a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002c8c:	4b04      	ldr	r3, [pc, #16]	@ (8002ca0 <WIZCHIP_WRITE_BUF+0xbc>)
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002c92:	4b03      	ldr	r3, [pc, #12]	@ (8002ca0 <WIZCHIP_WRITE_BUF+0xbc>)
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	4798      	blx	r3
}
 8002c98:	bf00      	nop
 8002c9a:	3718      	adds	r7, #24
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	20000028 	.word	0x20000028

08002ca4 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8002ca4:	b590      	push	{r4, r7, lr}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4603      	mov	r3, r0
 8002cac:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	81fb      	strh	r3, [r7, #14]
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002cb6:	79fb      	ldrb	r3, [r7, #7]
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	3301      	adds	r3, #1
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7ff fe94 	bl	80029f0 <WIZCHIP_READ>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002ccc:	89bb      	ldrh	r3, [r7, #12]
 8002cce:	021b      	lsls	r3, r3, #8
 8002cd0:	b29c      	uxth	r4, r3
 8002cd2:	79fb      	ldrb	r3, [r7, #7]
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff fe86 	bl	80029f0 <WIZCHIP_READ>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	4423      	add	r3, r4
 8002ce8:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8002cea:	89bb      	ldrh	r3, [r7, #12]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d019      	beq.n	8002d24 <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002cf0:	79fb      	ldrb	r3, [r7, #7]
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff fe77 	bl	80029f0 <WIZCHIP_READ>
 8002d02:	4603      	mov	r3, r0
 8002d04:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002d06:	89fb      	ldrh	r3, [r7, #14]
 8002d08:	021b      	lsls	r3, r3, #8
 8002d0a:	b29c      	uxth	r4, r3
 8002d0c:	79fb      	ldrb	r3, [r7, #7]
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	3301      	adds	r3, #1
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff fe69 	bl	80029f0 <WIZCHIP_READ>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	4423      	add	r3, r4
 8002d22:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8002d24:	89fa      	ldrh	r2, [r7, #14]
 8002d26:	89bb      	ldrh	r3, [r7, #12]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d1c4      	bne.n	8002cb6 <getSn_TX_FSR+0x12>
   return val;
 8002d2c:	89fb      	ldrh	r3, [r7, #14]
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3714      	adds	r7, #20
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd90      	pop	{r4, r7, pc}

08002d36 <wiz_send_data>:
   }while (val != val1);
   return val;
}

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002d36:	b590      	push	{r4, r7, lr}
 8002d38:	b085      	sub	sp, #20
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	6039      	str	r1, [r7, #0]
 8002d40:	71fb      	strb	r3, [r7, #7]
 8002d42:	4613      	mov	r3, r2
 8002d44:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002d46:	2300      	movs	r3, #0
 8002d48:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8002d4e:	88bb      	ldrh	r3, [r7, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d046      	beq.n	8002de2 <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 8002d54:	79fb      	ldrb	r3, [r7, #7]
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	3301      	adds	r3, #1
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff fe45 	bl	80029f0 <WIZCHIP_READ>
 8002d66:	4603      	mov	r3, r0
 8002d68:	021b      	lsls	r3, r3, #8
 8002d6a:	b29c      	uxth	r4, r3
 8002d6c:	79fb      	ldrb	r3, [r7, #7]
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	3301      	adds	r3, #1
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff fe39 	bl	80029f0 <WIZCHIP_READ>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	4423      	add	r3, r4
 8002d82:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8002d84:	89fb      	ldrh	r3, [r7, #14]
 8002d86:	021a      	lsls	r2, r3, #8
 8002d88:	79fb      	ldrb	r3, [r7, #7]
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	3302      	adds	r3, #2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	4413      	add	r3, r2
 8002d92:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8002d94:	88bb      	ldrh	r3, [r7, #4]
 8002d96:	461a      	mov	r2, r3
 8002d98:	6839      	ldr	r1, [r7, #0]
 8002d9a:	68b8      	ldr	r0, [r7, #8]
 8002d9c:	f7ff ff22 	bl	8002be4 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8002da0:	89fa      	ldrh	r2, [r7, #14]
 8002da2:	88bb      	ldrh	r3, [r7, #4]
 8002da4:	4413      	add	r3, r2
 8002da6:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8002da8:	79fb      	ldrb	r3, [r7, #7]
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	3301      	adds	r3, #1
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8002db4:	461a      	mov	r2, r3
 8002db6:	89fb      	ldrh	r3, [r7, #14]
 8002db8:	0a1b      	lsrs	r3, r3, #8
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	4610      	mov	r0, r2
 8002dc2:	f7ff fe61 	bl	8002a88 <WIZCHIP_WRITE>
 8002dc6:	79fb      	ldrb	r3, [r7, #7]
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	3301      	adds	r3, #1
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	89fb      	ldrh	r3, [r7, #14]
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	4619      	mov	r1, r3
 8002dda:	4610      	mov	r0, r2
 8002ddc:	f7ff fe54 	bl	8002a88 <WIZCHIP_WRITE>
 8002de0:	e000      	b.n	8002de4 <wiz_send_data+0xae>
   if(len == 0)  return;
 8002de2:	bf00      	nop
}
 8002de4:	3714      	adds	r7, #20
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd90      	pop	{r4, r7, pc}

08002dea <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void       wizchip_cris_enter(void)           {};
void       wizchip_cris_enter(void)           {}
 8002dea:	b480      	push	{r7}
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	bf00      	nop
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void       wizchip_cris_exit(void)          {};
void       wizchip_cris_exit(void)          {}
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	bf00      	nop
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <wizchip_cs_select>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_select(void)            {};

void wizchip_cs_select(void) {}
 8002e06:	b480      	push	{r7}
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	bf00      	nop
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_deselect(void)          {};
void wizchip_cs_deselect(void) { }
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	bf00      	nop
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8002e22:	b480      	push	{r7}
 8002e24:	b083      	sub	sp, #12
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	4618      	mov	r0, r3
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void     wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void     wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	460b      	mov	r3, r1
 8002e46:	70fb      	strb	r3, [r7, #3]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	78fa      	ldrb	r2, [r7, #3]
 8002e4c:	701a      	strb	r2, [r3, #0]
 8002e4e:	bf00      	nop
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8002e5a:	b480      	push	{r7}
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	2300      	movs	r3, #0
 8002e60:	4618      	mov	r0, r3
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writebyte(uint8_t wb) {};
void     wizchip_spi_writebyte(uint8_t wb) {}
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	4603      	mov	r3, r0
 8002e72:	71fb      	strb	r3, [r7, #7]
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)     {}; 
void     wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)     {}
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	460b      	mov	r3, r1
 8002e8a:	807b      	strh	r3, [r7, #2]
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	807b      	strh	r3, [r7, #2]
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d002      	beq.n	8002ec6 <reg_wizchip_cs_cbfunc+0x16>
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d106      	bne.n	8002ed4 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8002ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef0 <reg_wizchip_cs_cbfunc+0x40>)
 8002ec8:	4a0a      	ldr	r2, [pc, #40]	@ (8002ef4 <reg_wizchip_cs_cbfunc+0x44>)
 8002eca:	611a      	str	r2, [r3, #16]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8002ecc:	4b08      	ldr	r3, [pc, #32]	@ (8002ef0 <reg_wizchip_cs_cbfunc+0x40>)
 8002ece:	4a0a      	ldr	r2, [pc, #40]	@ (8002ef8 <reg_wizchip_cs_cbfunc+0x48>)
 8002ed0:	615a      	str	r2, [r3, #20]
 8002ed2:	e006      	b.n	8002ee2 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8002ed4:	4a06      	ldr	r2, [pc, #24]	@ (8002ef0 <reg_wizchip_cs_cbfunc+0x40>)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6113      	str	r3, [r2, #16]
      WIZCHIP.CS._deselect = cs_desel;
 8002eda:	4a05      	ldr	r2, [pc, #20]	@ (8002ef0 <reg_wizchip_cs_cbfunc+0x40>)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	6153      	str	r3, [r2, #20]
   }
}
 8002ee0:	bf00      	nop
 8002ee2:	bf00      	nop
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	20000028 	.word	0x20000028
 8002ef4:	08002e07 	.word	0x08002e07
 8002ef8:	08002e15 	.word	0x08002e15

08002efc <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8002f06:	bf00      	nop
 8002f08:	4b0f      	ldr	r3, [pc, #60]	@ (8002f48 <reg_wizchip_spi_cbfunc+0x4c>)
 8002f0a:	881b      	ldrh	r3, [r3, #0]
 8002f0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d0f9      	beq.n	8002f08 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d002      	beq.n	8002f20 <reg_wizchip_spi_cbfunc+0x24>
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d106      	bne.n	8002f2e <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8002f20:	4b09      	ldr	r3, [pc, #36]	@ (8002f48 <reg_wizchip_spi_cbfunc+0x4c>)
 8002f22:	4a0a      	ldr	r2, [pc, #40]	@ (8002f4c <reg_wizchip_spi_cbfunc+0x50>)
 8002f24:	619a      	str	r2, [r3, #24]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8002f26:	4b08      	ldr	r3, [pc, #32]	@ (8002f48 <reg_wizchip_spi_cbfunc+0x4c>)
 8002f28:	4a09      	ldr	r2, [pc, #36]	@ (8002f50 <reg_wizchip_spi_cbfunc+0x54>)
 8002f2a:	61da      	str	r2, [r3, #28]
 8002f2c:	e006      	b.n	8002f3c <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8002f2e:	4a06      	ldr	r2, [pc, #24]	@ (8002f48 <reg_wizchip_spi_cbfunc+0x4c>)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6193      	str	r3, [r2, #24]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8002f34:	4a04      	ldr	r2, [pc, #16]	@ (8002f48 <reg_wizchip_spi_cbfunc+0x4c>)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	61d3      	str	r3, [r2, #28]
   }
}
 8002f3a:	bf00      	nop
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr
 8002f48:	20000028 	.word	0x20000028
 8002f4c:	08002e5b 	.word	0x08002e5b
 8002f50:	08002e6b 	.word	0x08002e6b

08002f54 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8002f5e:	bf00      	nop
 8002f60:	4b0f      	ldr	r3, [pc, #60]	@ (8002fa0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8002f62:	881b      	ldrh	r3, [r3, #0]
 8002f64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d0f9      	beq.n	8002f60 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d002      	beq.n	8002f78 <reg_wizchip_spiburst_cbfunc+0x24>
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d106      	bne.n	8002f86 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8002f78:	4b09      	ldr	r3, [pc, #36]	@ (8002fa0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8002f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8002fa4 <reg_wizchip_spiburst_cbfunc+0x50>)
 8002f7c:	621a      	str	r2, [r3, #32]
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8002f7e:	4b08      	ldr	r3, [pc, #32]	@ (8002fa0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8002f80:	4a09      	ldr	r2, [pc, #36]	@ (8002fa8 <reg_wizchip_spiburst_cbfunc+0x54>)
 8002f82:	625a      	str	r2, [r3, #36]	@ 0x24
 8002f84:	e006      	b.n	8002f94 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8002f86:	4a06      	ldr	r2, [pc, #24]	@ (8002fa0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6213      	str	r3, [r2, #32]
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8002f8c:	4a04      	ldr	r2, [pc, #16]	@ (8002fa0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	6253      	str	r3, [r2, #36]	@ 0x24
   }
}
 8002f92:	bf00      	nop
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	20000028 	.word	0x20000028
 8002fa4:	08002e81 	.word	0x08002e81
 8002fa8:	08002e99 	.word	0x08002e99

08002fac <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8002fb2:	1d3b      	adds	r3, r7, #4
 8002fb4:	2206      	movs	r2, #6
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8002fbc:	f7ff fdb2 	bl	8002b24 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8002fc0:	f107 0314 	add.w	r3, r7, #20
 8002fc4:	2204      	movs	r2, #4
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002fcc:	f7ff fdaa 	bl	8002b24 <WIZCHIP_READ_BUF>
 8002fd0:	f107 0310 	add.w	r3, r7, #16
 8002fd4:	2204      	movs	r2, #4
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8002fdc:	f7ff fda2 	bl	8002b24 <WIZCHIP_READ_BUF>
 8002fe0:	f107 030c 	add.w	r3, r7, #12
 8002fe4:	2204      	movs	r2, #4
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8002fec:	f7ff fd9a 	bl	8002b24 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8002ff0:	2180      	movs	r1, #128	@ 0x80
 8002ff2:	2000      	movs	r0, #0
 8002ff4:	f7ff fd48 	bl	8002a88 <WIZCHIP_WRITE>
   getMR(); // for delay
 8002ff8:	2000      	movs	r0, #0
 8002ffa:	f7ff fcf9 	bl	80029f0 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8002ffe:	1d3b      	adds	r3, r7, #4
 8003000:	2206      	movs	r2, #6
 8003002:	4619      	mov	r1, r3
 8003004:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8003008:	f7ff fdec 	bl	8002be4 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 800300c:	f107 0314 	add.w	r3, r7, #20
 8003010:	2204      	movs	r2, #4
 8003012:	4619      	mov	r1, r3
 8003014:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003018:	f7ff fde4 	bl	8002be4 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 800301c:	f107 0310 	add.w	r3, r7, #16
 8003020:	2204      	movs	r2, #4
 8003022:	4619      	mov	r1, r3
 8003024:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8003028:	f7ff fddc 	bl	8002be4 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 800302c:	f107 030c 	add.w	r3, r7, #12
 8003030:	2204      	movs	r2, #4
 8003032:	4619      	mov	r1, r3
 8003034:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8003038:	f7ff fdd4 	bl	8002be4 <WIZCHIP_WRITE_BUF>
}
 800303c:	bf00      	nop
 800303e:	3718      	adds	r7, #24
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800304e:	2300      	movs	r3, #0
 8003050:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8003052:	f7ff ffab 	bl	8002fac <wizchip_sw_reset>
   if(txsize)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d03b      	beq.n	80030d4 <wizchip_init+0x90>
   {
      tmp = 0;
 800305c:	2300      	movs	r3, #0
 800305e:	73bb      	strb	r3, [r7, #14]
            tmp += txsize[i];
            if(tmp > 128) return -1;
        }
        if(tmp % 8) return -1;
   #else
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003060:	2300      	movs	r3, #0
 8003062:	73fb      	strb	r3, [r7, #15]
 8003064:	e015      	b.n	8003092 <wizchip_init+0x4e>
        {
            tmp += txsize[i];
 8003066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	4413      	add	r3, r2
 800306e:	781a      	ldrb	r2, [r3, #0]
 8003070:	7bbb      	ldrb	r3, [r7, #14]
 8003072:	4413      	add	r3, r2
 8003074:	b2db      	uxtb	r3, r3
 8003076:	73bb      	strb	r3, [r7, #14]

        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100 and w5100s
            if(tmp > 8) return -1;
        #else
            if(tmp > 16) return -1;
 8003078:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800307c:	2b10      	cmp	r3, #16
 800307e:	dd02      	ble.n	8003086 <wizchip_init+0x42>
 8003080:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003084:	e066      	b.n	8003154 <wizchip_init+0x110>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800308a:	b2db      	uxtb	r3, r3
 800308c:	3301      	adds	r3, #1
 800308e:	b2db      	uxtb	r3, r3
 8003090:	73fb      	strb	r3, [r7, #15]
 8003092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003096:	2b07      	cmp	r3, #7
 8003098:	dde5      	ble.n	8003066 <wizchip_init+0x22>
        #endif
        }
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800309a:	2300      	movs	r3, #0
 800309c:	73fb      	strb	r3, [r7, #15]
 800309e:	e015      	b.n	80030cc <wizchip_init+0x88>
        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100
            j = 0;
            while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
            setSn_TXBUF_SIZE(i, j);
        #else
            setSn_TXBUF_SIZE(i, txsize[i]);
 80030a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	3301      	adds	r3, #1
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 80030ae:	4618      	mov	r0, r3
 80030b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	4413      	add	r3, r2
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	4619      	mov	r1, r3
 80030bc:	f7ff fce4 	bl	8002a88 <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80030c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	3301      	adds	r3, #1
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	73fb      	strb	r3, [r7, #15]
 80030cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030d0:	2b07      	cmp	r3, #7
 80030d2:	dde5      	ble.n	80030a0 <wizchip_init+0x5c>
        }

    #endif
   }

   if(rxsize)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d03b      	beq.n	8003152 <wizchip_init+0x10e>
   {
      tmp = 0;
 80030da:	2300      	movs	r3, #0
 80030dc:	73bb      	strb	r3, [r7, #14]
            tmp += rxsize[i];
            if(tmp > 128) return -1;
        }
        if(tmp % 8) return -1;
   #else
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80030de:	2300      	movs	r3, #0
 80030e0:	73fb      	strb	r3, [r7, #15]
 80030e2:	e015      	b.n	8003110 <wizchip_init+0xcc>
        {
            tmp += rxsize[i];
 80030e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	4413      	add	r3, r2
 80030ec:	781a      	ldrb	r2, [r3, #0]
 80030ee:	7bbb      	ldrb	r3, [r7, #14]
 80030f0:	4413      	add	r3, r2
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	73bb      	strb	r3, [r7, #14]
        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100 and w5100s
            if(tmp > 8) return -1;
        #else
            if(tmp > 16) return -1;
 80030f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80030fa:	2b10      	cmp	r3, #16
 80030fc:	dd02      	ble.n	8003104 <wizchip_init+0xc0>
 80030fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003102:	e027      	b.n	8003154 <wizchip_init+0x110>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003104:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003108:	b2db      	uxtb	r3, r3
 800310a:	3301      	adds	r3, #1
 800310c:	b2db      	uxtb	r3, r3
 800310e:	73fb      	strb	r3, [r7, #15]
 8003110:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003114:	2b07      	cmp	r3, #7
 8003116:	dde5      	ble.n	80030e4 <wizchip_init+0xa0>
        #endif
        }

        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003118:	2300      	movs	r3, #0
 800311a:	73fb      	strb	r3, [r7, #15]
 800311c:	e015      	b.n	800314a <wizchip_init+0x106>
        #if _WIZCHIP_ < W5200    // add condition for w5100
            j = 0;
            while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
            setSn_RXBUF_SIZE(i, j);
        #else
            setSn_RXBUF_SIZE(i, rxsize[i]);
 800311e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	3301      	adds	r3, #1
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 800312c:	4618      	mov	r0, r3
 800312e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	4413      	add	r3, r2
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	4619      	mov	r1, r3
 800313a:	f7ff fca5 	bl	8002a88 <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800313e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003142:	b2db      	uxtb	r3, r3
 8003144:	3301      	adds	r3, #1
 8003146:	b2db      	uxtb	r3, r3
 8003148:	73fb      	strb	r3, [r7, #15]
 800314a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800314e:	2b07      	cmp	r3, #7
 8003150:	dde5      	ble.n	800311e <wizchip_init+0xda>
        #endif
        }
    #endif
   }
   return 0;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2206      	movs	r2, #6
 8003168:	4619      	mov	r1, r3
 800316a:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 800316e:	f7ff fd39 	bl	8002be4 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	330e      	adds	r3, #14
 8003176:	2204      	movs	r2, #4
 8003178:	4619      	mov	r1, r3
 800317a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800317e:	f7ff fd31 	bl	8002be4 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	330a      	adds	r3, #10
 8003186:	2204      	movs	r2, #4
 8003188:	4619      	mov	r1, r3
 800318a:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 800318e:	f7ff fd29 	bl	8002be4 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	3306      	adds	r3, #6
 8003196:	2204      	movs	r2, #4
 8003198:	4619      	mov	r1, r3
 800319a:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 800319e:	f7ff fd21 	bl	8002be4 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	7c9a      	ldrb	r2, [r3, #18]
 80031a6:	4b0b      	ldr	r3, [pc, #44]	@ (80031d4 <wizchip_setnetinfo+0x78>)
 80031a8:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	7cda      	ldrb	r2, [r3, #19]
 80031ae:	4b09      	ldr	r3, [pc, #36]	@ (80031d4 <wizchip_setnetinfo+0x78>)
 80031b0:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	7d1a      	ldrb	r2, [r3, #20]
 80031b6:	4b07      	ldr	r3, [pc, #28]	@ (80031d4 <wizchip_setnetinfo+0x78>)
 80031b8:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	7d5a      	ldrb	r2, [r3, #21]
 80031be:	4b05      	ldr	r3, [pc, #20]	@ (80031d4 <wizchip_setnetinfo+0x78>)
 80031c0:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	7d9a      	ldrb	r2, [r3, #22]
 80031c6:	4b04      	ldr	r3, [pc, #16]	@ (80031d8 <wizchip_setnetinfo+0x7c>)
 80031c8:	701a      	strb	r2, [r3, #0]
}
 80031ca:	bf00      	nop
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	200005c8 	.word	0x200005c8
 80031d8:	200005cc 	.word	0x200005cc

080031dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80031dc:	480d      	ldr	r0, [pc, #52]	@ (8003214 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80031de:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80031e0:	f7ff fb1c 	bl	800281c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031e4:	480c      	ldr	r0, [pc, #48]	@ (8003218 <LoopForever+0x6>)
  ldr r1, =_edata
 80031e6:	490d      	ldr	r1, [pc, #52]	@ (800321c <LoopForever+0xa>)
  ldr r2, =_sidata
 80031e8:	4a0d      	ldr	r2, [pc, #52]	@ (8003220 <LoopForever+0xe>)
  movs r3, #0
 80031ea:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80031ec:	e002      	b.n	80031f4 <LoopCopyDataInit>

080031ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031f2:	3304      	adds	r3, #4

080031f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031f8:	d3f9      	bcc.n	80031ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003224 <LoopForever+0x12>)
  ldr r4, =_ebss
 80031fc:	4c0a      	ldr	r4, [pc, #40]	@ (8003228 <LoopForever+0x16>)
  movs r3, #0
 80031fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003200:	e001      	b.n	8003206 <LoopFillZerobss>

08003202 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003202:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003204:	3204      	adds	r2, #4

08003206 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003206:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003208:	d3fb      	bcc.n	8003202 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800320a:	f005 f943 	bl	8008494 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800320e:	f7fe fb7f 	bl	8001910 <main>

08003212 <LoopForever>:

LoopForever:
    b LoopForever
 8003212:	e7fe      	b.n	8003212 <LoopForever>
  ldr   r0, =_estack
 8003214:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003218:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800321c:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8003220:	0800a664 	.word	0x0800a664
  ldr r2, =_sbss
 8003224:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8003228:	20000720 	.word	0x20000720

0800322c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800322c:	e7fe      	b.n	800322c <ADC1_2_IRQHandler>

0800322e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b082      	sub	sp, #8
 8003232:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003234:	2300      	movs	r3, #0
 8003236:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003238:	2003      	movs	r0, #3
 800323a:	f000 f939 	bl	80034b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800323e:	2000      	movs	r0, #0
 8003240:	f000 f80e 	bl	8003260 <HAL_InitTick>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d002      	beq.n	8003250 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	71fb      	strb	r3, [r7, #7]
 800324e:	e001      	b.n	8003254 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003250:	f7ff f87c 	bl	800234c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003254:	79fb      	ldrb	r3, [r7, #7]

}
 8003256:	4618      	mov	r0, r3
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
	...

08003260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003268:	2300      	movs	r3, #0
 800326a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800326c:	4b16      	ldr	r3, [pc, #88]	@ (80032c8 <HAL_InitTick+0x68>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d022      	beq.n	80032ba <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003274:	4b15      	ldr	r3, [pc, #84]	@ (80032cc <HAL_InitTick+0x6c>)
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	4b13      	ldr	r3, [pc, #76]	@ (80032c8 <HAL_InitTick+0x68>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003280:	fbb1 f3f3 	udiv	r3, r1, r3
 8003284:	fbb2 f3f3 	udiv	r3, r2, r3
 8003288:	4618      	mov	r0, r3
 800328a:	f000 f944 	bl	8003516 <HAL_SYSTICK_Config>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d10f      	bne.n	80032b4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b0f      	cmp	r3, #15
 8003298:	d809      	bhi.n	80032ae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800329a:	2200      	movs	r2, #0
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80032a2:	f000 f910 	bl	80034c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80032a6:	4a0a      	ldr	r2, [pc, #40]	@ (80032d0 <HAL_InitTick+0x70>)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6013      	str	r3, [r2, #0]
 80032ac:	e007      	b.n	80032be <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	73fb      	strb	r3, [r7, #15]
 80032b2:	e004      	b.n	80032be <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	73fb      	strb	r3, [r7, #15]
 80032b8:	e001      	b.n	80032be <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80032be:	7bfb      	ldrb	r3, [r7, #15]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	20000054 	.word	0x20000054
 80032cc:	20000008 	.word	0x20000008
 80032d0:	20000050 	.word	0x20000050

080032d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032d8:	4b05      	ldr	r3, [pc, #20]	@ (80032f0 <HAL_IncTick+0x1c>)
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	4b05      	ldr	r3, [pc, #20]	@ (80032f4 <HAL_IncTick+0x20>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4413      	add	r3, r2
 80032e2:	4a03      	ldr	r2, [pc, #12]	@ (80032f0 <HAL_IncTick+0x1c>)
 80032e4:	6013      	str	r3, [r2, #0]
}
 80032e6:	bf00      	nop
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	200005d0 	.word	0x200005d0
 80032f4:	20000054 	.word	0x20000054

080032f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
  return uwTick;
 80032fc:	4b03      	ldr	r3, [pc, #12]	@ (800330c <HAL_GetTick+0x14>)
 80032fe:	681b      	ldr	r3, [r3, #0]
}
 8003300:	4618      	mov	r0, r3
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	200005d0 	.word	0x200005d0

08003310 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003320:	4b0c      	ldr	r3, [pc, #48]	@ (8003354 <__NVIC_SetPriorityGrouping+0x44>)
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003326:	68ba      	ldr	r2, [r7, #8]
 8003328:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800332c:	4013      	ands	r3, r2
 800332e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003338:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800333c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003340:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003342:	4a04      	ldr	r2, [pc, #16]	@ (8003354 <__NVIC_SetPriorityGrouping+0x44>)
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	60d3      	str	r3, [r2, #12]
}
 8003348:	bf00      	nop
 800334a:	3714      	adds	r7, #20
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	e000ed00 	.word	0xe000ed00

08003358 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800335c:	4b04      	ldr	r3, [pc, #16]	@ (8003370 <__NVIC_GetPriorityGrouping+0x18>)
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	0a1b      	lsrs	r3, r3, #8
 8003362:	f003 0307 	and.w	r3, r3, #7
}
 8003366:	4618      	mov	r0, r3
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	e000ed00 	.word	0xe000ed00

08003374 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	4603      	mov	r3, r0
 800337c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800337e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003382:	2b00      	cmp	r3, #0
 8003384:	db0b      	blt.n	800339e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003386:	79fb      	ldrb	r3, [r7, #7]
 8003388:	f003 021f 	and.w	r2, r3, #31
 800338c:	4907      	ldr	r1, [pc, #28]	@ (80033ac <__NVIC_EnableIRQ+0x38>)
 800338e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003392:	095b      	lsrs	r3, r3, #5
 8003394:	2001      	movs	r0, #1
 8003396:	fa00 f202 	lsl.w	r2, r0, r2
 800339a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	e000e100 	.word	0xe000e100

080033b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	4603      	mov	r3, r0
 80033b8:	6039      	str	r1, [r7, #0]
 80033ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	db0a      	blt.n	80033da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	b2da      	uxtb	r2, r3
 80033c8:	490c      	ldr	r1, [pc, #48]	@ (80033fc <__NVIC_SetPriority+0x4c>)
 80033ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ce:	0112      	lsls	r2, r2, #4
 80033d0:	b2d2      	uxtb	r2, r2
 80033d2:	440b      	add	r3, r1
 80033d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033d8:	e00a      	b.n	80033f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	4908      	ldr	r1, [pc, #32]	@ (8003400 <__NVIC_SetPriority+0x50>)
 80033e0:	79fb      	ldrb	r3, [r7, #7]
 80033e2:	f003 030f 	and.w	r3, r3, #15
 80033e6:	3b04      	subs	r3, #4
 80033e8:	0112      	lsls	r2, r2, #4
 80033ea:	b2d2      	uxtb	r2, r2
 80033ec:	440b      	add	r3, r1
 80033ee:	761a      	strb	r2, [r3, #24]
}
 80033f0:	bf00      	nop
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr
 80033fc:	e000e100 	.word	0xe000e100
 8003400:	e000ed00 	.word	0xe000ed00

08003404 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003404:	b480      	push	{r7}
 8003406:	b089      	sub	sp, #36	@ 0x24
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f003 0307 	and.w	r3, r3, #7
 8003416:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	f1c3 0307 	rsb	r3, r3, #7
 800341e:	2b04      	cmp	r3, #4
 8003420:	bf28      	it	cs
 8003422:	2304      	movcs	r3, #4
 8003424:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	3304      	adds	r3, #4
 800342a:	2b06      	cmp	r3, #6
 800342c:	d902      	bls.n	8003434 <NVIC_EncodePriority+0x30>
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	3b03      	subs	r3, #3
 8003432:	e000      	b.n	8003436 <NVIC_EncodePriority+0x32>
 8003434:	2300      	movs	r3, #0
 8003436:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003438:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	43da      	mvns	r2, r3
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	401a      	ands	r2, r3
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800344c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	fa01 f303 	lsl.w	r3, r1, r3
 8003456:	43d9      	mvns	r1, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800345c:	4313      	orrs	r3, r2
         );
}
 800345e:	4618      	mov	r0, r3
 8003460:	3724      	adds	r7, #36	@ 0x24
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
	...

0800346c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	3b01      	subs	r3, #1
 8003478:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800347c:	d301      	bcc.n	8003482 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800347e:	2301      	movs	r3, #1
 8003480:	e00f      	b.n	80034a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003482:	4a0a      	ldr	r2, [pc, #40]	@ (80034ac <SysTick_Config+0x40>)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3b01      	subs	r3, #1
 8003488:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800348a:	210f      	movs	r1, #15
 800348c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003490:	f7ff ff8e 	bl	80033b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003494:	4b05      	ldr	r3, [pc, #20]	@ (80034ac <SysTick_Config+0x40>)
 8003496:	2200      	movs	r2, #0
 8003498:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800349a:	4b04      	ldr	r3, [pc, #16]	@ (80034ac <SysTick_Config+0x40>)
 800349c:	2207      	movs	r2, #7
 800349e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	e000e010 	.word	0xe000e010

080034b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f7ff ff29 	bl	8003310 <__NVIC_SetPriorityGrouping>
}
 80034be:	bf00      	nop
 80034c0:	3708      	adds	r7, #8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b086      	sub	sp, #24
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	4603      	mov	r3, r0
 80034ce:	60b9      	str	r1, [r7, #8]
 80034d0:	607a      	str	r2, [r7, #4]
 80034d2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034d4:	f7ff ff40 	bl	8003358 <__NVIC_GetPriorityGrouping>
 80034d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	68b9      	ldr	r1, [r7, #8]
 80034de:	6978      	ldr	r0, [r7, #20]
 80034e0:	f7ff ff90 	bl	8003404 <NVIC_EncodePriority>
 80034e4:	4602      	mov	r2, r0
 80034e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ea:	4611      	mov	r1, r2
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff ff5f 	bl	80033b0 <__NVIC_SetPriority>
}
 80034f2:	bf00      	nop
 80034f4:	3718      	adds	r7, #24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b082      	sub	sp, #8
 80034fe:	af00      	add	r7, sp, #0
 8003500:	4603      	mov	r3, r0
 8003502:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003508:	4618      	mov	r0, r3
 800350a:	f7ff ff33 	bl	8003374 <__NVIC_EnableIRQ>
}
 800350e:	bf00      	nop
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b082      	sub	sp, #8
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7ff ffa4 	bl	800346c <SysTick_Config>
 8003524:	4603      	mov	r3, r0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
	...

08003530 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e08d      	b.n	800365e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	461a      	mov	r2, r3
 8003548:	4b47      	ldr	r3, [pc, #284]	@ (8003668 <HAL_DMA_Init+0x138>)
 800354a:	429a      	cmp	r2, r3
 800354c:	d80f      	bhi.n	800356e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	461a      	mov	r2, r3
 8003554:	4b45      	ldr	r3, [pc, #276]	@ (800366c <HAL_DMA_Init+0x13c>)
 8003556:	4413      	add	r3, r2
 8003558:	4a45      	ldr	r2, [pc, #276]	@ (8003670 <HAL_DMA_Init+0x140>)
 800355a:	fba2 2303 	umull	r2, r3, r2, r3
 800355e:	091b      	lsrs	r3, r3, #4
 8003560:	009a      	lsls	r2, r3, #2
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a42      	ldr	r2, [pc, #264]	@ (8003674 <HAL_DMA_Init+0x144>)
 800356a:	641a      	str	r2, [r3, #64]	@ 0x40
 800356c:	e00e      	b.n	800358c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	461a      	mov	r2, r3
 8003574:	4b40      	ldr	r3, [pc, #256]	@ (8003678 <HAL_DMA_Init+0x148>)
 8003576:	4413      	add	r3, r2
 8003578:	4a3d      	ldr	r2, [pc, #244]	@ (8003670 <HAL_DMA_Init+0x140>)
 800357a:	fba2 2303 	umull	r2, r3, r2, r3
 800357e:	091b      	lsrs	r3, r3, #4
 8003580:	009a      	lsls	r2, r3, #2
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a3c      	ldr	r2, [pc, #240]	@ (800367c <HAL_DMA_Init+0x14c>)
 800358a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2202      	movs	r2, #2
 8003590:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80035a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80035b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f9b6 	bl	8003950 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035ec:	d102      	bne.n	80035f4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035fc:	b2d2      	uxtb	r2, r2
 80035fe:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003608:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d010      	beq.n	8003634 <HAL_DMA_Init+0x104>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	2b04      	cmp	r3, #4
 8003618:	d80c      	bhi.n	8003634 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 f9d6 	bl	80039cc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003630:	605a      	str	r2, [r3, #4]
 8003632:	e008      	b.n	8003646 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	40020407 	.word	0x40020407
 800366c:	bffdfff8 	.word	0xbffdfff8
 8003670:	cccccccd 	.word	0xcccccccd
 8003674:	40020000 	.word	0x40020000
 8003678:	bffdfbf8 	.word	0xbffdfbf8
 800367c:	40020400 	.word	0x40020400

08003680 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
 800368c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800368e:	2300      	movs	r3, #0
 8003690:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003698:	2b01      	cmp	r3, #1
 800369a:	d101      	bne.n	80036a0 <HAL_DMA_Start_IT+0x20>
 800369c:	2302      	movs	r3, #2
 800369e:	e066      	b.n	800376e <HAL_DMA_Start_IT+0xee>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d155      	bne.n	8003760 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2202      	movs	r2, #2
 80036b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 0201 	bic.w	r2, r2, #1
 80036d0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	68b9      	ldr	r1, [r7, #8]
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f000 f8fb 	bl	80038d4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d008      	beq.n	80036f8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f042 020e 	orr.w	r2, r2, #14
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	e00f      	b.n	8003718 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f022 0204 	bic.w	r2, r2, #4
 8003706:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f042 020a 	orr.w	r2, r2, #10
 8003716:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d007      	beq.n	8003736 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003730:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003734:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800373a:	2b00      	cmp	r3, #0
 800373c:	d007      	beq.n	800374e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003748:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800374c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f042 0201 	orr.w	r2, r2, #1
 800375c:	601a      	str	r2, [r3, #0]
 800375e:	e005      	b.n	800376c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003768:	2302      	movs	r3, #2
 800376a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800376c:	7dfb      	ldrb	r3, [r7, #23]
}
 800376e:	4618      	mov	r0, r3
 8003770:	3718      	adds	r7, #24
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b084      	sub	sp, #16
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003792:	f003 031f 	and.w	r3, r3, #31
 8003796:	2204      	movs	r2, #4
 8003798:	409a      	lsls	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	4013      	ands	r3, r2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d026      	beq.n	80037f0 <HAL_DMA_IRQHandler+0x7a>
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d021      	beq.n	80037f0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0320 	and.w	r3, r3, #32
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d107      	bne.n	80037ca <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0204 	bic.w	r2, r2, #4
 80037c8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ce:	f003 021f 	and.w	r2, r3, #31
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d6:	2104      	movs	r1, #4
 80037d8:	fa01 f202 	lsl.w	r2, r1, r2
 80037dc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d071      	beq.n	80038ca <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80037ee:	e06c      	b.n	80038ca <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037f4:	f003 031f 	and.w	r3, r3, #31
 80037f8:	2202      	movs	r2, #2
 80037fa:	409a      	lsls	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	4013      	ands	r3, r2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d02e      	beq.n	8003862 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d029      	beq.n	8003862 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0320 	and.w	r3, r3, #32
 8003818:	2b00      	cmp	r3, #0
 800381a:	d10b      	bne.n	8003834 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f022 020a 	bic.w	r2, r2, #10
 800382a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003838:	f003 021f 	and.w	r2, r3, #31
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003840:	2102      	movs	r1, #2
 8003842:	fa01 f202 	lsl.w	r2, r1, r2
 8003846:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003854:	2b00      	cmp	r3, #0
 8003856:	d038      	beq.n	80038ca <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003860:	e033      	b.n	80038ca <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003866:	f003 031f 	and.w	r3, r3, #31
 800386a:	2208      	movs	r2, #8
 800386c:	409a      	lsls	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	4013      	ands	r3, r2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d02a      	beq.n	80038cc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	f003 0308 	and.w	r3, r3, #8
 800387c:	2b00      	cmp	r3, #0
 800387e:	d025      	beq.n	80038cc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 020e 	bic.w	r2, r2, #14
 800388e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003894:	f003 021f 	and.w	r2, r3, #31
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389c:	2101      	movs	r1, #1
 800389e:	fa01 f202 	lsl.w	r2, r1, r2
 80038a2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d004      	beq.n	80038cc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80038ca:	bf00      	nop
 80038cc:	bf00      	nop
}
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
 80038e0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80038ea:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d004      	beq.n	80038fe <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80038fc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003902:	f003 021f 	and.w	r2, r3, #31
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390a:	2101      	movs	r1, #1
 800390c:	fa01 f202 	lsl.w	r2, r1, r2
 8003910:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	683a      	ldr	r2, [r7, #0]
 8003918:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	2b10      	cmp	r3, #16
 8003920:	d108      	bne.n	8003934 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68ba      	ldr	r2, [r7, #8]
 8003930:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003932:	e007      	b.n	8003944 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68ba      	ldr	r2, [r7, #8]
 800393a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	60da      	str	r2, [r3, #12]
}
 8003944:	bf00      	nop
 8003946:	3714      	adds	r7, #20
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003950:	b480      	push	{r7}
 8003952:	b087      	sub	sp, #28
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	461a      	mov	r2, r3
 800395e:	4b16      	ldr	r3, [pc, #88]	@ (80039b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003960:	429a      	cmp	r2, r3
 8003962:	d802      	bhi.n	800396a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003964:	4b15      	ldr	r3, [pc, #84]	@ (80039bc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003966:	617b      	str	r3, [r7, #20]
 8003968:	e001      	b.n	800396e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800396a:	4b15      	ldr	r3, [pc, #84]	@ (80039c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800396c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	b2db      	uxtb	r3, r3
 8003978:	3b08      	subs	r3, #8
 800397a:	4a12      	ldr	r2, [pc, #72]	@ (80039c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800397c:	fba2 2303 	umull	r2, r3, r2, r3
 8003980:	091b      	lsrs	r3, r3, #4
 8003982:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003988:	089b      	lsrs	r3, r3, #2
 800398a:	009a      	lsls	r2, r3, #2
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	4413      	add	r3, r2
 8003990:	461a      	mov	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a0b      	ldr	r2, [pc, #44]	@ (80039c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800399a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f003 031f 	and.w	r3, r3, #31
 80039a2:	2201      	movs	r2, #1
 80039a4:	409a      	lsls	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80039aa:	bf00      	nop
 80039ac:	371c      	adds	r7, #28
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	40020407 	.word	0x40020407
 80039bc:	40020800 	.word	0x40020800
 80039c0:	40020820 	.word	0x40020820
 80039c4:	cccccccd 	.word	0xcccccccd
 80039c8:	40020880 	.word	0x40020880

080039cc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	4b0b      	ldr	r3, [pc, #44]	@ (8003a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80039e0:	4413      	add	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	461a      	mov	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a08      	ldr	r2, [pc, #32]	@ (8003a10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80039ee:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	3b01      	subs	r3, #1
 80039f4:	f003 031f 	and.w	r3, r3, #31
 80039f8:	2201      	movs	r2, #1
 80039fa:	409a      	lsls	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003a00:	bf00      	nop
 8003a02:	3714      	adds	r7, #20
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr
 8003a0c:	1000823f 	.word	0x1000823f
 8003a10:	40020940 	.word	0x40020940

08003a14 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e147      	b.n	8003cb6 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d106      	bne.n	8003a40 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7fe fcaa 	bl	8002394 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	699a      	ldr	r2, [r3, #24]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 0210 	bic.w	r2, r2, #16
 8003a4e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a50:	f7ff fc52 	bl	80032f8 <HAL_GetTick>
 8003a54:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003a56:	e012      	b.n	8003a7e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003a58:	f7ff fc4e 	bl	80032f8 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b0a      	cmp	r3, #10
 8003a64:	d90b      	bls.n	8003a7e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a6a:	f043 0201 	orr.w	r2, r3, #1
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2203      	movs	r2, #3
 8003a76:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e11b      	b.n	8003cb6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	f003 0308 	and.w	r3, r3, #8
 8003a88:	2b08      	cmp	r3, #8
 8003a8a:	d0e5      	beq.n	8003a58 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	699a      	ldr	r2, [r3, #24]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0201 	orr.w	r2, r2, #1
 8003a9a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a9c:	f7ff fc2c 	bl	80032f8 <HAL_GetTick>
 8003aa0:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003aa2:	e012      	b.n	8003aca <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003aa4:	f7ff fc28 	bl	80032f8 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b0a      	cmp	r3, #10
 8003ab0:	d90b      	bls.n	8003aca <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ab6:	f043 0201 	orr.w	r2, r3, #1
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2203      	movs	r2, #3
 8003ac2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e0f5      	b.n	8003cb6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	f003 0301 	and.w	r3, r3, #1
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d0e5      	beq.n	8003aa4 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	699a      	ldr	r2, [r3, #24]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f042 0202 	orr.w	r2, r2, #2
 8003ae6:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a74      	ldr	r2, [pc, #464]	@ (8003cc0 <HAL_FDCAN_Init+0x2ac>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d103      	bne.n	8003afa <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003af2:	4a74      	ldr	r2, [pc, #464]	@ (8003cc4 <HAL_FDCAN_Init+0x2b0>)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	7c1b      	ldrb	r3, [r3, #16]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d108      	bne.n	8003b14 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	699a      	ldr	r2, [r3, #24]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b10:	619a      	str	r2, [r3, #24]
 8003b12:	e007      	b.n	8003b24 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	699a      	ldr	r2, [r3, #24]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b22:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	7c5b      	ldrb	r3, [r3, #17]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d108      	bne.n	8003b3e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	699a      	ldr	r2, [r3, #24]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b3a:	619a      	str	r2, [r3, #24]
 8003b3c:	e007      	b.n	8003b4e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	699a      	ldr	r2, [r3, #24]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003b4c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	7c9b      	ldrb	r3, [r3, #18]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d108      	bne.n	8003b68 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	699a      	ldr	r2, [r3, #24]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003b64:	619a      	str	r2, [r3, #24]
 8003b66:	e007      	b.n	8003b78 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	699a      	ldr	r2, [r3, #24]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003b76:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	689a      	ldr	r2, [r3, #8]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	699a      	ldr	r2, [r3, #24]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8003b9c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	691a      	ldr	r2, [r3, #16]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 0210 	bic.w	r2, r2, #16
 8003bac:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d108      	bne.n	8003bc8 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	699a      	ldr	r2, [r3, #24]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f042 0204 	orr.w	r2, r2, #4
 8003bc4:	619a      	str	r2, [r3, #24]
 8003bc6:	e02c      	b.n	8003c22 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d028      	beq.n	8003c22 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d01c      	beq.n	8003c12 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	699a      	ldr	r2, [r3, #24]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003be6:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	691a      	ldr	r2, [r3, #16]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f042 0210 	orr.w	r2, r2, #16
 8003bf6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	2b03      	cmp	r3, #3
 8003bfe:	d110      	bne.n	8003c22 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	699a      	ldr	r2, [r3, #24]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f042 0220 	orr.w	r2, r2, #32
 8003c0e:	619a      	str	r2, [r3, #24]
 8003c10:	e007      	b.n	8003c22 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	699a      	ldr	r2, [r3, #24]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f042 0220 	orr.w	r2, r2, #32
 8003c20:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	3b01      	subs	r3, #1
 8003c28:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	69db      	ldr	r3, [r3, #28]
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003c32:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003c3a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	3b01      	subs	r3, #1
 8003c44:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003c4a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003c4c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c56:	d115      	bne.n	8003c84 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c5c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c62:	3b01      	subs	r3, #1
 8003c64:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003c66:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003c70:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003c80:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003c82:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	430a      	orrs	r2, r1
 8003c96:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 fc20 	bl	80044e0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3710      	adds	r7, #16
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	40006400 	.word	0x40006400
 8003cc4:	40006500 	.word	0x40006500

08003cc8 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b087      	sub	sp, #28
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003cd8:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003cda:	7dfb      	ldrb	r3, [r7, #23]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d002      	beq.n	8003ce6 <HAL_FDCAN_ConfigFilter+0x1e>
 8003ce0:	7dfb      	ldrb	r3, [r7, #23]
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d13d      	bne.n	8003d62 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d119      	bne.n	8003d22 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003cfa:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8003d02:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	4413      	add	r3, r2
 8003d18:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	e01d      	b.n	8003d5e <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	075a      	lsls	r2, r3, #29
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	079a      	lsls	r2, r3, #30
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	4413      	add	r3, r2
 8003d4a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	3304      	adds	r3, #4
 8003d56:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	e006      	b.n	8003d70 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d66:	f043 0202 	orr.w	r2, r3, #2
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
  }
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	371c      	adds	r7, #28
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d110      	bne.n	8003db2 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2202      	movs	r2, #2
 8003d94:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	699a      	ldr	r2, [r3, #24]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0201 	bic.w	r2, r2, #1
 8003da6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8003dae:	2300      	movs	r3, #0
 8003db0:	e006      	b.n	8003dc0 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003db6:	f043 0204 	orr.w	r2, r3, #4
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
  }
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b08b      	sub	sp, #44	@ 0x2c
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
 8003dd8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003de4:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8003de6:	7efb      	ldrb	r3, [r7, #27]
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	f040 80e8 	bne.w	8003fbe <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	2b40      	cmp	r3, #64	@ 0x40
 8003df2:	d137      	bne.n	8003e64 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dfc:	f003 030f 	and.w	r3, r3, #15
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d107      	bne.n	8003e14 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e08:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e0db      	b.n	8003fcc <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e24:	d10a      	bne.n	8003e3c <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e36:	d101      	bne.n	8003e3c <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e44:	0a1b      	lsrs	r3, r3, #8
 8003e46:	f003 0303 	and.w	r3, r3, #3
 8003e4a:	69fa      	ldr	r2, [r7, #28]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8003e54:	69fa      	ldr	r2, [r7, #28]
 8003e56:	4613      	mov	r3, r2
 8003e58:	00db      	lsls	r3, r3, #3
 8003e5a:	4413      	add	r3, r2
 8003e5c:	00db      	lsls	r3, r3, #3
 8003e5e:	440b      	add	r3, r1
 8003e60:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e62:	e036      	b.n	8003ed2 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e6c:	f003 030f 	and.w	r3, r3, #15
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d107      	bne.n	8003e84 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e78:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e0a3      	b.n	8003fcc <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e94:	d10a      	bne.n	8003eac <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ea2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ea6:	d101      	bne.n	8003eac <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003eb4:	0a1b      	lsrs	r3, r3, #8
 8003eb6:	f003 0303 	and.w	r3, r3, #3
 8003eba:	69fa      	ldr	r2, [r7, #28]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8003ec4:	69fa      	ldr	r2, [r7, #28]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	4413      	add	r3, r2
 8003ecc:	00db      	lsls	r3, r3, #3
 8003ece:	440b      	add	r3, r1
 8003ed0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d107      	bne.n	8003ef6 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	0c9b      	lsrs	r3, r3, #18
 8003eec:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	601a      	str	r2, [r3, #0]
 8003ef4:	e005      	b.n	8003f02 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1c:	3304      	adds	r3, #4
 8003f1e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	0c1b      	lsrs	r3, r3, #16
 8003f30:	f003 020f 	and.w	r2, r3, #15
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8003f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	0e1b      	lsrs	r3, r3, #24
 8003f56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	0fda      	lsrs	r2, r3, #31
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6a:	3304      	adds	r3, #4
 8003f6c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f70:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8003f72:	2300      	movs	r3, #0
 8003f74:	623b      	str	r3, [r7, #32]
 8003f76:	e00a      	b.n	8003f8e <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	6a3b      	ldr	r3, [r7, #32]
 8003f7c:	441a      	add	r2, r3
 8003f7e:	6839      	ldr	r1, [r7, #0]
 8003f80:	6a3b      	ldr	r3, [r7, #32]
 8003f82:	440b      	add	r3, r1
 8003f84:	7812      	ldrb	r2, [r2, #0]
 8003f86:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8003f88:	6a3b      	ldr	r3, [r7, #32]
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	623b      	str	r3, [r7, #32]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	4a11      	ldr	r2, [pc, #68]	@ (8003fd8 <HAL_FDCAN_GetRxMessage+0x20c>)
 8003f94:	5cd3      	ldrb	r3, [r2, r3]
 8003f96:	461a      	mov	r2, r3
 8003f98:	6a3b      	ldr	r3, [r7, #32]
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d3ec      	bcc.n	8003f78 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	2b40      	cmp	r3, #64	@ 0x40
 8003fa2:	d105      	bne.n	8003fb0 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	69fa      	ldr	r2, [r7, #28]
 8003faa:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8003fae:	e004      	b.n	8003fba <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	69fa      	ldr	r2, [r7, #28]
 8003fb6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	e006      	b.n	8003fcc <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fc2:	f043 0208 	orr.w	r2, r3, #8
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
  }
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	372c      	adds	r7, #44	@ 0x2c
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr
 8003fd8:	0800a2d0 	.word	0x0800a2d0

08003fdc <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b087      	sub	sp, #28
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003fee:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003ff0:	7dfb      	ldrb	r3, [r7, #23]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d003      	beq.n	8003ffe <HAL_FDCAN_ActivateNotification+0x22>
 8003ff6:	7dfb      	ldrb	r3, [r7, #23]
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	f040 80c8 	bne.w	800418e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004004:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	2b00      	cmp	r3, #0
 800400e:	d004      	beq.n	800401a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b00      	cmp	r3, #0
 8004018:	d03b      	beq.n	8004092 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8004020:	2b00      	cmp	r3, #0
 8004022:	d004      	beq.n	800402e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d031      	beq.n	8004092 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8004034:	2b00      	cmp	r3, #0
 8004036:	d004      	beq.n	8004042 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	f003 0304 	and.w	r3, r3, #4
 800403e:	2b00      	cmp	r3, #0
 8004040:	d027      	beq.n	8004092 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8004048:	2b00      	cmp	r3, #0
 800404a:	d004      	beq.n	8004056 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	f003 0308 	and.w	r3, r3, #8
 8004052:	2b00      	cmp	r3, #0
 8004054:	d01d      	beq.n	8004092 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800405c:	2b00      	cmp	r3, #0
 800405e:	d004      	beq.n	800406a <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	f003 0310 	and.w	r3, r3, #16
 8004066:	2b00      	cmp	r3, #0
 8004068:	d013      	beq.n	8004092 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8004070:	2b00      	cmp	r3, #0
 8004072:	d004      	beq.n	800407e <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	f003 0320 	and.w	r3, r3, #32
 800407a:	2b00      	cmp	r3, #0
 800407c:	d009      	beq.n	8004092 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00c      	beq.n	80040a2 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800408e:	2b00      	cmp	r3, #0
 8004090:	d107      	bne.n	80040a2 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f042 0201 	orr.w	r2, r2, #1
 80040a0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	f003 0307 	and.w	r3, r3, #7
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d004      	beq.n	80040b6 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d13b      	bne.n	800412e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d004      	beq.n	80040ca <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d131      	bne.n	800412e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d004      	beq.n	80040de <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	f003 0304 	and.w	r3, r3, #4
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d127      	bne.n	800412e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d004      	beq.n	80040f2 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	f003 0308 	and.w	r3, r3, #8
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d11d      	bne.n	800412e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d004      	beq.n	8004106 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	f003 0310 	and.w	r3, r3, #16
 8004102:	2b00      	cmp	r3, #0
 8004104:	d113      	bne.n	800412e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800410c:	2b00      	cmp	r3, #0
 800410e:	d004      	beq.n	800411a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	f003 0320 	and.w	r3, r3, #32
 8004116:	2b00      	cmp	r3, #0
 8004118:	d109      	bne.n	800412e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00c      	beq.n	800413e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800412a:	2b00      	cmp	r3, #0
 800412c:	d007      	beq.n	800413e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f042 0202 	orr.w	r2, r2, #2
 800413c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004144:	2b00      	cmp	r3, #0
 8004146:	d009      	beq.n	800415c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	430a      	orrs	r2, r1
 8004158:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004162:	2b00      	cmp	r3, #0
 8004164:	d009      	beq.n	800417a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	430a      	orrs	r2, r1
 8004176:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	430a      	orrs	r2, r1
 8004188:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 800418a:	2300      	movs	r3, #0
 800418c:	e006      	b.n	800419c <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004192:	f043 0202 	orr.w	r2, r3, #2
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
  }
}
 800419c:	4618      	mov	r0, r3
 800419e:	371c      	adds	r7, #28
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b08c      	sub	sp, #48	@ 0x30
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041b6:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80041ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041c4:	4013      	ands	r3, r2
 80041c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041ce:	f003 0307 	and.w	r3, r3, #7
 80041d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80041dc:	4013      	ands	r3, r2
 80041de:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80041ea:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041f4:	4013      	ands	r3, r2
 80041f6:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041fe:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8004202:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800420a:	6a3a      	ldr	r2, [r7, #32]
 800420c:	4013      	ands	r3, r2
 800420e:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004216:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800421a:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004222:	69fa      	ldr	r2, [r7, #28]
 8004224:	4013      	ands	r3, r2
 8004226:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800422e:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004236:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	099b      	lsrs	r3, r3, #6
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00c      	beq.n	800425e <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	099b      	lsrs	r3, r3, #6
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	2b00      	cmp	r3, #0
 800424e:	d006      	beq.n	800425e <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2240      	movs	r2, #64	@ 0x40
 8004256:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 f922 	bl	80044a2 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	0a1b      	lsrs	r3, r3, #8
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	2b00      	cmp	r3, #0
 8004268:	d01a      	beq.n	80042a0 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	0a1b      	lsrs	r3, r3, #8
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	d014      	beq.n	80042a0 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800427e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	4013      	ands	r3, r2
 800428c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004296:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004298:	6939      	ldr	r1, [r7, #16]
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f8e2 	bl	8004464 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80042a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d007      	beq.n	80042b6 <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042ac:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80042ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 f8ac 	bl	800440e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80042b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d007      	beq.n	80042cc <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042c2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80042c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f7fd fae8 	bl	800189c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80042cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d007      	beq.n	80042e2 <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042d8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80042da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 f8a1 	bl	8004424 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	0a5b      	lsrs	r3, r3, #9
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00d      	beq.n	800430a <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	0a5b      	lsrs	r3, r3, #9
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d007      	beq.n	800430a <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004302:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 f898 	bl	800443a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	09db      	lsrs	r3, r3, #7
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	2b00      	cmp	r3, #0
 8004314:	d019      	beq.n	800434a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	09db      	lsrs	r3, r3, #7
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b00      	cmp	r3, #0
 8004320:	d013      	beq.n	800434a <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800432a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	4013      	ands	r3, r2
 8004338:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2280      	movs	r2, #128	@ 0x80
 8004340:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004342:	68f9      	ldr	r1, [r7, #12]
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 f882 	bl	800444e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	0b5b      	lsrs	r3, r3, #13
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00d      	beq.n	8004372 <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	0b5b      	lsrs	r3, r3, #13
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b00      	cmp	r3, #0
 8004360:	d007      	beq.n	8004372 <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800436a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 f884 	bl	800447a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	0bdb      	lsrs	r3, r3, #15
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00d      	beq.n	800439a <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	0bdb      	lsrs	r3, r3, #15
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	2b00      	cmp	r3, #0
 8004388:	d007      	beq.n	800439a <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004392:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 f87a 	bl	800448e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	0b9b      	lsrs	r3, r3, #14
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d010      	beq.n	80043c8 <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	0b9b      	lsrs	r3, r3, #14
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00a      	beq.n	80043c8 <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80043ba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043c0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d007      	beq.n	80043de <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	69fa      	ldr	r2, [r7, #28]
 80043d4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80043d6:	69f9      	ldr	r1, [r7, #28]
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 f876 	bl	80044ca <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80043de:	6a3b      	ldr	r3, [r7, #32]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d009      	beq.n	80043f8 <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6a3a      	ldr	r2, [r7, #32]
 80043ea:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80043f0:	6a3b      	ldr	r3, [r7, #32]
 80043f2:	431a      	orrs	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d002      	beq.n	8004406 <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 f858 	bl	80044b6 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8004406:	bf00      	nop
 8004408:	3730      	adds	r7, #48	@ 0x30
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800440e:	b480      	push	{r7}
 8004410:	b083      	sub	sp, #12
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
 8004416:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800442e:	bf00      	nop
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800443a:	b480      	push	{r7}
 800443c:	b083      	sub	sp, #12
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004442:	bf00      	nop
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr

0800444e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800444e:	b480      	push	{r7}
 8004450:	b083      	sub	sp, #12
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
 8004456:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800446e:	bf00      	nop
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800447a:	b480      	push	{r7}
 800447c:	b083      	sub	sp, #12
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004482:	bf00      	nop
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr

0800448e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800448e:	b480      	push	{r7}
 8004490:	b083      	sub	sp, #12
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004496:	bf00      	nop
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr

080044a2 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80044a2:	b480      	push	{r7}
 80044a4:	b083      	sub	sp, #12
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80044aa:	bf00      	nop
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b083      	sub	sp, #12
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80044be:	bf00      	nop
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b083      	sub	sp, #12
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
 80044d2:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80044e8:	4b30      	ldr	r3, [pc, #192]	@ (80045ac <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 80044ea:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a2f      	ldr	r2, [pc, #188]	@ (80045b0 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d103      	bne.n	80044fe <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80044fc:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a2c      	ldr	r2, [pc, #176]	@ (80045b4 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d103      	bne.n	8004510 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 800450e:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68ba      	ldr	r2, [r7, #8]
 8004514:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800451e:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004526:	041a      	lsls	r2, r3, #16
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	430a      	orrs	r2, r1
 800452e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004544:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800454c:	061a      	lsls	r2, r3, #24
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	430a      	orrs	r2, r1
 8004554:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	60fb      	str	r3, [r7, #12]
 8004584:	e005      	b.n	8004592 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	3304      	adds	r3, #4
 8004590:	60fb      	str	r3, [r7, #12]
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	429a      	cmp	r2, r3
 800459c:	d3f3      	bcc.n	8004586 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 800459e:	bf00      	nop
 80045a0:	bf00      	nop
 80045a2:	3714      	adds	r7, #20
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	4000a400 	.word	0x4000a400
 80045b0:	40006800 	.word	0x40006800
 80045b4:	40006c00 	.word	0x40006c00

080045b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b087      	sub	sp, #28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80045c2:	2300      	movs	r3, #0
 80045c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80045c6:	e15a      	b.n	800487e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	2101      	movs	r1, #1
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	fa01 f303 	lsl.w	r3, r1, r3
 80045d4:	4013      	ands	r3, r2
 80045d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	f000 814c 	beq.w	8004878 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f003 0303 	and.w	r3, r3, #3
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d005      	beq.n	80045f8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d130      	bne.n	800465a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	005b      	lsls	r3, r3, #1
 8004602:	2203      	movs	r2, #3
 8004604:	fa02 f303 	lsl.w	r3, r2, r3
 8004608:	43db      	mvns	r3, r3
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	4013      	ands	r3, r2
 800460e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	68da      	ldr	r2, [r3, #12]
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	005b      	lsls	r3, r3, #1
 8004618:	fa02 f303 	lsl.w	r3, r2, r3
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	4313      	orrs	r3, r2
 8004620:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	693a      	ldr	r2, [r7, #16]
 8004626:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800462e:	2201      	movs	r2, #1
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	fa02 f303 	lsl.w	r3, r2, r3
 8004636:	43db      	mvns	r3, r3
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	4013      	ands	r3, r2
 800463c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	091b      	lsrs	r3, r3, #4
 8004644:	f003 0201 	and.w	r2, r3, #1
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	fa02 f303 	lsl.w	r3, r2, r3
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	4313      	orrs	r3, r2
 8004652:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f003 0303 	and.w	r3, r3, #3
 8004662:	2b03      	cmp	r3, #3
 8004664:	d017      	beq.n	8004696 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	2203      	movs	r2, #3
 8004672:	fa02 f303 	lsl.w	r3, r2, r3
 8004676:	43db      	mvns	r3, r3
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	4013      	ands	r3, r2
 800467c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	689a      	ldr	r2, [r3, #8]
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	fa02 f303 	lsl.w	r3, r2, r3
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	4313      	orrs	r3, r2
 800468e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f003 0303 	and.w	r3, r3, #3
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d123      	bne.n	80046ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	08da      	lsrs	r2, r3, #3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	3208      	adds	r2, #8
 80046aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	f003 0307 	and.w	r3, r3, #7
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	220f      	movs	r2, #15
 80046ba:	fa02 f303 	lsl.w	r3, r2, r3
 80046be:	43db      	mvns	r3, r3
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	4013      	ands	r3, r2
 80046c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	691a      	ldr	r2, [r3, #16]
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	f003 0307 	and.w	r3, r3, #7
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	fa02 f303 	lsl.w	r3, r2, r3
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	4313      	orrs	r3, r2
 80046da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	08da      	lsrs	r2, r3, #3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	3208      	adds	r2, #8
 80046e4:	6939      	ldr	r1, [r7, #16]
 80046e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	005b      	lsls	r3, r3, #1
 80046f4:	2203      	movs	r2, #3
 80046f6:	fa02 f303 	lsl.w	r3, r2, r3
 80046fa:	43db      	mvns	r3, r3
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	4013      	ands	r3, r2
 8004700:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f003 0203 	and.w	r2, r3, #3
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	005b      	lsls	r3, r3, #1
 800470e:	fa02 f303 	lsl.w	r3, r2, r3
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	4313      	orrs	r3, r2
 8004716:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004726:	2b00      	cmp	r3, #0
 8004728:	f000 80a6 	beq.w	8004878 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800472c:	4b5b      	ldr	r3, [pc, #364]	@ (800489c <HAL_GPIO_Init+0x2e4>)
 800472e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004730:	4a5a      	ldr	r2, [pc, #360]	@ (800489c <HAL_GPIO_Init+0x2e4>)
 8004732:	f043 0301 	orr.w	r3, r3, #1
 8004736:	6613      	str	r3, [r2, #96]	@ 0x60
 8004738:	4b58      	ldr	r3, [pc, #352]	@ (800489c <HAL_GPIO_Init+0x2e4>)
 800473a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800473c:	f003 0301 	and.w	r3, r3, #1
 8004740:	60bb      	str	r3, [r7, #8]
 8004742:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004744:	4a56      	ldr	r2, [pc, #344]	@ (80048a0 <HAL_GPIO_Init+0x2e8>)
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	089b      	lsrs	r3, r3, #2
 800474a:	3302      	adds	r3, #2
 800474c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004750:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f003 0303 	and.w	r3, r3, #3
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	220f      	movs	r2, #15
 800475c:	fa02 f303 	lsl.w	r3, r2, r3
 8004760:	43db      	mvns	r3, r3
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	4013      	ands	r3, r2
 8004766:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800476e:	d01f      	beq.n	80047b0 <HAL_GPIO_Init+0x1f8>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a4c      	ldr	r2, [pc, #304]	@ (80048a4 <HAL_GPIO_Init+0x2ec>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d019      	beq.n	80047ac <HAL_GPIO_Init+0x1f4>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a4b      	ldr	r2, [pc, #300]	@ (80048a8 <HAL_GPIO_Init+0x2f0>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d013      	beq.n	80047a8 <HAL_GPIO_Init+0x1f0>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a4a      	ldr	r2, [pc, #296]	@ (80048ac <HAL_GPIO_Init+0x2f4>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d00d      	beq.n	80047a4 <HAL_GPIO_Init+0x1ec>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a49      	ldr	r2, [pc, #292]	@ (80048b0 <HAL_GPIO_Init+0x2f8>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d007      	beq.n	80047a0 <HAL_GPIO_Init+0x1e8>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a48      	ldr	r2, [pc, #288]	@ (80048b4 <HAL_GPIO_Init+0x2fc>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d101      	bne.n	800479c <HAL_GPIO_Init+0x1e4>
 8004798:	2305      	movs	r3, #5
 800479a:	e00a      	b.n	80047b2 <HAL_GPIO_Init+0x1fa>
 800479c:	2306      	movs	r3, #6
 800479e:	e008      	b.n	80047b2 <HAL_GPIO_Init+0x1fa>
 80047a0:	2304      	movs	r3, #4
 80047a2:	e006      	b.n	80047b2 <HAL_GPIO_Init+0x1fa>
 80047a4:	2303      	movs	r3, #3
 80047a6:	e004      	b.n	80047b2 <HAL_GPIO_Init+0x1fa>
 80047a8:	2302      	movs	r3, #2
 80047aa:	e002      	b.n	80047b2 <HAL_GPIO_Init+0x1fa>
 80047ac:	2301      	movs	r3, #1
 80047ae:	e000      	b.n	80047b2 <HAL_GPIO_Init+0x1fa>
 80047b0:	2300      	movs	r3, #0
 80047b2:	697a      	ldr	r2, [r7, #20]
 80047b4:	f002 0203 	and.w	r2, r2, #3
 80047b8:	0092      	lsls	r2, r2, #2
 80047ba:	4093      	lsls	r3, r2
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	4313      	orrs	r3, r2
 80047c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047c2:	4937      	ldr	r1, [pc, #220]	@ (80048a0 <HAL_GPIO_Init+0x2e8>)
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	089b      	lsrs	r3, r3, #2
 80047c8:	3302      	adds	r3, #2
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80047d0:	4b39      	ldr	r3, [pc, #228]	@ (80048b8 <HAL_GPIO_Init+0x300>)
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	43db      	mvns	r3, r3
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	4013      	ands	r3, r2
 80047de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d003      	beq.n	80047f4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80047f4:	4a30      	ldr	r2, [pc, #192]	@ (80048b8 <HAL_GPIO_Init+0x300>)
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80047fa:	4b2f      	ldr	r3, [pc, #188]	@ (80048b8 <HAL_GPIO_Init+0x300>)
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	43db      	mvns	r3, r3
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	4013      	ands	r3, r2
 8004808:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	4313      	orrs	r3, r2
 800481c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800481e:	4a26      	ldr	r2, [pc, #152]	@ (80048b8 <HAL_GPIO_Init+0x300>)
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004824:	4b24      	ldr	r3, [pc, #144]	@ (80048b8 <HAL_GPIO_Init+0x300>)
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	43db      	mvns	r3, r3
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	4013      	ands	r3, r2
 8004832:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d003      	beq.n	8004848 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	4313      	orrs	r3, r2
 8004846:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004848:	4a1b      	ldr	r2, [pc, #108]	@ (80048b8 <HAL_GPIO_Init+0x300>)
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800484e:	4b1a      	ldr	r3, [pc, #104]	@ (80048b8 <HAL_GPIO_Init+0x300>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	43db      	mvns	r3, r3
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	4013      	ands	r3, r2
 800485c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d003      	beq.n	8004872 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	4313      	orrs	r3, r2
 8004870:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004872:	4a11      	ldr	r2, [pc, #68]	@ (80048b8 <HAL_GPIO_Init+0x300>)
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	3301      	adds	r3, #1
 800487c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	fa22 f303 	lsr.w	r3, r2, r3
 8004888:	2b00      	cmp	r3, #0
 800488a:	f47f ae9d 	bne.w	80045c8 <HAL_GPIO_Init+0x10>
  }
}
 800488e:	bf00      	nop
 8004890:	bf00      	nop
 8004892:	371c      	adds	r7, #28
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr
 800489c:	40021000 	.word	0x40021000
 80048a0:	40010000 	.word	0x40010000
 80048a4:	48000400 	.word	0x48000400
 80048a8:	48000800 	.word	0x48000800
 80048ac:	48000c00 	.word	0x48000c00
 80048b0:	48001000 	.word	0x48001000
 80048b4:	48001400 	.word	0x48001400
 80048b8:	40010400 	.word	0x40010400

080048bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	460b      	mov	r3, r1
 80048c6:	807b      	strh	r3, [r7, #2]
 80048c8:	4613      	mov	r3, r2
 80048ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80048cc:	787b      	ldrb	r3, [r7, #1]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d003      	beq.n	80048da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80048d2:	887a      	ldrh	r2, [r7, #2]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80048d8:	e002      	b.n	80048e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80048da:	887a      	ldrh	r2, [r7, #2]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	460b      	mov	r3, r1
 80048f6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80048fe:	887a      	ldrh	r2, [r7, #2]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	4013      	ands	r3, r2
 8004904:	041a      	lsls	r2, r3, #16
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	43d9      	mvns	r1, r3
 800490a:	887b      	ldrh	r3, [r7, #2]
 800490c:	400b      	ands	r3, r1
 800490e:	431a      	orrs	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	619a      	str	r2, [r3, #24]
}
 8004914:	bf00      	nop
 8004916:	3714      	adds	r7, #20
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d141      	bne.n	80049b2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800492e:	4b4b      	ldr	r3, [pc, #300]	@ (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004936:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800493a:	d131      	bne.n	80049a0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800493c:	4b47      	ldr	r3, [pc, #284]	@ (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800493e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004942:	4a46      	ldr	r2, [pc, #280]	@ (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004944:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004948:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800494c:	4b43      	ldr	r3, [pc, #268]	@ (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004954:	4a41      	ldr	r2, [pc, #260]	@ (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004956:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800495a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800495c:	4b40      	ldr	r3, [pc, #256]	@ (8004a60 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2232      	movs	r2, #50	@ 0x32
 8004962:	fb02 f303 	mul.w	r3, r2, r3
 8004966:	4a3f      	ldr	r2, [pc, #252]	@ (8004a64 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004968:	fba2 2303 	umull	r2, r3, r2, r3
 800496c:	0c9b      	lsrs	r3, r3, #18
 800496e:	3301      	adds	r3, #1
 8004970:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004972:	e002      	b.n	800497a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	3b01      	subs	r3, #1
 8004978:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800497a:	4b38      	ldr	r3, [pc, #224]	@ (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004982:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004986:	d102      	bne.n	800498e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1f2      	bne.n	8004974 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800498e:	4b33      	ldr	r3, [pc, #204]	@ (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004996:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800499a:	d158      	bne.n	8004a4e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e057      	b.n	8004a50 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80049a0:	4b2e      	ldr	r3, [pc, #184]	@ (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049a6:	4a2d      	ldr	r2, [pc, #180]	@ (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80049b0:	e04d      	b.n	8004a4e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049b8:	d141      	bne.n	8004a3e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80049ba:	4b28      	ldr	r3, [pc, #160]	@ (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80049c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049c6:	d131      	bne.n	8004a2c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80049c8:	4b24      	ldr	r3, [pc, #144]	@ (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049ce:	4a23      	ldr	r2, [pc, #140]	@ (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80049d8:	4b20      	ldr	r3, [pc, #128]	@ (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80049e0:	4a1e      	ldr	r2, [pc, #120]	@ (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80049e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80049e8:	4b1d      	ldr	r3, [pc, #116]	@ (8004a60 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2232      	movs	r2, #50	@ 0x32
 80049ee:	fb02 f303 	mul.w	r3, r2, r3
 80049f2:	4a1c      	ldr	r2, [pc, #112]	@ (8004a64 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80049f4:	fba2 2303 	umull	r2, r3, r2, r3
 80049f8:	0c9b      	lsrs	r3, r3, #18
 80049fa:	3301      	adds	r3, #1
 80049fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049fe:	e002      	b.n	8004a06 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	3b01      	subs	r3, #1
 8004a04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a06:	4b15      	ldr	r3, [pc, #84]	@ (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a12:	d102      	bne.n	8004a1a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1f2      	bne.n	8004a00 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a1a:	4b10      	ldr	r3, [pc, #64]	@ (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a26:	d112      	bne.n	8004a4e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e011      	b.n	8004a50 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a32:	4a0a      	ldr	r2, [pc, #40]	@ (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a38:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004a3c:	e007      	b.n	8004a4e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004a3e:	4b07      	ldr	r3, [pc, #28]	@ (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004a46:	4a05      	ldr	r2, [pc, #20]	@ (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a48:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004a4c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3714      	adds	r7, #20
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr
 8004a5c:	40007000 	.word	0x40007000
 8004a60:	20000008 	.word	0x20000008
 8004a64:	431bde83 	.word	0x431bde83

08004a68 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004a6c:	4b05      	ldr	r3, [pc, #20]	@ (8004a84 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	4a04      	ldr	r2, [pc, #16]	@ (8004a84 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004a72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a76:	6093      	str	r3, [r2, #8]
}
 8004a78:	bf00      	nop
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	40007000 	.word	0x40007000

08004a88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b088      	sub	sp, #32
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e2fe      	b.n	8005098 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d075      	beq.n	8004b92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004aa6:	4b97      	ldr	r3, [pc, #604]	@ (8004d04 <HAL_RCC_OscConfig+0x27c>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f003 030c 	and.w	r3, r3, #12
 8004aae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ab0:	4b94      	ldr	r3, [pc, #592]	@ (8004d04 <HAL_RCC_OscConfig+0x27c>)
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	f003 0303 	and.w	r3, r3, #3
 8004ab8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	2b0c      	cmp	r3, #12
 8004abe:	d102      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x3e>
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	2b03      	cmp	r3, #3
 8004ac4:	d002      	beq.n	8004acc <HAL_RCC_OscConfig+0x44>
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	2b08      	cmp	r3, #8
 8004aca:	d10b      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004acc:	4b8d      	ldr	r3, [pc, #564]	@ (8004d04 <HAL_RCC_OscConfig+0x27c>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d05b      	beq.n	8004b90 <HAL_RCC_OscConfig+0x108>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d157      	bne.n	8004b90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e2d9      	b.n	8005098 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004aec:	d106      	bne.n	8004afc <HAL_RCC_OscConfig+0x74>
 8004aee:	4b85      	ldr	r3, [pc, #532]	@ (8004d04 <HAL_RCC_OscConfig+0x27c>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a84      	ldr	r2, [pc, #528]	@ (8004d04 <HAL_RCC_OscConfig+0x27c>)
 8004af4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004af8:	6013      	str	r3, [r2, #0]
 8004afa:	e01d      	b.n	8004b38 <HAL_RCC_OscConfig+0xb0>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b04:	d10c      	bne.n	8004b20 <HAL_RCC_OscConfig+0x98>
 8004b06:	4b7f      	ldr	r3, [pc, #508]	@ (8004d04 <HAL_RCC_OscConfig+0x27c>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a7e      	ldr	r2, [pc, #504]	@ (8004d04 <HAL_RCC_OscConfig+0x27c>)
 8004b0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b10:	6013      	str	r3, [r2, #0]
 8004b12:	4b7c      	ldr	r3, [pc, #496]	@ (8004d04 <HAL_RCC_OscConfig+0x27c>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a7b      	ldr	r2, [pc, #492]	@ (8004d04 <HAL_RCC_OscConfig+0x27c>)
 8004b18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b1c:	6013      	str	r3, [r2, #0]
 8004b1e:	e00b      	b.n	8004b38 <HAL_RCC_OscConfig+0xb0>
 8004b20:	4b78      	ldr	r3, [pc, #480]	@ (8004d04 <HAL_RCC_OscConfig+0x27c>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a77      	ldr	r2, [pc, #476]	@ (8004d04 <HAL_RCC_OscConfig+0x27c>)
 8004b26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b2a:	6013      	str	r3, [r2, #0]
 8004b2c:	4b75      	ldr	r3, [pc, #468]	@ (8004d04 <HAL_RCC_OscConfig+0x27c>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a74      	ldr	r2, [pc, #464]	@ (8004d04 <HAL_RCC_OscConfig+0x27c>)
 8004b32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d013      	beq.n	8004b68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b40:	f7fe fbda 	bl	80032f8 <HAL_GetTick>
 8004b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b46:	e008      	b.n	8004b5a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b48:	f7fe fbd6 	bl	80032f8 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	2b64      	cmp	r3, #100	@ 0x64
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e29e      	b.n	8005098 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b5a:	4b6a      	ldr	r3, [pc, #424]	@ (8004d04 <HAL_RCC_OscConfig+0x27c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d0f0      	beq.n	8004b48 <HAL_RCC_OscConfig+0xc0>
 8004b66:	e014      	b.n	8004b92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b68:	f7fe fbc6 	bl	80032f8 <HAL_GetTick>
 8004b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b6e:	e008      	b.n	8004b82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b70:	f7fe fbc2 	bl	80032f8 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b64      	cmp	r3, #100	@ 0x64
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e28a      	b.n	8005098 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b82:	4b60      	ldr	r3, [pc, #384]	@ (8004d04 <HAL_RCC_OscConfig+0x27c>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1f0      	bne.n	8004b70 <HAL_RCC_OscConfig+0xe8>
 8004b8e:	e000      	b.n	8004b92 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d075      	beq.n	8004c8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b9e:	4b59      	ldr	r3, [pc, #356]	@ (8004d04 <HAL_RCC_OscConfig+0x27c>)
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f003 030c 	and.w	r3, r3, #12
 8004ba6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ba8:	4b56      	ldr	r3, [pc, #344]	@ (8004d04 <HAL_RCC_OscConfig+0x27c>)
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	f003 0303 	and.w	r3, r3, #3
 8004bb0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	2b0c      	cmp	r3, #12
 8004bb6:	d102      	bne.n	8004bbe <HAL_RCC_OscConfig+0x136>
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d002      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x13c>
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	2b04      	cmp	r3, #4
 8004bc2:	d11f      	bne.n	8004c04 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bc4:	4b4f      	ldr	r3, [pc, #316]	@ (8004d04 <HAL_RCC_OscConfig+0x27c>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d005      	beq.n	8004bdc <HAL_RCC_OscConfig+0x154>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d101      	bne.n	8004bdc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e25d      	b.n	8005098 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bdc:	4b49      	ldr	r3, [pc, #292]	@ (8004d04 <HAL_RCC_OscConfig+0x27c>)
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	061b      	lsls	r3, r3, #24
 8004bea:	4946      	ldr	r1, [pc, #280]	@ (8004d04 <HAL_RCC_OscConfig+0x27c>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004bf0:	4b45      	ldr	r3, [pc, #276]	@ (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7fe fb33 	bl	8003260 <HAL_InitTick>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d043      	beq.n	8004c88 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e249      	b.n	8005098 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d023      	beq.n	8004c54 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c0c:	4b3d      	ldr	r3, [pc, #244]	@ (8004d04 <HAL_RCC_OscConfig+0x27c>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a3c      	ldr	r2, [pc, #240]	@ (8004d04 <HAL_RCC_OscConfig+0x27c>)
 8004c12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c18:	f7fe fb6e 	bl	80032f8 <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c20:	f7fe fb6a 	bl	80032f8 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e232      	b.n	8005098 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c32:	4b34      	ldr	r3, [pc, #208]	@ (8004d04 <HAL_RCC_OscConfig+0x27c>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0f0      	beq.n	8004c20 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c3e:	4b31      	ldr	r3, [pc, #196]	@ (8004d04 <HAL_RCC_OscConfig+0x27c>)
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	061b      	lsls	r3, r3, #24
 8004c4c:	492d      	ldr	r1, [pc, #180]	@ (8004d04 <HAL_RCC_OscConfig+0x27c>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	604b      	str	r3, [r1, #4]
 8004c52:	e01a      	b.n	8004c8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c54:	4b2b      	ldr	r3, [pc, #172]	@ (8004d04 <HAL_RCC_OscConfig+0x27c>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a2a      	ldr	r2, [pc, #168]	@ (8004d04 <HAL_RCC_OscConfig+0x27c>)
 8004c5a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c60:	f7fe fb4a 	bl	80032f8 <HAL_GetTick>
 8004c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c66:	e008      	b.n	8004c7a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c68:	f7fe fb46 	bl	80032f8 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d901      	bls.n	8004c7a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e20e      	b.n	8005098 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c7a:	4b22      	ldr	r3, [pc, #136]	@ (8004d04 <HAL_RCC_OscConfig+0x27c>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1f0      	bne.n	8004c68 <HAL_RCC_OscConfig+0x1e0>
 8004c86:	e000      	b.n	8004c8a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c88:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0308 	and.w	r3, r3, #8
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d041      	beq.n	8004d1a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d01c      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c9e:	4b19      	ldr	r3, [pc, #100]	@ (8004d04 <HAL_RCC_OscConfig+0x27c>)
 8004ca0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ca4:	4a17      	ldr	r2, [pc, #92]	@ (8004d04 <HAL_RCC_OscConfig+0x27c>)
 8004ca6:	f043 0301 	orr.w	r3, r3, #1
 8004caa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cae:	f7fe fb23 	bl	80032f8 <HAL_GetTick>
 8004cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004cb4:	e008      	b.n	8004cc8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cb6:	f7fe fb1f 	bl	80032f8 <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d901      	bls.n	8004cc8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e1e7      	b.n	8005098 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8004d04 <HAL_RCC_OscConfig+0x27c>)
 8004cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cce:	f003 0302 	and.w	r3, r3, #2
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d0ef      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x22e>
 8004cd6:	e020      	b.n	8004d1a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cd8:	4b0a      	ldr	r3, [pc, #40]	@ (8004d04 <HAL_RCC_OscConfig+0x27c>)
 8004cda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cde:	4a09      	ldr	r2, [pc, #36]	@ (8004d04 <HAL_RCC_OscConfig+0x27c>)
 8004ce0:	f023 0301 	bic.w	r3, r3, #1
 8004ce4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ce8:	f7fe fb06 	bl	80032f8 <HAL_GetTick>
 8004cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004cee:	e00d      	b.n	8004d0c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cf0:	f7fe fb02 	bl	80032f8 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d906      	bls.n	8004d0c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e1ca      	b.n	8005098 <HAL_RCC_OscConfig+0x610>
 8004d02:	bf00      	nop
 8004d04:	40021000 	.word	0x40021000
 8004d08:	20000050 	.word	0x20000050
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d0c:	4b8c      	ldr	r3, [pc, #560]	@ (8004f40 <HAL_RCC_OscConfig+0x4b8>)
 8004d0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d12:	f003 0302 	and.w	r3, r3, #2
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d1ea      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0304 	and.w	r3, r3, #4
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	f000 80a6 	beq.w	8004e74 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d2c:	4b84      	ldr	r3, [pc, #528]	@ (8004f40 <HAL_RCC_OscConfig+0x4b8>)
 8004d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d101      	bne.n	8004d3c <HAL_RCC_OscConfig+0x2b4>
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e000      	b.n	8004d3e <HAL_RCC_OscConfig+0x2b6>
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00d      	beq.n	8004d5e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d42:	4b7f      	ldr	r3, [pc, #508]	@ (8004f40 <HAL_RCC_OscConfig+0x4b8>)
 8004d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d46:	4a7e      	ldr	r2, [pc, #504]	@ (8004f40 <HAL_RCC_OscConfig+0x4b8>)
 8004d48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d4e:	4b7c      	ldr	r3, [pc, #496]	@ (8004f40 <HAL_RCC_OscConfig+0x4b8>)
 8004d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d56:	60fb      	str	r3, [r7, #12]
 8004d58:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d5e:	4b79      	ldr	r3, [pc, #484]	@ (8004f44 <HAL_RCC_OscConfig+0x4bc>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d118      	bne.n	8004d9c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d6a:	4b76      	ldr	r3, [pc, #472]	@ (8004f44 <HAL_RCC_OscConfig+0x4bc>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a75      	ldr	r2, [pc, #468]	@ (8004f44 <HAL_RCC_OscConfig+0x4bc>)
 8004d70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d76:	f7fe fabf 	bl	80032f8 <HAL_GetTick>
 8004d7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d7c:	e008      	b.n	8004d90 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d7e:	f7fe fabb 	bl	80032f8 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d901      	bls.n	8004d90 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e183      	b.n	8005098 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d90:	4b6c      	ldr	r3, [pc, #432]	@ (8004f44 <HAL_RCC_OscConfig+0x4bc>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d0f0      	beq.n	8004d7e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d108      	bne.n	8004db6 <HAL_RCC_OscConfig+0x32e>
 8004da4:	4b66      	ldr	r3, [pc, #408]	@ (8004f40 <HAL_RCC_OscConfig+0x4b8>)
 8004da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004daa:	4a65      	ldr	r2, [pc, #404]	@ (8004f40 <HAL_RCC_OscConfig+0x4b8>)
 8004dac:	f043 0301 	orr.w	r3, r3, #1
 8004db0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004db4:	e024      	b.n	8004e00 <HAL_RCC_OscConfig+0x378>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	2b05      	cmp	r3, #5
 8004dbc:	d110      	bne.n	8004de0 <HAL_RCC_OscConfig+0x358>
 8004dbe:	4b60      	ldr	r3, [pc, #384]	@ (8004f40 <HAL_RCC_OscConfig+0x4b8>)
 8004dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dc4:	4a5e      	ldr	r2, [pc, #376]	@ (8004f40 <HAL_RCC_OscConfig+0x4b8>)
 8004dc6:	f043 0304 	orr.w	r3, r3, #4
 8004dca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004dce:	4b5c      	ldr	r3, [pc, #368]	@ (8004f40 <HAL_RCC_OscConfig+0x4b8>)
 8004dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dd4:	4a5a      	ldr	r2, [pc, #360]	@ (8004f40 <HAL_RCC_OscConfig+0x4b8>)
 8004dd6:	f043 0301 	orr.w	r3, r3, #1
 8004dda:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004dde:	e00f      	b.n	8004e00 <HAL_RCC_OscConfig+0x378>
 8004de0:	4b57      	ldr	r3, [pc, #348]	@ (8004f40 <HAL_RCC_OscConfig+0x4b8>)
 8004de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004de6:	4a56      	ldr	r2, [pc, #344]	@ (8004f40 <HAL_RCC_OscConfig+0x4b8>)
 8004de8:	f023 0301 	bic.w	r3, r3, #1
 8004dec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004df0:	4b53      	ldr	r3, [pc, #332]	@ (8004f40 <HAL_RCC_OscConfig+0x4b8>)
 8004df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004df6:	4a52      	ldr	r2, [pc, #328]	@ (8004f40 <HAL_RCC_OscConfig+0x4b8>)
 8004df8:	f023 0304 	bic.w	r3, r3, #4
 8004dfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d016      	beq.n	8004e36 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e08:	f7fe fa76 	bl	80032f8 <HAL_GetTick>
 8004e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e0e:	e00a      	b.n	8004e26 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e10:	f7fe fa72 	bl	80032f8 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e138      	b.n	8005098 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e26:	4b46      	ldr	r3, [pc, #280]	@ (8004f40 <HAL_RCC_OscConfig+0x4b8>)
 8004e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e2c:	f003 0302 	and.w	r3, r3, #2
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d0ed      	beq.n	8004e10 <HAL_RCC_OscConfig+0x388>
 8004e34:	e015      	b.n	8004e62 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e36:	f7fe fa5f 	bl	80032f8 <HAL_GetTick>
 8004e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e3c:	e00a      	b.n	8004e54 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e3e:	f7fe fa5b 	bl	80032f8 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d901      	bls.n	8004e54 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e121      	b.n	8005098 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e54:	4b3a      	ldr	r3, [pc, #232]	@ (8004f40 <HAL_RCC_OscConfig+0x4b8>)
 8004e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e5a:	f003 0302 	and.w	r3, r3, #2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1ed      	bne.n	8004e3e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e62:	7ffb      	ldrb	r3, [r7, #31]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d105      	bne.n	8004e74 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e68:	4b35      	ldr	r3, [pc, #212]	@ (8004f40 <HAL_RCC_OscConfig+0x4b8>)
 8004e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e6c:	4a34      	ldr	r2, [pc, #208]	@ (8004f40 <HAL_RCC_OscConfig+0x4b8>)
 8004e6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e72:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0320 	and.w	r3, r3, #32
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d03c      	beq.n	8004efa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d01c      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e88:	4b2d      	ldr	r3, [pc, #180]	@ (8004f40 <HAL_RCC_OscConfig+0x4b8>)
 8004e8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e8e:	4a2c      	ldr	r2, [pc, #176]	@ (8004f40 <HAL_RCC_OscConfig+0x4b8>)
 8004e90:	f043 0301 	orr.w	r3, r3, #1
 8004e94:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e98:	f7fe fa2e 	bl	80032f8 <HAL_GetTick>
 8004e9c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e9e:	e008      	b.n	8004eb2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ea0:	f7fe fa2a 	bl	80032f8 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e0f2      	b.n	8005098 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004eb2:	4b23      	ldr	r3, [pc, #140]	@ (8004f40 <HAL_RCC_OscConfig+0x4b8>)
 8004eb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004eb8:	f003 0302 	and.w	r3, r3, #2
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d0ef      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x418>
 8004ec0:	e01b      	b.n	8004efa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004ec2:	4b1f      	ldr	r3, [pc, #124]	@ (8004f40 <HAL_RCC_OscConfig+0x4b8>)
 8004ec4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ec8:	4a1d      	ldr	r2, [pc, #116]	@ (8004f40 <HAL_RCC_OscConfig+0x4b8>)
 8004eca:	f023 0301 	bic.w	r3, r3, #1
 8004ece:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ed2:	f7fe fa11 	bl	80032f8 <HAL_GetTick>
 8004ed6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ed8:	e008      	b.n	8004eec <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004eda:	f7fe fa0d 	bl	80032f8 <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d901      	bls.n	8004eec <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e0d5      	b.n	8005098 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004eec:	4b14      	ldr	r3, [pc, #80]	@ (8004f40 <HAL_RCC_OscConfig+0x4b8>)
 8004eee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1ef      	bne.n	8004eda <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	69db      	ldr	r3, [r3, #28]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f000 80c9 	beq.w	8005096 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f04:	4b0e      	ldr	r3, [pc, #56]	@ (8004f40 <HAL_RCC_OscConfig+0x4b8>)
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f003 030c 	and.w	r3, r3, #12
 8004f0c:	2b0c      	cmp	r3, #12
 8004f0e:	f000 8083 	beq.w	8005018 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	69db      	ldr	r3, [r3, #28]
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d15e      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f1a:	4b09      	ldr	r3, [pc, #36]	@ (8004f40 <HAL_RCC_OscConfig+0x4b8>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a08      	ldr	r2, [pc, #32]	@ (8004f40 <HAL_RCC_OscConfig+0x4b8>)
 8004f20:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f26:	f7fe f9e7 	bl	80032f8 <HAL_GetTick>
 8004f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f2c:	e00c      	b.n	8004f48 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f2e:	f7fe f9e3 	bl	80032f8 <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d905      	bls.n	8004f48 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e0ab      	b.n	8005098 <HAL_RCC_OscConfig+0x610>
 8004f40:	40021000 	.word	0x40021000
 8004f44:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f48:	4b55      	ldr	r3, [pc, #340]	@ (80050a0 <HAL_RCC_OscConfig+0x618>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d1ec      	bne.n	8004f2e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f54:	4b52      	ldr	r3, [pc, #328]	@ (80050a0 <HAL_RCC_OscConfig+0x618>)
 8004f56:	68da      	ldr	r2, [r3, #12]
 8004f58:	4b52      	ldr	r3, [pc, #328]	@ (80050a4 <HAL_RCC_OscConfig+0x61c>)
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	6a11      	ldr	r1, [r2, #32]
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f64:	3a01      	subs	r2, #1
 8004f66:	0112      	lsls	r2, r2, #4
 8004f68:	4311      	orrs	r1, r2
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004f6e:	0212      	lsls	r2, r2, #8
 8004f70:	4311      	orrs	r1, r2
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004f76:	0852      	lsrs	r2, r2, #1
 8004f78:	3a01      	subs	r2, #1
 8004f7a:	0552      	lsls	r2, r2, #21
 8004f7c:	4311      	orrs	r1, r2
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004f82:	0852      	lsrs	r2, r2, #1
 8004f84:	3a01      	subs	r2, #1
 8004f86:	0652      	lsls	r2, r2, #25
 8004f88:	4311      	orrs	r1, r2
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004f8e:	06d2      	lsls	r2, r2, #27
 8004f90:	430a      	orrs	r2, r1
 8004f92:	4943      	ldr	r1, [pc, #268]	@ (80050a0 <HAL_RCC_OscConfig+0x618>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f98:	4b41      	ldr	r3, [pc, #260]	@ (80050a0 <HAL_RCC_OscConfig+0x618>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a40      	ldr	r2, [pc, #256]	@ (80050a0 <HAL_RCC_OscConfig+0x618>)
 8004f9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fa2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004fa4:	4b3e      	ldr	r3, [pc, #248]	@ (80050a0 <HAL_RCC_OscConfig+0x618>)
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	4a3d      	ldr	r2, [pc, #244]	@ (80050a0 <HAL_RCC_OscConfig+0x618>)
 8004faa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb0:	f7fe f9a2 	bl	80032f8 <HAL_GetTick>
 8004fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fb6:	e008      	b.n	8004fca <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fb8:	f7fe f99e 	bl	80032f8 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d901      	bls.n	8004fca <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e066      	b.n	8005098 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fca:	4b35      	ldr	r3, [pc, #212]	@ (80050a0 <HAL_RCC_OscConfig+0x618>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d0f0      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x530>
 8004fd6:	e05e      	b.n	8005096 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fd8:	4b31      	ldr	r3, [pc, #196]	@ (80050a0 <HAL_RCC_OscConfig+0x618>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a30      	ldr	r2, [pc, #192]	@ (80050a0 <HAL_RCC_OscConfig+0x618>)
 8004fde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fe2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe4:	f7fe f988 	bl	80032f8 <HAL_GetTick>
 8004fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fea:	e008      	b.n	8004ffe <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fec:	f7fe f984 	bl	80032f8 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e04c      	b.n	8005098 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ffe:	4b28      	ldr	r3, [pc, #160]	@ (80050a0 <HAL_RCC_OscConfig+0x618>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1f0      	bne.n	8004fec <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800500a:	4b25      	ldr	r3, [pc, #148]	@ (80050a0 <HAL_RCC_OscConfig+0x618>)
 800500c:	68da      	ldr	r2, [r3, #12]
 800500e:	4924      	ldr	r1, [pc, #144]	@ (80050a0 <HAL_RCC_OscConfig+0x618>)
 8005010:	4b25      	ldr	r3, [pc, #148]	@ (80050a8 <HAL_RCC_OscConfig+0x620>)
 8005012:	4013      	ands	r3, r2
 8005014:	60cb      	str	r3, [r1, #12]
 8005016:	e03e      	b.n	8005096 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	69db      	ldr	r3, [r3, #28]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d101      	bne.n	8005024 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e039      	b.n	8005098 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005024:	4b1e      	ldr	r3, [pc, #120]	@ (80050a0 <HAL_RCC_OscConfig+0x618>)
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f003 0203 	and.w	r2, r3, #3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a1b      	ldr	r3, [r3, #32]
 8005034:	429a      	cmp	r2, r3
 8005036:	d12c      	bne.n	8005092 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005042:	3b01      	subs	r3, #1
 8005044:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005046:	429a      	cmp	r2, r3
 8005048:	d123      	bne.n	8005092 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005054:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005056:	429a      	cmp	r2, r3
 8005058:	d11b      	bne.n	8005092 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005064:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005066:	429a      	cmp	r2, r3
 8005068:	d113      	bne.n	8005092 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005074:	085b      	lsrs	r3, r3, #1
 8005076:	3b01      	subs	r3, #1
 8005078:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800507a:	429a      	cmp	r2, r3
 800507c:	d109      	bne.n	8005092 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005088:	085b      	lsrs	r3, r3, #1
 800508a:	3b01      	subs	r3, #1
 800508c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800508e:	429a      	cmp	r2, r3
 8005090:	d001      	beq.n	8005096 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e000      	b.n	8005098 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3720      	adds	r7, #32
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	40021000 	.word	0x40021000
 80050a4:	019f800c 	.word	0x019f800c
 80050a8:	feeefffc 	.word	0xfeeefffc

080050ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b086      	sub	sp, #24
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80050b6:	2300      	movs	r3, #0
 80050b8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d101      	bne.n	80050c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e11e      	b.n	8005302 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050c4:	4b91      	ldr	r3, [pc, #580]	@ (800530c <HAL_RCC_ClockConfig+0x260>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 030f 	and.w	r3, r3, #15
 80050cc:	683a      	ldr	r2, [r7, #0]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d910      	bls.n	80050f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050d2:	4b8e      	ldr	r3, [pc, #568]	@ (800530c <HAL_RCC_ClockConfig+0x260>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f023 020f 	bic.w	r2, r3, #15
 80050da:	498c      	ldr	r1, [pc, #560]	@ (800530c <HAL_RCC_ClockConfig+0x260>)
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	4313      	orrs	r3, r2
 80050e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050e2:	4b8a      	ldr	r3, [pc, #552]	@ (800530c <HAL_RCC_ClockConfig+0x260>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 030f 	and.w	r3, r3, #15
 80050ea:	683a      	ldr	r2, [r7, #0]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d001      	beq.n	80050f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e106      	b.n	8005302 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0301 	and.w	r3, r3, #1
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d073      	beq.n	80051e8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	2b03      	cmp	r3, #3
 8005106:	d129      	bne.n	800515c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005108:	4b81      	ldr	r3, [pc, #516]	@ (8005310 <HAL_RCC_ClockConfig+0x264>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d101      	bne.n	8005118 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e0f4      	b.n	8005302 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005118:	f000 f966 	bl	80053e8 <RCC_GetSysClockFreqFromPLLSource>
 800511c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	4a7c      	ldr	r2, [pc, #496]	@ (8005314 <HAL_RCC_ClockConfig+0x268>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d93f      	bls.n	80051a6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005126:	4b7a      	ldr	r3, [pc, #488]	@ (8005310 <HAL_RCC_ClockConfig+0x264>)
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d009      	beq.n	8005146 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800513a:	2b00      	cmp	r3, #0
 800513c:	d033      	beq.n	80051a6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005142:	2b00      	cmp	r3, #0
 8005144:	d12f      	bne.n	80051a6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005146:	4b72      	ldr	r3, [pc, #456]	@ (8005310 <HAL_RCC_ClockConfig+0x264>)
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800514e:	4a70      	ldr	r2, [pc, #448]	@ (8005310 <HAL_RCC_ClockConfig+0x264>)
 8005150:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005154:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005156:	2380      	movs	r3, #128	@ 0x80
 8005158:	617b      	str	r3, [r7, #20]
 800515a:	e024      	b.n	80051a6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	2b02      	cmp	r3, #2
 8005162:	d107      	bne.n	8005174 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005164:	4b6a      	ldr	r3, [pc, #424]	@ (8005310 <HAL_RCC_ClockConfig+0x264>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d109      	bne.n	8005184 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e0c6      	b.n	8005302 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005174:	4b66      	ldr	r3, [pc, #408]	@ (8005310 <HAL_RCC_ClockConfig+0x264>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e0be      	b.n	8005302 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005184:	f000 f8ce 	bl	8005324 <HAL_RCC_GetSysClockFreq>
 8005188:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	4a61      	ldr	r2, [pc, #388]	@ (8005314 <HAL_RCC_ClockConfig+0x268>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d909      	bls.n	80051a6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005192:	4b5f      	ldr	r3, [pc, #380]	@ (8005310 <HAL_RCC_ClockConfig+0x264>)
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800519a:	4a5d      	ldr	r2, [pc, #372]	@ (8005310 <HAL_RCC_ClockConfig+0x264>)
 800519c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051a0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80051a2:	2380      	movs	r3, #128	@ 0x80
 80051a4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80051a6:	4b5a      	ldr	r3, [pc, #360]	@ (8005310 <HAL_RCC_ClockConfig+0x264>)
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f023 0203 	bic.w	r2, r3, #3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	4957      	ldr	r1, [pc, #348]	@ (8005310 <HAL_RCC_ClockConfig+0x264>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051b8:	f7fe f89e 	bl	80032f8 <HAL_GetTick>
 80051bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051be:	e00a      	b.n	80051d6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051c0:	f7fe f89a 	bl	80032f8 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d901      	bls.n	80051d6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e095      	b.n	8005302 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051d6:	4b4e      	ldr	r3, [pc, #312]	@ (8005310 <HAL_RCC_ClockConfig+0x264>)
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f003 020c 	and.w	r2, r3, #12
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d1eb      	bne.n	80051c0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0302 	and.w	r3, r3, #2
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d023      	beq.n	800523c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0304 	and.w	r3, r3, #4
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d005      	beq.n	800520c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005200:	4b43      	ldr	r3, [pc, #268]	@ (8005310 <HAL_RCC_ClockConfig+0x264>)
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	4a42      	ldr	r2, [pc, #264]	@ (8005310 <HAL_RCC_ClockConfig+0x264>)
 8005206:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800520a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0308 	and.w	r3, r3, #8
 8005214:	2b00      	cmp	r3, #0
 8005216:	d007      	beq.n	8005228 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005218:	4b3d      	ldr	r3, [pc, #244]	@ (8005310 <HAL_RCC_ClockConfig+0x264>)
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005220:	4a3b      	ldr	r2, [pc, #236]	@ (8005310 <HAL_RCC_ClockConfig+0x264>)
 8005222:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005226:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005228:	4b39      	ldr	r3, [pc, #228]	@ (8005310 <HAL_RCC_ClockConfig+0x264>)
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	4936      	ldr	r1, [pc, #216]	@ (8005310 <HAL_RCC_ClockConfig+0x264>)
 8005236:	4313      	orrs	r3, r2
 8005238:	608b      	str	r3, [r1, #8]
 800523a:	e008      	b.n	800524e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	2b80      	cmp	r3, #128	@ 0x80
 8005240:	d105      	bne.n	800524e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005242:	4b33      	ldr	r3, [pc, #204]	@ (8005310 <HAL_RCC_ClockConfig+0x264>)
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	4a32      	ldr	r2, [pc, #200]	@ (8005310 <HAL_RCC_ClockConfig+0x264>)
 8005248:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800524c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800524e:	4b2f      	ldr	r3, [pc, #188]	@ (800530c <HAL_RCC_ClockConfig+0x260>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 030f 	and.w	r3, r3, #15
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	429a      	cmp	r2, r3
 800525a:	d21d      	bcs.n	8005298 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800525c:	4b2b      	ldr	r3, [pc, #172]	@ (800530c <HAL_RCC_ClockConfig+0x260>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f023 020f 	bic.w	r2, r3, #15
 8005264:	4929      	ldr	r1, [pc, #164]	@ (800530c <HAL_RCC_ClockConfig+0x260>)
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	4313      	orrs	r3, r2
 800526a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800526c:	f7fe f844 	bl	80032f8 <HAL_GetTick>
 8005270:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005272:	e00a      	b.n	800528a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005274:	f7fe f840 	bl	80032f8 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005282:	4293      	cmp	r3, r2
 8005284:	d901      	bls.n	800528a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e03b      	b.n	8005302 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800528a:	4b20      	ldr	r3, [pc, #128]	@ (800530c <HAL_RCC_ClockConfig+0x260>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 030f 	and.w	r3, r3, #15
 8005292:	683a      	ldr	r2, [r7, #0]
 8005294:	429a      	cmp	r2, r3
 8005296:	d1ed      	bne.n	8005274 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0304 	and.w	r3, r3, #4
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d008      	beq.n	80052b6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052a4:	4b1a      	ldr	r3, [pc, #104]	@ (8005310 <HAL_RCC_ClockConfig+0x264>)
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	4917      	ldr	r1, [pc, #92]	@ (8005310 <HAL_RCC_ClockConfig+0x264>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0308 	and.w	r3, r3, #8
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d009      	beq.n	80052d6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052c2:	4b13      	ldr	r3, [pc, #76]	@ (8005310 <HAL_RCC_ClockConfig+0x264>)
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	00db      	lsls	r3, r3, #3
 80052d0:	490f      	ldr	r1, [pc, #60]	@ (8005310 <HAL_RCC_ClockConfig+0x264>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80052d6:	f000 f825 	bl	8005324 <HAL_RCC_GetSysClockFreq>
 80052da:	4602      	mov	r2, r0
 80052dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005310 <HAL_RCC_ClockConfig+0x264>)
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	091b      	lsrs	r3, r3, #4
 80052e2:	f003 030f 	and.w	r3, r3, #15
 80052e6:	490c      	ldr	r1, [pc, #48]	@ (8005318 <HAL_RCC_ClockConfig+0x26c>)
 80052e8:	5ccb      	ldrb	r3, [r1, r3]
 80052ea:	f003 031f 	and.w	r3, r3, #31
 80052ee:	fa22 f303 	lsr.w	r3, r2, r3
 80052f2:	4a0a      	ldr	r2, [pc, #40]	@ (800531c <HAL_RCC_ClockConfig+0x270>)
 80052f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80052f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005320 <HAL_RCC_ClockConfig+0x274>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7fd ffb0 	bl	8003260 <HAL_InitTick>
 8005300:	4603      	mov	r3, r0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3718      	adds	r7, #24
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	40022000 	.word	0x40022000
 8005310:	40021000 	.word	0x40021000
 8005314:	04c4b400 	.word	0x04c4b400
 8005318:	0800a2c0 	.word	0x0800a2c0
 800531c:	20000008 	.word	0x20000008
 8005320:	20000050 	.word	0x20000050

08005324 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005324:	b480      	push	{r7}
 8005326:	b087      	sub	sp, #28
 8005328:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800532a:	4b2c      	ldr	r3, [pc, #176]	@ (80053dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	f003 030c 	and.w	r3, r3, #12
 8005332:	2b04      	cmp	r3, #4
 8005334:	d102      	bne.n	800533c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005336:	4b2a      	ldr	r3, [pc, #168]	@ (80053e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005338:	613b      	str	r3, [r7, #16]
 800533a:	e047      	b.n	80053cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800533c:	4b27      	ldr	r3, [pc, #156]	@ (80053dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f003 030c 	and.w	r3, r3, #12
 8005344:	2b08      	cmp	r3, #8
 8005346:	d102      	bne.n	800534e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005348:	4b26      	ldr	r3, [pc, #152]	@ (80053e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800534a:	613b      	str	r3, [r7, #16]
 800534c:	e03e      	b.n	80053cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800534e:	4b23      	ldr	r3, [pc, #140]	@ (80053dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f003 030c 	and.w	r3, r3, #12
 8005356:	2b0c      	cmp	r3, #12
 8005358:	d136      	bne.n	80053c8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800535a:	4b20      	ldr	r3, [pc, #128]	@ (80053dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	f003 0303 	and.w	r3, r3, #3
 8005362:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005364:	4b1d      	ldr	r3, [pc, #116]	@ (80053dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	091b      	lsrs	r3, r3, #4
 800536a:	f003 030f 	and.w	r3, r3, #15
 800536e:	3301      	adds	r3, #1
 8005370:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2b03      	cmp	r3, #3
 8005376:	d10c      	bne.n	8005392 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005378:	4a1a      	ldr	r2, [pc, #104]	@ (80053e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005380:	4a16      	ldr	r2, [pc, #88]	@ (80053dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005382:	68d2      	ldr	r2, [r2, #12]
 8005384:	0a12      	lsrs	r2, r2, #8
 8005386:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800538a:	fb02 f303 	mul.w	r3, r2, r3
 800538e:	617b      	str	r3, [r7, #20]
      break;
 8005390:	e00c      	b.n	80053ac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005392:	4a13      	ldr	r2, [pc, #76]	@ (80053e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	fbb2 f3f3 	udiv	r3, r2, r3
 800539a:	4a10      	ldr	r2, [pc, #64]	@ (80053dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800539c:	68d2      	ldr	r2, [r2, #12]
 800539e:	0a12      	lsrs	r2, r2, #8
 80053a0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80053a4:	fb02 f303 	mul.w	r3, r2, r3
 80053a8:	617b      	str	r3, [r7, #20]
      break;
 80053aa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80053ac:	4b0b      	ldr	r3, [pc, #44]	@ (80053dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	0e5b      	lsrs	r3, r3, #25
 80053b2:	f003 0303 	and.w	r3, r3, #3
 80053b6:	3301      	adds	r3, #1
 80053b8:	005b      	lsls	r3, r3, #1
 80053ba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c4:	613b      	str	r3, [r7, #16]
 80053c6:	e001      	b.n	80053cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80053c8:	2300      	movs	r3, #0
 80053ca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80053cc:	693b      	ldr	r3, [r7, #16]
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	371c      	adds	r7, #28
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	40021000 	.word	0x40021000
 80053e0:	00f42400 	.word	0x00f42400
 80053e4:	016e3600 	.word	0x016e3600

080053e8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b087      	sub	sp, #28
 80053ec:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80053ee:	4b1e      	ldr	r3, [pc, #120]	@ (8005468 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	f003 0303 	and.w	r3, r3, #3
 80053f6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053f8:	4b1b      	ldr	r3, [pc, #108]	@ (8005468 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	091b      	lsrs	r3, r3, #4
 80053fe:	f003 030f 	and.w	r3, r3, #15
 8005402:	3301      	adds	r3, #1
 8005404:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	2b03      	cmp	r3, #3
 800540a:	d10c      	bne.n	8005426 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800540c:	4a17      	ldr	r2, [pc, #92]	@ (800546c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	fbb2 f3f3 	udiv	r3, r2, r3
 8005414:	4a14      	ldr	r2, [pc, #80]	@ (8005468 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005416:	68d2      	ldr	r2, [r2, #12]
 8005418:	0a12      	lsrs	r2, r2, #8
 800541a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800541e:	fb02 f303 	mul.w	r3, r2, r3
 8005422:	617b      	str	r3, [r7, #20]
    break;
 8005424:	e00c      	b.n	8005440 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005426:	4a12      	ldr	r2, [pc, #72]	@ (8005470 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	fbb2 f3f3 	udiv	r3, r2, r3
 800542e:	4a0e      	ldr	r2, [pc, #56]	@ (8005468 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005430:	68d2      	ldr	r2, [r2, #12]
 8005432:	0a12      	lsrs	r2, r2, #8
 8005434:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005438:	fb02 f303 	mul.w	r3, r2, r3
 800543c:	617b      	str	r3, [r7, #20]
    break;
 800543e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005440:	4b09      	ldr	r3, [pc, #36]	@ (8005468 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	0e5b      	lsrs	r3, r3, #25
 8005446:	f003 0303 	and.w	r3, r3, #3
 800544a:	3301      	adds	r3, #1
 800544c:	005b      	lsls	r3, r3, #1
 800544e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	fbb2 f3f3 	udiv	r3, r2, r3
 8005458:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800545a:	687b      	ldr	r3, [r7, #4]
}
 800545c:	4618      	mov	r0, r3
 800545e:	371c      	adds	r7, #28
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr
 8005468:	40021000 	.word	0x40021000
 800546c:	016e3600 	.word	0x016e3600
 8005470:	00f42400 	.word	0x00f42400

08005474 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b086      	sub	sp, #24
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800547c:	2300      	movs	r3, #0
 800547e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005480:	2300      	movs	r3, #0
 8005482:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800548c:	2b00      	cmp	r3, #0
 800548e:	f000 8098 	beq.w	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005492:	2300      	movs	r3, #0
 8005494:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005496:	4b43      	ldr	r3, [pc, #268]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800549a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10d      	bne.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054a2:	4b40      	ldr	r3, [pc, #256]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054a6:	4a3f      	ldr	r2, [pc, #252]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80054ae:	4b3d      	ldr	r3, [pc, #244]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054b6:	60bb      	str	r3, [r7, #8]
 80054b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054ba:	2301      	movs	r3, #1
 80054bc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054be:	4b3a      	ldr	r3, [pc, #232]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a39      	ldr	r2, [pc, #228]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80054c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80054ca:	f7fd ff15 	bl	80032f8 <HAL_GetTick>
 80054ce:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80054d0:	e009      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054d2:	f7fd ff11 	bl	80032f8 <HAL_GetTick>
 80054d6:	4602      	mov	r2, r0
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d902      	bls.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	74fb      	strb	r3, [r7, #19]
        break;
 80054e4:	e005      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80054e6:	4b30      	ldr	r3, [pc, #192]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d0ef      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80054f2:	7cfb      	ldrb	r3, [r7, #19]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d159      	bne.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80054f8:	4b2a      	ldr	r3, [pc, #168]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005502:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d01e      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	429a      	cmp	r2, r3
 8005512:	d019      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005514:	4b23      	ldr	r3, [pc, #140]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005516:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800551a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800551e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005520:	4b20      	ldr	r3, [pc, #128]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005526:	4a1f      	ldr	r2, [pc, #124]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005528:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800552c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005530:	4b1c      	ldr	r3, [pc, #112]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005536:	4a1b      	ldr	r2, [pc, #108]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005538:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800553c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005540:	4a18      	ldr	r2, [pc, #96]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	2b00      	cmp	r3, #0
 8005550:	d016      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005552:	f7fd fed1 	bl	80032f8 <HAL_GetTick>
 8005556:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005558:	e00b      	b.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800555a:	f7fd fecd 	bl	80032f8 <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005568:	4293      	cmp	r3, r2
 800556a:	d902      	bls.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	74fb      	strb	r3, [r7, #19]
            break;
 8005570:	e006      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005572:	4b0c      	ldr	r3, [pc, #48]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005574:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005578:	f003 0302 	and.w	r3, r3, #2
 800557c:	2b00      	cmp	r3, #0
 800557e:	d0ec      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005580:	7cfb      	ldrb	r3, [r7, #19]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10b      	bne.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005586:	4b07      	ldr	r3, [pc, #28]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005588:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800558c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005594:	4903      	ldr	r1, [pc, #12]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005596:	4313      	orrs	r3, r2
 8005598:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800559c:	e008      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800559e:	7cfb      	ldrb	r3, [r7, #19]
 80055a0:	74bb      	strb	r3, [r7, #18]
 80055a2:	e005      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80055a4:	40021000 	.word	0x40021000
 80055a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ac:	7cfb      	ldrb	r3, [r7, #19]
 80055ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055b0:	7c7b      	ldrb	r3, [r7, #17]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d105      	bne.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055b6:	4ba7      	ldr	r3, [pc, #668]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055ba:	4aa6      	ldr	r2, [pc, #664]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055c0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00a      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055ce:	4ba1      	ldr	r3, [pc, #644]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055d4:	f023 0203 	bic.w	r2, r3, #3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	499d      	ldr	r1, [pc, #628]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0302 	and.w	r3, r3, #2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00a      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055f0:	4b98      	ldr	r3, [pc, #608]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055f6:	f023 020c 	bic.w	r2, r3, #12
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	4995      	ldr	r1, [pc, #596]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005600:	4313      	orrs	r3, r2
 8005602:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0304 	and.w	r3, r3, #4
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00a      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005612:	4b90      	ldr	r3, [pc, #576]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005614:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005618:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	498c      	ldr	r1, [pc, #560]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005622:	4313      	orrs	r3, r2
 8005624:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0308 	and.w	r3, r3, #8
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00a      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005634:	4b87      	ldr	r3, [pc, #540]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800563a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	4984      	ldr	r1, [pc, #528]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005644:	4313      	orrs	r3, r2
 8005646:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0310 	and.w	r3, r3, #16
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00a      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005656:	4b7f      	ldr	r3, [pc, #508]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005658:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800565c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	497b      	ldr	r1, [pc, #492]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005666:	4313      	orrs	r3, r2
 8005668:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0320 	and.w	r3, r3, #32
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00a      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005678:	4b76      	ldr	r3, [pc, #472]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800567a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800567e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	4973      	ldr	r1, [pc, #460]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005688:	4313      	orrs	r3, r2
 800568a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00a      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800569a:	4b6e      	ldr	r3, [pc, #440]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800569c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056a0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	69db      	ldr	r3, [r3, #28]
 80056a8:	496a      	ldr	r1, [pc, #424]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00a      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80056bc:	4b65      	ldr	r3, [pc, #404]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056c2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	4962      	ldr	r1, [pc, #392]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00a      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056de:	4b5d      	ldr	r3, [pc, #372]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ec:	4959      	ldr	r1, [pc, #356]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00a      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005700:	4b54      	ldr	r3, [pc, #336]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005702:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005706:	f023 0203 	bic.w	r2, r3, #3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800570e:	4951      	ldr	r1, [pc, #324]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005710:	4313      	orrs	r3, r2
 8005712:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00a      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005722:	4b4c      	ldr	r3, [pc, #304]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005724:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005728:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005730:	4948      	ldr	r1, [pc, #288]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005732:	4313      	orrs	r3, r2
 8005734:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005740:	2b00      	cmp	r3, #0
 8005742:	d015      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005744:	4b43      	ldr	r3, [pc, #268]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800574a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005752:	4940      	ldr	r1, [pc, #256]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005754:	4313      	orrs	r3, r2
 8005756:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800575e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005762:	d105      	bne.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005764:	4b3b      	ldr	r3, [pc, #236]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	4a3a      	ldr	r2, [pc, #232]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800576a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800576e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005778:	2b00      	cmp	r3, #0
 800577a:	d015      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800577c:	4b35      	ldr	r3, [pc, #212]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800577e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005782:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800578a:	4932      	ldr	r1, [pc, #200]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800578c:	4313      	orrs	r3, r2
 800578e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005796:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800579a:	d105      	bne.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800579c:	4b2d      	ldr	r3, [pc, #180]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	4a2c      	ldr	r2, [pc, #176]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057a6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d015      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80057b4:	4b27      	ldr	r3, [pc, #156]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057ba:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057c2:	4924      	ldr	r1, [pc, #144]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057c4:	4313      	orrs	r3, r2
 80057c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80057d2:	d105      	bne.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057d4:	4b1f      	ldr	r3, [pc, #124]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	4a1e      	ldr	r2, [pc, #120]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057de:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d015      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057ec:	4b19      	ldr	r3, [pc, #100]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057fa:	4916      	ldr	r1, [pc, #88]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005806:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800580a:	d105      	bne.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800580c:	4b11      	ldr	r3, [pc, #68]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	4a10      	ldr	r2, [pc, #64]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005812:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005816:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d019      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005824:	4b0b      	ldr	r3, [pc, #44]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800582a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005832:	4908      	ldr	r1, [pc, #32]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005834:	4313      	orrs	r3, r2
 8005836:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800583e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005842:	d109      	bne.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005844:	4b03      	ldr	r3, [pc, #12]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	4a02      	ldr	r2, [pc, #8]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800584a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800584e:	60d3      	str	r3, [r2, #12]
 8005850:	e002      	b.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005852:	bf00      	nop
 8005854:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d015      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005864:	4b29      	ldr	r3, [pc, #164]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800586a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005872:	4926      	ldr	r1, [pc, #152]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005874:	4313      	orrs	r3, r2
 8005876:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800587e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005882:	d105      	bne.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005884:	4b21      	ldr	r3, [pc, #132]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	4a20      	ldr	r2, [pc, #128]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800588a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800588e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005898:	2b00      	cmp	r3, #0
 800589a:	d015      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800589c:	4b1b      	ldr	r3, [pc, #108]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800589e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058a2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058aa:	4918      	ldr	r1, [pc, #96]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058ac:	4313      	orrs	r3, r2
 80058ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058ba:	d105      	bne.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80058bc:	4b13      	ldr	r3, [pc, #76]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	4a12      	ldr	r2, [pc, #72]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058c6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d015      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80058d4:	4b0d      	ldr	r3, [pc, #52]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80058da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058e2:	490a      	ldr	r1, [pc, #40]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058e4:	4313      	orrs	r3, r2
 80058e6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80058f2:	d105      	bne.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058f4:	4b05      	ldr	r3, [pc, #20]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	4a04      	ldr	r2, [pc, #16]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058fe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005900:	7cbb      	ldrb	r3, [r7, #18]
}
 8005902:	4618      	mov	r0, r3
 8005904:	3718      	adds	r7, #24
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	40021000 	.word	0x40021000

08005910 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e09d      	b.n	8005a5e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005926:	2b00      	cmp	r3, #0
 8005928:	d108      	bne.n	800593c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005932:	d009      	beq.n	8005948 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	61da      	str	r2, [r3, #28]
 800593a:	e005      	b.n	8005948 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005954:	b2db      	uxtb	r3, r3
 8005956:	2b00      	cmp	r3, #0
 8005958:	d106      	bne.n	8005968 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f7fc fd78 	bl	8002458 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2202      	movs	r2, #2
 800596c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800597e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005988:	d902      	bls.n	8005990 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800598a:	2300      	movs	r3, #0
 800598c:	60fb      	str	r3, [r7, #12]
 800598e:	e002      	b.n	8005996 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005990:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005994:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800599e:	d007      	beq.n	80059b0 <HAL_SPI_Init+0xa0>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80059a8:	d002      	beq.n	80059b0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80059c0:	431a      	orrs	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	431a      	orrs	r2, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	695b      	ldr	r3, [r3, #20]
 80059d0:	f003 0301 	and.w	r3, r3, #1
 80059d4:	431a      	orrs	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059de:	431a      	orrs	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	69db      	ldr	r3, [r3, #28]
 80059e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80059e8:	431a      	orrs	r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059f2:	ea42 0103 	orr.w	r1, r2, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059fa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	430a      	orrs	r2, r1
 8005a04:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	0c1b      	lsrs	r3, r3, #16
 8005a0c:	f003 0204 	and.w	r2, r3, #4
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a14:	f003 0310 	and.w	r3, r3, #16
 8005a18:	431a      	orrs	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a1e:	f003 0308 	and.w	r3, r3, #8
 8005a22:	431a      	orrs	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005a2c:	ea42 0103 	orr.w	r1, r2, r3
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	430a      	orrs	r2, r1
 8005a3c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	69da      	ldr	r2, [r3, #28]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a4c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b088      	sub	sp, #32
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	60f8      	str	r0, [r7, #12]
 8005a6e:	60b9      	str	r1, [r7, #8]
 8005a70:	603b      	str	r3, [r7, #0]
 8005a72:	4613      	mov	r3, r2
 8005a74:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a76:	f7fd fc3f 	bl	80032f8 <HAL_GetTick>
 8005a7a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005a7c:	88fb      	ldrh	r3, [r7, #6]
 8005a7e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d001      	beq.n	8005a90 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005a8c:	2302      	movs	r3, #2
 8005a8e:	e15c      	b.n	8005d4a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d002      	beq.n	8005a9c <HAL_SPI_Transmit+0x36>
 8005a96:	88fb      	ldrh	r3, [r7, #6]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d101      	bne.n	8005aa0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e154      	b.n	8005d4a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d101      	bne.n	8005aae <HAL_SPI_Transmit+0x48>
 8005aaa:	2302      	movs	r3, #2
 8005aac:	e14d      	b.n	8005d4a <HAL_SPI_Transmit+0x2e4>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2203      	movs	r2, #3
 8005aba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	68ba      	ldr	r2, [r7, #8]
 8005ac8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	88fa      	ldrh	r2, [r7, #6]
 8005ace:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	88fa      	ldrh	r2, [r7, #6]
 8005ad4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b00:	d10f      	bne.n	8005b22 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b20:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b2c:	2b40      	cmp	r3, #64	@ 0x40
 8005b2e:	d007      	beq.n	8005b40 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005b48:	d952      	bls.n	8005bf0 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d002      	beq.n	8005b58 <HAL_SPI_Transmit+0xf2>
 8005b52:	8b7b      	ldrh	r3, [r7, #26]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d145      	bne.n	8005be4 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b5c:	881a      	ldrh	r2, [r3, #0]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b68:	1c9a      	adds	r2, r3, #2
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	3b01      	subs	r3, #1
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005b7c:	e032      	b.n	8005be4 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f003 0302 	and.w	r3, r3, #2
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d112      	bne.n	8005bb2 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b90:	881a      	ldrh	r2, [r3, #0]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b9c:	1c9a      	adds	r2, r3, #2
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005bb0:	e018      	b.n	8005be4 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bb2:	f7fd fba1 	bl	80032f8 <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	683a      	ldr	r2, [r7, #0]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d803      	bhi.n	8005bca <HAL_SPI_Transmit+0x164>
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005bc8:	d102      	bne.n	8005bd0 <HAL_SPI_Transmit+0x16a>
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d109      	bne.n	8005be4 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005be0:	2303      	movs	r3, #3
 8005be2:	e0b2      	b.n	8005d4a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1c7      	bne.n	8005b7e <HAL_SPI_Transmit+0x118>
 8005bee:	e083      	b.n	8005cf8 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d002      	beq.n	8005bfe <HAL_SPI_Transmit+0x198>
 8005bf8:	8b7b      	ldrh	r3, [r7, #26]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d177      	bne.n	8005cee <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d912      	bls.n	8005c2e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c0c:	881a      	ldrh	r2, [r3, #0]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c18:	1c9a      	adds	r2, r3, #2
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	3b02      	subs	r3, #2
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005c2c:	e05f      	b.n	8005cee <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	330c      	adds	r3, #12
 8005c38:	7812      	ldrb	r2, [r2, #0]
 8005c3a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c40:	1c5a      	adds	r2, r3, #1
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	3b01      	subs	r3, #1
 8005c4e:	b29a      	uxth	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005c54:	e04b      	b.n	8005cee <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	f003 0302 	and.w	r3, r3, #2
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d12b      	bne.n	8005cbc <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d912      	bls.n	8005c94 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c72:	881a      	ldrh	r2, [r3, #0]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c7e:	1c9a      	adds	r2, r3, #2
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	3b02      	subs	r3, #2
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005c92:	e02c      	b.n	8005cee <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	330c      	adds	r3, #12
 8005c9e:	7812      	ldrb	r2, [r2, #0]
 8005ca0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ca6:	1c5a      	adds	r2, r3, #1
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005cba:	e018      	b.n	8005cee <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cbc:	f7fd fb1c 	bl	80032f8 <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	683a      	ldr	r2, [r7, #0]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d803      	bhi.n	8005cd4 <HAL_SPI_Transmit+0x26e>
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005cd2:	d102      	bne.n	8005cda <HAL_SPI_Transmit+0x274>
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d109      	bne.n	8005cee <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e02d      	b.n	8005d4a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1ae      	bne.n	8005c56 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005cf8:	69fa      	ldr	r2, [r7, #28]
 8005cfa:	6839      	ldr	r1, [r7, #0]
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f001 fa03 	bl	8007108 <SPI_EndRxTxTransaction>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d002      	beq.n	8005d0e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2220      	movs	r2, #32
 8005d0c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d10a      	bne.n	8005d2c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d16:	2300      	movs	r3, #0
 8005d18:	617b      	str	r3, [r7, #20]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	617b      	str	r3, [r7, #20]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	617b      	str	r3, [r7, #20]
 8005d2a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d001      	beq.n	8005d48 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e000      	b.n	8005d4a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8005d48:	2300      	movs	r3, #0
  }
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3720      	adds	r7, #32
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b088      	sub	sp, #32
 8005d56:	af02      	add	r7, sp, #8
 8005d58:	60f8      	str	r0, [r7, #12]
 8005d5a:	60b9      	str	r1, [r7, #8]
 8005d5c:	603b      	str	r3, [r7, #0]
 8005d5e:	4613      	mov	r3, r2
 8005d60:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d001      	beq.n	8005d72 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005d6e:	2302      	movs	r3, #2
 8005d70:	e123      	b.n	8005fba <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d002      	beq.n	8005d7e <HAL_SPI_Receive+0x2c>
 8005d78:	88fb      	ldrh	r3, [r7, #6]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d101      	bne.n	8005d82 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e11b      	b.n	8005fba <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d8a:	d112      	bne.n	8005db2 <HAL_SPI_Receive+0x60>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d10e      	bne.n	8005db2 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2204      	movs	r2, #4
 8005d98:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005d9c:	88fa      	ldrh	r2, [r7, #6]
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	9300      	str	r3, [sp, #0]
 8005da2:	4613      	mov	r3, r2
 8005da4:	68ba      	ldr	r2, [r7, #8]
 8005da6:	68b9      	ldr	r1, [r7, #8]
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	f000 f90a 	bl	8005fc2 <HAL_SPI_TransmitReceive>
 8005dae:	4603      	mov	r3, r0
 8005db0:	e103      	b.n	8005fba <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005db2:	f7fd faa1 	bl	80032f8 <HAL_GetTick>
 8005db6:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d101      	bne.n	8005dc6 <HAL_SPI_Receive+0x74>
 8005dc2:	2302      	movs	r3, #2
 8005dc4:	e0f9      	b.n	8005fba <HAL_SPI_Receive+0x268>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2204      	movs	r2, #4
 8005dd2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	68ba      	ldr	r2, [r7, #8]
 8005de0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	88fa      	ldrh	r2, [r7, #6]
 8005de6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	88fa      	ldrh	r2, [r7, #6]
 8005dee:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2200      	movs	r2, #0
 8005e02:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2200      	movs	r2, #0
 8005e08:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005e18:	d908      	bls.n	8005e2c <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	685a      	ldr	r2, [r3, #4]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005e28:	605a      	str	r2, [r3, #4]
 8005e2a:	e007      	b.n	8005e3c <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	685a      	ldr	r2, [r3, #4]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005e3a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e44:	d10f      	bne.n	8005e66 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e54:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005e64:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e70:	2b40      	cmp	r3, #64	@ 0x40
 8005e72:	d007      	beq.n	8005e84 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e82:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005e8c:	d875      	bhi.n	8005f7a <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005e8e:	e037      	b.n	8005f00 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	f003 0301 	and.w	r3, r3, #1
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d117      	bne.n	8005ece <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f103 020c 	add.w	r2, r3, #12
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eaa:	7812      	ldrb	r2, [r2, #0]
 8005eac:	b2d2      	uxtb	r2, r2
 8005eae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eb4:	1c5a      	adds	r2, r3, #1
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005ecc:	e018      	b.n	8005f00 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ece:	f7fd fa13 	bl	80032f8 <HAL_GetTick>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	683a      	ldr	r2, [r7, #0]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d803      	bhi.n	8005ee6 <HAL_SPI_Receive+0x194>
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ee4:	d102      	bne.n	8005eec <HAL_SPI_Receive+0x19a>
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d109      	bne.n	8005f00 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e05c      	b.n	8005fba <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d1c1      	bne.n	8005e90 <HAL_SPI_Receive+0x13e>
 8005f0c:	e03b      	b.n	8005f86 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	f003 0301 	and.w	r3, r3, #1
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d115      	bne.n	8005f48 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68da      	ldr	r2, [r3, #12]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f26:	b292      	uxth	r2, r2
 8005f28:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f2e:	1c9a      	adds	r2, r3, #2
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	b29a      	uxth	r2, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005f46:	e018      	b.n	8005f7a <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f48:	f7fd f9d6 	bl	80032f8 <HAL_GetTick>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	683a      	ldr	r2, [r7, #0]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d803      	bhi.n	8005f60 <HAL_SPI_Receive+0x20e>
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f5e:	d102      	bne.n	8005f66 <HAL_SPI_Receive+0x214>
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d109      	bne.n	8005f7a <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e01f      	b.n	8005fba <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d1c3      	bne.n	8005f0e <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	6839      	ldr	r1, [r7, #0]
 8005f8a:	68f8      	ldr	r0, [r7, #12]
 8005f8c:	f001 f864 	bl	8007058 <SPI_EndRxTransaction>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d002      	beq.n	8005f9c <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2220      	movs	r2, #32
 8005f9a:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d001      	beq.n	8005fb8 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e000      	b.n	8005fba <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
  }
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3718      	adds	r7, #24
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b08a      	sub	sp, #40	@ 0x28
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	60f8      	str	r0, [r7, #12]
 8005fca:	60b9      	str	r1, [r7, #8]
 8005fcc:	607a      	str	r2, [r7, #4]
 8005fce:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fd4:	f7fd f990 	bl	80032f8 <HAL_GetTick>
 8005fd8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005fe0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005fe8:	887b      	ldrh	r3, [r7, #2]
 8005fea:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8005fec:	887b      	ldrh	r3, [r7, #2]
 8005fee:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005ff0:	7ffb      	ldrb	r3, [r7, #31]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d00c      	beq.n	8006010 <HAL_SPI_TransmitReceive+0x4e>
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ffc:	d106      	bne.n	800600c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d102      	bne.n	800600c <HAL_SPI_TransmitReceive+0x4a>
 8006006:	7ffb      	ldrb	r3, [r7, #31]
 8006008:	2b04      	cmp	r3, #4
 800600a:	d001      	beq.n	8006010 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800600c:	2302      	movs	r3, #2
 800600e:	e1f3      	b.n	80063f8 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d005      	beq.n	8006022 <HAL_SPI_TransmitReceive+0x60>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d002      	beq.n	8006022 <HAL_SPI_TransmitReceive+0x60>
 800601c:	887b      	ldrh	r3, [r7, #2]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d101      	bne.n	8006026 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e1e8      	b.n	80063f8 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800602c:	2b01      	cmp	r3, #1
 800602e:	d101      	bne.n	8006034 <HAL_SPI_TransmitReceive+0x72>
 8006030:	2302      	movs	r3, #2
 8006032:	e1e1      	b.n	80063f8 <HAL_SPI_TransmitReceive+0x436>
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006042:	b2db      	uxtb	r3, r3
 8006044:	2b04      	cmp	r3, #4
 8006046:	d003      	beq.n	8006050 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2205      	movs	r2, #5
 800604c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2200      	movs	r2, #0
 8006054:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	887a      	ldrh	r2, [r7, #2]
 8006060:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	887a      	ldrh	r2, [r7, #2]
 8006068:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	68ba      	ldr	r2, [r7, #8]
 8006070:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	887a      	ldrh	r2, [r7, #2]
 8006076:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	887a      	ldrh	r2, [r7, #2]
 800607c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006092:	d802      	bhi.n	800609a <HAL_SPI_TransmitReceive+0xd8>
 8006094:	8abb      	ldrh	r3, [r7, #20]
 8006096:	2b01      	cmp	r3, #1
 8006098:	d908      	bls.n	80060ac <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	685a      	ldr	r2, [r3, #4]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80060a8:	605a      	str	r2, [r3, #4]
 80060aa:	e007      	b.n	80060bc <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	685a      	ldr	r2, [r3, #4]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80060ba:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060c6:	2b40      	cmp	r3, #64	@ 0x40
 80060c8:	d007      	beq.n	80060da <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80060d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80060e2:	f240 8083 	bls.w	80061ec <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d002      	beq.n	80060f4 <HAL_SPI_TransmitReceive+0x132>
 80060ee:	8afb      	ldrh	r3, [r7, #22]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d16f      	bne.n	80061d4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060f8:	881a      	ldrh	r2, [r3, #0]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006104:	1c9a      	adds	r2, r3, #2
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800610e:	b29b      	uxth	r3, r3
 8006110:	3b01      	subs	r3, #1
 8006112:	b29a      	uxth	r2, r3
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006118:	e05c      	b.n	80061d4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	f003 0302 	and.w	r3, r3, #2
 8006124:	2b02      	cmp	r3, #2
 8006126:	d11b      	bne.n	8006160 <HAL_SPI_TransmitReceive+0x19e>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800612c:	b29b      	uxth	r3, r3
 800612e:	2b00      	cmp	r3, #0
 8006130:	d016      	beq.n	8006160 <HAL_SPI_TransmitReceive+0x19e>
 8006132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006134:	2b01      	cmp	r3, #1
 8006136:	d113      	bne.n	8006160 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800613c:	881a      	ldrh	r2, [r3, #0]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006148:	1c9a      	adds	r2, r3, #2
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006152:	b29b      	uxth	r3, r3
 8006154:	3b01      	subs	r3, #1
 8006156:	b29a      	uxth	r2, r3
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800615c:	2300      	movs	r3, #0
 800615e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	f003 0301 	and.w	r3, r3, #1
 800616a:	2b01      	cmp	r3, #1
 800616c:	d11c      	bne.n	80061a8 <HAL_SPI_TransmitReceive+0x1e6>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006174:	b29b      	uxth	r3, r3
 8006176:	2b00      	cmp	r3, #0
 8006178:	d016      	beq.n	80061a8 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68da      	ldr	r2, [r3, #12]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006184:	b292      	uxth	r2, r2
 8006186:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800618c:	1c9a      	adds	r2, r3, #2
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006198:	b29b      	uxth	r3, r3
 800619a:	3b01      	subs	r3, #1
 800619c:	b29a      	uxth	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80061a4:	2301      	movs	r3, #1
 80061a6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80061a8:	f7fd f8a6 	bl	80032f8 <HAL_GetTick>
 80061ac:	4602      	mov	r2, r0
 80061ae:	6a3b      	ldr	r3, [r7, #32]
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d80d      	bhi.n	80061d4 <HAL_SPI_TransmitReceive+0x212>
 80061b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80061be:	d009      	beq.n	80061d4 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80061d0:	2303      	movs	r3, #3
 80061d2:	e111      	b.n	80063f8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061d8:	b29b      	uxth	r3, r3
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d19d      	bne.n	800611a <HAL_SPI_TransmitReceive+0x158>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d197      	bne.n	800611a <HAL_SPI_TransmitReceive+0x158>
 80061ea:	e0e5      	b.n	80063b8 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d003      	beq.n	80061fc <HAL_SPI_TransmitReceive+0x23a>
 80061f4:	8afb      	ldrh	r3, [r7, #22]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	f040 80d1 	bne.w	800639e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006200:	b29b      	uxth	r3, r3
 8006202:	2b01      	cmp	r3, #1
 8006204:	d912      	bls.n	800622c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800620a:	881a      	ldrh	r2, [r3, #0]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006216:	1c9a      	adds	r2, r3, #2
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006220:	b29b      	uxth	r3, r3
 8006222:	3b02      	subs	r3, #2
 8006224:	b29a      	uxth	r2, r3
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800622a:	e0b8      	b.n	800639e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	330c      	adds	r3, #12
 8006236:	7812      	ldrb	r2, [r2, #0]
 8006238:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800623e:	1c5a      	adds	r2, r3, #1
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006248:	b29b      	uxth	r3, r3
 800624a:	3b01      	subs	r3, #1
 800624c:	b29a      	uxth	r2, r3
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006252:	e0a4      	b.n	800639e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	f003 0302 	and.w	r3, r3, #2
 800625e:	2b02      	cmp	r3, #2
 8006260:	d134      	bne.n	80062cc <HAL_SPI_TransmitReceive+0x30a>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006266:	b29b      	uxth	r3, r3
 8006268:	2b00      	cmp	r3, #0
 800626a:	d02f      	beq.n	80062cc <HAL_SPI_TransmitReceive+0x30a>
 800626c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626e:	2b01      	cmp	r3, #1
 8006270:	d12c      	bne.n	80062cc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006276:	b29b      	uxth	r3, r3
 8006278:	2b01      	cmp	r3, #1
 800627a:	d912      	bls.n	80062a2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006280:	881a      	ldrh	r2, [r3, #0]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800628c:	1c9a      	adds	r2, r3, #2
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006296:	b29b      	uxth	r3, r3
 8006298:	3b02      	subs	r3, #2
 800629a:	b29a      	uxth	r2, r3
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80062a0:	e012      	b.n	80062c8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	330c      	adds	r3, #12
 80062ac:	7812      	ldrb	r2, [r2, #0]
 80062ae:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062b4:	1c5a      	adds	r2, r3, #1
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062be:	b29b      	uxth	r3, r3
 80062c0:	3b01      	subs	r3, #1
 80062c2:	b29a      	uxth	r2, r3
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80062c8:	2300      	movs	r3, #0
 80062ca:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	f003 0301 	and.w	r3, r3, #1
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d148      	bne.n	800636c <HAL_SPI_TransmitReceive+0x3aa>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d042      	beq.n	800636c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d923      	bls.n	800633a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68da      	ldr	r2, [r3, #12]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062fc:	b292      	uxth	r2, r2
 80062fe:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006304:	1c9a      	adds	r2, r3, #2
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006310:	b29b      	uxth	r3, r3
 8006312:	3b02      	subs	r3, #2
 8006314:	b29a      	uxth	r2, r3
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006322:	b29b      	uxth	r3, r3
 8006324:	2b01      	cmp	r3, #1
 8006326:	d81f      	bhi.n	8006368 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	685a      	ldr	r2, [r3, #4]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006336:	605a      	str	r2, [r3, #4]
 8006338:	e016      	b.n	8006368 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f103 020c 	add.w	r2, r3, #12
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006346:	7812      	ldrb	r2, [r2, #0]
 8006348:	b2d2      	uxtb	r2, r2
 800634a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006350:	1c5a      	adds	r2, r3, #1
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800635c:	b29b      	uxth	r3, r3
 800635e:	3b01      	subs	r3, #1
 8006360:	b29a      	uxth	r2, r3
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006368:	2301      	movs	r3, #1
 800636a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800636c:	f7fc ffc4 	bl	80032f8 <HAL_GetTick>
 8006370:	4602      	mov	r2, r0
 8006372:	6a3b      	ldr	r3, [r7, #32]
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006378:	429a      	cmp	r2, r3
 800637a:	d803      	bhi.n	8006384 <HAL_SPI_TransmitReceive+0x3c2>
 800637c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800637e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006382:	d102      	bne.n	800638a <HAL_SPI_TransmitReceive+0x3c8>
 8006384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006386:	2b00      	cmp	r3, #0
 8006388:	d109      	bne.n	800639e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2201      	movs	r2, #1
 800638e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	e02c      	b.n	80063f8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f47f af55 	bne.w	8006254 <HAL_SPI_TransmitReceive+0x292>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	f47f af4e 	bne.w	8006254 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80063b8:	6a3a      	ldr	r2, [r7, #32]
 80063ba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80063bc:	68f8      	ldr	r0, [r7, #12]
 80063be:	f000 fea3 	bl	8007108 <SPI_EndRxTxTransaction>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d008      	beq.n	80063da <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2220      	movs	r2, #32
 80063cc:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e00e      	b.n	80063f8 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2201      	movs	r2, #1
 80063de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d001      	beq.n	80063f6 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e000      	b.n	80063f8 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80063f6:	2300      	movs	r3, #0
  }
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3728      	adds	r7, #40	@ 0x28
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	4613      	mov	r3, r2
 800640c:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b01      	cmp	r3, #1
 8006418:	d001      	beq.n	800641e <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800641a:	2302      	movs	r3, #2
 800641c:	e0d4      	b.n	80065c8 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d002      	beq.n	800642a <HAL_SPI_Transmit_DMA+0x2a>
 8006424:	88fb      	ldrh	r3, [r7, #6]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d101      	bne.n	800642e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e0cc      	b.n	80065c8 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006434:	2b01      	cmp	r3, #1
 8006436:	d101      	bne.n	800643c <HAL_SPI_Transmit_DMA+0x3c>
 8006438:	2302      	movs	r3, #2
 800643a:	e0c5      	b.n	80065c8 <HAL_SPI_Transmit_DMA+0x1c8>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2203      	movs	r2, #3
 8006448:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	68ba      	ldr	r2, [r7, #8]
 8006456:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	88fa      	ldrh	r2, [r7, #6]
 800645c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	88fa      	ldrh	r2, [r7, #6]
 8006462:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2200      	movs	r2, #0
 8006468:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2200      	movs	r2, #0
 800646e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2200      	movs	r2, #0
 8006474:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800648e:	d10f      	bne.n	80064b0 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800649e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80064ae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064b4:	4a46      	ldr	r2, [pc, #280]	@ (80065d0 <HAL_SPI_Transmit_DMA+0x1d0>)
 80064b6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064bc:	4a45      	ldr	r2, [pc, #276]	@ (80065d4 <HAL_SPI_Transmit_DMA+0x1d4>)
 80064be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064c4:	4a44      	ldr	r2, [pc, #272]	@ (80065d8 <HAL_SPI_Transmit_DMA+0x1d8>)
 80064c6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064cc:	2200      	movs	r2, #0
 80064ce:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	685a      	ldr	r2, [r3, #4]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80064de:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80064e8:	d82d      	bhi.n	8006546 <HAL_SPI_Transmit_DMA+0x146>
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064f4:	d127      	bne.n	8006546 <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	f003 0301 	and.w	r3, r3, #1
 8006500:	2b00      	cmp	r3, #0
 8006502:	d10f      	bne.n	8006524 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	685a      	ldr	r2, [r3, #4]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006512:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006518:	b29b      	uxth	r3, r3
 800651a:	085b      	lsrs	r3, r3, #1
 800651c:	b29a      	uxth	r2, r3
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006522:	e010      	b.n	8006546 <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	685a      	ldr	r2, [r3, #4]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006532:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006538:	b29b      	uxth	r3, r3
 800653a:	085b      	lsrs	r3, r3, #1
 800653c:	b29b      	uxth	r3, r3
 800653e:	3301      	adds	r3, #1
 8006540:	b29a      	uxth	r2, r3
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800654e:	4619      	mov	r1, r3
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	330c      	adds	r3, #12
 8006556:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800655c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800655e:	f7fd f88f 	bl	8003680 <HAL_DMA_Start_IT>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d00b      	beq.n	8006580 <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800656c:	f043 0210 	orr.w	r2, r3, #16
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e023      	b.n	80065c8 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800658a:	2b40      	cmp	r3, #64	@ 0x40
 800658c:	d007      	beq.n	800659e <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800659c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	685a      	ldr	r2, [r3, #4]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f042 0220 	orr.w	r2, r2, #32
 80065b4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	685a      	ldr	r2, [r3, #4]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f042 0202 	orr.w	r2, r2, #2
 80065c4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3710      	adds	r7, #16
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	08006d87 	.word	0x08006d87
 80065d4:	08006ba9 	.word	0x08006ba9
 80065d8:	08006ddb 	.word	0x08006ddb

080065dc <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	4613      	mov	r3, r2
 80065e8:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d001      	beq.n	80065fa <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 80065f6:	2302      	movs	r3, #2
 80065f8:	e105      	b.n	8006806 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d002      	beq.n	8006606 <HAL_SPI_Receive_DMA+0x2a>
 8006600:	88fb      	ldrh	r3, [r7, #6]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d101      	bne.n	800660a <HAL_SPI_Receive_DMA+0x2e>
  {
    return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e0fd      	b.n	8006806 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d110      	bne.n	8006634 <HAL_SPI_Receive_DMA+0x58>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800661a:	d10b      	bne.n	8006634 <HAL_SPI_Receive_DMA+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2204      	movs	r2, #4
 8006620:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8006624:	88fb      	ldrh	r3, [r7, #6]
 8006626:	68ba      	ldr	r2, [r7, #8]
 8006628:	68b9      	ldr	r1, [r7, #8]
 800662a:	68f8      	ldr	r0, [r7, #12]
 800662c:	f000 f8f6 	bl	800681c <HAL_SPI_TransmitReceive_DMA>
 8006630:	4603      	mov	r3, r0
 8006632:	e0e8      	b.n	8006806 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800663a:	2b01      	cmp	r3, #1
 800663c:	d101      	bne.n	8006642 <HAL_SPI_Receive_DMA+0x66>
 800663e:	2302      	movs	r3, #2
 8006640:	e0e1      	b.n	8006806 <HAL_SPI_Receive_DMA+0x22a>
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2201      	movs	r2, #1
 8006646:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2204      	movs	r2, #4
 800664e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2200      	movs	r2, #0
 8006656:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	68ba      	ldr	r2, [r7, #8]
 800665c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	88fa      	ldrh	r2, [r7, #6]
 8006662:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	88fa      	ldrh	r2, [r7, #6]
 800666a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2200      	movs	r2, #0
 8006672:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2200      	movs	r2, #0
 8006678:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2200      	movs	r2, #0
 8006684:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800668e:	d10f      	bne.n	80066b0 <HAL_SPI_Receive_DMA+0xd4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800669e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80066ae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	685a      	ldr	r2, [r3, #4]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80066be:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80066c8:	d908      	bls.n	80066dc <HAL_SPI_Receive_DMA+0x100>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	685a      	ldr	r2, [r3, #4]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80066d8:	605a      	str	r2, [r3, #4]
 80066da:	e042      	b.n	8006762 <HAL_SPI_Receive_DMA+0x186>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	685a      	ldr	r2, [r3, #4]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80066ea:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066f0:	699b      	ldr	r3, [r3, #24]
 80066f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066f6:	d134      	bne.n	8006762 <HAL_SPI_Receive_DMA+0x186>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	685a      	ldr	r2, [r3, #4]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006706:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800670e:	b29b      	uxth	r3, r3
 8006710:	f003 0301 	and.w	r3, r3, #1
 8006714:	2b00      	cmp	r3, #0
 8006716:	d111      	bne.n	800673c <HAL_SPI_Receive_DMA+0x160>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	685a      	ldr	r2, [r3, #4]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006726:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800672e:	b29b      	uxth	r3, r3
 8006730:	085b      	lsrs	r3, r3, #1
 8006732:	b29a      	uxth	r2, r3
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800673a:	e012      	b.n	8006762 <HAL_SPI_Receive_DMA+0x186>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	685a      	ldr	r2, [r3, #4]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800674a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006752:	b29b      	uxth	r3, r3
 8006754:	085b      	lsrs	r3, r3, #1
 8006756:	b29b      	uxth	r3, r3
 8006758:	3301      	adds	r3, #1
 800675a:	b29a      	uxth	r2, r3
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006766:	4a2a      	ldr	r2, [pc, #168]	@ (8006810 <HAL_SPI_Receive_DMA+0x234>)
 8006768:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800676e:	4a29      	ldr	r2, [pc, #164]	@ (8006814 <HAL_SPI_Receive_DMA+0x238>)
 8006770:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006776:	4a28      	ldr	r2, [pc, #160]	@ (8006818 <HAL_SPI_Receive_DMA+0x23c>)
 8006778:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800677e:	2200      	movs	r2, #0
 8006780:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	330c      	adds	r3, #12
 800678c:	4619      	mov	r1, r3
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006792:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800679a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800679c:	f7fc ff70 	bl	8003680 <HAL_DMA_Start_IT>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d00b      	beq.n	80067be <HAL_SPI_Receive_DMA+0x1e2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067aa:	f043 0210 	orr.w	r2, r3, #16
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e023      	b.n	8006806 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067c8:	2b40      	cmp	r3, #64	@ 0x40
 80067ca:	d007      	beq.n	80067dc <HAL_SPI_Receive_DMA+0x200>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80067da:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	685a      	ldr	r2, [r3, #4]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f042 0220 	orr.w	r2, r2, #32
 80067f2:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	685a      	ldr	r2, [r3, #4]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f042 0201 	orr.w	r2, r2, #1
 8006802:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3710      	adds	r7, #16
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	08006da3 	.word	0x08006da3
 8006814:	08006c4f 	.word	0x08006c4f
 8006818:	08006ddb 	.word	0x08006ddb

0800681c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b086      	sub	sp, #24
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	607a      	str	r2, [r7, #4]
 8006828:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006830:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8006838:	7dfb      	ldrb	r3, [r7, #23]
 800683a:	2b01      	cmp	r3, #1
 800683c:	d00c      	beq.n	8006858 <HAL_SPI_TransmitReceive_DMA+0x3c>
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006844:	d106      	bne.n	8006854 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d102      	bne.n	8006854 <HAL_SPI_TransmitReceive_DMA+0x38>
 800684e:	7dfb      	ldrb	r3, [r7, #23]
 8006850:	2b04      	cmp	r3, #4
 8006852:	d001      	beq.n	8006858 <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006854:	2302      	movs	r3, #2
 8006856:	e158      	b.n	8006b0a <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d005      	beq.n	800686a <HAL_SPI_TransmitReceive_DMA+0x4e>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d002      	beq.n	800686a <HAL_SPI_TransmitReceive_DMA+0x4e>
 8006864:	887b      	ldrh	r3, [r7, #2]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d101      	bne.n	800686e <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e14d      	b.n	8006b0a <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006874:	2b01      	cmp	r3, #1
 8006876:	d101      	bne.n	800687c <HAL_SPI_TransmitReceive_DMA+0x60>
 8006878:	2302      	movs	r3, #2
 800687a:	e146      	b.n	8006b0a <HAL_SPI_TransmitReceive_DMA+0x2ee>
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800688a:	b2db      	uxtb	r3, r3
 800688c:	2b04      	cmp	r3, #4
 800688e:	d003      	beq.n	8006898 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2205      	movs	r2, #5
 8006894:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	68ba      	ldr	r2, [r7, #8]
 80068a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	887a      	ldrh	r2, [r7, #2]
 80068a8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	887a      	ldrh	r2, [r7, #2]
 80068ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	887a      	ldrh	r2, [r7, #2]
 80068ba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	887a      	ldrh	r2, [r7, #2]
 80068c2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2200      	movs	r2, #0
 80068ca:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2200      	movs	r2, #0
 80068d0:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	685a      	ldr	r2, [r3, #4]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 80068e0:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80068ea:	d908      	bls.n	80068fe <HAL_SPI_TransmitReceive_DMA+0xe2>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	685a      	ldr	r2, [r3, #4]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80068fa:	605a      	str	r2, [r3, #4]
 80068fc:	e06f      	b.n	80069de <HAL_SPI_TransmitReceive_DMA+0x1c2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	685a      	ldr	r2, [r3, #4]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800690c:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006912:	699b      	ldr	r3, [r3, #24]
 8006914:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006918:	d126      	bne.n	8006968 <HAL_SPI_TransmitReceive_DMA+0x14c>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800691e:	f003 0301 	and.w	r3, r3, #1
 8006922:	2b00      	cmp	r3, #0
 8006924:	d10f      	bne.n	8006946 <HAL_SPI_TransmitReceive_DMA+0x12a>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	685a      	ldr	r2, [r3, #4]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006934:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800693a:	b29b      	uxth	r3, r3
 800693c:	085b      	lsrs	r3, r3, #1
 800693e:	b29a      	uxth	r2, r3
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006944:	e010      	b.n	8006968 <HAL_SPI_TransmitReceive_DMA+0x14c>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	685a      	ldr	r2, [r3, #4]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006954:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800695a:	b29b      	uxth	r3, r3
 800695c:	085b      	lsrs	r3, r3, #1
 800695e:	b29b      	uxth	r3, r3
 8006960:	3301      	adds	r3, #1
 8006962:	b29a      	uxth	r2, r3
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800696c:	699b      	ldr	r3, [r3, #24]
 800696e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006972:	d134      	bne.n	80069de <HAL_SPI_TransmitReceive_DMA+0x1c2>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	685a      	ldr	r2, [r3, #4]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006982:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800698a:	b29b      	uxth	r3, r3
 800698c:	f003 0301 	and.w	r3, r3, #1
 8006990:	2b00      	cmp	r3, #0
 8006992:	d111      	bne.n	80069b8 <HAL_SPI_TransmitReceive_DMA+0x19c>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	685a      	ldr	r2, [r3, #4]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80069a2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	085b      	lsrs	r3, r3, #1
 80069ae:	b29a      	uxth	r2, r3
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80069b6:	e012      	b.n	80069de <HAL_SPI_TransmitReceive_DMA+0x1c2>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	685a      	ldr	r2, [r3, #4]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80069c6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	085b      	lsrs	r3, r3, #1
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	3301      	adds	r3, #1
 80069d6:	b29a      	uxth	r2, r3
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	2b04      	cmp	r3, #4
 80069e8:	d108      	bne.n	80069fc <HAL_SPI_TransmitReceive_DMA+0x1e0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069ee:	4a49      	ldr	r2, [pc, #292]	@ (8006b14 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 80069f0:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069f6:	4a48      	ldr	r2, [pc, #288]	@ (8006b18 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 80069f8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80069fa:	e007      	b.n	8006a0c <HAL_SPI_TransmitReceive_DMA+0x1f0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a00:	4a46      	ldr	r2, [pc, #280]	@ (8006b1c <HAL_SPI_TransmitReceive_DMA+0x300>)
 8006a02:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a08:	4a45      	ldr	r2, [pc, #276]	@ (8006b20 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8006a0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a10:	4a44      	ldr	r2, [pc, #272]	@ (8006b24 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8006a12:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a18:	2200      	movs	r2, #0
 8006a1a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	330c      	adds	r3, #12
 8006a26:	4619      	mov	r1, r3
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a2c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a34:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006a36:	f7fc fe23 	bl	8003680 <HAL_DMA_Start_IT>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00b      	beq.n	8006a58 <HAL_SPI_TransmitReceive_DMA+0x23c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a44:	f043 0210 	orr.w	r2, r3, #16
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	e058      	b.n	8006b0a <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	685a      	ldr	r2, [r3, #4]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f042 0201 	orr.w	r2, r2, #1
 8006a66:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a74:	2200      	movs	r2, #0
 8006a76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a84:	2200      	movs	r2, #0
 8006a86:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a90:	4619      	mov	r1, r3
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	330c      	adds	r3, #12
 8006a98:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a9e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006aa0:	f7fc fdee 	bl	8003680 <HAL_DMA_Start_IT>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00b      	beq.n	8006ac2 <HAL_SPI_TransmitReceive_DMA+0x2a6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006aae:	f043 0210 	orr.w	r2, r3, #16
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e023      	b.n	8006b0a <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006acc:	2b40      	cmp	r3, #64	@ 0x40
 8006ace:	d007      	beq.n	8006ae0 <HAL_SPI_TransmitReceive_DMA+0x2c4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ade:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	685a      	ldr	r2, [r3, #4]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f042 0220 	orr.w	r2, r2, #32
 8006af6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	685a      	ldr	r2, [r3, #4]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f042 0202 	orr.w	r2, r2, #2
 8006b06:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006b08:	2300      	movs	r3, #0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3718      	adds	r7, #24
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	08006da3 	.word	0x08006da3
 8006b18:	08006c4f 	.word	0x08006c4f
 8006b1c:	08006dbf 	.word	0x08006dbf
 8006b20:	08006cf7 	.word	0x08006cf7
 8006b24:	08006ddb 	.word	0x08006ddb

08006b28 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006b30:	bf00      	nop
 8006b32:	370c      	adds	r7, #12
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006b44:	bf00      	nop
 8006b46:	370c      	adds	r7, #12
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8006b58:	bf00      	nop
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8006b6c:	bf00      	nop
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006b80:	bf00      	nop
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006b9a:	b2db      	uxtb	r3, r3
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	370c      	adds	r7, #12
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b086      	sub	sp, #24
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bb4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006bb6:	f7fc fb9f 	bl	80032f8 <HAL_GetTick>
 8006bba:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 0320 	and.w	r3, r3, #32
 8006bc6:	2b20      	cmp	r3, #32
 8006bc8:	d03b      	beq.n	8006c42 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	685a      	ldr	r2, [r3, #4]
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f022 0220 	bic.w	r2, r2, #32
 8006bd8:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	685a      	ldr	r2, [r3, #4]
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f022 0202 	bic.w	r2, r2, #2
 8006be8:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006bea:	693a      	ldr	r2, [r7, #16]
 8006bec:	2164      	movs	r1, #100	@ 0x64
 8006bee:	6978      	ldr	r0, [r7, #20]
 8006bf0:	f000 fa8a 	bl	8007108 <SPI_EndRxTxTransaction>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d005      	beq.n	8006c06 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bfe:	f043 0220 	orr.w	r2, r3, #32
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d10a      	bne.n	8006c24 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c0e:	2300      	movs	r3, #0
 8006c10:	60fb      	str	r3, [r7, #12]
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	60fb      	str	r3, [r7, #12]
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	60fb      	str	r3, [r7, #12]
 8006c22:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	2200      	movs	r2, #0
 8006c28:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d003      	beq.n	8006c42 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006c3a:	6978      	ldr	r0, [r7, #20]
 8006c3c:	f7ff ff9c 	bl	8006b78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006c40:	e002      	b.n	8006c48 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006c42:	6978      	ldr	r0, [r7, #20]
 8006c44:	f7fb fe74 	bl	8002930 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006c48:	3718      	adds	r7, #24
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}

08006c4e <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b084      	sub	sp, #16
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c5a:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c5c:	f7fc fb4c 	bl	80032f8 <HAL_GetTick>
 8006c60:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 0320 	and.w	r3, r3, #32
 8006c6c:	2b20      	cmp	r3, #32
 8006c6e:	d03c      	beq.n	8006cea <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	685a      	ldr	r2, [r3, #4]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f022 0220 	bic.w	r2, r2, #32
 8006c7e:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d10d      	bne.n	8006ca4 <SPI_DMAReceiveCplt+0x56>
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c90:	d108      	bne.n	8006ca4 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	685a      	ldr	r2, [r3, #4]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f022 0203 	bic.w	r2, r2, #3
 8006ca0:	605a      	str	r2, [r3, #4]
 8006ca2:	e007      	b.n	8006cb4 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	685a      	ldr	r2, [r3, #4]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f022 0201 	bic.w	r2, r2, #1
 8006cb2:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006cb4:	68ba      	ldr	r2, [r7, #8]
 8006cb6:	2164      	movs	r1, #100	@ 0x64
 8006cb8:	68f8      	ldr	r0, [r7, #12]
 8006cba:	f000 f9cd 	bl	8007058 <SPI_EndRxTransaction>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d002      	beq.n	8006cca <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2220      	movs	r2, #32
 8006cc8:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d003      	beq.n	8006cea <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006ce2:	68f8      	ldr	r0, [r7, #12]
 8006ce4:	f7ff ff48 	bl	8006b78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006ce8:	e002      	b.n	8006cf0 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8006cea:	68f8      	ldr	r0, [r7, #12]
 8006cec:	f7fb fe36 	bl	800295c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006cf0:	3710      	adds	r7, #16
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}

08006cf6 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006cf6:	b580      	push	{r7, lr}
 8006cf8:	b084      	sub	sp, #16
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d02:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d04:	f7fc faf8 	bl	80032f8 <HAL_GetTick>
 8006d08:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 0320 	and.w	r3, r3, #32
 8006d14:	2b20      	cmp	r3, #32
 8006d16:	d030      	beq.n	8006d7a <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	685a      	ldr	r2, [r3, #4]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f022 0220 	bic.w	r2, r2, #32
 8006d26:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	2164      	movs	r1, #100	@ 0x64
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f000 f9eb 	bl	8007108 <SPI_EndRxTxTransaction>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d005      	beq.n	8006d44 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d3c:	f043 0220 	orr.w	r2, r3, #32
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	685a      	ldr	r2, [r3, #4]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f022 0203 	bic.w	r2, r2, #3
 8006d52:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2200      	movs	r2, #0
 8006d58:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2201      	movs	r2, #1
 8006d66:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d003      	beq.n	8006d7a <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006d72:	68f8      	ldr	r0, [r7, #12]
 8006d74:	f7ff ff00 	bl	8006b78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006d78:	e002      	b.n	8006d80 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8006d7a:	68f8      	ldr	r0, [r7, #12]
 8006d7c:	f7ff fed4 	bl	8006b28 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b084      	sub	sp, #16
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d92:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f7ff fed1 	bl	8006b3c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006d9a:	bf00      	nop
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}

08006da2 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006da2:	b580      	push	{r7, lr}
 8006da4:	b084      	sub	sp, #16
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dae:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006db0:	68f8      	ldr	r0, [r7, #12]
 8006db2:	f7ff fecd 	bl	8006b50 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006db6:	bf00      	nop
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b084      	sub	sp, #16
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dca:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	f7ff fec9 	bl	8006b64 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006dd2:	bf00      	nop
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006dda:	b580      	push	{r7, lr}
 8006ddc:	b084      	sub	sp, #16
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006de6:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	685a      	ldr	r2, [r3, #4]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f022 0203 	bic.w	r2, r2, #3
 8006df6:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006dfc:	f043 0210 	orr.w	r2, r3, #16
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f7ff feb3 	bl	8006b78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006e12:	bf00      	nop
 8006e14:	3710      	adds	r7, #16
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
	...

08006e1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b088      	sub	sp, #32
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	603b      	str	r3, [r7, #0]
 8006e28:	4613      	mov	r3, r2
 8006e2a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006e2c:	f7fc fa64 	bl	80032f8 <HAL_GetTick>
 8006e30:	4602      	mov	r2, r0
 8006e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e34:	1a9b      	subs	r3, r3, r2
 8006e36:	683a      	ldr	r2, [r7, #0]
 8006e38:	4413      	add	r3, r2
 8006e3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006e3c:	f7fc fa5c 	bl	80032f8 <HAL_GetTick>
 8006e40:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006e42:	4b39      	ldr	r3, [pc, #228]	@ (8006f28 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	015b      	lsls	r3, r3, #5
 8006e48:	0d1b      	lsrs	r3, r3, #20
 8006e4a:	69fa      	ldr	r2, [r7, #28]
 8006e4c:	fb02 f303 	mul.w	r3, r2, r3
 8006e50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e52:	e054      	b.n	8006efe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e5a:	d050      	beq.n	8006efe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006e5c:	f7fc fa4c 	bl	80032f8 <HAL_GetTick>
 8006e60:	4602      	mov	r2, r0
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	1ad3      	subs	r3, r2, r3
 8006e66:	69fa      	ldr	r2, [r7, #28]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d902      	bls.n	8006e72 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d13d      	bne.n	8006eee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	685a      	ldr	r2, [r3, #4]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006e80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e8a:	d111      	bne.n	8006eb0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e94:	d004      	beq.n	8006ea0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e9e:	d107      	bne.n	8006eb0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006eae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006eb8:	d10f      	bne.n	8006eda <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006ec8:	601a      	str	r2, [r3, #0]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006ed8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006eea:	2303      	movs	r3, #3
 8006eec:	e017      	b.n	8006f1e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d101      	bne.n	8006ef8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	3b01      	subs	r3, #1
 8006efc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	689a      	ldr	r2, [r3, #8]
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	4013      	ands	r3, r2
 8006f08:	68ba      	ldr	r2, [r7, #8]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	bf0c      	ite	eq
 8006f0e:	2301      	moveq	r3, #1
 8006f10:	2300      	movne	r3, #0
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	461a      	mov	r2, r3
 8006f16:	79fb      	ldrb	r3, [r7, #7]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d19b      	bne.n	8006e54 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3720      	adds	r7, #32
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	20000008 	.word	0x20000008

08006f2c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b08a      	sub	sp, #40	@ 0x28
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]
 8006f38:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006f3e:	f7fc f9db 	bl	80032f8 <HAL_GetTick>
 8006f42:	4602      	mov	r2, r0
 8006f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f46:	1a9b      	subs	r3, r3, r2
 8006f48:	683a      	ldr	r2, [r7, #0]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006f4e:	f7fc f9d3 	bl	80032f8 <HAL_GetTick>
 8006f52:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	330c      	adds	r3, #12
 8006f5a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006f5c:	4b3d      	ldr	r3, [pc, #244]	@ (8007054 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	4613      	mov	r3, r2
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	4413      	add	r3, r2
 8006f66:	00da      	lsls	r2, r3, #3
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	0d1b      	lsrs	r3, r3, #20
 8006f6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f6e:	fb02 f303 	mul.w	r3, r2, r3
 8006f72:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006f74:	e060      	b.n	8007038 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006f7c:	d107      	bne.n	8006f8e <SPI_WaitFifoStateUntilTimeout+0x62>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d104      	bne.n	8006f8e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006f8c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f94:	d050      	beq.n	8007038 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006f96:	f7fc f9af 	bl	80032f8 <HAL_GetTick>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	6a3b      	ldr	r3, [r7, #32]
 8006f9e:	1ad3      	subs	r3, r2, r3
 8006fa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d902      	bls.n	8006fac <SPI_WaitFifoStateUntilTimeout+0x80>
 8006fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d13d      	bne.n	8007028 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	685a      	ldr	r2, [r3, #4]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006fba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006fc4:	d111      	bne.n	8006fea <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fce:	d004      	beq.n	8006fda <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fd8:	d107      	bne.n	8006fea <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fe8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ff2:	d10f      	bne.n	8007014 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007002:	601a      	str	r2, [r3, #0]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007012:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2201      	movs	r2, #1
 8007018:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2200      	movs	r2, #0
 8007020:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007024:	2303      	movs	r3, #3
 8007026:	e010      	b.n	800704a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d101      	bne.n	8007032 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800702e:	2300      	movs	r3, #0
 8007030:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	3b01      	subs	r3, #1
 8007036:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	689a      	ldr	r2, [r3, #8]
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	4013      	ands	r3, r2
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	429a      	cmp	r2, r3
 8007046:	d196      	bne.n	8006f76 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3728      	adds	r7, #40	@ 0x28
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	20000008 	.word	0x20000008

08007058 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b086      	sub	sp, #24
 800705c:	af02      	add	r7, sp, #8
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800706c:	d111      	bne.n	8007092 <SPI_EndRxTransaction+0x3a>
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007076:	d004      	beq.n	8007082 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007080:	d107      	bne.n	8007092 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007090:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	9300      	str	r3, [sp, #0]
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	2200      	movs	r2, #0
 800709a:	2180      	movs	r1, #128	@ 0x80
 800709c:	68f8      	ldr	r0, [r7, #12]
 800709e:	f7ff febd 	bl	8006e1c <SPI_WaitFlagStateUntilTimeout>
 80070a2:	4603      	mov	r3, r0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d007      	beq.n	80070b8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070ac:	f043 0220 	orr.w	r2, r3, #32
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80070b4:	2303      	movs	r3, #3
 80070b6:	e023      	b.n	8007100 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80070c0:	d11d      	bne.n	80070fe <SPI_EndRxTransaction+0xa6>
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070ca:	d004      	beq.n	80070d6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070d4:	d113      	bne.n	80070fe <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	9300      	str	r3, [sp, #0]
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	2200      	movs	r2, #0
 80070de:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f7ff ff22 	bl	8006f2c <SPI_WaitFifoStateUntilTimeout>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d007      	beq.n	80070fe <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070f2:	f043 0220 	orr.w	r2, r3, #32
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80070fa:	2303      	movs	r3, #3
 80070fc:	e000      	b.n	8007100 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80070fe:	2300      	movs	r3, #0
}
 8007100:	4618      	mov	r0, r3
 8007102:	3710      	adds	r7, #16
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b086      	sub	sp, #24
 800710c:	af02      	add	r7, sp, #8
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	9300      	str	r3, [sp, #0]
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	2200      	movs	r2, #0
 800711c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007120:	68f8      	ldr	r0, [r7, #12]
 8007122:	f7ff ff03 	bl	8006f2c <SPI_WaitFifoStateUntilTimeout>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d007      	beq.n	800713c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007130:	f043 0220 	orr.w	r2, r3, #32
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007138:	2303      	movs	r3, #3
 800713a:	e027      	b.n	800718c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	9300      	str	r3, [sp, #0]
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	2200      	movs	r2, #0
 8007144:	2180      	movs	r1, #128	@ 0x80
 8007146:	68f8      	ldr	r0, [r7, #12]
 8007148:	f7ff fe68 	bl	8006e1c <SPI_WaitFlagStateUntilTimeout>
 800714c:	4603      	mov	r3, r0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d007      	beq.n	8007162 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007156:	f043 0220 	orr.w	r2, r3, #32
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800715e:	2303      	movs	r3, #3
 8007160:	e014      	b.n	800718c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	9300      	str	r3, [sp, #0]
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	2200      	movs	r2, #0
 800716a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800716e:	68f8      	ldr	r0, [r7, #12]
 8007170:	f7ff fedc 	bl	8006f2c <SPI_WaitFifoStateUntilTimeout>
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d007      	beq.n	800718a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800717e:	f043 0220 	orr.w	r2, r3, #32
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007186:	2303      	movs	r3, #3
 8007188:	e000      	b.n	800718c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	3710      	adds	r7, #16
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d101      	bne.n	80071a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	e049      	b.n	800723a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d106      	bne.n	80071c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f7fb f9fa 	bl	80025b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2202      	movs	r2, #2
 80071c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	3304      	adds	r3, #4
 80071d0:	4619      	mov	r1, r3
 80071d2:	4610      	mov	r0, r2
 80071d4:	f000 f9c4 	bl	8007560 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2201      	movs	r2, #1
 800721c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3708      	adds	r7, #8
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
	...

08007244 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007252:	b2db      	uxtb	r3, r3
 8007254:	2b01      	cmp	r3, #1
 8007256:	d001      	beq.n	800725c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	e054      	b.n	8007306 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2202      	movs	r2, #2
 8007260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	68da      	ldr	r2, [r3, #12]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f042 0201 	orr.w	r2, r2, #1
 8007272:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a26      	ldr	r2, [pc, #152]	@ (8007314 <HAL_TIM_Base_Start_IT+0xd0>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d022      	beq.n	80072c4 <HAL_TIM_Base_Start_IT+0x80>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007286:	d01d      	beq.n	80072c4 <HAL_TIM_Base_Start_IT+0x80>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a22      	ldr	r2, [pc, #136]	@ (8007318 <HAL_TIM_Base_Start_IT+0xd4>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d018      	beq.n	80072c4 <HAL_TIM_Base_Start_IT+0x80>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a21      	ldr	r2, [pc, #132]	@ (800731c <HAL_TIM_Base_Start_IT+0xd8>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d013      	beq.n	80072c4 <HAL_TIM_Base_Start_IT+0x80>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a1f      	ldr	r2, [pc, #124]	@ (8007320 <HAL_TIM_Base_Start_IT+0xdc>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d00e      	beq.n	80072c4 <HAL_TIM_Base_Start_IT+0x80>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a1e      	ldr	r2, [pc, #120]	@ (8007324 <HAL_TIM_Base_Start_IT+0xe0>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d009      	beq.n	80072c4 <HAL_TIM_Base_Start_IT+0x80>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a1c      	ldr	r2, [pc, #112]	@ (8007328 <HAL_TIM_Base_Start_IT+0xe4>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d004      	beq.n	80072c4 <HAL_TIM_Base_Start_IT+0x80>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a1b      	ldr	r2, [pc, #108]	@ (800732c <HAL_TIM_Base_Start_IT+0xe8>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d115      	bne.n	80072f0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	689a      	ldr	r2, [r3, #8]
 80072ca:	4b19      	ldr	r3, [pc, #100]	@ (8007330 <HAL_TIM_Base_Start_IT+0xec>)
 80072cc:	4013      	ands	r3, r2
 80072ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2b06      	cmp	r3, #6
 80072d4:	d015      	beq.n	8007302 <HAL_TIM_Base_Start_IT+0xbe>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072dc:	d011      	beq.n	8007302 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f042 0201 	orr.w	r2, r2, #1
 80072ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072ee:	e008      	b.n	8007302 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f042 0201 	orr.w	r2, r2, #1
 80072fe:	601a      	str	r2, [r3, #0]
 8007300:	e000      	b.n	8007304 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007302:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3714      	adds	r7, #20
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr
 8007312:	bf00      	nop
 8007314:	40012c00 	.word	0x40012c00
 8007318:	40000400 	.word	0x40000400
 800731c:	40000800 	.word	0x40000800
 8007320:	40000c00 	.word	0x40000c00
 8007324:	40013400 	.word	0x40013400
 8007328:	40014000 	.word	0x40014000
 800732c:	40015000 	.word	0x40015000
 8007330:	00010007 	.word	0x00010007

08007334 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800733e:	2300      	movs	r3, #0
 8007340:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007348:	2b01      	cmp	r3, #1
 800734a:	d101      	bne.n	8007350 <HAL_TIM_ConfigClockSource+0x1c>
 800734c:	2302      	movs	r3, #2
 800734e:	e0f6      	b.n	800753e <HAL_TIM_ConfigClockSource+0x20a>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2201      	movs	r2, #1
 8007354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2202      	movs	r2, #2
 800735c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800736e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007372:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800737a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	68ba      	ldr	r2, [r7, #8]
 8007382:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a6f      	ldr	r2, [pc, #444]	@ (8007548 <HAL_TIM_ConfigClockSource+0x214>)
 800738a:	4293      	cmp	r3, r2
 800738c:	f000 80c1 	beq.w	8007512 <HAL_TIM_ConfigClockSource+0x1de>
 8007390:	4a6d      	ldr	r2, [pc, #436]	@ (8007548 <HAL_TIM_ConfigClockSource+0x214>)
 8007392:	4293      	cmp	r3, r2
 8007394:	f200 80c6 	bhi.w	8007524 <HAL_TIM_ConfigClockSource+0x1f0>
 8007398:	4a6c      	ldr	r2, [pc, #432]	@ (800754c <HAL_TIM_ConfigClockSource+0x218>)
 800739a:	4293      	cmp	r3, r2
 800739c:	f000 80b9 	beq.w	8007512 <HAL_TIM_ConfigClockSource+0x1de>
 80073a0:	4a6a      	ldr	r2, [pc, #424]	@ (800754c <HAL_TIM_ConfigClockSource+0x218>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	f200 80be 	bhi.w	8007524 <HAL_TIM_ConfigClockSource+0x1f0>
 80073a8:	4a69      	ldr	r2, [pc, #420]	@ (8007550 <HAL_TIM_ConfigClockSource+0x21c>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	f000 80b1 	beq.w	8007512 <HAL_TIM_ConfigClockSource+0x1de>
 80073b0:	4a67      	ldr	r2, [pc, #412]	@ (8007550 <HAL_TIM_ConfigClockSource+0x21c>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	f200 80b6 	bhi.w	8007524 <HAL_TIM_ConfigClockSource+0x1f0>
 80073b8:	4a66      	ldr	r2, [pc, #408]	@ (8007554 <HAL_TIM_ConfigClockSource+0x220>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	f000 80a9 	beq.w	8007512 <HAL_TIM_ConfigClockSource+0x1de>
 80073c0:	4a64      	ldr	r2, [pc, #400]	@ (8007554 <HAL_TIM_ConfigClockSource+0x220>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	f200 80ae 	bhi.w	8007524 <HAL_TIM_ConfigClockSource+0x1f0>
 80073c8:	4a63      	ldr	r2, [pc, #396]	@ (8007558 <HAL_TIM_ConfigClockSource+0x224>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	f000 80a1 	beq.w	8007512 <HAL_TIM_ConfigClockSource+0x1de>
 80073d0:	4a61      	ldr	r2, [pc, #388]	@ (8007558 <HAL_TIM_ConfigClockSource+0x224>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	f200 80a6 	bhi.w	8007524 <HAL_TIM_ConfigClockSource+0x1f0>
 80073d8:	4a60      	ldr	r2, [pc, #384]	@ (800755c <HAL_TIM_ConfigClockSource+0x228>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	f000 8099 	beq.w	8007512 <HAL_TIM_ConfigClockSource+0x1de>
 80073e0:	4a5e      	ldr	r2, [pc, #376]	@ (800755c <HAL_TIM_ConfigClockSource+0x228>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	f200 809e 	bhi.w	8007524 <HAL_TIM_ConfigClockSource+0x1f0>
 80073e8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80073ec:	f000 8091 	beq.w	8007512 <HAL_TIM_ConfigClockSource+0x1de>
 80073f0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80073f4:	f200 8096 	bhi.w	8007524 <HAL_TIM_ConfigClockSource+0x1f0>
 80073f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073fc:	f000 8089 	beq.w	8007512 <HAL_TIM_ConfigClockSource+0x1de>
 8007400:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007404:	f200 808e 	bhi.w	8007524 <HAL_TIM_ConfigClockSource+0x1f0>
 8007408:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800740c:	d03e      	beq.n	800748c <HAL_TIM_ConfigClockSource+0x158>
 800740e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007412:	f200 8087 	bhi.w	8007524 <HAL_TIM_ConfigClockSource+0x1f0>
 8007416:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800741a:	f000 8086 	beq.w	800752a <HAL_TIM_ConfigClockSource+0x1f6>
 800741e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007422:	d87f      	bhi.n	8007524 <HAL_TIM_ConfigClockSource+0x1f0>
 8007424:	2b70      	cmp	r3, #112	@ 0x70
 8007426:	d01a      	beq.n	800745e <HAL_TIM_ConfigClockSource+0x12a>
 8007428:	2b70      	cmp	r3, #112	@ 0x70
 800742a:	d87b      	bhi.n	8007524 <HAL_TIM_ConfigClockSource+0x1f0>
 800742c:	2b60      	cmp	r3, #96	@ 0x60
 800742e:	d050      	beq.n	80074d2 <HAL_TIM_ConfigClockSource+0x19e>
 8007430:	2b60      	cmp	r3, #96	@ 0x60
 8007432:	d877      	bhi.n	8007524 <HAL_TIM_ConfigClockSource+0x1f0>
 8007434:	2b50      	cmp	r3, #80	@ 0x50
 8007436:	d03c      	beq.n	80074b2 <HAL_TIM_ConfigClockSource+0x17e>
 8007438:	2b50      	cmp	r3, #80	@ 0x50
 800743a:	d873      	bhi.n	8007524 <HAL_TIM_ConfigClockSource+0x1f0>
 800743c:	2b40      	cmp	r3, #64	@ 0x40
 800743e:	d058      	beq.n	80074f2 <HAL_TIM_ConfigClockSource+0x1be>
 8007440:	2b40      	cmp	r3, #64	@ 0x40
 8007442:	d86f      	bhi.n	8007524 <HAL_TIM_ConfigClockSource+0x1f0>
 8007444:	2b30      	cmp	r3, #48	@ 0x30
 8007446:	d064      	beq.n	8007512 <HAL_TIM_ConfigClockSource+0x1de>
 8007448:	2b30      	cmp	r3, #48	@ 0x30
 800744a:	d86b      	bhi.n	8007524 <HAL_TIM_ConfigClockSource+0x1f0>
 800744c:	2b20      	cmp	r3, #32
 800744e:	d060      	beq.n	8007512 <HAL_TIM_ConfigClockSource+0x1de>
 8007450:	2b20      	cmp	r3, #32
 8007452:	d867      	bhi.n	8007524 <HAL_TIM_ConfigClockSource+0x1f0>
 8007454:	2b00      	cmp	r3, #0
 8007456:	d05c      	beq.n	8007512 <HAL_TIM_ConfigClockSource+0x1de>
 8007458:	2b10      	cmp	r3, #16
 800745a:	d05a      	beq.n	8007512 <HAL_TIM_ConfigClockSource+0x1de>
 800745c:	e062      	b.n	8007524 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800746e:	f000 f9a7 	bl	80077c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007480:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	68ba      	ldr	r2, [r7, #8]
 8007488:	609a      	str	r2, [r3, #8]
      break;
 800748a:	e04f      	b.n	800752c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800749c:	f000 f990 	bl	80077c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	689a      	ldr	r2, [r3, #8]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80074ae:	609a      	str	r2, [r3, #8]
      break;
 80074b0:	e03c      	b.n	800752c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074be:	461a      	mov	r2, r3
 80074c0:	f000 f902 	bl	80076c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2150      	movs	r1, #80	@ 0x50
 80074ca:	4618      	mov	r0, r3
 80074cc:	f000 f95b 	bl	8007786 <TIM_ITRx_SetConfig>
      break;
 80074d0:	e02c      	b.n	800752c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80074de:	461a      	mov	r2, r3
 80074e0:	f000 f921 	bl	8007726 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2160      	movs	r1, #96	@ 0x60
 80074ea:	4618      	mov	r0, r3
 80074ec:	f000 f94b 	bl	8007786 <TIM_ITRx_SetConfig>
      break;
 80074f0:	e01c      	b.n	800752c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074fe:	461a      	mov	r2, r3
 8007500:	f000 f8e2 	bl	80076c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	2140      	movs	r1, #64	@ 0x40
 800750a:	4618      	mov	r0, r3
 800750c:	f000 f93b 	bl	8007786 <TIM_ITRx_SetConfig>
      break;
 8007510:	e00c      	b.n	800752c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4619      	mov	r1, r3
 800751c:	4610      	mov	r0, r2
 800751e:	f000 f932 	bl	8007786 <TIM_ITRx_SetConfig>
      break;
 8007522:	e003      	b.n	800752c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	73fb      	strb	r3, [r7, #15]
      break;
 8007528:	e000      	b.n	800752c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800752a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800753c:	7bfb      	ldrb	r3, [r7, #15]
}
 800753e:	4618      	mov	r0, r3
 8007540:	3710      	adds	r7, #16
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	00100070 	.word	0x00100070
 800754c:	00100060 	.word	0x00100060
 8007550:	00100050 	.word	0x00100050
 8007554:	00100040 	.word	0x00100040
 8007558:	00100030 	.word	0x00100030
 800755c:	00100020 	.word	0x00100020

08007560 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007560:	b480      	push	{r7}
 8007562:	b085      	sub	sp, #20
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4a4c      	ldr	r2, [pc, #304]	@ (80076a4 <TIM_Base_SetConfig+0x144>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d017      	beq.n	80075a8 <TIM_Base_SetConfig+0x48>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800757e:	d013      	beq.n	80075a8 <TIM_Base_SetConfig+0x48>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a49      	ldr	r2, [pc, #292]	@ (80076a8 <TIM_Base_SetConfig+0x148>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d00f      	beq.n	80075a8 <TIM_Base_SetConfig+0x48>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4a48      	ldr	r2, [pc, #288]	@ (80076ac <TIM_Base_SetConfig+0x14c>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d00b      	beq.n	80075a8 <TIM_Base_SetConfig+0x48>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	4a47      	ldr	r2, [pc, #284]	@ (80076b0 <TIM_Base_SetConfig+0x150>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d007      	beq.n	80075a8 <TIM_Base_SetConfig+0x48>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a46      	ldr	r2, [pc, #280]	@ (80076b4 <TIM_Base_SetConfig+0x154>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d003      	beq.n	80075a8 <TIM_Base_SetConfig+0x48>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4a45      	ldr	r2, [pc, #276]	@ (80076b8 <TIM_Base_SetConfig+0x158>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d108      	bne.n	80075ba <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	68fa      	ldr	r2, [r7, #12]
 80075b6:	4313      	orrs	r3, r2
 80075b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a39      	ldr	r2, [pc, #228]	@ (80076a4 <TIM_Base_SetConfig+0x144>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d023      	beq.n	800760a <TIM_Base_SetConfig+0xaa>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075c8:	d01f      	beq.n	800760a <TIM_Base_SetConfig+0xaa>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a36      	ldr	r2, [pc, #216]	@ (80076a8 <TIM_Base_SetConfig+0x148>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d01b      	beq.n	800760a <TIM_Base_SetConfig+0xaa>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a35      	ldr	r2, [pc, #212]	@ (80076ac <TIM_Base_SetConfig+0x14c>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d017      	beq.n	800760a <TIM_Base_SetConfig+0xaa>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a34      	ldr	r2, [pc, #208]	@ (80076b0 <TIM_Base_SetConfig+0x150>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d013      	beq.n	800760a <TIM_Base_SetConfig+0xaa>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a33      	ldr	r2, [pc, #204]	@ (80076b4 <TIM_Base_SetConfig+0x154>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d00f      	beq.n	800760a <TIM_Base_SetConfig+0xaa>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4a33      	ldr	r2, [pc, #204]	@ (80076bc <TIM_Base_SetConfig+0x15c>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d00b      	beq.n	800760a <TIM_Base_SetConfig+0xaa>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4a32      	ldr	r2, [pc, #200]	@ (80076c0 <TIM_Base_SetConfig+0x160>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d007      	beq.n	800760a <TIM_Base_SetConfig+0xaa>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4a31      	ldr	r2, [pc, #196]	@ (80076c4 <TIM_Base_SetConfig+0x164>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d003      	beq.n	800760a <TIM_Base_SetConfig+0xaa>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4a2c      	ldr	r2, [pc, #176]	@ (80076b8 <TIM_Base_SetConfig+0x158>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d108      	bne.n	800761c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007610:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	68fa      	ldr	r2, [r7, #12]
 8007618:	4313      	orrs	r3, r2
 800761a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	695b      	ldr	r3, [r3, #20]
 8007626:	4313      	orrs	r3, r2
 8007628:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	68fa      	ldr	r2, [r7, #12]
 800762e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	689a      	ldr	r2, [r3, #8]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a18      	ldr	r2, [pc, #96]	@ (80076a4 <TIM_Base_SetConfig+0x144>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d013      	beq.n	8007670 <TIM_Base_SetConfig+0x110>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a1a      	ldr	r2, [pc, #104]	@ (80076b4 <TIM_Base_SetConfig+0x154>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d00f      	beq.n	8007670 <TIM_Base_SetConfig+0x110>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4a1a      	ldr	r2, [pc, #104]	@ (80076bc <TIM_Base_SetConfig+0x15c>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d00b      	beq.n	8007670 <TIM_Base_SetConfig+0x110>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a19      	ldr	r2, [pc, #100]	@ (80076c0 <TIM_Base_SetConfig+0x160>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d007      	beq.n	8007670 <TIM_Base_SetConfig+0x110>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4a18      	ldr	r2, [pc, #96]	@ (80076c4 <TIM_Base_SetConfig+0x164>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d003      	beq.n	8007670 <TIM_Base_SetConfig+0x110>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	4a13      	ldr	r2, [pc, #76]	@ (80076b8 <TIM_Base_SetConfig+0x158>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d103      	bne.n	8007678 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	691a      	ldr	r2, [r3, #16]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2201      	movs	r2, #1
 800767c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	f003 0301 	and.w	r3, r3, #1
 8007686:	2b01      	cmp	r3, #1
 8007688:	d105      	bne.n	8007696 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	f023 0201 	bic.w	r2, r3, #1
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	611a      	str	r2, [r3, #16]
  }
}
 8007696:	bf00      	nop
 8007698:	3714      	adds	r7, #20
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	40012c00 	.word	0x40012c00
 80076a8:	40000400 	.word	0x40000400
 80076ac:	40000800 	.word	0x40000800
 80076b0:	40000c00 	.word	0x40000c00
 80076b4:	40013400 	.word	0x40013400
 80076b8:	40015000 	.word	0x40015000
 80076bc:	40014000 	.word	0x40014000
 80076c0:	40014400 	.word	0x40014400
 80076c4:	40014800 	.word	0x40014800

080076c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b087      	sub	sp, #28
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	60b9      	str	r1, [r7, #8]
 80076d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6a1b      	ldr	r3, [r3, #32]
 80076d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6a1b      	ldr	r3, [r3, #32]
 80076de:	f023 0201 	bic.w	r2, r3, #1
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	699b      	ldr	r3, [r3, #24]
 80076ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80076f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	011b      	lsls	r3, r3, #4
 80076f8:	693a      	ldr	r2, [r7, #16]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	f023 030a 	bic.w	r3, r3, #10
 8007704:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007706:	697a      	ldr	r2, [r7, #20]
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	4313      	orrs	r3, r2
 800770c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	693a      	ldr	r2, [r7, #16]
 8007712:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	697a      	ldr	r2, [r7, #20]
 8007718:	621a      	str	r2, [r3, #32]
}
 800771a:	bf00      	nop
 800771c:	371c      	adds	r7, #28
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr

08007726 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007726:	b480      	push	{r7}
 8007728:	b087      	sub	sp, #28
 800772a:	af00      	add	r7, sp, #0
 800772c:	60f8      	str	r0, [r7, #12]
 800772e:	60b9      	str	r1, [r7, #8]
 8007730:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6a1b      	ldr	r3, [r3, #32]
 8007736:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6a1b      	ldr	r3, [r3, #32]
 800773c:	f023 0210 	bic.w	r2, r3, #16
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	699b      	ldr	r3, [r3, #24]
 8007748:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007750:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	031b      	lsls	r3, r3, #12
 8007756:	693a      	ldr	r2, [r7, #16]
 8007758:	4313      	orrs	r3, r2
 800775a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007762:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	011b      	lsls	r3, r3, #4
 8007768:	697a      	ldr	r2, [r7, #20]
 800776a:	4313      	orrs	r3, r2
 800776c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	693a      	ldr	r2, [r7, #16]
 8007772:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	697a      	ldr	r2, [r7, #20]
 8007778:	621a      	str	r2, [r3, #32]
}
 800777a:	bf00      	nop
 800777c:	371c      	adds	r7, #28
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr

08007786 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007786:	b480      	push	{r7}
 8007788:	b085      	sub	sp, #20
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
 800778e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800779c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80077a2:	683a      	ldr	r2, [r7, #0]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	f043 0307 	orr.w	r3, r3, #7
 80077ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	68fa      	ldr	r2, [r7, #12]
 80077b2:	609a      	str	r2, [r3, #8]
}
 80077b4:	bf00      	nop
 80077b6:	3714      	adds	r7, #20
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b087      	sub	sp, #28
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	607a      	str	r2, [r7, #4]
 80077cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80077da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	021a      	lsls	r2, r3, #8
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	431a      	orrs	r2, r3
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	697a      	ldr	r2, [r7, #20]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	697a      	ldr	r2, [r7, #20]
 80077f2:	609a      	str	r2, [r3, #8]
}
 80077f4:	bf00      	nop
 80077f6:	371c      	adds	r7, #28
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007800:	b480      	push	{r7}
 8007802:	b085      	sub	sp, #20
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007810:	2b01      	cmp	r3, #1
 8007812:	d101      	bne.n	8007818 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007814:	2302      	movs	r3, #2
 8007816:	e074      	b.n	8007902 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2202      	movs	r2, #2
 8007824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a34      	ldr	r2, [pc, #208]	@ (8007910 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d009      	beq.n	8007856 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a33      	ldr	r2, [pc, #204]	@ (8007914 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d004      	beq.n	8007856 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a31      	ldr	r2, [pc, #196]	@ (8007918 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d108      	bne.n	8007868 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800785c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	4313      	orrs	r3, r2
 8007866:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800786e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007872:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	68fa      	ldr	r2, [r7, #12]
 800787a:	4313      	orrs	r3, r2
 800787c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	68fa      	ldr	r2, [r7, #12]
 8007884:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a21      	ldr	r2, [pc, #132]	@ (8007910 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d022      	beq.n	80078d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007898:	d01d      	beq.n	80078d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a1f      	ldr	r2, [pc, #124]	@ (800791c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d018      	beq.n	80078d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a1d      	ldr	r2, [pc, #116]	@ (8007920 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d013      	beq.n	80078d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a1c      	ldr	r2, [pc, #112]	@ (8007924 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d00e      	beq.n	80078d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a15      	ldr	r2, [pc, #84]	@ (8007914 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d009      	beq.n	80078d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a18      	ldr	r2, [pc, #96]	@ (8007928 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d004      	beq.n	80078d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a11      	ldr	r2, [pc, #68]	@ (8007918 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d10c      	bne.n	80078f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80078dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	68ba      	ldr	r2, [r7, #8]
 80078e4:	4313      	orrs	r3, r2
 80078e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	68ba      	ldr	r2, [r7, #8]
 80078ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2201      	movs	r2, #1
 80078f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3714      	adds	r7, #20
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr
 800790e:	bf00      	nop
 8007910:	40012c00 	.word	0x40012c00
 8007914:	40013400 	.word	0x40013400
 8007918:	40015000 	.word	0x40015000
 800791c:	40000400 	.word	0x40000400
 8007920:	40000800 	.word	0x40000800
 8007924:	40000c00 	.word	0x40000c00
 8007928:	40014000 	.word	0x40014000

0800792c <__cvt>:
 800792c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007930:	ec57 6b10 	vmov	r6, r7, d0
 8007934:	2f00      	cmp	r7, #0
 8007936:	460c      	mov	r4, r1
 8007938:	4619      	mov	r1, r3
 800793a:	463b      	mov	r3, r7
 800793c:	bfbb      	ittet	lt
 800793e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007942:	461f      	movlt	r7, r3
 8007944:	2300      	movge	r3, #0
 8007946:	232d      	movlt	r3, #45	@ 0x2d
 8007948:	700b      	strb	r3, [r1, #0]
 800794a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800794c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007950:	4691      	mov	r9, r2
 8007952:	f023 0820 	bic.w	r8, r3, #32
 8007956:	bfbc      	itt	lt
 8007958:	4632      	movlt	r2, r6
 800795a:	4616      	movlt	r6, r2
 800795c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007960:	d005      	beq.n	800796e <__cvt+0x42>
 8007962:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007966:	d100      	bne.n	800796a <__cvt+0x3e>
 8007968:	3401      	adds	r4, #1
 800796a:	2102      	movs	r1, #2
 800796c:	e000      	b.n	8007970 <__cvt+0x44>
 800796e:	2103      	movs	r1, #3
 8007970:	ab03      	add	r3, sp, #12
 8007972:	9301      	str	r3, [sp, #4]
 8007974:	ab02      	add	r3, sp, #8
 8007976:	9300      	str	r3, [sp, #0]
 8007978:	ec47 6b10 	vmov	d0, r6, r7
 800797c:	4653      	mov	r3, sl
 800797e:	4622      	mov	r2, r4
 8007980:	f000 fe46 	bl	8008610 <_dtoa_r>
 8007984:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007988:	4605      	mov	r5, r0
 800798a:	d119      	bne.n	80079c0 <__cvt+0x94>
 800798c:	f019 0f01 	tst.w	r9, #1
 8007990:	d00e      	beq.n	80079b0 <__cvt+0x84>
 8007992:	eb00 0904 	add.w	r9, r0, r4
 8007996:	2200      	movs	r2, #0
 8007998:	2300      	movs	r3, #0
 800799a:	4630      	mov	r0, r6
 800799c:	4639      	mov	r1, r7
 800799e:	f7f9 f8bb 	bl	8000b18 <__aeabi_dcmpeq>
 80079a2:	b108      	cbz	r0, 80079a8 <__cvt+0x7c>
 80079a4:	f8cd 900c 	str.w	r9, [sp, #12]
 80079a8:	2230      	movs	r2, #48	@ 0x30
 80079aa:	9b03      	ldr	r3, [sp, #12]
 80079ac:	454b      	cmp	r3, r9
 80079ae:	d31e      	bcc.n	80079ee <__cvt+0xc2>
 80079b0:	9b03      	ldr	r3, [sp, #12]
 80079b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80079b4:	1b5b      	subs	r3, r3, r5
 80079b6:	4628      	mov	r0, r5
 80079b8:	6013      	str	r3, [r2, #0]
 80079ba:	b004      	add	sp, #16
 80079bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079c0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80079c4:	eb00 0904 	add.w	r9, r0, r4
 80079c8:	d1e5      	bne.n	8007996 <__cvt+0x6a>
 80079ca:	7803      	ldrb	r3, [r0, #0]
 80079cc:	2b30      	cmp	r3, #48	@ 0x30
 80079ce:	d10a      	bne.n	80079e6 <__cvt+0xba>
 80079d0:	2200      	movs	r2, #0
 80079d2:	2300      	movs	r3, #0
 80079d4:	4630      	mov	r0, r6
 80079d6:	4639      	mov	r1, r7
 80079d8:	f7f9 f89e 	bl	8000b18 <__aeabi_dcmpeq>
 80079dc:	b918      	cbnz	r0, 80079e6 <__cvt+0xba>
 80079de:	f1c4 0401 	rsb	r4, r4, #1
 80079e2:	f8ca 4000 	str.w	r4, [sl]
 80079e6:	f8da 3000 	ldr.w	r3, [sl]
 80079ea:	4499      	add	r9, r3
 80079ec:	e7d3      	b.n	8007996 <__cvt+0x6a>
 80079ee:	1c59      	adds	r1, r3, #1
 80079f0:	9103      	str	r1, [sp, #12]
 80079f2:	701a      	strb	r2, [r3, #0]
 80079f4:	e7d9      	b.n	80079aa <__cvt+0x7e>

080079f6 <__exponent>:
 80079f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079f8:	2900      	cmp	r1, #0
 80079fa:	bfba      	itte	lt
 80079fc:	4249      	neglt	r1, r1
 80079fe:	232d      	movlt	r3, #45	@ 0x2d
 8007a00:	232b      	movge	r3, #43	@ 0x2b
 8007a02:	2909      	cmp	r1, #9
 8007a04:	7002      	strb	r2, [r0, #0]
 8007a06:	7043      	strb	r3, [r0, #1]
 8007a08:	dd29      	ble.n	8007a5e <__exponent+0x68>
 8007a0a:	f10d 0307 	add.w	r3, sp, #7
 8007a0e:	461d      	mov	r5, r3
 8007a10:	270a      	movs	r7, #10
 8007a12:	461a      	mov	r2, r3
 8007a14:	fbb1 f6f7 	udiv	r6, r1, r7
 8007a18:	fb07 1416 	mls	r4, r7, r6, r1
 8007a1c:	3430      	adds	r4, #48	@ 0x30
 8007a1e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007a22:	460c      	mov	r4, r1
 8007a24:	2c63      	cmp	r4, #99	@ 0x63
 8007a26:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007a2a:	4631      	mov	r1, r6
 8007a2c:	dcf1      	bgt.n	8007a12 <__exponent+0x1c>
 8007a2e:	3130      	adds	r1, #48	@ 0x30
 8007a30:	1e94      	subs	r4, r2, #2
 8007a32:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007a36:	1c41      	adds	r1, r0, #1
 8007a38:	4623      	mov	r3, r4
 8007a3a:	42ab      	cmp	r3, r5
 8007a3c:	d30a      	bcc.n	8007a54 <__exponent+0x5e>
 8007a3e:	f10d 0309 	add.w	r3, sp, #9
 8007a42:	1a9b      	subs	r3, r3, r2
 8007a44:	42ac      	cmp	r4, r5
 8007a46:	bf88      	it	hi
 8007a48:	2300      	movhi	r3, #0
 8007a4a:	3302      	adds	r3, #2
 8007a4c:	4403      	add	r3, r0
 8007a4e:	1a18      	subs	r0, r3, r0
 8007a50:	b003      	add	sp, #12
 8007a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a54:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007a58:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007a5c:	e7ed      	b.n	8007a3a <__exponent+0x44>
 8007a5e:	2330      	movs	r3, #48	@ 0x30
 8007a60:	3130      	adds	r1, #48	@ 0x30
 8007a62:	7083      	strb	r3, [r0, #2]
 8007a64:	70c1      	strb	r1, [r0, #3]
 8007a66:	1d03      	adds	r3, r0, #4
 8007a68:	e7f1      	b.n	8007a4e <__exponent+0x58>
	...

08007a6c <_printf_float>:
 8007a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a70:	b08d      	sub	sp, #52	@ 0x34
 8007a72:	460c      	mov	r4, r1
 8007a74:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007a78:	4616      	mov	r6, r2
 8007a7a:	461f      	mov	r7, r3
 8007a7c:	4605      	mov	r5, r0
 8007a7e:	f000 fcb9 	bl	80083f4 <_localeconv_r>
 8007a82:	6803      	ldr	r3, [r0, #0]
 8007a84:	9304      	str	r3, [sp, #16]
 8007a86:	4618      	mov	r0, r3
 8007a88:	f7f8 fc1a 	bl	80002c0 <strlen>
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a90:	f8d8 3000 	ldr.w	r3, [r8]
 8007a94:	9005      	str	r0, [sp, #20]
 8007a96:	3307      	adds	r3, #7
 8007a98:	f023 0307 	bic.w	r3, r3, #7
 8007a9c:	f103 0208 	add.w	r2, r3, #8
 8007aa0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007aa4:	f8d4 b000 	ldr.w	fp, [r4]
 8007aa8:	f8c8 2000 	str.w	r2, [r8]
 8007aac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ab0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007ab4:	9307      	str	r3, [sp, #28]
 8007ab6:	f8cd 8018 	str.w	r8, [sp, #24]
 8007aba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007abe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ac2:	4b9c      	ldr	r3, [pc, #624]	@ (8007d34 <_printf_float+0x2c8>)
 8007ac4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007ac8:	f7f9 f858 	bl	8000b7c <__aeabi_dcmpun>
 8007acc:	bb70      	cbnz	r0, 8007b2c <_printf_float+0xc0>
 8007ace:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ad2:	4b98      	ldr	r3, [pc, #608]	@ (8007d34 <_printf_float+0x2c8>)
 8007ad4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007ad8:	f7f9 f832 	bl	8000b40 <__aeabi_dcmple>
 8007adc:	bb30      	cbnz	r0, 8007b2c <_printf_float+0xc0>
 8007ade:	2200      	movs	r2, #0
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	4640      	mov	r0, r8
 8007ae4:	4649      	mov	r1, r9
 8007ae6:	f7f9 f821 	bl	8000b2c <__aeabi_dcmplt>
 8007aea:	b110      	cbz	r0, 8007af2 <_printf_float+0x86>
 8007aec:	232d      	movs	r3, #45	@ 0x2d
 8007aee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007af2:	4a91      	ldr	r2, [pc, #580]	@ (8007d38 <_printf_float+0x2cc>)
 8007af4:	4b91      	ldr	r3, [pc, #580]	@ (8007d3c <_printf_float+0x2d0>)
 8007af6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007afa:	bf8c      	ite	hi
 8007afc:	4690      	movhi	r8, r2
 8007afe:	4698      	movls	r8, r3
 8007b00:	2303      	movs	r3, #3
 8007b02:	6123      	str	r3, [r4, #16]
 8007b04:	f02b 0304 	bic.w	r3, fp, #4
 8007b08:	6023      	str	r3, [r4, #0]
 8007b0a:	f04f 0900 	mov.w	r9, #0
 8007b0e:	9700      	str	r7, [sp, #0]
 8007b10:	4633      	mov	r3, r6
 8007b12:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007b14:	4621      	mov	r1, r4
 8007b16:	4628      	mov	r0, r5
 8007b18:	f000 f9d2 	bl	8007ec0 <_printf_common>
 8007b1c:	3001      	adds	r0, #1
 8007b1e:	f040 808d 	bne.w	8007c3c <_printf_float+0x1d0>
 8007b22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b26:	b00d      	add	sp, #52	@ 0x34
 8007b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b2c:	4642      	mov	r2, r8
 8007b2e:	464b      	mov	r3, r9
 8007b30:	4640      	mov	r0, r8
 8007b32:	4649      	mov	r1, r9
 8007b34:	f7f9 f822 	bl	8000b7c <__aeabi_dcmpun>
 8007b38:	b140      	cbz	r0, 8007b4c <_printf_float+0xe0>
 8007b3a:	464b      	mov	r3, r9
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	bfbc      	itt	lt
 8007b40:	232d      	movlt	r3, #45	@ 0x2d
 8007b42:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007b46:	4a7e      	ldr	r2, [pc, #504]	@ (8007d40 <_printf_float+0x2d4>)
 8007b48:	4b7e      	ldr	r3, [pc, #504]	@ (8007d44 <_printf_float+0x2d8>)
 8007b4a:	e7d4      	b.n	8007af6 <_printf_float+0x8a>
 8007b4c:	6863      	ldr	r3, [r4, #4]
 8007b4e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007b52:	9206      	str	r2, [sp, #24]
 8007b54:	1c5a      	adds	r2, r3, #1
 8007b56:	d13b      	bne.n	8007bd0 <_printf_float+0x164>
 8007b58:	2306      	movs	r3, #6
 8007b5a:	6063      	str	r3, [r4, #4]
 8007b5c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007b60:	2300      	movs	r3, #0
 8007b62:	6022      	str	r2, [r4, #0]
 8007b64:	9303      	str	r3, [sp, #12]
 8007b66:	ab0a      	add	r3, sp, #40	@ 0x28
 8007b68:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007b6c:	ab09      	add	r3, sp, #36	@ 0x24
 8007b6e:	9300      	str	r3, [sp, #0]
 8007b70:	6861      	ldr	r1, [r4, #4]
 8007b72:	ec49 8b10 	vmov	d0, r8, r9
 8007b76:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007b7a:	4628      	mov	r0, r5
 8007b7c:	f7ff fed6 	bl	800792c <__cvt>
 8007b80:	9b06      	ldr	r3, [sp, #24]
 8007b82:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007b84:	2b47      	cmp	r3, #71	@ 0x47
 8007b86:	4680      	mov	r8, r0
 8007b88:	d129      	bne.n	8007bde <_printf_float+0x172>
 8007b8a:	1cc8      	adds	r0, r1, #3
 8007b8c:	db02      	blt.n	8007b94 <_printf_float+0x128>
 8007b8e:	6863      	ldr	r3, [r4, #4]
 8007b90:	4299      	cmp	r1, r3
 8007b92:	dd41      	ble.n	8007c18 <_printf_float+0x1ac>
 8007b94:	f1aa 0a02 	sub.w	sl, sl, #2
 8007b98:	fa5f fa8a 	uxtb.w	sl, sl
 8007b9c:	3901      	subs	r1, #1
 8007b9e:	4652      	mov	r2, sl
 8007ba0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007ba4:	9109      	str	r1, [sp, #36]	@ 0x24
 8007ba6:	f7ff ff26 	bl	80079f6 <__exponent>
 8007baa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007bac:	1813      	adds	r3, r2, r0
 8007bae:	2a01      	cmp	r2, #1
 8007bb0:	4681      	mov	r9, r0
 8007bb2:	6123      	str	r3, [r4, #16]
 8007bb4:	dc02      	bgt.n	8007bbc <_printf_float+0x150>
 8007bb6:	6822      	ldr	r2, [r4, #0]
 8007bb8:	07d2      	lsls	r2, r2, #31
 8007bba:	d501      	bpl.n	8007bc0 <_printf_float+0x154>
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	6123      	str	r3, [r4, #16]
 8007bc0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d0a2      	beq.n	8007b0e <_printf_float+0xa2>
 8007bc8:	232d      	movs	r3, #45	@ 0x2d
 8007bca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007bce:	e79e      	b.n	8007b0e <_printf_float+0xa2>
 8007bd0:	9a06      	ldr	r2, [sp, #24]
 8007bd2:	2a47      	cmp	r2, #71	@ 0x47
 8007bd4:	d1c2      	bne.n	8007b5c <_printf_float+0xf0>
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d1c0      	bne.n	8007b5c <_printf_float+0xf0>
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e7bd      	b.n	8007b5a <_printf_float+0xee>
 8007bde:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007be2:	d9db      	bls.n	8007b9c <_printf_float+0x130>
 8007be4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007be8:	d118      	bne.n	8007c1c <_printf_float+0x1b0>
 8007bea:	2900      	cmp	r1, #0
 8007bec:	6863      	ldr	r3, [r4, #4]
 8007bee:	dd0b      	ble.n	8007c08 <_printf_float+0x19c>
 8007bf0:	6121      	str	r1, [r4, #16]
 8007bf2:	b913      	cbnz	r3, 8007bfa <_printf_float+0x18e>
 8007bf4:	6822      	ldr	r2, [r4, #0]
 8007bf6:	07d0      	lsls	r0, r2, #31
 8007bf8:	d502      	bpl.n	8007c00 <_printf_float+0x194>
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	440b      	add	r3, r1
 8007bfe:	6123      	str	r3, [r4, #16]
 8007c00:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007c02:	f04f 0900 	mov.w	r9, #0
 8007c06:	e7db      	b.n	8007bc0 <_printf_float+0x154>
 8007c08:	b913      	cbnz	r3, 8007c10 <_printf_float+0x1a4>
 8007c0a:	6822      	ldr	r2, [r4, #0]
 8007c0c:	07d2      	lsls	r2, r2, #31
 8007c0e:	d501      	bpl.n	8007c14 <_printf_float+0x1a8>
 8007c10:	3302      	adds	r3, #2
 8007c12:	e7f4      	b.n	8007bfe <_printf_float+0x192>
 8007c14:	2301      	movs	r3, #1
 8007c16:	e7f2      	b.n	8007bfe <_printf_float+0x192>
 8007c18:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007c1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c1e:	4299      	cmp	r1, r3
 8007c20:	db05      	blt.n	8007c2e <_printf_float+0x1c2>
 8007c22:	6823      	ldr	r3, [r4, #0]
 8007c24:	6121      	str	r1, [r4, #16]
 8007c26:	07d8      	lsls	r0, r3, #31
 8007c28:	d5ea      	bpl.n	8007c00 <_printf_float+0x194>
 8007c2a:	1c4b      	adds	r3, r1, #1
 8007c2c:	e7e7      	b.n	8007bfe <_printf_float+0x192>
 8007c2e:	2900      	cmp	r1, #0
 8007c30:	bfd4      	ite	le
 8007c32:	f1c1 0202 	rsble	r2, r1, #2
 8007c36:	2201      	movgt	r2, #1
 8007c38:	4413      	add	r3, r2
 8007c3a:	e7e0      	b.n	8007bfe <_printf_float+0x192>
 8007c3c:	6823      	ldr	r3, [r4, #0]
 8007c3e:	055a      	lsls	r2, r3, #21
 8007c40:	d407      	bmi.n	8007c52 <_printf_float+0x1e6>
 8007c42:	6923      	ldr	r3, [r4, #16]
 8007c44:	4642      	mov	r2, r8
 8007c46:	4631      	mov	r1, r6
 8007c48:	4628      	mov	r0, r5
 8007c4a:	47b8      	blx	r7
 8007c4c:	3001      	adds	r0, #1
 8007c4e:	d12b      	bne.n	8007ca8 <_printf_float+0x23c>
 8007c50:	e767      	b.n	8007b22 <_printf_float+0xb6>
 8007c52:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007c56:	f240 80dd 	bls.w	8007e14 <_printf_float+0x3a8>
 8007c5a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007c5e:	2200      	movs	r2, #0
 8007c60:	2300      	movs	r3, #0
 8007c62:	f7f8 ff59 	bl	8000b18 <__aeabi_dcmpeq>
 8007c66:	2800      	cmp	r0, #0
 8007c68:	d033      	beq.n	8007cd2 <_printf_float+0x266>
 8007c6a:	4a37      	ldr	r2, [pc, #220]	@ (8007d48 <_printf_float+0x2dc>)
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	4631      	mov	r1, r6
 8007c70:	4628      	mov	r0, r5
 8007c72:	47b8      	blx	r7
 8007c74:	3001      	adds	r0, #1
 8007c76:	f43f af54 	beq.w	8007b22 <_printf_float+0xb6>
 8007c7a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007c7e:	4543      	cmp	r3, r8
 8007c80:	db02      	blt.n	8007c88 <_printf_float+0x21c>
 8007c82:	6823      	ldr	r3, [r4, #0]
 8007c84:	07d8      	lsls	r0, r3, #31
 8007c86:	d50f      	bpl.n	8007ca8 <_printf_float+0x23c>
 8007c88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c8c:	4631      	mov	r1, r6
 8007c8e:	4628      	mov	r0, r5
 8007c90:	47b8      	blx	r7
 8007c92:	3001      	adds	r0, #1
 8007c94:	f43f af45 	beq.w	8007b22 <_printf_float+0xb6>
 8007c98:	f04f 0900 	mov.w	r9, #0
 8007c9c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007ca0:	f104 0a1a 	add.w	sl, r4, #26
 8007ca4:	45c8      	cmp	r8, r9
 8007ca6:	dc09      	bgt.n	8007cbc <_printf_float+0x250>
 8007ca8:	6823      	ldr	r3, [r4, #0]
 8007caa:	079b      	lsls	r3, r3, #30
 8007cac:	f100 8103 	bmi.w	8007eb6 <_printf_float+0x44a>
 8007cb0:	68e0      	ldr	r0, [r4, #12]
 8007cb2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007cb4:	4298      	cmp	r0, r3
 8007cb6:	bfb8      	it	lt
 8007cb8:	4618      	movlt	r0, r3
 8007cba:	e734      	b.n	8007b26 <_printf_float+0xba>
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	4652      	mov	r2, sl
 8007cc0:	4631      	mov	r1, r6
 8007cc2:	4628      	mov	r0, r5
 8007cc4:	47b8      	blx	r7
 8007cc6:	3001      	adds	r0, #1
 8007cc8:	f43f af2b 	beq.w	8007b22 <_printf_float+0xb6>
 8007ccc:	f109 0901 	add.w	r9, r9, #1
 8007cd0:	e7e8      	b.n	8007ca4 <_printf_float+0x238>
 8007cd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	dc39      	bgt.n	8007d4c <_printf_float+0x2e0>
 8007cd8:	4a1b      	ldr	r2, [pc, #108]	@ (8007d48 <_printf_float+0x2dc>)
 8007cda:	2301      	movs	r3, #1
 8007cdc:	4631      	mov	r1, r6
 8007cde:	4628      	mov	r0, r5
 8007ce0:	47b8      	blx	r7
 8007ce2:	3001      	adds	r0, #1
 8007ce4:	f43f af1d 	beq.w	8007b22 <_printf_float+0xb6>
 8007ce8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007cec:	ea59 0303 	orrs.w	r3, r9, r3
 8007cf0:	d102      	bne.n	8007cf8 <_printf_float+0x28c>
 8007cf2:	6823      	ldr	r3, [r4, #0]
 8007cf4:	07d9      	lsls	r1, r3, #31
 8007cf6:	d5d7      	bpl.n	8007ca8 <_printf_float+0x23c>
 8007cf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cfc:	4631      	mov	r1, r6
 8007cfe:	4628      	mov	r0, r5
 8007d00:	47b8      	blx	r7
 8007d02:	3001      	adds	r0, #1
 8007d04:	f43f af0d 	beq.w	8007b22 <_printf_float+0xb6>
 8007d08:	f04f 0a00 	mov.w	sl, #0
 8007d0c:	f104 0b1a 	add.w	fp, r4, #26
 8007d10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d12:	425b      	negs	r3, r3
 8007d14:	4553      	cmp	r3, sl
 8007d16:	dc01      	bgt.n	8007d1c <_printf_float+0x2b0>
 8007d18:	464b      	mov	r3, r9
 8007d1a:	e793      	b.n	8007c44 <_printf_float+0x1d8>
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	465a      	mov	r2, fp
 8007d20:	4631      	mov	r1, r6
 8007d22:	4628      	mov	r0, r5
 8007d24:	47b8      	blx	r7
 8007d26:	3001      	adds	r0, #1
 8007d28:	f43f aefb 	beq.w	8007b22 <_printf_float+0xb6>
 8007d2c:	f10a 0a01 	add.w	sl, sl, #1
 8007d30:	e7ee      	b.n	8007d10 <_printf_float+0x2a4>
 8007d32:	bf00      	nop
 8007d34:	7fefffff 	.word	0x7fefffff
 8007d38:	0800a2e4 	.word	0x0800a2e4
 8007d3c:	0800a2e0 	.word	0x0800a2e0
 8007d40:	0800a2ec 	.word	0x0800a2ec
 8007d44:	0800a2e8 	.word	0x0800a2e8
 8007d48:	0800a2f0 	.word	0x0800a2f0
 8007d4c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007d4e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007d52:	4553      	cmp	r3, sl
 8007d54:	bfa8      	it	ge
 8007d56:	4653      	movge	r3, sl
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	4699      	mov	r9, r3
 8007d5c:	dc36      	bgt.n	8007dcc <_printf_float+0x360>
 8007d5e:	f04f 0b00 	mov.w	fp, #0
 8007d62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d66:	f104 021a 	add.w	r2, r4, #26
 8007d6a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007d6c:	9306      	str	r3, [sp, #24]
 8007d6e:	eba3 0309 	sub.w	r3, r3, r9
 8007d72:	455b      	cmp	r3, fp
 8007d74:	dc31      	bgt.n	8007dda <_printf_float+0x36e>
 8007d76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d78:	459a      	cmp	sl, r3
 8007d7a:	dc3a      	bgt.n	8007df2 <_printf_float+0x386>
 8007d7c:	6823      	ldr	r3, [r4, #0]
 8007d7e:	07da      	lsls	r2, r3, #31
 8007d80:	d437      	bmi.n	8007df2 <_printf_float+0x386>
 8007d82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d84:	ebaa 0903 	sub.w	r9, sl, r3
 8007d88:	9b06      	ldr	r3, [sp, #24]
 8007d8a:	ebaa 0303 	sub.w	r3, sl, r3
 8007d8e:	4599      	cmp	r9, r3
 8007d90:	bfa8      	it	ge
 8007d92:	4699      	movge	r9, r3
 8007d94:	f1b9 0f00 	cmp.w	r9, #0
 8007d98:	dc33      	bgt.n	8007e02 <_printf_float+0x396>
 8007d9a:	f04f 0800 	mov.w	r8, #0
 8007d9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007da2:	f104 0b1a 	add.w	fp, r4, #26
 8007da6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007da8:	ebaa 0303 	sub.w	r3, sl, r3
 8007dac:	eba3 0309 	sub.w	r3, r3, r9
 8007db0:	4543      	cmp	r3, r8
 8007db2:	f77f af79 	ble.w	8007ca8 <_printf_float+0x23c>
 8007db6:	2301      	movs	r3, #1
 8007db8:	465a      	mov	r2, fp
 8007dba:	4631      	mov	r1, r6
 8007dbc:	4628      	mov	r0, r5
 8007dbe:	47b8      	blx	r7
 8007dc0:	3001      	adds	r0, #1
 8007dc2:	f43f aeae 	beq.w	8007b22 <_printf_float+0xb6>
 8007dc6:	f108 0801 	add.w	r8, r8, #1
 8007dca:	e7ec      	b.n	8007da6 <_printf_float+0x33a>
 8007dcc:	4642      	mov	r2, r8
 8007dce:	4631      	mov	r1, r6
 8007dd0:	4628      	mov	r0, r5
 8007dd2:	47b8      	blx	r7
 8007dd4:	3001      	adds	r0, #1
 8007dd6:	d1c2      	bne.n	8007d5e <_printf_float+0x2f2>
 8007dd8:	e6a3      	b.n	8007b22 <_printf_float+0xb6>
 8007dda:	2301      	movs	r3, #1
 8007ddc:	4631      	mov	r1, r6
 8007dde:	4628      	mov	r0, r5
 8007de0:	9206      	str	r2, [sp, #24]
 8007de2:	47b8      	blx	r7
 8007de4:	3001      	adds	r0, #1
 8007de6:	f43f ae9c 	beq.w	8007b22 <_printf_float+0xb6>
 8007dea:	9a06      	ldr	r2, [sp, #24]
 8007dec:	f10b 0b01 	add.w	fp, fp, #1
 8007df0:	e7bb      	b.n	8007d6a <_printf_float+0x2fe>
 8007df2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007df6:	4631      	mov	r1, r6
 8007df8:	4628      	mov	r0, r5
 8007dfa:	47b8      	blx	r7
 8007dfc:	3001      	adds	r0, #1
 8007dfe:	d1c0      	bne.n	8007d82 <_printf_float+0x316>
 8007e00:	e68f      	b.n	8007b22 <_printf_float+0xb6>
 8007e02:	9a06      	ldr	r2, [sp, #24]
 8007e04:	464b      	mov	r3, r9
 8007e06:	4442      	add	r2, r8
 8007e08:	4631      	mov	r1, r6
 8007e0a:	4628      	mov	r0, r5
 8007e0c:	47b8      	blx	r7
 8007e0e:	3001      	adds	r0, #1
 8007e10:	d1c3      	bne.n	8007d9a <_printf_float+0x32e>
 8007e12:	e686      	b.n	8007b22 <_printf_float+0xb6>
 8007e14:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007e18:	f1ba 0f01 	cmp.w	sl, #1
 8007e1c:	dc01      	bgt.n	8007e22 <_printf_float+0x3b6>
 8007e1e:	07db      	lsls	r3, r3, #31
 8007e20:	d536      	bpl.n	8007e90 <_printf_float+0x424>
 8007e22:	2301      	movs	r3, #1
 8007e24:	4642      	mov	r2, r8
 8007e26:	4631      	mov	r1, r6
 8007e28:	4628      	mov	r0, r5
 8007e2a:	47b8      	blx	r7
 8007e2c:	3001      	adds	r0, #1
 8007e2e:	f43f ae78 	beq.w	8007b22 <_printf_float+0xb6>
 8007e32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e36:	4631      	mov	r1, r6
 8007e38:	4628      	mov	r0, r5
 8007e3a:	47b8      	blx	r7
 8007e3c:	3001      	adds	r0, #1
 8007e3e:	f43f ae70 	beq.w	8007b22 <_printf_float+0xb6>
 8007e42:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007e46:	2200      	movs	r2, #0
 8007e48:	2300      	movs	r3, #0
 8007e4a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007e4e:	f7f8 fe63 	bl	8000b18 <__aeabi_dcmpeq>
 8007e52:	b9c0      	cbnz	r0, 8007e86 <_printf_float+0x41a>
 8007e54:	4653      	mov	r3, sl
 8007e56:	f108 0201 	add.w	r2, r8, #1
 8007e5a:	4631      	mov	r1, r6
 8007e5c:	4628      	mov	r0, r5
 8007e5e:	47b8      	blx	r7
 8007e60:	3001      	adds	r0, #1
 8007e62:	d10c      	bne.n	8007e7e <_printf_float+0x412>
 8007e64:	e65d      	b.n	8007b22 <_printf_float+0xb6>
 8007e66:	2301      	movs	r3, #1
 8007e68:	465a      	mov	r2, fp
 8007e6a:	4631      	mov	r1, r6
 8007e6c:	4628      	mov	r0, r5
 8007e6e:	47b8      	blx	r7
 8007e70:	3001      	adds	r0, #1
 8007e72:	f43f ae56 	beq.w	8007b22 <_printf_float+0xb6>
 8007e76:	f108 0801 	add.w	r8, r8, #1
 8007e7a:	45d0      	cmp	r8, sl
 8007e7c:	dbf3      	blt.n	8007e66 <_printf_float+0x3fa>
 8007e7e:	464b      	mov	r3, r9
 8007e80:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007e84:	e6df      	b.n	8007c46 <_printf_float+0x1da>
 8007e86:	f04f 0800 	mov.w	r8, #0
 8007e8a:	f104 0b1a 	add.w	fp, r4, #26
 8007e8e:	e7f4      	b.n	8007e7a <_printf_float+0x40e>
 8007e90:	2301      	movs	r3, #1
 8007e92:	4642      	mov	r2, r8
 8007e94:	e7e1      	b.n	8007e5a <_printf_float+0x3ee>
 8007e96:	2301      	movs	r3, #1
 8007e98:	464a      	mov	r2, r9
 8007e9a:	4631      	mov	r1, r6
 8007e9c:	4628      	mov	r0, r5
 8007e9e:	47b8      	blx	r7
 8007ea0:	3001      	adds	r0, #1
 8007ea2:	f43f ae3e 	beq.w	8007b22 <_printf_float+0xb6>
 8007ea6:	f108 0801 	add.w	r8, r8, #1
 8007eaa:	68e3      	ldr	r3, [r4, #12]
 8007eac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007eae:	1a5b      	subs	r3, r3, r1
 8007eb0:	4543      	cmp	r3, r8
 8007eb2:	dcf0      	bgt.n	8007e96 <_printf_float+0x42a>
 8007eb4:	e6fc      	b.n	8007cb0 <_printf_float+0x244>
 8007eb6:	f04f 0800 	mov.w	r8, #0
 8007eba:	f104 0919 	add.w	r9, r4, #25
 8007ebe:	e7f4      	b.n	8007eaa <_printf_float+0x43e>

08007ec0 <_printf_common>:
 8007ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ec4:	4616      	mov	r6, r2
 8007ec6:	4698      	mov	r8, r3
 8007ec8:	688a      	ldr	r2, [r1, #8]
 8007eca:	690b      	ldr	r3, [r1, #16]
 8007ecc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	bfb8      	it	lt
 8007ed4:	4613      	movlt	r3, r2
 8007ed6:	6033      	str	r3, [r6, #0]
 8007ed8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007edc:	4607      	mov	r7, r0
 8007ede:	460c      	mov	r4, r1
 8007ee0:	b10a      	cbz	r2, 8007ee6 <_printf_common+0x26>
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	6033      	str	r3, [r6, #0]
 8007ee6:	6823      	ldr	r3, [r4, #0]
 8007ee8:	0699      	lsls	r1, r3, #26
 8007eea:	bf42      	ittt	mi
 8007eec:	6833      	ldrmi	r3, [r6, #0]
 8007eee:	3302      	addmi	r3, #2
 8007ef0:	6033      	strmi	r3, [r6, #0]
 8007ef2:	6825      	ldr	r5, [r4, #0]
 8007ef4:	f015 0506 	ands.w	r5, r5, #6
 8007ef8:	d106      	bne.n	8007f08 <_printf_common+0x48>
 8007efa:	f104 0a19 	add.w	sl, r4, #25
 8007efe:	68e3      	ldr	r3, [r4, #12]
 8007f00:	6832      	ldr	r2, [r6, #0]
 8007f02:	1a9b      	subs	r3, r3, r2
 8007f04:	42ab      	cmp	r3, r5
 8007f06:	dc26      	bgt.n	8007f56 <_printf_common+0x96>
 8007f08:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007f0c:	6822      	ldr	r2, [r4, #0]
 8007f0e:	3b00      	subs	r3, #0
 8007f10:	bf18      	it	ne
 8007f12:	2301      	movne	r3, #1
 8007f14:	0692      	lsls	r2, r2, #26
 8007f16:	d42b      	bmi.n	8007f70 <_printf_common+0xb0>
 8007f18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007f1c:	4641      	mov	r1, r8
 8007f1e:	4638      	mov	r0, r7
 8007f20:	47c8      	blx	r9
 8007f22:	3001      	adds	r0, #1
 8007f24:	d01e      	beq.n	8007f64 <_printf_common+0xa4>
 8007f26:	6823      	ldr	r3, [r4, #0]
 8007f28:	6922      	ldr	r2, [r4, #16]
 8007f2a:	f003 0306 	and.w	r3, r3, #6
 8007f2e:	2b04      	cmp	r3, #4
 8007f30:	bf02      	ittt	eq
 8007f32:	68e5      	ldreq	r5, [r4, #12]
 8007f34:	6833      	ldreq	r3, [r6, #0]
 8007f36:	1aed      	subeq	r5, r5, r3
 8007f38:	68a3      	ldr	r3, [r4, #8]
 8007f3a:	bf0c      	ite	eq
 8007f3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f40:	2500      	movne	r5, #0
 8007f42:	4293      	cmp	r3, r2
 8007f44:	bfc4      	itt	gt
 8007f46:	1a9b      	subgt	r3, r3, r2
 8007f48:	18ed      	addgt	r5, r5, r3
 8007f4a:	2600      	movs	r6, #0
 8007f4c:	341a      	adds	r4, #26
 8007f4e:	42b5      	cmp	r5, r6
 8007f50:	d11a      	bne.n	8007f88 <_printf_common+0xc8>
 8007f52:	2000      	movs	r0, #0
 8007f54:	e008      	b.n	8007f68 <_printf_common+0xa8>
 8007f56:	2301      	movs	r3, #1
 8007f58:	4652      	mov	r2, sl
 8007f5a:	4641      	mov	r1, r8
 8007f5c:	4638      	mov	r0, r7
 8007f5e:	47c8      	blx	r9
 8007f60:	3001      	adds	r0, #1
 8007f62:	d103      	bne.n	8007f6c <_printf_common+0xac>
 8007f64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f6c:	3501      	adds	r5, #1
 8007f6e:	e7c6      	b.n	8007efe <_printf_common+0x3e>
 8007f70:	18e1      	adds	r1, r4, r3
 8007f72:	1c5a      	adds	r2, r3, #1
 8007f74:	2030      	movs	r0, #48	@ 0x30
 8007f76:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007f7a:	4422      	add	r2, r4
 8007f7c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007f80:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007f84:	3302      	adds	r3, #2
 8007f86:	e7c7      	b.n	8007f18 <_printf_common+0x58>
 8007f88:	2301      	movs	r3, #1
 8007f8a:	4622      	mov	r2, r4
 8007f8c:	4641      	mov	r1, r8
 8007f8e:	4638      	mov	r0, r7
 8007f90:	47c8      	blx	r9
 8007f92:	3001      	adds	r0, #1
 8007f94:	d0e6      	beq.n	8007f64 <_printf_common+0xa4>
 8007f96:	3601      	adds	r6, #1
 8007f98:	e7d9      	b.n	8007f4e <_printf_common+0x8e>
	...

08007f9c <_printf_i>:
 8007f9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007fa0:	7e0f      	ldrb	r7, [r1, #24]
 8007fa2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007fa4:	2f78      	cmp	r7, #120	@ 0x78
 8007fa6:	4691      	mov	r9, r2
 8007fa8:	4680      	mov	r8, r0
 8007faa:	460c      	mov	r4, r1
 8007fac:	469a      	mov	sl, r3
 8007fae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007fb2:	d807      	bhi.n	8007fc4 <_printf_i+0x28>
 8007fb4:	2f62      	cmp	r7, #98	@ 0x62
 8007fb6:	d80a      	bhi.n	8007fce <_printf_i+0x32>
 8007fb8:	2f00      	cmp	r7, #0
 8007fba:	f000 80d1 	beq.w	8008160 <_printf_i+0x1c4>
 8007fbe:	2f58      	cmp	r7, #88	@ 0x58
 8007fc0:	f000 80b8 	beq.w	8008134 <_printf_i+0x198>
 8007fc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007fc8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007fcc:	e03a      	b.n	8008044 <_printf_i+0xa8>
 8007fce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007fd2:	2b15      	cmp	r3, #21
 8007fd4:	d8f6      	bhi.n	8007fc4 <_printf_i+0x28>
 8007fd6:	a101      	add	r1, pc, #4	@ (adr r1, 8007fdc <_printf_i+0x40>)
 8007fd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007fdc:	08008035 	.word	0x08008035
 8007fe0:	08008049 	.word	0x08008049
 8007fe4:	08007fc5 	.word	0x08007fc5
 8007fe8:	08007fc5 	.word	0x08007fc5
 8007fec:	08007fc5 	.word	0x08007fc5
 8007ff0:	08007fc5 	.word	0x08007fc5
 8007ff4:	08008049 	.word	0x08008049
 8007ff8:	08007fc5 	.word	0x08007fc5
 8007ffc:	08007fc5 	.word	0x08007fc5
 8008000:	08007fc5 	.word	0x08007fc5
 8008004:	08007fc5 	.word	0x08007fc5
 8008008:	08008147 	.word	0x08008147
 800800c:	08008073 	.word	0x08008073
 8008010:	08008101 	.word	0x08008101
 8008014:	08007fc5 	.word	0x08007fc5
 8008018:	08007fc5 	.word	0x08007fc5
 800801c:	08008169 	.word	0x08008169
 8008020:	08007fc5 	.word	0x08007fc5
 8008024:	08008073 	.word	0x08008073
 8008028:	08007fc5 	.word	0x08007fc5
 800802c:	08007fc5 	.word	0x08007fc5
 8008030:	08008109 	.word	0x08008109
 8008034:	6833      	ldr	r3, [r6, #0]
 8008036:	1d1a      	adds	r2, r3, #4
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	6032      	str	r2, [r6, #0]
 800803c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008040:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008044:	2301      	movs	r3, #1
 8008046:	e09c      	b.n	8008182 <_printf_i+0x1e6>
 8008048:	6833      	ldr	r3, [r6, #0]
 800804a:	6820      	ldr	r0, [r4, #0]
 800804c:	1d19      	adds	r1, r3, #4
 800804e:	6031      	str	r1, [r6, #0]
 8008050:	0606      	lsls	r6, r0, #24
 8008052:	d501      	bpl.n	8008058 <_printf_i+0xbc>
 8008054:	681d      	ldr	r5, [r3, #0]
 8008056:	e003      	b.n	8008060 <_printf_i+0xc4>
 8008058:	0645      	lsls	r5, r0, #25
 800805a:	d5fb      	bpl.n	8008054 <_printf_i+0xb8>
 800805c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008060:	2d00      	cmp	r5, #0
 8008062:	da03      	bge.n	800806c <_printf_i+0xd0>
 8008064:	232d      	movs	r3, #45	@ 0x2d
 8008066:	426d      	negs	r5, r5
 8008068:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800806c:	4858      	ldr	r0, [pc, #352]	@ (80081d0 <_printf_i+0x234>)
 800806e:	230a      	movs	r3, #10
 8008070:	e011      	b.n	8008096 <_printf_i+0xfa>
 8008072:	6821      	ldr	r1, [r4, #0]
 8008074:	6833      	ldr	r3, [r6, #0]
 8008076:	0608      	lsls	r0, r1, #24
 8008078:	f853 5b04 	ldr.w	r5, [r3], #4
 800807c:	d402      	bmi.n	8008084 <_printf_i+0xe8>
 800807e:	0649      	lsls	r1, r1, #25
 8008080:	bf48      	it	mi
 8008082:	b2ad      	uxthmi	r5, r5
 8008084:	2f6f      	cmp	r7, #111	@ 0x6f
 8008086:	4852      	ldr	r0, [pc, #328]	@ (80081d0 <_printf_i+0x234>)
 8008088:	6033      	str	r3, [r6, #0]
 800808a:	bf14      	ite	ne
 800808c:	230a      	movne	r3, #10
 800808e:	2308      	moveq	r3, #8
 8008090:	2100      	movs	r1, #0
 8008092:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008096:	6866      	ldr	r6, [r4, #4]
 8008098:	60a6      	str	r6, [r4, #8]
 800809a:	2e00      	cmp	r6, #0
 800809c:	db05      	blt.n	80080aa <_printf_i+0x10e>
 800809e:	6821      	ldr	r1, [r4, #0]
 80080a0:	432e      	orrs	r6, r5
 80080a2:	f021 0104 	bic.w	r1, r1, #4
 80080a6:	6021      	str	r1, [r4, #0]
 80080a8:	d04b      	beq.n	8008142 <_printf_i+0x1a6>
 80080aa:	4616      	mov	r6, r2
 80080ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80080b0:	fb03 5711 	mls	r7, r3, r1, r5
 80080b4:	5dc7      	ldrb	r7, [r0, r7]
 80080b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80080ba:	462f      	mov	r7, r5
 80080bc:	42bb      	cmp	r3, r7
 80080be:	460d      	mov	r5, r1
 80080c0:	d9f4      	bls.n	80080ac <_printf_i+0x110>
 80080c2:	2b08      	cmp	r3, #8
 80080c4:	d10b      	bne.n	80080de <_printf_i+0x142>
 80080c6:	6823      	ldr	r3, [r4, #0]
 80080c8:	07df      	lsls	r7, r3, #31
 80080ca:	d508      	bpl.n	80080de <_printf_i+0x142>
 80080cc:	6923      	ldr	r3, [r4, #16]
 80080ce:	6861      	ldr	r1, [r4, #4]
 80080d0:	4299      	cmp	r1, r3
 80080d2:	bfde      	ittt	le
 80080d4:	2330      	movle	r3, #48	@ 0x30
 80080d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80080da:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80080de:	1b92      	subs	r2, r2, r6
 80080e0:	6122      	str	r2, [r4, #16]
 80080e2:	f8cd a000 	str.w	sl, [sp]
 80080e6:	464b      	mov	r3, r9
 80080e8:	aa03      	add	r2, sp, #12
 80080ea:	4621      	mov	r1, r4
 80080ec:	4640      	mov	r0, r8
 80080ee:	f7ff fee7 	bl	8007ec0 <_printf_common>
 80080f2:	3001      	adds	r0, #1
 80080f4:	d14a      	bne.n	800818c <_printf_i+0x1f0>
 80080f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80080fa:	b004      	add	sp, #16
 80080fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008100:	6823      	ldr	r3, [r4, #0]
 8008102:	f043 0320 	orr.w	r3, r3, #32
 8008106:	6023      	str	r3, [r4, #0]
 8008108:	4832      	ldr	r0, [pc, #200]	@ (80081d4 <_printf_i+0x238>)
 800810a:	2778      	movs	r7, #120	@ 0x78
 800810c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008110:	6823      	ldr	r3, [r4, #0]
 8008112:	6831      	ldr	r1, [r6, #0]
 8008114:	061f      	lsls	r7, r3, #24
 8008116:	f851 5b04 	ldr.w	r5, [r1], #4
 800811a:	d402      	bmi.n	8008122 <_printf_i+0x186>
 800811c:	065f      	lsls	r7, r3, #25
 800811e:	bf48      	it	mi
 8008120:	b2ad      	uxthmi	r5, r5
 8008122:	6031      	str	r1, [r6, #0]
 8008124:	07d9      	lsls	r1, r3, #31
 8008126:	bf44      	itt	mi
 8008128:	f043 0320 	orrmi.w	r3, r3, #32
 800812c:	6023      	strmi	r3, [r4, #0]
 800812e:	b11d      	cbz	r5, 8008138 <_printf_i+0x19c>
 8008130:	2310      	movs	r3, #16
 8008132:	e7ad      	b.n	8008090 <_printf_i+0xf4>
 8008134:	4826      	ldr	r0, [pc, #152]	@ (80081d0 <_printf_i+0x234>)
 8008136:	e7e9      	b.n	800810c <_printf_i+0x170>
 8008138:	6823      	ldr	r3, [r4, #0]
 800813a:	f023 0320 	bic.w	r3, r3, #32
 800813e:	6023      	str	r3, [r4, #0]
 8008140:	e7f6      	b.n	8008130 <_printf_i+0x194>
 8008142:	4616      	mov	r6, r2
 8008144:	e7bd      	b.n	80080c2 <_printf_i+0x126>
 8008146:	6833      	ldr	r3, [r6, #0]
 8008148:	6825      	ldr	r5, [r4, #0]
 800814a:	6961      	ldr	r1, [r4, #20]
 800814c:	1d18      	adds	r0, r3, #4
 800814e:	6030      	str	r0, [r6, #0]
 8008150:	062e      	lsls	r6, r5, #24
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	d501      	bpl.n	800815a <_printf_i+0x1be>
 8008156:	6019      	str	r1, [r3, #0]
 8008158:	e002      	b.n	8008160 <_printf_i+0x1c4>
 800815a:	0668      	lsls	r0, r5, #25
 800815c:	d5fb      	bpl.n	8008156 <_printf_i+0x1ba>
 800815e:	8019      	strh	r1, [r3, #0]
 8008160:	2300      	movs	r3, #0
 8008162:	6123      	str	r3, [r4, #16]
 8008164:	4616      	mov	r6, r2
 8008166:	e7bc      	b.n	80080e2 <_printf_i+0x146>
 8008168:	6833      	ldr	r3, [r6, #0]
 800816a:	1d1a      	adds	r2, r3, #4
 800816c:	6032      	str	r2, [r6, #0]
 800816e:	681e      	ldr	r6, [r3, #0]
 8008170:	6862      	ldr	r2, [r4, #4]
 8008172:	2100      	movs	r1, #0
 8008174:	4630      	mov	r0, r6
 8008176:	f7f8 f853 	bl	8000220 <memchr>
 800817a:	b108      	cbz	r0, 8008180 <_printf_i+0x1e4>
 800817c:	1b80      	subs	r0, r0, r6
 800817e:	6060      	str	r0, [r4, #4]
 8008180:	6863      	ldr	r3, [r4, #4]
 8008182:	6123      	str	r3, [r4, #16]
 8008184:	2300      	movs	r3, #0
 8008186:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800818a:	e7aa      	b.n	80080e2 <_printf_i+0x146>
 800818c:	6923      	ldr	r3, [r4, #16]
 800818e:	4632      	mov	r2, r6
 8008190:	4649      	mov	r1, r9
 8008192:	4640      	mov	r0, r8
 8008194:	47d0      	blx	sl
 8008196:	3001      	adds	r0, #1
 8008198:	d0ad      	beq.n	80080f6 <_printf_i+0x15a>
 800819a:	6823      	ldr	r3, [r4, #0]
 800819c:	079b      	lsls	r3, r3, #30
 800819e:	d413      	bmi.n	80081c8 <_printf_i+0x22c>
 80081a0:	68e0      	ldr	r0, [r4, #12]
 80081a2:	9b03      	ldr	r3, [sp, #12]
 80081a4:	4298      	cmp	r0, r3
 80081a6:	bfb8      	it	lt
 80081a8:	4618      	movlt	r0, r3
 80081aa:	e7a6      	b.n	80080fa <_printf_i+0x15e>
 80081ac:	2301      	movs	r3, #1
 80081ae:	4632      	mov	r2, r6
 80081b0:	4649      	mov	r1, r9
 80081b2:	4640      	mov	r0, r8
 80081b4:	47d0      	blx	sl
 80081b6:	3001      	adds	r0, #1
 80081b8:	d09d      	beq.n	80080f6 <_printf_i+0x15a>
 80081ba:	3501      	adds	r5, #1
 80081bc:	68e3      	ldr	r3, [r4, #12]
 80081be:	9903      	ldr	r1, [sp, #12]
 80081c0:	1a5b      	subs	r3, r3, r1
 80081c2:	42ab      	cmp	r3, r5
 80081c4:	dcf2      	bgt.n	80081ac <_printf_i+0x210>
 80081c6:	e7eb      	b.n	80081a0 <_printf_i+0x204>
 80081c8:	2500      	movs	r5, #0
 80081ca:	f104 0619 	add.w	r6, r4, #25
 80081ce:	e7f5      	b.n	80081bc <_printf_i+0x220>
 80081d0:	0800a2f2 	.word	0x0800a2f2
 80081d4:	0800a303 	.word	0x0800a303

080081d8 <std>:
 80081d8:	2300      	movs	r3, #0
 80081da:	b510      	push	{r4, lr}
 80081dc:	4604      	mov	r4, r0
 80081de:	e9c0 3300 	strd	r3, r3, [r0]
 80081e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80081e6:	6083      	str	r3, [r0, #8]
 80081e8:	8181      	strh	r1, [r0, #12]
 80081ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80081ec:	81c2      	strh	r2, [r0, #14]
 80081ee:	6183      	str	r3, [r0, #24]
 80081f0:	4619      	mov	r1, r3
 80081f2:	2208      	movs	r2, #8
 80081f4:	305c      	adds	r0, #92	@ 0x5c
 80081f6:	f000 f8f4 	bl	80083e2 <memset>
 80081fa:	4b0d      	ldr	r3, [pc, #52]	@ (8008230 <std+0x58>)
 80081fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80081fe:	4b0d      	ldr	r3, [pc, #52]	@ (8008234 <std+0x5c>)
 8008200:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008202:	4b0d      	ldr	r3, [pc, #52]	@ (8008238 <std+0x60>)
 8008204:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008206:	4b0d      	ldr	r3, [pc, #52]	@ (800823c <std+0x64>)
 8008208:	6323      	str	r3, [r4, #48]	@ 0x30
 800820a:	4b0d      	ldr	r3, [pc, #52]	@ (8008240 <std+0x68>)
 800820c:	6224      	str	r4, [r4, #32]
 800820e:	429c      	cmp	r4, r3
 8008210:	d006      	beq.n	8008220 <std+0x48>
 8008212:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008216:	4294      	cmp	r4, r2
 8008218:	d002      	beq.n	8008220 <std+0x48>
 800821a:	33d0      	adds	r3, #208	@ 0xd0
 800821c:	429c      	cmp	r4, r3
 800821e:	d105      	bne.n	800822c <std+0x54>
 8008220:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008228:	f000 b958 	b.w	80084dc <__retarget_lock_init_recursive>
 800822c:	bd10      	pop	{r4, pc}
 800822e:	bf00      	nop
 8008230:	0800835d 	.word	0x0800835d
 8008234:	0800837f 	.word	0x0800837f
 8008238:	080083b7 	.word	0x080083b7
 800823c:	080083db 	.word	0x080083db
 8008240:	200005d4 	.word	0x200005d4

08008244 <stdio_exit_handler>:
 8008244:	4a02      	ldr	r2, [pc, #8]	@ (8008250 <stdio_exit_handler+0xc>)
 8008246:	4903      	ldr	r1, [pc, #12]	@ (8008254 <stdio_exit_handler+0x10>)
 8008248:	4803      	ldr	r0, [pc, #12]	@ (8008258 <stdio_exit_handler+0x14>)
 800824a:	f000 b869 	b.w	8008320 <_fwalk_sglue>
 800824e:	bf00      	nop
 8008250:	20000058 	.word	0x20000058
 8008254:	08009bad 	.word	0x08009bad
 8008258:	20000068 	.word	0x20000068

0800825c <cleanup_stdio>:
 800825c:	6841      	ldr	r1, [r0, #4]
 800825e:	4b0c      	ldr	r3, [pc, #48]	@ (8008290 <cleanup_stdio+0x34>)
 8008260:	4299      	cmp	r1, r3
 8008262:	b510      	push	{r4, lr}
 8008264:	4604      	mov	r4, r0
 8008266:	d001      	beq.n	800826c <cleanup_stdio+0x10>
 8008268:	f001 fca0 	bl	8009bac <_fflush_r>
 800826c:	68a1      	ldr	r1, [r4, #8]
 800826e:	4b09      	ldr	r3, [pc, #36]	@ (8008294 <cleanup_stdio+0x38>)
 8008270:	4299      	cmp	r1, r3
 8008272:	d002      	beq.n	800827a <cleanup_stdio+0x1e>
 8008274:	4620      	mov	r0, r4
 8008276:	f001 fc99 	bl	8009bac <_fflush_r>
 800827a:	68e1      	ldr	r1, [r4, #12]
 800827c:	4b06      	ldr	r3, [pc, #24]	@ (8008298 <cleanup_stdio+0x3c>)
 800827e:	4299      	cmp	r1, r3
 8008280:	d004      	beq.n	800828c <cleanup_stdio+0x30>
 8008282:	4620      	mov	r0, r4
 8008284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008288:	f001 bc90 	b.w	8009bac <_fflush_r>
 800828c:	bd10      	pop	{r4, pc}
 800828e:	bf00      	nop
 8008290:	200005d4 	.word	0x200005d4
 8008294:	2000063c 	.word	0x2000063c
 8008298:	200006a4 	.word	0x200006a4

0800829c <global_stdio_init.part.0>:
 800829c:	b510      	push	{r4, lr}
 800829e:	4b0b      	ldr	r3, [pc, #44]	@ (80082cc <global_stdio_init.part.0+0x30>)
 80082a0:	4c0b      	ldr	r4, [pc, #44]	@ (80082d0 <global_stdio_init.part.0+0x34>)
 80082a2:	4a0c      	ldr	r2, [pc, #48]	@ (80082d4 <global_stdio_init.part.0+0x38>)
 80082a4:	601a      	str	r2, [r3, #0]
 80082a6:	4620      	mov	r0, r4
 80082a8:	2200      	movs	r2, #0
 80082aa:	2104      	movs	r1, #4
 80082ac:	f7ff ff94 	bl	80081d8 <std>
 80082b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80082b4:	2201      	movs	r2, #1
 80082b6:	2109      	movs	r1, #9
 80082b8:	f7ff ff8e 	bl	80081d8 <std>
 80082bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80082c0:	2202      	movs	r2, #2
 80082c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082c6:	2112      	movs	r1, #18
 80082c8:	f7ff bf86 	b.w	80081d8 <std>
 80082cc:	2000070c 	.word	0x2000070c
 80082d0:	200005d4 	.word	0x200005d4
 80082d4:	08008245 	.word	0x08008245

080082d8 <__sfp_lock_acquire>:
 80082d8:	4801      	ldr	r0, [pc, #4]	@ (80082e0 <__sfp_lock_acquire+0x8>)
 80082da:	f000 b900 	b.w	80084de <__retarget_lock_acquire_recursive>
 80082de:	bf00      	nop
 80082e0:	20000715 	.word	0x20000715

080082e4 <__sfp_lock_release>:
 80082e4:	4801      	ldr	r0, [pc, #4]	@ (80082ec <__sfp_lock_release+0x8>)
 80082e6:	f000 b8fb 	b.w	80084e0 <__retarget_lock_release_recursive>
 80082ea:	bf00      	nop
 80082ec:	20000715 	.word	0x20000715

080082f0 <__sinit>:
 80082f0:	b510      	push	{r4, lr}
 80082f2:	4604      	mov	r4, r0
 80082f4:	f7ff fff0 	bl	80082d8 <__sfp_lock_acquire>
 80082f8:	6a23      	ldr	r3, [r4, #32]
 80082fa:	b11b      	cbz	r3, 8008304 <__sinit+0x14>
 80082fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008300:	f7ff bff0 	b.w	80082e4 <__sfp_lock_release>
 8008304:	4b04      	ldr	r3, [pc, #16]	@ (8008318 <__sinit+0x28>)
 8008306:	6223      	str	r3, [r4, #32]
 8008308:	4b04      	ldr	r3, [pc, #16]	@ (800831c <__sinit+0x2c>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d1f5      	bne.n	80082fc <__sinit+0xc>
 8008310:	f7ff ffc4 	bl	800829c <global_stdio_init.part.0>
 8008314:	e7f2      	b.n	80082fc <__sinit+0xc>
 8008316:	bf00      	nop
 8008318:	0800825d 	.word	0x0800825d
 800831c:	2000070c 	.word	0x2000070c

08008320 <_fwalk_sglue>:
 8008320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008324:	4607      	mov	r7, r0
 8008326:	4688      	mov	r8, r1
 8008328:	4614      	mov	r4, r2
 800832a:	2600      	movs	r6, #0
 800832c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008330:	f1b9 0901 	subs.w	r9, r9, #1
 8008334:	d505      	bpl.n	8008342 <_fwalk_sglue+0x22>
 8008336:	6824      	ldr	r4, [r4, #0]
 8008338:	2c00      	cmp	r4, #0
 800833a:	d1f7      	bne.n	800832c <_fwalk_sglue+0xc>
 800833c:	4630      	mov	r0, r6
 800833e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008342:	89ab      	ldrh	r3, [r5, #12]
 8008344:	2b01      	cmp	r3, #1
 8008346:	d907      	bls.n	8008358 <_fwalk_sglue+0x38>
 8008348:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800834c:	3301      	adds	r3, #1
 800834e:	d003      	beq.n	8008358 <_fwalk_sglue+0x38>
 8008350:	4629      	mov	r1, r5
 8008352:	4638      	mov	r0, r7
 8008354:	47c0      	blx	r8
 8008356:	4306      	orrs	r6, r0
 8008358:	3568      	adds	r5, #104	@ 0x68
 800835a:	e7e9      	b.n	8008330 <_fwalk_sglue+0x10>

0800835c <__sread>:
 800835c:	b510      	push	{r4, lr}
 800835e:	460c      	mov	r4, r1
 8008360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008364:	f000 f86c 	bl	8008440 <_read_r>
 8008368:	2800      	cmp	r0, #0
 800836a:	bfab      	itete	ge
 800836c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800836e:	89a3      	ldrhlt	r3, [r4, #12]
 8008370:	181b      	addge	r3, r3, r0
 8008372:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008376:	bfac      	ite	ge
 8008378:	6563      	strge	r3, [r4, #84]	@ 0x54
 800837a:	81a3      	strhlt	r3, [r4, #12]
 800837c:	bd10      	pop	{r4, pc}

0800837e <__swrite>:
 800837e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008382:	461f      	mov	r7, r3
 8008384:	898b      	ldrh	r3, [r1, #12]
 8008386:	05db      	lsls	r3, r3, #23
 8008388:	4605      	mov	r5, r0
 800838a:	460c      	mov	r4, r1
 800838c:	4616      	mov	r6, r2
 800838e:	d505      	bpl.n	800839c <__swrite+0x1e>
 8008390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008394:	2302      	movs	r3, #2
 8008396:	2200      	movs	r2, #0
 8008398:	f000 f840 	bl	800841c <_lseek_r>
 800839c:	89a3      	ldrh	r3, [r4, #12]
 800839e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80083a6:	81a3      	strh	r3, [r4, #12]
 80083a8:	4632      	mov	r2, r6
 80083aa:	463b      	mov	r3, r7
 80083ac:	4628      	mov	r0, r5
 80083ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083b2:	f000 b857 	b.w	8008464 <_write_r>

080083b6 <__sseek>:
 80083b6:	b510      	push	{r4, lr}
 80083b8:	460c      	mov	r4, r1
 80083ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083be:	f000 f82d 	bl	800841c <_lseek_r>
 80083c2:	1c43      	adds	r3, r0, #1
 80083c4:	89a3      	ldrh	r3, [r4, #12]
 80083c6:	bf15      	itete	ne
 80083c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80083ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80083ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80083d2:	81a3      	strheq	r3, [r4, #12]
 80083d4:	bf18      	it	ne
 80083d6:	81a3      	strhne	r3, [r4, #12]
 80083d8:	bd10      	pop	{r4, pc}

080083da <__sclose>:
 80083da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083de:	f000 b80d 	b.w	80083fc <_close_r>

080083e2 <memset>:
 80083e2:	4402      	add	r2, r0
 80083e4:	4603      	mov	r3, r0
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d100      	bne.n	80083ec <memset+0xa>
 80083ea:	4770      	bx	lr
 80083ec:	f803 1b01 	strb.w	r1, [r3], #1
 80083f0:	e7f9      	b.n	80083e6 <memset+0x4>
	...

080083f4 <_localeconv_r>:
 80083f4:	4800      	ldr	r0, [pc, #0]	@ (80083f8 <_localeconv_r+0x4>)
 80083f6:	4770      	bx	lr
 80083f8:	200001a4 	.word	0x200001a4

080083fc <_close_r>:
 80083fc:	b538      	push	{r3, r4, r5, lr}
 80083fe:	4d06      	ldr	r5, [pc, #24]	@ (8008418 <_close_r+0x1c>)
 8008400:	2300      	movs	r3, #0
 8008402:	4604      	mov	r4, r0
 8008404:	4608      	mov	r0, r1
 8008406:	602b      	str	r3, [r5, #0]
 8008408:	f7fa f99e 	bl	8002748 <_close>
 800840c:	1c43      	adds	r3, r0, #1
 800840e:	d102      	bne.n	8008416 <_close_r+0x1a>
 8008410:	682b      	ldr	r3, [r5, #0]
 8008412:	b103      	cbz	r3, 8008416 <_close_r+0x1a>
 8008414:	6023      	str	r3, [r4, #0]
 8008416:	bd38      	pop	{r3, r4, r5, pc}
 8008418:	20000710 	.word	0x20000710

0800841c <_lseek_r>:
 800841c:	b538      	push	{r3, r4, r5, lr}
 800841e:	4d07      	ldr	r5, [pc, #28]	@ (800843c <_lseek_r+0x20>)
 8008420:	4604      	mov	r4, r0
 8008422:	4608      	mov	r0, r1
 8008424:	4611      	mov	r1, r2
 8008426:	2200      	movs	r2, #0
 8008428:	602a      	str	r2, [r5, #0]
 800842a:	461a      	mov	r2, r3
 800842c:	f7fa f9b3 	bl	8002796 <_lseek>
 8008430:	1c43      	adds	r3, r0, #1
 8008432:	d102      	bne.n	800843a <_lseek_r+0x1e>
 8008434:	682b      	ldr	r3, [r5, #0]
 8008436:	b103      	cbz	r3, 800843a <_lseek_r+0x1e>
 8008438:	6023      	str	r3, [r4, #0]
 800843a:	bd38      	pop	{r3, r4, r5, pc}
 800843c:	20000710 	.word	0x20000710

08008440 <_read_r>:
 8008440:	b538      	push	{r3, r4, r5, lr}
 8008442:	4d07      	ldr	r5, [pc, #28]	@ (8008460 <_read_r+0x20>)
 8008444:	4604      	mov	r4, r0
 8008446:	4608      	mov	r0, r1
 8008448:	4611      	mov	r1, r2
 800844a:	2200      	movs	r2, #0
 800844c:	602a      	str	r2, [r5, #0]
 800844e:	461a      	mov	r2, r3
 8008450:	f7fa f941 	bl	80026d6 <_read>
 8008454:	1c43      	adds	r3, r0, #1
 8008456:	d102      	bne.n	800845e <_read_r+0x1e>
 8008458:	682b      	ldr	r3, [r5, #0]
 800845a:	b103      	cbz	r3, 800845e <_read_r+0x1e>
 800845c:	6023      	str	r3, [r4, #0]
 800845e:	bd38      	pop	{r3, r4, r5, pc}
 8008460:	20000710 	.word	0x20000710

08008464 <_write_r>:
 8008464:	b538      	push	{r3, r4, r5, lr}
 8008466:	4d07      	ldr	r5, [pc, #28]	@ (8008484 <_write_r+0x20>)
 8008468:	4604      	mov	r4, r0
 800846a:	4608      	mov	r0, r1
 800846c:	4611      	mov	r1, r2
 800846e:	2200      	movs	r2, #0
 8008470:	602a      	str	r2, [r5, #0]
 8008472:	461a      	mov	r2, r3
 8008474:	f7fa f94c 	bl	8002710 <_write>
 8008478:	1c43      	adds	r3, r0, #1
 800847a:	d102      	bne.n	8008482 <_write_r+0x1e>
 800847c:	682b      	ldr	r3, [r5, #0]
 800847e:	b103      	cbz	r3, 8008482 <_write_r+0x1e>
 8008480:	6023      	str	r3, [r4, #0]
 8008482:	bd38      	pop	{r3, r4, r5, pc}
 8008484:	20000710 	.word	0x20000710

08008488 <__errno>:
 8008488:	4b01      	ldr	r3, [pc, #4]	@ (8008490 <__errno+0x8>)
 800848a:	6818      	ldr	r0, [r3, #0]
 800848c:	4770      	bx	lr
 800848e:	bf00      	nop
 8008490:	20000064 	.word	0x20000064

08008494 <__libc_init_array>:
 8008494:	b570      	push	{r4, r5, r6, lr}
 8008496:	4d0d      	ldr	r5, [pc, #52]	@ (80084cc <__libc_init_array+0x38>)
 8008498:	4c0d      	ldr	r4, [pc, #52]	@ (80084d0 <__libc_init_array+0x3c>)
 800849a:	1b64      	subs	r4, r4, r5
 800849c:	10a4      	asrs	r4, r4, #2
 800849e:	2600      	movs	r6, #0
 80084a0:	42a6      	cmp	r6, r4
 80084a2:	d109      	bne.n	80084b8 <__libc_init_array+0x24>
 80084a4:	4d0b      	ldr	r5, [pc, #44]	@ (80084d4 <__libc_init_array+0x40>)
 80084a6:	4c0c      	ldr	r4, [pc, #48]	@ (80084d8 <__libc_init_array+0x44>)
 80084a8:	f001 fec0 	bl	800a22c <_init>
 80084ac:	1b64      	subs	r4, r4, r5
 80084ae:	10a4      	asrs	r4, r4, #2
 80084b0:	2600      	movs	r6, #0
 80084b2:	42a6      	cmp	r6, r4
 80084b4:	d105      	bne.n	80084c2 <__libc_init_array+0x2e>
 80084b6:	bd70      	pop	{r4, r5, r6, pc}
 80084b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80084bc:	4798      	blx	r3
 80084be:	3601      	adds	r6, #1
 80084c0:	e7ee      	b.n	80084a0 <__libc_init_array+0xc>
 80084c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80084c6:	4798      	blx	r3
 80084c8:	3601      	adds	r6, #1
 80084ca:	e7f2      	b.n	80084b2 <__libc_init_array+0x1e>
 80084cc:	0800a65c 	.word	0x0800a65c
 80084d0:	0800a65c 	.word	0x0800a65c
 80084d4:	0800a65c 	.word	0x0800a65c
 80084d8:	0800a660 	.word	0x0800a660

080084dc <__retarget_lock_init_recursive>:
 80084dc:	4770      	bx	lr

080084de <__retarget_lock_acquire_recursive>:
 80084de:	4770      	bx	lr

080084e0 <__retarget_lock_release_recursive>:
 80084e0:	4770      	bx	lr

080084e2 <memcpy>:
 80084e2:	440a      	add	r2, r1
 80084e4:	4291      	cmp	r1, r2
 80084e6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80084ea:	d100      	bne.n	80084ee <memcpy+0xc>
 80084ec:	4770      	bx	lr
 80084ee:	b510      	push	{r4, lr}
 80084f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084f8:	4291      	cmp	r1, r2
 80084fa:	d1f9      	bne.n	80084f0 <memcpy+0xe>
 80084fc:	bd10      	pop	{r4, pc}

080084fe <quorem>:
 80084fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008502:	6903      	ldr	r3, [r0, #16]
 8008504:	690c      	ldr	r4, [r1, #16]
 8008506:	42a3      	cmp	r3, r4
 8008508:	4607      	mov	r7, r0
 800850a:	db7e      	blt.n	800860a <quorem+0x10c>
 800850c:	3c01      	subs	r4, #1
 800850e:	f101 0814 	add.w	r8, r1, #20
 8008512:	00a3      	lsls	r3, r4, #2
 8008514:	f100 0514 	add.w	r5, r0, #20
 8008518:	9300      	str	r3, [sp, #0]
 800851a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800851e:	9301      	str	r3, [sp, #4]
 8008520:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008524:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008528:	3301      	adds	r3, #1
 800852a:	429a      	cmp	r2, r3
 800852c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008530:	fbb2 f6f3 	udiv	r6, r2, r3
 8008534:	d32e      	bcc.n	8008594 <quorem+0x96>
 8008536:	f04f 0a00 	mov.w	sl, #0
 800853a:	46c4      	mov	ip, r8
 800853c:	46ae      	mov	lr, r5
 800853e:	46d3      	mov	fp, sl
 8008540:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008544:	b298      	uxth	r0, r3
 8008546:	fb06 a000 	mla	r0, r6, r0, sl
 800854a:	0c02      	lsrs	r2, r0, #16
 800854c:	0c1b      	lsrs	r3, r3, #16
 800854e:	fb06 2303 	mla	r3, r6, r3, r2
 8008552:	f8de 2000 	ldr.w	r2, [lr]
 8008556:	b280      	uxth	r0, r0
 8008558:	b292      	uxth	r2, r2
 800855a:	1a12      	subs	r2, r2, r0
 800855c:	445a      	add	r2, fp
 800855e:	f8de 0000 	ldr.w	r0, [lr]
 8008562:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008566:	b29b      	uxth	r3, r3
 8008568:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800856c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008570:	b292      	uxth	r2, r2
 8008572:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008576:	45e1      	cmp	r9, ip
 8008578:	f84e 2b04 	str.w	r2, [lr], #4
 800857c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008580:	d2de      	bcs.n	8008540 <quorem+0x42>
 8008582:	9b00      	ldr	r3, [sp, #0]
 8008584:	58eb      	ldr	r3, [r5, r3]
 8008586:	b92b      	cbnz	r3, 8008594 <quorem+0x96>
 8008588:	9b01      	ldr	r3, [sp, #4]
 800858a:	3b04      	subs	r3, #4
 800858c:	429d      	cmp	r5, r3
 800858e:	461a      	mov	r2, r3
 8008590:	d32f      	bcc.n	80085f2 <quorem+0xf4>
 8008592:	613c      	str	r4, [r7, #16]
 8008594:	4638      	mov	r0, r7
 8008596:	f001 f97d 	bl	8009894 <__mcmp>
 800859a:	2800      	cmp	r0, #0
 800859c:	db25      	blt.n	80085ea <quorem+0xec>
 800859e:	4629      	mov	r1, r5
 80085a0:	2000      	movs	r0, #0
 80085a2:	f858 2b04 	ldr.w	r2, [r8], #4
 80085a6:	f8d1 c000 	ldr.w	ip, [r1]
 80085aa:	fa1f fe82 	uxth.w	lr, r2
 80085ae:	fa1f f38c 	uxth.w	r3, ip
 80085b2:	eba3 030e 	sub.w	r3, r3, lr
 80085b6:	4403      	add	r3, r0
 80085b8:	0c12      	lsrs	r2, r2, #16
 80085ba:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80085be:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80085c8:	45c1      	cmp	r9, r8
 80085ca:	f841 3b04 	str.w	r3, [r1], #4
 80085ce:	ea4f 4022 	mov.w	r0, r2, asr #16
 80085d2:	d2e6      	bcs.n	80085a2 <quorem+0xa4>
 80085d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80085d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80085dc:	b922      	cbnz	r2, 80085e8 <quorem+0xea>
 80085de:	3b04      	subs	r3, #4
 80085e0:	429d      	cmp	r5, r3
 80085e2:	461a      	mov	r2, r3
 80085e4:	d30b      	bcc.n	80085fe <quorem+0x100>
 80085e6:	613c      	str	r4, [r7, #16]
 80085e8:	3601      	adds	r6, #1
 80085ea:	4630      	mov	r0, r6
 80085ec:	b003      	add	sp, #12
 80085ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085f2:	6812      	ldr	r2, [r2, #0]
 80085f4:	3b04      	subs	r3, #4
 80085f6:	2a00      	cmp	r2, #0
 80085f8:	d1cb      	bne.n	8008592 <quorem+0x94>
 80085fa:	3c01      	subs	r4, #1
 80085fc:	e7c6      	b.n	800858c <quorem+0x8e>
 80085fe:	6812      	ldr	r2, [r2, #0]
 8008600:	3b04      	subs	r3, #4
 8008602:	2a00      	cmp	r2, #0
 8008604:	d1ef      	bne.n	80085e6 <quorem+0xe8>
 8008606:	3c01      	subs	r4, #1
 8008608:	e7ea      	b.n	80085e0 <quorem+0xe2>
 800860a:	2000      	movs	r0, #0
 800860c:	e7ee      	b.n	80085ec <quorem+0xee>
	...

08008610 <_dtoa_r>:
 8008610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008614:	69c7      	ldr	r7, [r0, #28]
 8008616:	b097      	sub	sp, #92	@ 0x5c
 8008618:	ed8d 0b04 	vstr	d0, [sp, #16]
 800861c:	ec55 4b10 	vmov	r4, r5, d0
 8008620:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008622:	9107      	str	r1, [sp, #28]
 8008624:	4681      	mov	r9, r0
 8008626:	920c      	str	r2, [sp, #48]	@ 0x30
 8008628:	9311      	str	r3, [sp, #68]	@ 0x44
 800862a:	b97f      	cbnz	r7, 800864c <_dtoa_r+0x3c>
 800862c:	2010      	movs	r0, #16
 800862e:	f000 fe09 	bl	8009244 <malloc>
 8008632:	4602      	mov	r2, r0
 8008634:	f8c9 001c 	str.w	r0, [r9, #28]
 8008638:	b920      	cbnz	r0, 8008644 <_dtoa_r+0x34>
 800863a:	4ba9      	ldr	r3, [pc, #676]	@ (80088e0 <_dtoa_r+0x2d0>)
 800863c:	21ef      	movs	r1, #239	@ 0xef
 800863e:	48a9      	ldr	r0, [pc, #676]	@ (80088e4 <_dtoa_r+0x2d4>)
 8008640:	f001 faec 	bl	8009c1c <__assert_func>
 8008644:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008648:	6007      	str	r7, [r0, #0]
 800864a:	60c7      	str	r7, [r0, #12]
 800864c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008650:	6819      	ldr	r1, [r3, #0]
 8008652:	b159      	cbz	r1, 800866c <_dtoa_r+0x5c>
 8008654:	685a      	ldr	r2, [r3, #4]
 8008656:	604a      	str	r2, [r1, #4]
 8008658:	2301      	movs	r3, #1
 800865a:	4093      	lsls	r3, r2
 800865c:	608b      	str	r3, [r1, #8]
 800865e:	4648      	mov	r0, r9
 8008660:	f000 fee6 	bl	8009430 <_Bfree>
 8008664:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008668:	2200      	movs	r2, #0
 800866a:	601a      	str	r2, [r3, #0]
 800866c:	1e2b      	subs	r3, r5, #0
 800866e:	bfb9      	ittee	lt
 8008670:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008674:	9305      	strlt	r3, [sp, #20]
 8008676:	2300      	movge	r3, #0
 8008678:	6033      	strge	r3, [r6, #0]
 800867a:	9f05      	ldr	r7, [sp, #20]
 800867c:	4b9a      	ldr	r3, [pc, #616]	@ (80088e8 <_dtoa_r+0x2d8>)
 800867e:	bfbc      	itt	lt
 8008680:	2201      	movlt	r2, #1
 8008682:	6032      	strlt	r2, [r6, #0]
 8008684:	43bb      	bics	r3, r7
 8008686:	d112      	bne.n	80086ae <_dtoa_r+0x9e>
 8008688:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800868a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800868e:	6013      	str	r3, [r2, #0]
 8008690:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008694:	4323      	orrs	r3, r4
 8008696:	f000 855a 	beq.w	800914e <_dtoa_r+0xb3e>
 800869a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800869c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80088fc <_dtoa_r+0x2ec>
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	f000 855c 	beq.w	800915e <_dtoa_r+0xb4e>
 80086a6:	f10a 0303 	add.w	r3, sl, #3
 80086aa:	f000 bd56 	b.w	800915a <_dtoa_r+0xb4a>
 80086ae:	ed9d 7b04 	vldr	d7, [sp, #16]
 80086b2:	2200      	movs	r2, #0
 80086b4:	ec51 0b17 	vmov	r0, r1, d7
 80086b8:	2300      	movs	r3, #0
 80086ba:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80086be:	f7f8 fa2b 	bl	8000b18 <__aeabi_dcmpeq>
 80086c2:	4680      	mov	r8, r0
 80086c4:	b158      	cbz	r0, 80086de <_dtoa_r+0xce>
 80086c6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80086c8:	2301      	movs	r3, #1
 80086ca:	6013      	str	r3, [r2, #0]
 80086cc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80086ce:	b113      	cbz	r3, 80086d6 <_dtoa_r+0xc6>
 80086d0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80086d2:	4b86      	ldr	r3, [pc, #536]	@ (80088ec <_dtoa_r+0x2dc>)
 80086d4:	6013      	str	r3, [r2, #0]
 80086d6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008900 <_dtoa_r+0x2f0>
 80086da:	f000 bd40 	b.w	800915e <_dtoa_r+0xb4e>
 80086de:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80086e2:	aa14      	add	r2, sp, #80	@ 0x50
 80086e4:	a915      	add	r1, sp, #84	@ 0x54
 80086e6:	4648      	mov	r0, r9
 80086e8:	f001 f984 	bl	80099f4 <__d2b>
 80086ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80086f0:	9002      	str	r0, [sp, #8]
 80086f2:	2e00      	cmp	r6, #0
 80086f4:	d078      	beq.n	80087e8 <_dtoa_r+0x1d8>
 80086f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086f8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80086fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008700:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008704:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008708:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800870c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008710:	4619      	mov	r1, r3
 8008712:	2200      	movs	r2, #0
 8008714:	4b76      	ldr	r3, [pc, #472]	@ (80088f0 <_dtoa_r+0x2e0>)
 8008716:	f7f7 fddf 	bl	80002d8 <__aeabi_dsub>
 800871a:	a36b      	add	r3, pc, #428	@ (adr r3, 80088c8 <_dtoa_r+0x2b8>)
 800871c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008720:	f7f7 ff92 	bl	8000648 <__aeabi_dmul>
 8008724:	a36a      	add	r3, pc, #424	@ (adr r3, 80088d0 <_dtoa_r+0x2c0>)
 8008726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800872a:	f7f7 fdd7 	bl	80002dc <__adddf3>
 800872e:	4604      	mov	r4, r0
 8008730:	4630      	mov	r0, r6
 8008732:	460d      	mov	r5, r1
 8008734:	f7f7 ff1e 	bl	8000574 <__aeabi_i2d>
 8008738:	a367      	add	r3, pc, #412	@ (adr r3, 80088d8 <_dtoa_r+0x2c8>)
 800873a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800873e:	f7f7 ff83 	bl	8000648 <__aeabi_dmul>
 8008742:	4602      	mov	r2, r0
 8008744:	460b      	mov	r3, r1
 8008746:	4620      	mov	r0, r4
 8008748:	4629      	mov	r1, r5
 800874a:	f7f7 fdc7 	bl	80002dc <__adddf3>
 800874e:	4604      	mov	r4, r0
 8008750:	460d      	mov	r5, r1
 8008752:	f7f8 fa29 	bl	8000ba8 <__aeabi_d2iz>
 8008756:	2200      	movs	r2, #0
 8008758:	4607      	mov	r7, r0
 800875a:	2300      	movs	r3, #0
 800875c:	4620      	mov	r0, r4
 800875e:	4629      	mov	r1, r5
 8008760:	f7f8 f9e4 	bl	8000b2c <__aeabi_dcmplt>
 8008764:	b140      	cbz	r0, 8008778 <_dtoa_r+0x168>
 8008766:	4638      	mov	r0, r7
 8008768:	f7f7 ff04 	bl	8000574 <__aeabi_i2d>
 800876c:	4622      	mov	r2, r4
 800876e:	462b      	mov	r3, r5
 8008770:	f7f8 f9d2 	bl	8000b18 <__aeabi_dcmpeq>
 8008774:	b900      	cbnz	r0, 8008778 <_dtoa_r+0x168>
 8008776:	3f01      	subs	r7, #1
 8008778:	2f16      	cmp	r7, #22
 800877a:	d852      	bhi.n	8008822 <_dtoa_r+0x212>
 800877c:	4b5d      	ldr	r3, [pc, #372]	@ (80088f4 <_dtoa_r+0x2e4>)
 800877e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008786:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800878a:	f7f8 f9cf 	bl	8000b2c <__aeabi_dcmplt>
 800878e:	2800      	cmp	r0, #0
 8008790:	d049      	beq.n	8008826 <_dtoa_r+0x216>
 8008792:	3f01      	subs	r7, #1
 8008794:	2300      	movs	r3, #0
 8008796:	9310      	str	r3, [sp, #64]	@ 0x40
 8008798:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800879a:	1b9b      	subs	r3, r3, r6
 800879c:	1e5a      	subs	r2, r3, #1
 800879e:	bf45      	ittet	mi
 80087a0:	f1c3 0301 	rsbmi	r3, r3, #1
 80087a4:	9300      	strmi	r3, [sp, #0]
 80087a6:	2300      	movpl	r3, #0
 80087a8:	2300      	movmi	r3, #0
 80087aa:	9206      	str	r2, [sp, #24]
 80087ac:	bf54      	ite	pl
 80087ae:	9300      	strpl	r3, [sp, #0]
 80087b0:	9306      	strmi	r3, [sp, #24]
 80087b2:	2f00      	cmp	r7, #0
 80087b4:	db39      	blt.n	800882a <_dtoa_r+0x21a>
 80087b6:	9b06      	ldr	r3, [sp, #24]
 80087b8:	970d      	str	r7, [sp, #52]	@ 0x34
 80087ba:	443b      	add	r3, r7
 80087bc:	9306      	str	r3, [sp, #24]
 80087be:	2300      	movs	r3, #0
 80087c0:	9308      	str	r3, [sp, #32]
 80087c2:	9b07      	ldr	r3, [sp, #28]
 80087c4:	2b09      	cmp	r3, #9
 80087c6:	d863      	bhi.n	8008890 <_dtoa_r+0x280>
 80087c8:	2b05      	cmp	r3, #5
 80087ca:	bfc4      	itt	gt
 80087cc:	3b04      	subgt	r3, #4
 80087ce:	9307      	strgt	r3, [sp, #28]
 80087d0:	9b07      	ldr	r3, [sp, #28]
 80087d2:	f1a3 0302 	sub.w	r3, r3, #2
 80087d6:	bfcc      	ite	gt
 80087d8:	2400      	movgt	r4, #0
 80087da:	2401      	movle	r4, #1
 80087dc:	2b03      	cmp	r3, #3
 80087de:	d863      	bhi.n	80088a8 <_dtoa_r+0x298>
 80087e0:	e8df f003 	tbb	[pc, r3]
 80087e4:	2b375452 	.word	0x2b375452
 80087e8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80087ec:	441e      	add	r6, r3
 80087ee:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80087f2:	2b20      	cmp	r3, #32
 80087f4:	bfc1      	itttt	gt
 80087f6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80087fa:	409f      	lslgt	r7, r3
 80087fc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008800:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008804:	bfd6      	itet	le
 8008806:	f1c3 0320 	rsble	r3, r3, #32
 800880a:	ea47 0003 	orrgt.w	r0, r7, r3
 800880e:	fa04 f003 	lslle.w	r0, r4, r3
 8008812:	f7f7 fe9f 	bl	8000554 <__aeabi_ui2d>
 8008816:	2201      	movs	r2, #1
 8008818:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800881c:	3e01      	subs	r6, #1
 800881e:	9212      	str	r2, [sp, #72]	@ 0x48
 8008820:	e776      	b.n	8008710 <_dtoa_r+0x100>
 8008822:	2301      	movs	r3, #1
 8008824:	e7b7      	b.n	8008796 <_dtoa_r+0x186>
 8008826:	9010      	str	r0, [sp, #64]	@ 0x40
 8008828:	e7b6      	b.n	8008798 <_dtoa_r+0x188>
 800882a:	9b00      	ldr	r3, [sp, #0]
 800882c:	1bdb      	subs	r3, r3, r7
 800882e:	9300      	str	r3, [sp, #0]
 8008830:	427b      	negs	r3, r7
 8008832:	9308      	str	r3, [sp, #32]
 8008834:	2300      	movs	r3, #0
 8008836:	930d      	str	r3, [sp, #52]	@ 0x34
 8008838:	e7c3      	b.n	80087c2 <_dtoa_r+0x1b2>
 800883a:	2301      	movs	r3, #1
 800883c:	9309      	str	r3, [sp, #36]	@ 0x24
 800883e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008840:	eb07 0b03 	add.w	fp, r7, r3
 8008844:	f10b 0301 	add.w	r3, fp, #1
 8008848:	2b01      	cmp	r3, #1
 800884a:	9303      	str	r3, [sp, #12]
 800884c:	bfb8      	it	lt
 800884e:	2301      	movlt	r3, #1
 8008850:	e006      	b.n	8008860 <_dtoa_r+0x250>
 8008852:	2301      	movs	r3, #1
 8008854:	9309      	str	r3, [sp, #36]	@ 0x24
 8008856:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008858:	2b00      	cmp	r3, #0
 800885a:	dd28      	ble.n	80088ae <_dtoa_r+0x29e>
 800885c:	469b      	mov	fp, r3
 800885e:	9303      	str	r3, [sp, #12]
 8008860:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008864:	2100      	movs	r1, #0
 8008866:	2204      	movs	r2, #4
 8008868:	f102 0514 	add.w	r5, r2, #20
 800886c:	429d      	cmp	r5, r3
 800886e:	d926      	bls.n	80088be <_dtoa_r+0x2ae>
 8008870:	6041      	str	r1, [r0, #4]
 8008872:	4648      	mov	r0, r9
 8008874:	f000 fd9c 	bl	80093b0 <_Balloc>
 8008878:	4682      	mov	sl, r0
 800887a:	2800      	cmp	r0, #0
 800887c:	d142      	bne.n	8008904 <_dtoa_r+0x2f4>
 800887e:	4b1e      	ldr	r3, [pc, #120]	@ (80088f8 <_dtoa_r+0x2e8>)
 8008880:	4602      	mov	r2, r0
 8008882:	f240 11af 	movw	r1, #431	@ 0x1af
 8008886:	e6da      	b.n	800863e <_dtoa_r+0x2e>
 8008888:	2300      	movs	r3, #0
 800888a:	e7e3      	b.n	8008854 <_dtoa_r+0x244>
 800888c:	2300      	movs	r3, #0
 800888e:	e7d5      	b.n	800883c <_dtoa_r+0x22c>
 8008890:	2401      	movs	r4, #1
 8008892:	2300      	movs	r3, #0
 8008894:	9307      	str	r3, [sp, #28]
 8008896:	9409      	str	r4, [sp, #36]	@ 0x24
 8008898:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800889c:	2200      	movs	r2, #0
 800889e:	f8cd b00c 	str.w	fp, [sp, #12]
 80088a2:	2312      	movs	r3, #18
 80088a4:	920c      	str	r2, [sp, #48]	@ 0x30
 80088a6:	e7db      	b.n	8008860 <_dtoa_r+0x250>
 80088a8:	2301      	movs	r3, #1
 80088aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80088ac:	e7f4      	b.n	8008898 <_dtoa_r+0x288>
 80088ae:	f04f 0b01 	mov.w	fp, #1
 80088b2:	f8cd b00c 	str.w	fp, [sp, #12]
 80088b6:	465b      	mov	r3, fp
 80088b8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80088bc:	e7d0      	b.n	8008860 <_dtoa_r+0x250>
 80088be:	3101      	adds	r1, #1
 80088c0:	0052      	lsls	r2, r2, #1
 80088c2:	e7d1      	b.n	8008868 <_dtoa_r+0x258>
 80088c4:	f3af 8000 	nop.w
 80088c8:	636f4361 	.word	0x636f4361
 80088cc:	3fd287a7 	.word	0x3fd287a7
 80088d0:	8b60c8b3 	.word	0x8b60c8b3
 80088d4:	3fc68a28 	.word	0x3fc68a28
 80088d8:	509f79fb 	.word	0x509f79fb
 80088dc:	3fd34413 	.word	0x3fd34413
 80088e0:	0800a321 	.word	0x0800a321
 80088e4:	0800a338 	.word	0x0800a338
 80088e8:	7ff00000 	.word	0x7ff00000
 80088ec:	0800a2f1 	.word	0x0800a2f1
 80088f0:	3ff80000 	.word	0x3ff80000
 80088f4:	0800a488 	.word	0x0800a488
 80088f8:	0800a390 	.word	0x0800a390
 80088fc:	0800a31d 	.word	0x0800a31d
 8008900:	0800a2f0 	.word	0x0800a2f0
 8008904:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008908:	6018      	str	r0, [r3, #0]
 800890a:	9b03      	ldr	r3, [sp, #12]
 800890c:	2b0e      	cmp	r3, #14
 800890e:	f200 80a1 	bhi.w	8008a54 <_dtoa_r+0x444>
 8008912:	2c00      	cmp	r4, #0
 8008914:	f000 809e 	beq.w	8008a54 <_dtoa_r+0x444>
 8008918:	2f00      	cmp	r7, #0
 800891a:	dd33      	ble.n	8008984 <_dtoa_r+0x374>
 800891c:	4b9c      	ldr	r3, [pc, #624]	@ (8008b90 <_dtoa_r+0x580>)
 800891e:	f007 020f 	and.w	r2, r7, #15
 8008922:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008926:	ed93 7b00 	vldr	d7, [r3]
 800892a:	05f8      	lsls	r0, r7, #23
 800892c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008930:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008934:	d516      	bpl.n	8008964 <_dtoa_r+0x354>
 8008936:	4b97      	ldr	r3, [pc, #604]	@ (8008b94 <_dtoa_r+0x584>)
 8008938:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800893c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008940:	f7f7 ffac 	bl	800089c <__aeabi_ddiv>
 8008944:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008948:	f004 040f 	and.w	r4, r4, #15
 800894c:	2603      	movs	r6, #3
 800894e:	4d91      	ldr	r5, [pc, #580]	@ (8008b94 <_dtoa_r+0x584>)
 8008950:	b954      	cbnz	r4, 8008968 <_dtoa_r+0x358>
 8008952:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008956:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800895a:	f7f7 ff9f 	bl	800089c <__aeabi_ddiv>
 800895e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008962:	e028      	b.n	80089b6 <_dtoa_r+0x3a6>
 8008964:	2602      	movs	r6, #2
 8008966:	e7f2      	b.n	800894e <_dtoa_r+0x33e>
 8008968:	07e1      	lsls	r1, r4, #31
 800896a:	d508      	bpl.n	800897e <_dtoa_r+0x36e>
 800896c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008970:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008974:	f7f7 fe68 	bl	8000648 <__aeabi_dmul>
 8008978:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800897c:	3601      	adds	r6, #1
 800897e:	1064      	asrs	r4, r4, #1
 8008980:	3508      	adds	r5, #8
 8008982:	e7e5      	b.n	8008950 <_dtoa_r+0x340>
 8008984:	f000 80af 	beq.w	8008ae6 <_dtoa_r+0x4d6>
 8008988:	427c      	negs	r4, r7
 800898a:	4b81      	ldr	r3, [pc, #516]	@ (8008b90 <_dtoa_r+0x580>)
 800898c:	4d81      	ldr	r5, [pc, #516]	@ (8008b94 <_dtoa_r+0x584>)
 800898e:	f004 020f 	and.w	r2, r4, #15
 8008992:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800899a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800899e:	f7f7 fe53 	bl	8000648 <__aeabi_dmul>
 80089a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80089a6:	1124      	asrs	r4, r4, #4
 80089a8:	2300      	movs	r3, #0
 80089aa:	2602      	movs	r6, #2
 80089ac:	2c00      	cmp	r4, #0
 80089ae:	f040 808f 	bne.w	8008ad0 <_dtoa_r+0x4c0>
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d1d3      	bne.n	800895e <_dtoa_r+0x34e>
 80089b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80089b8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	f000 8094 	beq.w	8008aea <_dtoa_r+0x4da>
 80089c2:	4b75      	ldr	r3, [pc, #468]	@ (8008b98 <_dtoa_r+0x588>)
 80089c4:	2200      	movs	r2, #0
 80089c6:	4620      	mov	r0, r4
 80089c8:	4629      	mov	r1, r5
 80089ca:	f7f8 f8af 	bl	8000b2c <__aeabi_dcmplt>
 80089ce:	2800      	cmp	r0, #0
 80089d0:	f000 808b 	beq.w	8008aea <_dtoa_r+0x4da>
 80089d4:	9b03      	ldr	r3, [sp, #12]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	f000 8087 	beq.w	8008aea <_dtoa_r+0x4da>
 80089dc:	f1bb 0f00 	cmp.w	fp, #0
 80089e0:	dd34      	ble.n	8008a4c <_dtoa_r+0x43c>
 80089e2:	4620      	mov	r0, r4
 80089e4:	4b6d      	ldr	r3, [pc, #436]	@ (8008b9c <_dtoa_r+0x58c>)
 80089e6:	2200      	movs	r2, #0
 80089e8:	4629      	mov	r1, r5
 80089ea:	f7f7 fe2d 	bl	8000648 <__aeabi_dmul>
 80089ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80089f2:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80089f6:	3601      	adds	r6, #1
 80089f8:	465c      	mov	r4, fp
 80089fa:	4630      	mov	r0, r6
 80089fc:	f7f7 fdba 	bl	8000574 <__aeabi_i2d>
 8008a00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a04:	f7f7 fe20 	bl	8000648 <__aeabi_dmul>
 8008a08:	4b65      	ldr	r3, [pc, #404]	@ (8008ba0 <_dtoa_r+0x590>)
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f7f7 fc66 	bl	80002dc <__adddf3>
 8008a10:	4605      	mov	r5, r0
 8008a12:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008a16:	2c00      	cmp	r4, #0
 8008a18:	d16a      	bne.n	8008af0 <_dtoa_r+0x4e0>
 8008a1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a1e:	4b61      	ldr	r3, [pc, #388]	@ (8008ba4 <_dtoa_r+0x594>)
 8008a20:	2200      	movs	r2, #0
 8008a22:	f7f7 fc59 	bl	80002d8 <__aeabi_dsub>
 8008a26:	4602      	mov	r2, r0
 8008a28:	460b      	mov	r3, r1
 8008a2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008a2e:	462a      	mov	r2, r5
 8008a30:	4633      	mov	r3, r6
 8008a32:	f7f8 f899 	bl	8000b68 <__aeabi_dcmpgt>
 8008a36:	2800      	cmp	r0, #0
 8008a38:	f040 8298 	bne.w	8008f6c <_dtoa_r+0x95c>
 8008a3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a40:	462a      	mov	r2, r5
 8008a42:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008a46:	f7f8 f871 	bl	8000b2c <__aeabi_dcmplt>
 8008a4a:	bb38      	cbnz	r0, 8008a9c <_dtoa_r+0x48c>
 8008a4c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008a50:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008a54:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	f2c0 8157 	blt.w	8008d0a <_dtoa_r+0x6fa>
 8008a5c:	2f0e      	cmp	r7, #14
 8008a5e:	f300 8154 	bgt.w	8008d0a <_dtoa_r+0x6fa>
 8008a62:	4b4b      	ldr	r3, [pc, #300]	@ (8008b90 <_dtoa_r+0x580>)
 8008a64:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008a68:	ed93 7b00 	vldr	d7, [r3]
 8008a6c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	ed8d 7b00 	vstr	d7, [sp]
 8008a74:	f280 80e5 	bge.w	8008c42 <_dtoa_r+0x632>
 8008a78:	9b03      	ldr	r3, [sp, #12]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	f300 80e1 	bgt.w	8008c42 <_dtoa_r+0x632>
 8008a80:	d10c      	bne.n	8008a9c <_dtoa_r+0x48c>
 8008a82:	4b48      	ldr	r3, [pc, #288]	@ (8008ba4 <_dtoa_r+0x594>)
 8008a84:	2200      	movs	r2, #0
 8008a86:	ec51 0b17 	vmov	r0, r1, d7
 8008a8a:	f7f7 fddd 	bl	8000648 <__aeabi_dmul>
 8008a8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a92:	f7f8 f85f 	bl	8000b54 <__aeabi_dcmpge>
 8008a96:	2800      	cmp	r0, #0
 8008a98:	f000 8266 	beq.w	8008f68 <_dtoa_r+0x958>
 8008a9c:	2400      	movs	r4, #0
 8008a9e:	4625      	mov	r5, r4
 8008aa0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008aa2:	4656      	mov	r6, sl
 8008aa4:	ea6f 0803 	mvn.w	r8, r3
 8008aa8:	2700      	movs	r7, #0
 8008aaa:	4621      	mov	r1, r4
 8008aac:	4648      	mov	r0, r9
 8008aae:	f000 fcbf 	bl	8009430 <_Bfree>
 8008ab2:	2d00      	cmp	r5, #0
 8008ab4:	f000 80bd 	beq.w	8008c32 <_dtoa_r+0x622>
 8008ab8:	b12f      	cbz	r7, 8008ac6 <_dtoa_r+0x4b6>
 8008aba:	42af      	cmp	r7, r5
 8008abc:	d003      	beq.n	8008ac6 <_dtoa_r+0x4b6>
 8008abe:	4639      	mov	r1, r7
 8008ac0:	4648      	mov	r0, r9
 8008ac2:	f000 fcb5 	bl	8009430 <_Bfree>
 8008ac6:	4629      	mov	r1, r5
 8008ac8:	4648      	mov	r0, r9
 8008aca:	f000 fcb1 	bl	8009430 <_Bfree>
 8008ace:	e0b0      	b.n	8008c32 <_dtoa_r+0x622>
 8008ad0:	07e2      	lsls	r2, r4, #31
 8008ad2:	d505      	bpl.n	8008ae0 <_dtoa_r+0x4d0>
 8008ad4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008ad8:	f7f7 fdb6 	bl	8000648 <__aeabi_dmul>
 8008adc:	3601      	adds	r6, #1
 8008ade:	2301      	movs	r3, #1
 8008ae0:	1064      	asrs	r4, r4, #1
 8008ae2:	3508      	adds	r5, #8
 8008ae4:	e762      	b.n	80089ac <_dtoa_r+0x39c>
 8008ae6:	2602      	movs	r6, #2
 8008ae8:	e765      	b.n	80089b6 <_dtoa_r+0x3a6>
 8008aea:	9c03      	ldr	r4, [sp, #12]
 8008aec:	46b8      	mov	r8, r7
 8008aee:	e784      	b.n	80089fa <_dtoa_r+0x3ea>
 8008af0:	4b27      	ldr	r3, [pc, #156]	@ (8008b90 <_dtoa_r+0x580>)
 8008af2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008af4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008af8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008afc:	4454      	add	r4, sl
 8008afe:	2900      	cmp	r1, #0
 8008b00:	d054      	beq.n	8008bac <_dtoa_r+0x59c>
 8008b02:	4929      	ldr	r1, [pc, #164]	@ (8008ba8 <_dtoa_r+0x598>)
 8008b04:	2000      	movs	r0, #0
 8008b06:	f7f7 fec9 	bl	800089c <__aeabi_ddiv>
 8008b0a:	4633      	mov	r3, r6
 8008b0c:	462a      	mov	r2, r5
 8008b0e:	f7f7 fbe3 	bl	80002d8 <__aeabi_dsub>
 8008b12:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008b16:	4656      	mov	r6, sl
 8008b18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b1c:	f7f8 f844 	bl	8000ba8 <__aeabi_d2iz>
 8008b20:	4605      	mov	r5, r0
 8008b22:	f7f7 fd27 	bl	8000574 <__aeabi_i2d>
 8008b26:	4602      	mov	r2, r0
 8008b28:	460b      	mov	r3, r1
 8008b2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b2e:	f7f7 fbd3 	bl	80002d8 <__aeabi_dsub>
 8008b32:	3530      	adds	r5, #48	@ 0x30
 8008b34:	4602      	mov	r2, r0
 8008b36:	460b      	mov	r3, r1
 8008b38:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008b3c:	f806 5b01 	strb.w	r5, [r6], #1
 8008b40:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008b44:	f7f7 fff2 	bl	8000b2c <__aeabi_dcmplt>
 8008b48:	2800      	cmp	r0, #0
 8008b4a:	d172      	bne.n	8008c32 <_dtoa_r+0x622>
 8008b4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b50:	4911      	ldr	r1, [pc, #68]	@ (8008b98 <_dtoa_r+0x588>)
 8008b52:	2000      	movs	r0, #0
 8008b54:	f7f7 fbc0 	bl	80002d8 <__aeabi_dsub>
 8008b58:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008b5c:	f7f7 ffe6 	bl	8000b2c <__aeabi_dcmplt>
 8008b60:	2800      	cmp	r0, #0
 8008b62:	f040 80b4 	bne.w	8008cce <_dtoa_r+0x6be>
 8008b66:	42a6      	cmp	r6, r4
 8008b68:	f43f af70 	beq.w	8008a4c <_dtoa_r+0x43c>
 8008b6c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008b70:	4b0a      	ldr	r3, [pc, #40]	@ (8008b9c <_dtoa_r+0x58c>)
 8008b72:	2200      	movs	r2, #0
 8008b74:	f7f7 fd68 	bl	8000648 <__aeabi_dmul>
 8008b78:	4b08      	ldr	r3, [pc, #32]	@ (8008b9c <_dtoa_r+0x58c>)
 8008b7a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008b7e:	2200      	movs	r2, #0
 8008b80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b84:	f7f7 fd60 	bl	8000648 <__aeabi_dmul>
 8008b88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b8c:	e7c4      	b.n	8008b18 <_dtoa_r+0x508>
 8008b8e:	bf00      	nop
 8008b90:	0800a488 	.word	0x0800a488
 8008b94:	0800a460 	.word	0x0800a460
 8008b98:	3ff00000 	.word	0x3ff00000
 8008b9c:	40240000 	.word	0x40240000
 8008ba0:	401c0000 	.word	0x401c0000
 8008ba4:	40140000 	.word	0x40140000
 8008ba8:	3fe00000 	.word	0x3fe00000
 8008bac:	4631      	mov	r1, r6
 8008bae:	4628      	mov	r0, r5
 8008bb0:	f7f7 fd4a 	bl	8000648 <__aeabi_dmul>
 8008bb4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008bb8:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008bba:	4656      	mov	r6, sl
 8008bbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008bc0:	f7f7 fff2 	bl	8000ba8 <__aeabi_d2iz>
 8008bc4:	4605      	mov	r5, r0
 8008bc6:	f7f7 fcd5 	bl	8000574 <__aeabi_i2d>
 8008bca:	4602      	mov	r2, r0
 8008bcc:	460b      	mov	r3, r1
 8008bce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008bd2:	f7f7 fb81 	bl	80002d8 <__aeabi_dsub>
 8008bd6:	3530      	adds	r5, #48	@ 0x30
 8008bd8:	f806 5b01 	strb.w	r5, [r6], #1
 8008bdc:	4602      	mov	r2, r0
 8008bde:	460b      	mov	r3, r1
 8008be0:	42a6      	cmp	r6, r4
 8008be2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008be6:	f04f 0200 	mov.w	r2, #0
 8008bea:	d124      	bne.n	8008c36 <_dtoa_r+0x626>
 8008bec:	4baf      	ldr	r3, [pc, #700]	@ (8008eac <_dtoa_r+0x89c>)
 8008bee:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008bf2:	f7f7 fb73 	bl	80002dc <__adddf3>
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008bfe:	f7f7 ffb3 	bl	8000b68 <__aeabi_dcmpgt>
 8008c02:	2800      	cmp	r0, #0
 8008c04:	d163      	bne.n	8008cce <_dtoa_r+0x6be>
 8008c06:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008c0a:	49a8      	ldr	r1, [pc, #672]	@ (8008eac <_dtoa_r+0x89c>)
 8008c0c:	2000      	movs	r0, #0
 8008c0e:	f7f7 fb63 	bl	80002d8 <__aeabi_dsub>
 8008c12:	4602      	mov	r2, r0
 8008c14:	460b      	mov	r3, r1
 8008c16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c1a:	f7f7 ff87 	bl	8000b2c <__aeabi_dcmplt>
 8008c1e:	2800      	cmp	r0, #0
 8008c20:	f43f af14 	beq.w	8008a4c <_dtoa_r+0x43c>
 8008c24:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008c26:	1e73      	subs	r3, r6, #1
 8008c28:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008c2a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008c2e:	2b30      	cmp	r3, #48	@ 0x30
 8008c30:	d0f8      	beq.n	8008c24 <_dtoa_r+0x614>
 8008c32:	4647      	mov	r7, r8
 8008c34:	e03b      	b.n	8008cae <_dtoa_r+0x69e>
 8008c36:	4b9e      	ldr	r3, [pc, #632]	@ (8008eb0 <_dtoa_r+0x8a0>)
 8008c38:	f7f7 fd06 	bl	8000648 <__aeabi_dmul>
 8008c3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c40:	e7bc      	b.n	8008bbc <_dtoa_r+0x5ac>
 8008c42:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008c46:	4656      	mov	r6, sl
 8008c48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c4c:	4620      	mov	r0, r4
 8008c4e:	4629      	mov	r1, r5
 8008c50:	f7f7 fe24 	bl	800089c <__aeabi_ddiv>
 8008c54:	f7f7 ffa8 	bl	8000ba8 <__aeabi_d2iz>
 8008c58:	4680      	mov	r8, r0
 8008c5a:	f7f7 fc8b 	bl	8000574 <__aeabi_i2d>
 8008c5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c62:	f7f7 fcf1 	bl	8000648 <__aeabi_dmul>
 8008c66:	4602      	mov	r2, r0
 8008c68:	460b      	mov	r3, r1
 8008c6a:	4620      	mov	r0, r4
 8008c6c:	4629      	mov	r1, r5
 8008c6e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008c72:	f7f7 fb31 	bl	80002d8 <__aeabi_dsub>
 8008c76:	f806 4b01 	strb.w	r4, [r6], #1
 8008c7a:	9d03      	ldr	r5, [sp, #12]
 8008c7c:	eba6 040a 	sub.w	r4, r6, sl
 8008c80:	42a5      	cmp	r5, r4
 8008c82:	4602      	mov	r2, r0
 8008c84:	460b      	mov	r3, r1
 8008c86:	d133      	bne.n	8008cf0 <_dtoa_r+0x6e0>
 8008c88:	f7f7 fb28 	bl	80002dc <__adddf3>
 8008c8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c90:	4604      	mov	r4, r0
 8008c92:	460d      	mov	r5, r1
 8008c94:	f7f7 ff68 	bl	8000b68 <__aeabi_dcmpgt>
 8008c98:	b9c0      	cbnz	r0, 8008ccc <_dtoa_r+0x6bc>
 8008c9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c9e:	4620      	mov	r0, r4
 8008ca0:	4629      	mov	r1, r5
 8008ca2:	f7f7 ff39 	bl	8000b18 <__aeabi_dcmpeq>
 8008ca6:	b110      	cbz	r0, 8008cae <_dtoa_r+0x69e>
 8008ca8:	f018 0f01 	tst.w	r8, #1
 8008cac:	d10e      	bne.n	8008ccc <_dtoa_r+0x6bc>
 8008cae:	9902      	ldr	r1, [sp, #8]
 8008cb0:	4648      	mov	r0, r9
 8008cb2:	f000 fbbd 	bl	8009430 <_Bfree>
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	7033      	strb	r3, [r6, #0]
 8008cba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008cbc:	3701      	adds	r7, #1
 8008cbe:	601f      	str	r7, [r3, #0]
 8008cc0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	f000 824b 	beq.w	800915e <_dtoa_r+0xb4e>
 8008cc8:	601e      	str	r6, [r3, #0]
 8008cca:	e248      	b.n	800915e <_dtoa_r+0xb4e>
 8008ccc:	46b8      	mov	r8, r7
 8008cce:	4633      	mov	r3, r6
 8008cd0:	461e      	mov	r6, r3
 8008cd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008cd6:	2a39      	cmp	r2, #57	@ 0x39
 8008cd8:	d106      	bne.n	8008ce8 <_dtoa_r+0x6d8>
 8008cda:	459a      	cmp	sl, r3
 8008cdc:	d1f8      	bne.n	8008cd0 <_dtoa_r+0x6c0>
 8008cde:	2230      	movs	r2, #48	@ 0x30
 8008ce0:	f108 0801 	add.w	r8, r8, #1
 8008ce4:	f88a 2000 	strb.w	r2, [sl]
 8008ce8:	781a      	ldrb	r2, [r3, #0]
 8008cea:	3201      	adds	r2, #1
 8008cec:	701a      	strb	r2, [r3, #0]
 8008cee:	e7a0      	b.n	8008c32 <_dtoa_r+0x622>
 8008cf0:	4b6f      	ldr	r3, [pc, #444]	@ (8008eb0 <_dtoa_r+0x8a0>)
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f7f7 fca8 	bl	8000648 <__aeabi_dmul>
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	4604      	mov	r4, r0
 8008cfe:	460d      	mov	r5, r1
 8008d00:	f7f7 ff0a 	bl	8000b18 <__aeabi_dcmpeq>
 8008d04:	2800      	cmp	r0, #0
 8008d06:	d09f      	beq.n	8008c48 <_dtoa_r+0x638>
 8008d08:	e7d1      	b.n	8008cae <_dtoa_r+0x69e>
 8008d0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d0c:	2a00      	cmp	r2, #0
 8008d0e:	f000 80ea 	beq.w	8008ee6 <_dtoa_r+0x8d6>
 8008d12:	9a07      	ldr	r2, [sp, #28]
 8008d14:	2a01      	cmp	r2, #1
 8008d16:	f300 80cd 	bgt.w	8008eb4 <_dtoa_r+0x8a4>
 8008d1a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008d1c:	2a00      	cmp	r2, #0
 8008d1e:	f000 80c1 	beq.w	8008ea4 <_dtoa_r+0x894>
 8008d22:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008d26:	9c08      	ldr	r4, [sp, #32]
 8008d28:	9e00      	ldr	r6, [sp, #0]
 8008d2a:	9a00      	ldr	r2, [sp, #0]
 8008d2c:	441a      	add	r2, r3
 8008d2e:	9200      	str	r2, [sp, #0]
 8008d30:	9a06      	ldr	r2, [sp, #24]
 8008d32:	2101      	movs	r1, #1
 8008d34:	441a      	add	r2, r3
 8008d36:	4648      	mov	r0, r9
 8008d38:	9206      	str	r2, [sp, #24]
 8008d3a:	f000 fc2d 	bl	8009598 <__i2b>
 8008d3e:	4605      	mov	r5, r0
 8008d40:	b166      	cbz	r6, 8008d5c <_dtoa_r+0x74c>
 8008d42:	9b06      	ldr	r3, [sp, #24]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	dd09      	ble.n	8008d5c <_dtoa_r+0x74c>
 8008d48:	42b3      	cmp	r3, r6
 8008d4a:	9a00      	ldr	r2, [sp, #0]
 8008d4c:	bfa8      	it	ge
 8008d4e:	4633      	movge	r3, r6
 8008d50:	1ad2      	subs	r2, r2, r3
 8008d52:	9200      	str	r2, [sp, #0]
 8008d54:	9a06      	ldr	r2, [sp, #24]
 8008d56:	1af6      	subs	r6, r6, r3
 8008d58:	1ad3      	subs	r3, r2, r3
 8008d5a:	9306      	str	r3, [sp, #24]
 8008d5c:	9b08      	ldr	r3, [sp, #32]
 8008d5e:	b30b      	cbz	r3, 8008da4 <_dtoa_r+0x794>
 8008d60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	f000 80c6 	beq.w	8008ef4 <_dtoa_r+0x8e4>
 8008d68:	2c00      	cmp	r4, #0
 8008d6a:	f000 80c0 	beq.w	8008eee <_dtoa_r+0x8de>
 8008d6e:	4629      	mov	r1, r5
 8008d70:	4622      	mov	r2, r4
 8008d72:	4648      	mov	r0, r9
 8008d74:	f000 fcc8 	bl	8009708 <__pow5mult>
 8008d78:	9a02      	ldr	r2, [sp, #8]
 8008d7a:	4601      	mov	r1, r0
 8008d7c:	4605      	mov	r5, r0
 8008d7e:	4648      	mov	r0, r9
 8008d80:	f000 fc20 	bl	80095c4 <__multiply>
 8008d84:	9902      	ldr	r1, [sp, #8]
 8008d86:	4680      	mov	r8, r0
 8008d88:	4648      	mov	r0, r9
 8008d8a:	f000 fb51 	bl	8009430 <_Bfree>
 8008d8e:	9b08      	ldr	r3, [sp, #32]
 8008d90:	1b1b      	subs	r3, r3, r4
 8008d92:	9308      	str	r3, [sp, #32]
 8008d94:	f000 80b1 	beq.w	8008efa <_dtoa_r+0x8ea>
 8008d98:	9a08      	ldr	r2, [sp, #32]
 8008d9a:	4641      	mov	r1, r8
 8008d9c:	4648      	mov	r0, r9
 8008d9e:	f000 fcb3 	bl	8009708 <__pow5mult>
 8008da2:	9002      	str	r0, [sp, #8]
 8008da4:	2101      	movs	r1, #1
 8008da6:	4648      	mov	r0, r9
 8008da8:	f000 fbf6 	bl	8009598 <__i2b>
 8008dac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008dae:	4604      	mov	r4, r0
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	f000 81d8 	beq.w	8009166 <_dtoa_r+0xb56>
 8008db6:	461a      	mov	r2, r3
 8008db8:	4601      	mov	r1, r0
 8008dba:	4648      	mov	r0, r9
 8008dbc:	f000 fca4 	bl	8009708 <__pow5mult>
 8008dc0:	9b07      	ldr	r3, [sp, #28]
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	4604      	mov	r4, r0
 8008dc6:	f300 809f 	bgt.w	8008f08 <_dtoa_r+0x8f8>
 8008dca:	9b04      	ldr	r3, [sp, #16]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	f040 8097 	bne.w	8008f00 <_dtoa_r+0x8f0>
 8008dd2:	9b05      	ldr	r3, [sp, #20]
 8008dd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	f040 8093 	bne.w	8008f04 <_dtoa_r+0x8f4>
 8008dde:	9b05      	ldr	r3, [sp, #20]
 8008de0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008de4:	0d1b      	lsrs	r3, r3, #20
 8008de6:	051b      	lsls	r3, r3, #20
 8008de8:	b133      	cbz	r3, 8008df8 <_dtoa_r+0x7e8>
 8008dea:	9b00      	ldr	r3, [sp, #0]
 8008dec:	3301      	adds	r3, #1
 8008dee:	9300      	str	r3, [sp, #0]
 8008df0:	9b06      	ldr	r3, [sp, #24]
 8008df2:	3301      	adds	r3, #1
 8008df4:	9306      	str	r3, [sp, #24]
 8008df6:	2301      	movs	r3, #1
 8008df8:	9308      	str	r3, [sp, #32]
 8008dfa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	f000 81b8 	beq.w	8009172 <_dtoa_r+0xb62>
 8008e02:	6923      	ldr	r3, [r4, #16]
 8008e04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008e08:	6918      	ldr	r0, [r3, #16]
 8008e0a:	f000 fb79 	bl	8009500 <__hi0bits>
 8008e0e:	f1c0 0020 	rsb	r0, r0, #32
 8008e12:	9b06      	ldr	r3, [sp, #24]
 8008e14:	4418      	add	r0, r3
 8008e16:	f010 001f 	ands.w	r0, r0, #31
 8008e1a:	f000 8082 	beq.w	8008f22 <_dtoa_r+0x912>
 8008e1e:	f1c0 0320 	rsb	r3, r0, #32
 8008e22:	2b04      	cmp	r3, #4
 8008e24:	dd73      	ble.n	8008f0e <_dtoa_r+0x8fe>
 8008e26:	9b00      	ldr	r3, [sp, #0]
 8008e28:	f1c0 001c 	rsb	r0, r0, #28
 8008e2c:	4403      	add	r3, r0
 8008e2e:	9300      	str	r3, [sp, #0]
 8008e30:	9b06      	ldr	r3, [sp, #24]
 8008e32:	4403      	add	r3, r0
 8008e34:	4406      	add	r6, r0
 8008e36:	9306      	str	r3, [sp, #24]
 8008e38:	9b00      	ldr	r3, [sp, #0]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	dd05      	ble.n	8008e4a <_dtoa_r+0x83a>
 8008e3e:	9902      	ldr	r1, [sp, #8]
 8008e40:	461a      	mov	r2, r3
 8008e42:	4648      	mov	r0, r9
 8008e44:	f000 fcba 	bl	80097bc <__lshift>
 8008e48:	9002      	str	r0, [sp, #8]
 8008e4a:	9b06      	ldr	r3, [sp, #24]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	dd05      	ble.n	8008e5c <_dtoa_r+0x84c>
 8008e50:	4621      	mov	r1, r4
 8008e52:	461a      	mov	r2, r3
 8008e54:	4648      	mov	r0, r9
 8008e56:	f000 fcb1 	bl	80097bc <__lshift>
 8008e5a:	4604      	mov	r4, r0
 8008e5c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d061      	beq.n	8008f26 <_dtoa_r+0x916>
 8008e62:	9802      	ldr	r0, [sp, #8]
 8008e64:	4621      	mov	r1, r4
 8008e66:	f000 fd15 	bl	8009894 <__mcmp>
 8008e6a:	2800      	cmp	r0, #0
 8008e6c:	da5b      	bge.n	8008f26 <_dtoa_r+0x916>
 8008e6e:	2300      	movs	r3, #0
 8008e70:	9902      	ldr	r1, [sp, #8]
 8008e72:	220a      	movs	r2, #10
 8008e74:	4648      	mov	r0, r9
 8008e76:	f000 fafd 	bl	8009474 <__multadd>
 8008e7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e7c:	9002      	str	r0, [sp, #8]
 8008e7e:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	f000 8177 	beq.w	8009176 <_dtoa_r+0xb66>
 8008e88:	4629      	mov	r1, r5
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	220a      	movs	r2, #10
 8008e8e:	4648      	mov	r0, r9
 8008e90:	f000 faf0 	bl	8009474 <__multadd>
 8008e94:	f1bb 0f00 	cmp.w	fp, #0
 8008e98:	4605      	mov	r5, r0
 8008e9a:	dc6f      	bgt.n	8008f7c <_dtoa_r+0x96c>
 8008e9c:	9b07      	ldr	r3, [sp, #28]
 8008e9e:	2b02      	cmp	r3, #2
 8008ea0:	dc49      	bgt.n	8008f36 <_dtoa_r+0x926>
 8008ea2:	e06b      	b.n	8008f7c <_dtoa_r+0x96c>
 8008ea4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008ea6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008eaa:	e73c      	b.n	8008d26 <_dtoa_r+0x716>
 8008eac:	3fe00000 	.word	0x3fe00000
 8008eb0:	40240000 	.word	0x40240000
 8008eb4:	9b03      	ldr	r3, [sp, #12]
 8008eb6:	1e5c      	subs	r4, r3, #1
 8008eb8:	9b08      	ldr	r3, [sp, #32]
 8008eba:	42a3      	cmp	r3, r4
 8008ebc:	db09      	blt.n	8008ed2 <_dtoa_r+0x8c2>
 8008ebe:	1b1c      	subs	r4, r3, r4
 8008ec0:	9b03      	ldr	r3, [sp, #12]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	f6bf af30 	bge.w	8008d28 <_dtoa_r+0x718>
 8008ec8:	9b00      	ldr	r3, [sp, #0]
 8008eca:	9a03      	ldr	r2, [sp, #12]
 8008ecc:	1a9e      	subs	r6, r3, r2
 8008ece:	2300      	movs	r3, #0
 8008ed0:	e72b      	b.n	8008d2a <_dtoa_r+0x71a>
 8008ed2:	9b08      	ldr	r3, [sp, #32]
 8008ed4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008ed6:	9408      	str	r4, [sp, #32]
 8008ed8:	1ae3      	subs	r3, r4, r3
 8008eda:	441a      	add	r2, r3
 8008edc:	9e00      	ldr	r6, [sp, #0]
 8008ede:	9b03      	ldr	r3, [sp, #12]
 8008ee0:	920d      	str	r2, [sp, #52]	@ 0x34
 8008ee2:	2400      	movs	r4, #0
 8008ee4:	e721      	b.n	8008d2a <_dtoa_r+0x71a>
 8008ee6:	9c08      	ldr	r4, [sp, #32]
 8008ee8:	9e00      	ldr	r6, [sp, #0]
 8008eea:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008eec:	e728      	b.n	8008d40 <_dtoa_r+0x730>
 8008eee:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008ef2:	e751      	b.n	8008d98 <_dtoa_r+0x788>
 8008ef4:	9a08      	ldr	r2, [sp, #32]
 8008ef6:	9902      	ldr	r1, [sp, #8]
 8008ef8:	e750      	b.n	8008d9c <_dtoa_r+0x78c>
 8008efa:	f8cd 8008 	str.w	r8, [sp, #8]
 8008efe:	e751      	b.n	8008da4 <_dtoa_r+0x794>
 8008f00:	2300      	movs	r3, #0
 8008f02:	e779      	b.n	8008df8 <_dtoa_r+0x7e8>
 8008f04:	9b04      	ldr	r3, [sp, #16]
 8008f06:	e777      	b.n	8008df8 <_dtoa_r+0x7e8>
 8008f08:	2300      	movs	r3, #0
 8008f0a:	9308      	str	r3, [sp, #32]
 8008f0c:	e779      	b.n	8008e02 <_dtoa_r+0x7f2>
 8008f0e:	d093      	beq.n	8008e38 <_dtoa_r+0x828>
 8008f10:	9a00      	ldr	r2, [sp, #0]
 8008f12:	331c      	adds	r3, #28
 8008f14:	441a      	add	r2, r3
 8008f16:	9200      	str	r2, [sp, #0]
 8008f18:	9a06      	ldr	r2, [sp, #24]
 8008f1a:	441a      	add	r2, r3
 8008f1c:	441e      	add	r6, r3
 8008f1e:	9206      	str	r2, [sp, #24]
 8008f20:	e78a      	b.n	8008e38 <_dtoa_r+0x828>
 8008f22:	4603      	mov	r3, r0
 8008f24:	e7f4      	b.n	8008f10 <_dtoa_r+0x900>
 8008f26:	9b03      	ldr	r3, [sp, #12]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	46b8      	mov	r8, r7
 8008f2c:	dc20      	bgt.n	8008f70 <_dtoa_r+0x960>
 8008f2e:	469b      	mov	fp, r3
 8008f30:	9b07      	ldr	r3, [sp, #28]
 8008f32:	2b02      	cmp	r3, #2
 8008f34:	dd1e      	ble.n	8008f74 <_dtoa_r+0x964>
 8008f36:	f1bb 0f00 	cmp.w	fp, #0
 8008f3a:	f47f adb1 	bne.w	8008aa0 <_dtoa_r+0x490>
 8008f3e:	4621      	mov	r1, r4
 8008f40:	465b      	mov	r3, fp
 8008f42:	2205      	movs	r2, #5
 8008f44:	4648      	mov	r0, r9
 8008f46:	f000 fa95 	bl	8009474 <__multadd>
 8008f4a:	4601      	mov	r1, r0
 8008f4c:	4604      	mov	r4, r0
 8008f4e:	9802      	ldr	r0, [sp, #8]
 8008f50:	f000 fca0 	bl	8009894 <__mcmp>
 8008f54:	2800      	cmp	r0, #0
 8008f56:	f77f ada3 	ble.w	8008aa0 <_dtoa_r+0x490>
 8008f5a:	4656      	mov	r6, sl
 8008f5c:	2331      	movs	r3, #49	@ 0x31
 8008f5e:	f806 3b01 	strb.w	r3, [r6], #1
 8008f62:	f108 0801 	add.w	r8, r8, #1
 8008f66:	e59f      	b.n	8008aa8 <_dtoa_r+0x498>
 8008f68:	9c03      	ldr	r4, [sp, #12]
 8008f6a:	46b8      	mov	r8, r7
 8008f6c:	4625      	mov	r5, r4
 8008f6e:	e7f4      	b.n	8008f5a <_dtoa_r+0x94a>
 8008f70:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008f74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	f000 8101 	beq.w	800917e <_dtoa_r+0xb6e>
 8008f7c:	2e00      	cmp	r6, #0
 8008f7e:	dd05      	ble.n	8008f8c <_dtoa_r+0x97c>
 8008f80:	4629      	mov	r1, r5
 8008f82:	4632      	mov	r2, r6
 8008f84:	4648      	mov	r0, r9
 8008f86:	f000 fc19 	bl	80097bc <__lshift>
 8008f8a:	4605      	mov	r5, r0
 8008f8c:	9b08      	ldr	r3, [sp, #32]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d05c      	beq.n	800904c <_dtoa_r+0xa3c>
 8008f92:	6869      	ldr	r1, [r5, #4]
 8008f94:	4648      	mov	r0, r9
 8008f96:	f000 fa0b 	bl	80093b0 <_Balloc>
 8008f9a:	4606      	mov	r6, r0
 8008f9c:	b928      	cbnz	r0, 8008faa <_dtoa_r+0x99a>
 8008f9e:	4b82      	ldr	r3, [pc, #520]	@ (80091a8 <_dtoa_r+0xb98>)
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008fa6:	f7ff bb4a 	b.w	800863e <_dtoa_r+0x2e>
 8008faa:	692a      	ldr	r2, [r5, #16]
 8008fac:	3202      	adds	r2, #2
 8008fae:	0092      	lsls	r2, r2, #2
 8008fb0:	f105 010c 	add.w	r1, r5, #12
 8008fb4:	300c      	adds	r0, #12
 8008fb6:	f7ff fa94 	bl	80084e2 <memcpy>
 8008fba:	2201      	movs	r2, #1
 8008fbc:	4631      	mov	r1, r6
 8008fbe:	4648      	mov	r0, r9
 8008fc0:	f000 fbfc 	bl	80097bc <__lshift>
 8008fc4:	f10a 0301 	add.w	r3, sl, #1
 8008fc8:	9300      	str	r3, [sp, #0]
 8008fca:	eb0a 030b 	add.w	r3, sl, fp
 8008fce:	9308      	str	r3, [sp, #32]
 8008fd0:	9b04      	ldr	r3, [sp, #16]
 8008fd2:	f003 0301 	and.w	r3, r3, #1
 8008fd6:	462f      	mov	r7, r5
 8008fd8:	9306      	str	r3, [sp, #24]
 8008fda:	4605      	mov	r5, r0
 8008fdc:	9b00      	ldr	r3, [sp, #0]
 8008fde:	9802      	ldr	r0, [sp, #8]
 8008fe0:	4621      	mov	r1, r4
 8008fe2:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8008fe6:	f7ff fa8a 	bl	80084fe <quorem>
 8008fea:	4603      	mov	r3, r0
 8008fec:	3330      	adds	r3, #48	@ 0x30
 8008fee:	9003      	str	r0, [sp, #12]
 8008ff0:	4639      	mov	r1, r7
 8008ff2:	9802      	ldr	r0, [sp, #8]
 8008ff4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ff6:	f000 fc4d 	bl	8009894 <__mcmp>
 8008ffa:	462a      	mov	r2, r5
 8008ffc:	9004      	str	r0, [sp, #16]
 8008ffe:	4621      	mov	r1, r4
 8009000:	4648      	mov	r0, r9
 8009002:	f000 fc63 	bl	80098cc <__mdiff>
 8009006:	68c2      	ldr	r2, [r0, #12]
 8009008:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800900a:	4606      	mov	r6, r0
 800900c:	bb02      	cbnz	r2, 8009050 <_dtoa_r+0xa40>
 800900e:	4601      	mov	r1, r0
 8009010:	9802      	ldr	r0, [sp, #8]
 8009012:	f000 fc3f 	bl	8009894 <__mcmp>
 8009016:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009018:	4602      	mov	r2, r0
 800901a:	4631      	mov	r1, r6
 800901c:	4648      	mov	r0, r9
 800901e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009020:	9309      	str	r3, [sp, #36]	@ 0x24
 8009022:	f000 fa05 	bl	8009430 <_Bfree>
 8009026:	9b07      	ldr	r3, [sp, #28]
 8009028:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800902a:	9e00      	ldr	r6, [sp, #0]
 800902c:	ea42 0103 	orr.w	r1, r2, r3
 8009030:	9b06      	ldr	r3, [sp, #24]
 8009032:	4319      	orrs	r1, r3
 8009034:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009036:	d10d      	bne.n	8009054 <_dtoa_r+0xa44>
 8009038:	2b39      	cmp	r3, #57	@ 0x39
 800903a:	d027      	beq.n	800908c <_dtoa_r+0xa7c>
 800903c:	9a04      	ldr	r2, [sp, #16]
 800903e:	2a00      	cmp	r2, #0
 8009040:	dd01      	ble.n	8009046 <_dtoa_r+0xa36>
 8009042:	9b03      	ldr	r3, [sp, #12]
 8009044:	3331      	adds	r3, #49	@ 0x31
 8009046:	f88b 3000 	strb.w	r3, [fp]
 800904a:	e52e      	b.n	8008aaa <_dtoa_r+0x49a>
 800904c:	4628      	mov	r0, r5
 800904e:	e7b9      	b.n	8008fc4 <_dtoa_r+0x9b4>
 8009050:	2201      	movs	r2, #1
 8009052:	e7e2      	b.n	800901a <_dtoa_r+0xa0a>
 8009054:	9904      	ldr	r1, [sp, #16]
 8009056:	2900      	cmp	r1, #0
 8009058:	db04      	blt.n	8009064 <_dtoa_r+0xa54>
 800905a:	9807      	ldr	r0, [sp, #28]
 800905c:	4301      	orrs	r1, r0
 800905e:	9806      	ldr	r0, [sp, #24]
 8009060:	4301      	orrs	r1, r0
 8009062:	d120      	bne.n	80090a6 <_dtoa_r+0xa96>
 8009064:	2a00      	cmp	r2, #0
 8009066:	ddee      	ble.n	8009046 <_dtoa_r+0xa36>
 8009068:	9902      	ldr	r1, [sp, #8]
 800906a:	9300      	str	r3, [sp, #0]
 800906c:	2201      	movs	r2, #1
 800906e:	4648      	mov	r0, r9
 8009070:	f000 fba4 	bl	80097bc <__lshift>
 8009074:	4621      	mov	r1, r4
 8009076:	9002      	str	r0, [sp, #8]
 8009078:	f000 fc0c 	bl	8009894 <__mcmp>
 800907c:	2800      	cmp	r0, #0
 800907e:	9b00      	ldr	r3, [sp, #0]
 8009080:	dc02      	bgt.n	8009088 <_dtoa_r+0xa78>
 8009082:	d1e0      	bne.n	8009046 <_dtoa_r+0xa36>
 8009084:	07da      	lsls	r2, r3, #31
 8009086:	d5de      	bpl.n	8009046 <_dtoa_r+0xa36>
 8009088:	2b39      	cmp	r3, #57	@ 0x39
 800908a:	d1da      	bne.n	8009042 <_dtoa_r+0xa32>
 800908c:	2339      	movs	r3, #57	@ 0x39
 800908e:	f88b 3000 	strb.w	r3, [fp]
 8009092:	4633      	mov	r3, r6
 8009094:	461e      	mov	r6, r3
 8009096:	3b01      	subs	r3, #1
 8009098:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800909c:	2a39      	cmp	r2, #57	@ 0x39
 800909e:	d04e      	beq.n	800913e <_dtoa_r+0xb2e>
 80090a0:	3201      	adds	r2, #1
 80090a2:	701a      	strb	r2, [r3, #0]
 80090a4:	e501      	b.n	8008aaa <_dtoa_r+0x49a>
 80090a6:	2a00      	cmp	r2, #0
 80090a8:	dd03      	ble.n	80090b2 <_dtoa_r+0xaa2>
 80090aa:	2b39      	cmp	r3, #57	@ 0x39
 80090ac:	d0ee      	beq.n	800908c <_dtoa_r+0xa7c>
 80090ae:	3301      	adds	r3, #1
 80090b0:	e7c9      	b.n	8009046 <_dtoa_r+0xa36>
 80090b2:	9a00      	ldr	r2, [sp, #0]
 80090b4:	9908      	ldr	r1, [sp, #32]
 80090b6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80090ba:	428a      	cmp	r2, r1
 80090bc:	d028      	beq.n	8009110 <_dtoa_r+0xb00>
 80090be:	9902      	ldr	r1, [sp, #8]
 80090c0:	2300      	movs	r3, #0
 80090c2:	220a      	movs	r2, #10
 80090c4:	4648      	mov	r0, r9
 80090c6:	f000 f9d5 	bl	8009474 <__multadd>
 80090ca:	42af      	cmp	r7, r5
 80090cc:	9002      	str	r0, [sp, #8]
 80090ce:	f04f 0300 	mov.w	r3, #0
 80090d2:	f04f 020a 	mov.w	r2, #10
 80090d6:	4639      	mov	r1, r7
 80090d8:	4648      	mov	r0, r9
 80090da:	d107      	bne.n	80090ec <_dtoa_r+0xadc>
 80090dc:	f000 f9ca 	bl	8009474 <__multadd>
 80090e0:	4607      	mov	r7, r0
 80090e2:	4605      	mov	r5, r0
 80090e4:	9b00      	ldr	r3, [sp, #0]
 80090e6:	3301      	adds	r3, #1
 80090e8:	9300      	str	r3, [sp, #0]
 80090ea:	e777      	b.n	8008fdc <_dtoa_r+0x9cc>
 80090ec:	f000 f9c2 	bl	8009474 <__multadd>
 80090f0:	4629      	mov	r1, r5
 80090f2:	4607      	mov	r7, r0
 80090f4:	2300      	movs	r3, #0
 80090f6:	220a      	movs	r2, #10
 80090f8:	4648      	mov	r0, r9
 80090fa:	f000 f9bb 	bl	8009474 <__multadd>
 80090fe:	4605      	mov	r5, r0
 8009100:	e7f0      	b.n	80090e4 <_dtoa_r+0xad4>
 8009102:	f1bb 0f00 	cmp.w	fp, #0
 8009106:	bfcc      	ite	gt
 8009108:	465e      	movgt	r6, fp
 800910a:	2601      	movle	r6, #1
 800910c:	4456      	add	r6, sl
 800910e:	2700      	movs	r7, #0
 8009110:	9902      	ldr	r1, [sp, #8]
 8009112:	9300      	str	r3, [sp, #0]
 8009114:	2201      	movs	r2, #1
 8009116:	4648      	mov	r0, r9
 8009118:	f000 fb50 	bl	80097bc <__lshift>
 800911c:	4621      	mov	r1, r4
 800911e:	9002      	str	r0, [sp, #8]
 8009120:	f000 fbb8 	bl	8009894 <__mcmp>
 8009124:	2800      	cmp	r0, #0
 8009126:	dcb4      	bgt.n	8009092 <_dtoa_r+0xa82>
 8009128:	d102      	bne.n	8009130 <_dtoa_r+0xb20>
 800912a:	9b00      	ldr	r3, [sp, #0]
 800912c:	07db      	lsls	r3, r3, #31
 800912e:	d4b0      	bmi.n	8009092 <_dtoa_r+0xa82>
 8009130:	4633      	mov	r3, r6
 8009132:	461e      	mov	r6, r3
 8009134:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009138:	2a30      	cmp	r2, #48	@ 0x30
 800913a:	d0fa      	beq.n	8009132 <_dtoa_r+0xb22>
 800913c:	e4b5      	b.n	8008aaa <_dtoa_r+0x49a>
 800913e:	459a      	cmp	sl, r3
 8009140:	d1a8      	bne.n	8009094 <_dtoa_r+0xa84>
 8009142:	2331      	movs	r3, #49	@ 0x31
 8009144:	f108 0801 	add.w	r8, r8, #1
 8009148:	f88a 3000 	strb.w	r3, [sl]
 800914c:	e4ad      	b.n	8008aaa <_dtoa_r+0x49a>
 800914e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009150:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80091ac <_dtoa_r+0xb9c>
 8009154:	b11b      	cbz	r3, 800915e <_dtoa_r+0xb4e>
 8009156:	f10a 0308 	add.w	r3, sl, #8
 800915a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800915c:	6013      	str	r3, [r2, #0]
 800915e:	4650      	mov	r0, sl
 8009160:	b017      	add	sp, #92	@ 0x5c
 8009162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009166:	9b07      	ldr	r3, [sp, #28]
 8009168:	2b01      	cmp	r3, #1
 800916a:	f77f ae2e 	ble.w	8008dca <_dtoa_r+0x7ba>
 800916e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009170:	9308      	str	r3, [sp, #32]
 8009172:	2001      	movs	r0, #1
 8009174:	e64d      	b.n	8008e12 <_dtoa_r+0x802>
 8009176:	f1bb 0f00 	cmp.w	fp, #0
 800917a:	f77f aed9 	ble.w	8008f30 <_dtoa_r+0x920>
 800917e:	4656      	mov	r6, sl
 8009180:	9802      	ldr	r0, [sp, #8]
 8009182:	4621      	mov	r1, r4
 8009184:	f7ff f9bb 	bl	80084fe <quorem>
 8009188:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800918c:	f806 3b01 	strb.w	r3, [r6], #1
 8009190:	eba6 020a 	sub.w	r2, r6, sl
 8009194:	4593      	cmp	fp, r2
 8009196:	ddb4      	ble.n	8009102 <_dtoa_r+0xaf2>
 8009198:	9902      	ldr	r1, [sp, #8]
 800919a:	2300      	movs	r3, #0
 800919c:	220a      	movs	r2, #10
 800919e:	4648      	mov	r0, r9
 80091a0:	f000 f968 	bl	8009474 <__multadd>
 80091a4:	9002      	str	r0, [sp, #8]
 80091a6:	e7eb      	b.n	8009180 <_dtoa_r+0xb70>
 80091a8:	0800a390 	.word	0x0800a390
 80091ac:	0800a314 	.word	0x0800a314

080091b0 <_free_r>:
 80091b0:	b538      	push	{r3, r4, r5, lr}
 80091b2:	4605      	mov	r5, r0
 80091b4:	2900      	cmp	r1, #0
 80091b6:	d041      	beq.n	800923c <_free_r+0x8c>
 80091b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091bc:	1f0c      	subs	r4, r1, #4
 80091be:	2b00      	cmp	r3, #0
 80091c0:	bfb8      	it	lt
 80091c2:	18e4      	addlt	r4, r4, r3
 80091c4:	f000 f8e8 	bl	8009398 <__malloc_lock>
 80091c8:	4a1d      	ldr	r2, [pc, #116]	@ (8009240 <_free_r+0x90>)
 80091ca:	6813      	ldr	r3, [r2, #0]
 80091cc:	b933      	cbnz	r3, 80091dc <_free_r+0x2c>
 80091ce:	6063      	str	r3, [r4, #4]
 80091d0:	6014      	str	r4, [r2, #0]
 80091d2:	4628      	mov	r0, r5
 80091d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091d8:	f000 b8e4 	b.w	80093a4 <__malloc_unlock>
 80091dc:	42a3      	cmp	r3, r4
 80091de:	d908      	bls.n	80091f2 <_free_r+0x42>
 80091e0:	6820      	ldr	r0, [r4, #0]
 80091e2:	1821      	adds	r1, r4, r0
 80091e4:	428b      	cmp	r3, r1
 80091e6:	bf01      	itttt	eq
 80091e8:	6819      	ldreq	r1, [r3, #0]
 80091ea:	685b      	ldreq	r3, [r3, #4]
 80091ec:	1809      	addeq	r1, r1, r0
 80091ee:	6021      	streq	r1, [r4, #0]
 80091f0:	e7ed      	b.n	80091ce <_free_r+0x1e>
 80091f2:	461a      	mov	r2, r3
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	b10b      	cbz	r3, 80091fc <_free_r+0x4c>
 80091f8:	42a3      	cmp	r3, r4
 80091fa:	d9fa      	bls.n	80091f2 <_free_r+0x42>
 80091fc:	6811      	ldr	r1, [r2, #0]
 80091fe:	1850      	adds	r0, r2, r1
 8009200:	42a0      	cmp	r0, r4
 8009202:	d10b      	bne.n	800921c <_free_r+0x6c>
 8009204:	6820      	ldr	r0, [r4, #0]
 8009206:	4401      	add	r1, r0
 8009208:	1850      	adds	r0, r2, r1
 800920a:	4283      	cmp	r3, r0
 800920c:	6011      	str	r1, [r2, #0]
 800920e:	d1e0      	bne.n	80091d2 <_free_r+0x22>
 8009210:	6818      	ldr	r0, [r3, #0]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	6053      	str	r3, [r2, #4]
 8009216:	4408      	add	r0, r1
 8009218:	6010      	str	r0, [r2, #0]
 800921a:	e7da      	b.n	80091d2 <_free_r+0x22>
 800921c:	d902      	bls.n	8009224 <_free_r+0x74>
 800921e:	230c      	movs	r3, #12
 8009220:	602b      	str	r3, [r5, #0]
 8009222:	e7d6      	b.n	80091d2 <_free_r+0x22>
 8009224:	6820      	ldr	r0, [r4, #0]
 8009226:	1821      	adds	r1, r4, r0
 8009228:	428b      	cmp	r3, r1
 800922a:	bf04      	itt	eq
 800922c:	6819      	ldreq	r1, [r3, #0]
 800922e:	685b      	ldreq	r3, [r3, #4]
 8009230:	6063      	str	r3, [r4, #4]
 8009232:	bf04      	itt	eq
 8009234:	1809      	addeq	r1, r1, r0
 8009236:	6021      	streq	r1, [r4, #0]
 8009238:	6054      	str	r4, [r2, #4]
 800923a:	e7ca      	b.n	80091d2 <_free_r+0x22>
 800923c:	bd38      	pop	{r3, r4, r5, pc}
 800923e:	bf00      	nop
 8009240:	2000071c 	.word	0x2000071c

08009244 <malloc>:
 8009244:	4b02      	ldr	r3, [pc, #8]	@ (8009250 <malloc+0xc>)
 8009246:	4601      	mov	r1, r0
 8009248:	6818      	ldr	r0, [r3, #0]
 800924a:	f000 b825 	b.w	8009298 <_malloc_r>
 800924e:	bf00      	nop
 8009250:	20000064 	.word	0x20000064

08009254 <sbrk_aligned>:
 8009254:	b570      	push	{r4, r5, r6, lr}
 8009256:	4e0f      	ldr	r6, [pc, #60]	@ (8009294 <sbrk_aligned+0x40>)
 8009258:	460c      	mov	r4, r1
 800925a:	6831      	ldr	r1, [r6, #0]
 800925c:	4605      	mov	r5, r0
 800925e:	b911      	cbnz	r1, 8009266 <sbrk_aligned+0x12>
 8009260:	f000 fccc 	bl	8009bfc <_sbrk_r>
 8009264:	6030      	str	r0, [r6, #0]
 8009266:	4621      	mov	r1, r4
 8009268:	4628      	mov	r0, r5
 800926a:	f000 fcc7 	bl	8009bfc <_sbrk_r>
 800926e:	1c43      	adds	r3, r0, #1
 8009270:	d103      	bne.n	800927a <sbrk_aligned+0x26>
 8009272:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009276:	4620      	mov	r0, r4
 8009278:	bd70      	pop	{r4, r5, r6, pc}
 800927a:	1cc4      	adds	r4, r0, #3
 800927c:	f024 0403 	bic.w	r4, r4, #3
 8009280:	42a0      	cmp	r0, r4
 8009282:	d0f8      	beq.n	8009276 <sbrk_aligned+0x22>
 8009284:	1a21      	subs	r1, r4, r0
 8009286:	4628      	mov	r0, r5
 8009288:	f000 fcb8 	bl	8009bfc <_sbrk_r>
 800928c:	3001      	adds	r0, #1
 800928e:	d1f2      	bne.n	8009276 <sbrk_aligned+0x22>
 8009290:	e7ef      	b.n	8009272 <sbrk_aligned+0x1e>
 8009292:	bf00      	nop
 8009294:	20000718 	.word	0x20000718

08009298 <_malloc_r>:
 8009298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800929c:	1ccd      	adds	r5, r1, #3
 800929e:	f025 0503 	bic.w	r5, r5, #3
 80092a2:	3508      	adds	r5, #8
 80092a4:	2d0c      	cmp	r5, #12
 80092a6:	bf38      	it	cc
 80092a8:	250c      	movcc	r5, #12
 80092aa:	2d00      	cmp	r5, #0
 80092ac:	4606      	mov	r6, r0
 80092ae:	db01      	blt.n	80092b4 <_malloc_r+0x1c>
 80092b0:	42a9      	cmp	r1, r5
 80092b2:	d904      	bls.n	80092be <_malloc_r+0x26>
 80092b4:	230c      	movs	r3, #12
 80092b6:	6033      	str	r3, [r6, #0]
 80092b8:	2000      	movs	r0, #0
 80092ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009394 <_malloc_r+0xfc>
 80092c2:	f000 f869 	bl	8009398 <__malloc_lock>
 80092c6:	f8d8 3000 	ldr.w	r3, [r8]
 80092ca:	461c      	mov	r4, r3
 80092cc:	bb44      	cbnz	r4, 8009320 <_malloc_r+0x88>
 80092ce:	4629      	mov	r1, r5
 80092d0:	4630      	mov	r0, r6
 80092d2:	f7ff ffbf 	bl	8009254 <sbrk_aligned>
 80092d6:	1c43      	adds	r3, r0, #1
 80092d8:	4604      	mov	r4, r0
 80092da:	d158      	bne.n	800938e <_malloc_r+0xf6>
 80092dc:	f8d8 4000 	ldr.w	r4, [r8]
 80092e0:	4627      	mov	r7, r4
 80092e2:	2f00      	cmp	r7, #0
 80092e4:	d143      	bne.n	800936e <_malloc_r+0xd6>
 80092e6:	2c00      	cmp	r4, #0
 80092e8:	d04b      	beq.n	8009382 <_malloc_r+0xea>
 80092ea:	6823      	ldr	r3, [r4, #0]
 80092ec:	4639      	mov	r1, r7
 80092ee:	4630      	mov	r0, r6
 80092f0:	eb04 0903 	add.w	r9, r4, r3
 80092f4:	f000 fc82 	bl	8009bfc <_sbrk_r>
 80092f8:	4581      	cmp	r9, r0
 80092fa:	d142      	bne.n	8009382 <_malloc_r+0xea>
 80092fc:	6821      	ldr	r1, [r4, #0]
 80092fe:	1a6d      	subs	r5, r5, r1
 8009300:	4629      	mov	r1, r5
 8009302:	4630      	mov	r0, r6
 8009304:	f7ff ffa6 	bl	8009254 <sbrk_aligned>
 8009308:	3001      	adds	r0, #1
 800930a:	d03a      	beq.n	8009382 <_malloc_r+0xea>
 800930c:	6823      	ldr	r3, [r4, #0]
 800930e:	442b      	add	r3, r5
 8009310:	6023      	str	r3, [r4, #0]
 8009312:	f8d8 3000 	ldr.w	r3, [r8]
 8009316:	685a      	ldr	r2, [r3, #4]
 8009318:	bb62      	cbnz	r2, 8009374 <_malloc_r+0xdc>
 800931a:	f8c8 7000 	str.w	r7, [r8]
 800931e:	e00f      	b.n	8009340 <_malloc_r+0xa8>
 8009320:	6822      	ldr	r2, [r4, #0]
 8009322:	1b52      	subs	r2, r2, r5
 8009324:	d420      	bmi.n	8009368 <_malloc_r+0xd0>
 8009326:	2a0b      	cmp	r2, #11
 8009328:	d917      	bls.n	800935a <_malloc_r+0xc2>
 800932a:	1961      	adds	r1, r4, r5
 800932c:	42a3      	cmp	r3, r4
 800932e:	6025      	str	r5, [r4, #0]
 8009330:	bf18      	it	ne
 8009332:	6059      	strne	r1, [r3, #4]
 8009334:	6863      	ldr	r3, [r4, #4]
 8009336:	bf08      	it	eq
 8009338:	f8c8 1000 	streq.w	r1, [r8]
 800933c:	5162      	str	r2, [r4, r5]
 800933e:	604b      	str	r3, [r1, #4]
 8009340:	4630      	mov	r0, r6
 8009342:	f000 f82f 	bl	80093a4 <__malloc_unlock>
 8009346:	f104 000b 	add.w	r0, r4, #11
 800934a:	1d23      	adds	r3, r4, #4
 800934c:	f020 0007 	bic.w	r0, r0, #7
 8009350:	1ac2      	subs	r2, r0, r3
 8009352:	bf1c      	itt	ne
 8009354:	1a1b      	subne	r3, r3, r0
 8009356:	50a3      	strne	r3, [r4, r2]
 8009358:	e7af      	b.n	80092ba <_malloc_r+0x22>
 800935a:	6862      	ldr	r2, [r4, #4]
 800935c:	42a3      	cmp	r3, r4
 800935e:	bf0c      	ite	eq
 8009360:	f8c8 2000 	streq.w	r2, [r8]
 8009364:	605a      	strne	r2, [r3, #4]
 8009366:	e7eb      	b.n	8009340 <_malloc_r+0xa8>
 8009368:	4623      	mov	r3, r4
 800936a:	6864      	ldr	r4, [r4, #4]
 800936c:	e7ae      	b.n	80092cc <_malloc_r+0x34>
 800936e:	463c      	mov	r4, r7
 8009370:	687f      	ldr	r7, [r7, #4]
 8009372:	e7b6      	b.n	80092e2 <_malloc_r+0x4a>
 8009374:	461a      	mov	r2, r3
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	42a3      	cmp	r3, r4
 800937a:	d1fb      	bne.n	8009374 <_malloc_r+0xdc>
 800937c:	2300      	movs	r3, #0
 800937e:	6053      	str	r3, [r2, #4]
 8009380:	e7de      	b.n	8009340 <_malloc_r+0xa8>
 8009382:	230c      	movs	r3, #12
 8009384:	6033      	str	r3, [r6, #0]
 8009386:	4630      	mov	r0, r6
 8009388:	f000 f80c 	bl	80093a4 <__malloc_unlock>
 800938c:	e794      	b.n	80092b8 <_malloc_r+0x20>
 800938e:	6005      	str	r5, [r0, #0]
 8009390:	e7d6      	b.n	8009340 <_malloc_r+0xa8>
 8009392:	bf00      	nop
 8009394:	2000071c 	.word	0x2000071c

08009398 <__malloc_lock>:
 8009398:	4801      	ldr	r0, [pc, #4]	@ (80093a0 <__malloc_lock+0x8>)
 800939a:	f7ff b8a0 	b.w	80084de <__retarget_lock_acquire_recursive>
 800939e:	bf00      	nop
 80093a0:	20000714 	.word	0x20000714

080093a4 <__malloc_unlock>:
 80093a4:	4801      	ldr	r0, [pc, #4]	@ (80093ac <__malloc_unlock+0x8>)
 80093a6:	f7ff b89b 	b.w	80084e0 <__retarget_lock_release_recursive>
 80093aa:	bf00      	nop
 80093ac:	20000714 	.word	0x20000714

080093b0 <_Balloc>:
 80093b0:	b570      	push	{r4, r5, r6, lr}
 80093b2:	69c6      	ldr	r6, [r0, #28]
 80093b4:	4604      	mov	r4, r0
 80093b6:	460d      	mov	r5, r1
 80093b8:	b976      	cbnz	r6, 80093d8 <_Balloc+0x28>
 80093ba:	2010      	movs	r0, #16
 80093bc:	f7ff ff42 	bl	8009244 <malloc>
 80093c0:	4602      	mov	r2, r0
 80093c2:	61e0      	str	r0, [r4, #28]
 80093c4:	b920      	cbnz	r0, 80093d0 <_Balloc+0x20>
 80093c6:	4b18      	ldr	r3, [pc, #96]	@ (8009428 <_Balloc+0x78>)
 80093c8:	4818      	ldr	r0, [pc, #96]	@ (800942c <_Balloc+0x7c>)
 80093ca:	216b      	movs	r1, #107	@ 0x6b
 80093cc:	f000 fc26 	bl	8009c1c <__assert_func>
 80093d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80093d4:	6006      	str	r6, [r0, #0]
 80093d6:	60c6      	str	r6, [r0, #12]
 80093d8:	69e6      	ldr	r6, [r4, #28]
 80093da:	68f3      	ldr	r3, [r6, #12]
 80093dc:	b183      	cbz	r3, 8009400 <_Balloc+0x50>
 80093de:	69e3      	ldr	r3, [r4, #28]
 80093e0:	68db      	ldr	r3, [r3, #12]
 80093e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80093e6:	b9b8      	cbnz	r0, 8009418 <_Balloc+0x68>
 80093e8:	2101      	movs	r1, #1
 80093ea:	fa01 f605 	lsl.w	r6, r1, r5
 80093ee:	1d72      	adds	r2, r6, #5
 80093f0:	0092      	lsls	r2, r2, #2
 80093f2:	4620      	mov	r0, r4
 80093f4:	f000 fc30 	bl	8009c58 <_calloc_r>
 80093f8:	b160      	cbz	r0, 8009414 <_Balloc+0x64>
 80093fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80093fe:	e00e      	b.n	800941e <_Balloc+0x6e>
 8009400:	2221      	movs	r2, #33	@ 0x21
 8009402:	2104      	movs	r1, #4
 8009404:	4620      	mov	r0, r4
 8009406:	f000 fc27 	bl	8009c58 <_calloc_r>
 800940a:	69e3      	ldr	r3, [r4, #28]
 800940c:	60f0      	str	r0, [r6, #12]
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d1e4      	bne.n	80093de <_Balloc+0x2e>
 8009414:	2000      	movs	r0, #0
 8009416:	bd70      	pop	{r4, r5, r6, pc}
 8009418:	6802      	ldr	r2, [r0, #0]
 800941a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800941e:	2300      	movs	r3, #0
 8009420:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009424:	e7f7      	b.n	8009416 <_Balloc+0x66>
 8009426:	bf00      	nop
 8009428:	0800a321 	.word	0x0800a321
 800942c:	0800a3a1 	.word	0x0800a3a1

08009430 <_Bfree>:
 8009430:	b570      	push	{r4, r5, r6, lr}
 8009432:	69c6      	ldr	r6, [r0, #28]
 8009434:	4605      	mov	r5, r0
 8009436:	460c      	mov	r4, r1
 8009438:	b976      	cbnz	r6, 8009458 <_Bfree+0x28>
 800943a:	2010      	movs	r0, #16
 800943c:	f7ff ff02 	bl	8009244 <malloc>
 8009440:	4602      	mov	r2, r0
 8009442:	61e8      	str	r0, [r5, #28]
 8009444:	b920      	cbnz	r0, 8009450 <_Bfree+0x20>
 8009446:	4b09      	ldr	r3, [pc, #36]	@ (800946c <_Bfree+0x3c>)
 8009448:	4809      	ldr	r0, [pc, #36]	@ (8009470 <_Bfree+0x40>)
 800944a:	218f      	movs	r1, #143	@ 0x8f
 800944c:	f000 fbe6 	bl	8009c1c <__assert_func>
 8009450:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009454:	6006      	str	r6, [r0, #0]
 8009456:	60c6      	str	r6, [r0, #12]
 8009458:	b13c      	cbz	r4, 800946a <_Bfree+0x3a>
 800945a:	69eb      	ldr	r3, [r5, #28]
 800945c:	6862      	ldr	r2, [r4, #4]
 800945e:	68db      	ldr	r3, [r3, #12]
 8009460:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009464:	6021      	str	r1, [r4, #0]
 8009466:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800946a:	bd70      	pop	{r4, r5, r6, pc}
 800946c:	0800a321 	.word	0x0800a321
 8009470:	0800a3a1 	.word	0x0800a3a1

08009474 <__multadd>:
 8009474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009478:	690d      	ldr	r5, [r1, #16]
 800947a:	4607      	mov	r7, r0
 800947c:	460c      	mov	r4, r1
 800947e:	461e      	mov	r6, r3
 8009480:	f101 0c14 	add.w	ip, r1, #20
 8009484:	2000      	movs	r0, #0
 8009486:	f8dc 3000 	ldr.w	r3, [ip]
 800948a:	b299      	uxth	r1, r3
 800948c:	fb02 6101 	mla	r1, r2, r1, r6
 8009490:	0c1e      	lsrs	r6, r3, #16
 8009492:	0c0b      	lsrs	r3, r1, #16
 8009494:	fb02 3306 	mla	r3, r2, r6, r3
 8009498:	b289      	uxth	r1, r1
 800949a:	3001      	adds	r0, #1
 800949c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80094a0:	4285      	cmp	r5, r0
 80094a2:	f84c 1b04 	str.w	r1, [ip], #4
 80094a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80094aa:	dcec      	bgt.n	8009486 <__multadd+0x12>
 80094ac:	b30e      	cbz	r6, 80094f2 <__multadd+0x7e>
 80094ae:	68a3      	ldr	r3, [r4, #8]
 80094b0:	42ab      	cmp	r3, r5
 80094b2:	dc19      	bgt.n	80094e8 <__multadd+0x74>
 80094b4:	6861      	ldr	r1, [r4, #4]
 80094b6:	4638      	mov	r0, r7
 80094b8:	3101      	adds	r1, #1
 80094ba:	f7ff ff79 	bl	80093b0 <_Balloc>
 80094be:	4680      	mov	r8, r0
 80094c0:	b928      	cbnz	r0, 80094ce <__multadd+0x5a>
 80094c2:	4602      	mov	r2, r0
 80094c4:	4b0c      	ldr	r3, [pc, #48]	@ (80094f8 <__multadd+0x84>)
 80094c6:	480d      	ldr	r0, [pc, #52]	@ (80094fc <__multadd+0x88>)
 80094c8:	21ba      	movs	r1, #186	@ 0xba
 80094ca:	f000 fba7 	bl	8009c1c <__assert_func>
 80094ce:	6922      	ldr	r2, [r4, #16]
 80094d0:	3202      	adds	r2, #2
 80094d2:	f104 010c 	add.w	r1, r4, #12
 80094d6:	0092      	lsls	r2, r2, #2
 80094d8:	300c      	adds	r0, #12
 80094da:	f7ff f802 	bl	80084e2 <memcpy>
 80094de:	4621      	mov	r1, r4
 80094e0:	4638      	mov	r0, r7
 80094e2:	f7ff ffa5 	bl	8009430 <_Bfree>
 80094e6:	4644      	mov	r4, r8
 80094e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80094ec:	3501      	adds	r5, #1
 80094ee:	615e      	str	r6, [r3, #20]
 80094f0:	6125      	str	r5, [r4, #16]
 80094f2:	4620      	mov	r0, r4
 80094f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094f8:	0800a390 	.word	0x0800a390
 80094fc:	0800a3a1 	.word	0x0800a3a1

08009500 <__hi0bits>:
 8009500:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009504:	4603      	mov	r3, r0
 8009506:	bf36      	itet	cc
 8009508:	0403      	lslcc	r3, r0, #16
 800950a:	2000      	movcs	r0, #0
 800950c:	2010      	movcc	r0, #16
 800950e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009512:	bf3c      	itt	cc
 8009514:	021b      	lslcc	r3, r3, #8
 8009516:	3008      	addcc	r0, #8
 8009518:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800951c:	bf3c      	itt	cc
 800951e:	011b      	lslcc	r3, r3, #4
 8009520:	3004      	addcc	r0, #4
 8009522:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009526:	bf3c      	itt	cc
 8009528:	009b      	lslcc	r3, r3, #2
 800952a:	3002      	addcc	r0, #2
 800952c:	2b00      	cmp	r3, #0
 800952e:	db05      	blt.n	800953c <__hi0bits+0x3c>
 8009530:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009534:	f100 0001 	add.w	r0, r0, #1
 8009538:	bf08      	it	eq
 800953a:	2020      	moveq	r0, #32
 800953c:	4770      	bx	lr

0800953e <__lo0bits>:
 800953e:	6803      	ldr	r3, [r0, #0]
 8009540:	4602      	mov	r2, r0
 8009542:	f013 0007 	ands.w	r0, r3, #7
 8009546:	d00b      	beq.n	8009560 <__lo0bits+0x22>
 8009548:	07d9      	lsls	r1, r3, #31
 800954a:	d421      	bmi.n	8009590 <__lo0bits+0x52>
 800954c:	0798      	lsls	r0, r3, #30
 800954e:	bf49      	itett	mi
 8009550:	085b      	lsrmi	r3, r3, #1
 8009552:	089b      	lsrpl	r3, r3, #2
 8009554:	2001      	movmi	r0, #1
 8009556:	6013      	strmi	r3, [r2, #0]
 8009558:	bf5c      	itt	pl
 800955a:	6013      	strpl	r3, [r2, #0]
 800955c:	2002      	movpl	r0, #2
 800955e:	4770      	bx	lr
 8009560:	b299      	uxth	r1, r3
 8009562:	b909      	cbnz	r1, 8009568 <__lo0bits+0x2a>
 8009564:	0c1b      	lsrs	r3, r3, #16
 8009566:	2010      	movs	r0, #16
 8009568:	b2d9      	uxtb	r1, r3
 800956a:	b909      	cbnz	r1, 8009570 <__lo0bits+0x32>
 800956c:	3008      	adds	r0, #8
 800956e:	0a1b      	lsrs	r3, r3, #8
 8009570:	0719      	lsls	r1, r3, #28
 8009572:	bf04      	itt	eq
 8009574:	091b      	lsreq	r3, r3, #4
 8009576:	3004      	addeq	r0, #4
 8009578:	0799      	lsls	r1, r3, #30
 800957a:	bf04      	itt	eq
 800957c:	089b      	lsreq	r3, r3, #2
 800957e:	3002      	addeq	r0, #2
 8009580:	07d9      	lsls	r1, r3, #31
 8009582:	d403      	bmi.n	800958c <__lo0bits+0x4e>
 8009584:	085b      	lsrs	r3, r3, #1
 8009586:	f100 0001 	add.w	r0, r0, #1
 800958a:	d003      	beq.n	8009594 <__lo0bits+0x56>
 800958c:	6013      	str	r3, [r2, #0]
 800958e:	4770      	bx	lr
 8009590:	2000      	movs	r0, #0
 8009592:	4770      	bx	lr
 8009594:	2020      	movs	r0, #32
 8009596:	4770      	bx	lr

08009598 <__i2b>:
 8009598:	b510      	push	{r4, lr}
 800959a:	460c      	mov	r4, r1
 800959c:	2101      	movs	r1, #1
 800959e:	f7ff ff07 	bl	80093b0 <_Balloc>
 80095a2:	4602      	mov	r2, r0
 80095a4:	b928      	cbnz	r0, 80095b2 <__i2b+0x1a>
 80095a6:	4b05      	ldr	r3, [pc, #20]	@ (80095bc <__i2b+0x24>)
 80095a8:	4805      	ldr	r0, [pc, #20]	@ (80095c0 <__i2b+0x28>)
 80095aa:	f240 1145 	movw	r1, #325	@ 0x145
 80095ae:	f000 fb35 	bl	8009c1c <__assert_func>
 80095b2:	2301      	movs	r3, #1
 80095b4:	6144      	str	r4, [r0, #20]
 80095b6:	6103      	str	r3, [r0, #16]
 80095b8:	bd10      	pop	{r4, pc}
 80095ba:	bf00      	nop
 80095bc:	0800a390 	.word	0x0800a390
 80095c0:	0800a3a1 	.word	0x0800a3a1

080095c4 <__multiply>:
 80095c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095c8:	4617      	mov	r7, r2
 80095ca:	690a      	ldr	r2, [r1, #16]
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	429a      	cmp	r2, r3
 80095d0:	bfa8      	it	ge
 80095d2:	463b      	movge	r3, r7
 80095d4:	4689      	mov	r9, r1
 80095d6:	bfa4      	itt	ge
 80095d8:	460f      	movge	r7, r1
 80095da:	4699      	movge	r9, r3
 80095dc:	693d      	ldr	r5, [r7, #16]
 80095de:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	6879      	ldr	r1, [r7, #4]
 80095e6:	eb05 060a 	add.w	r6, r5, sl
 80095ea:	42b3      	cmp	r3, r6
 80095ec:	b085      	sub	sp, #20
 80095ee:	bfb8      	it	lt
 80095f0:	3101      	addlt	r1, #1
 80095f2:	f7ff fedd 	bl	80093b0 <_Balloc>
 80095f6:	b930      	cbnz	r0, 8009606 <__multiply+0x42>
 80095f8:	4602      	mov	r2, r0
 80095fa:	4b41      	ldr	r3, [pc, #260]	@ (8009700 <__multiply+0x13c>)
 80095fc:	4841      	ldr	r0, [pc, #260]	@ (8009704 <__multiply+0x140>)
 80095fe:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009602:	f000 fb0b 	bl	8009c1c <__assert_func>
 8009606:	f100 0414 	add.w	r4, r0, #20
 800960a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800960e:	4623      	mov	r3, r4
 8009610:	2200      	movs	r2, #0
 8009612:	4573      	cmp	r3, lr
 8009614:	d320      	bcc.n	8009658 <__multiply+0x94>
 8009616:	f107 0814 	add.w	r8, r7, #20
 800961a:	f109 0114 	add.w	r1, r9, #20
 800961e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009622:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009626:	9302      	str	r3, [sp, #8]
 8009628:	1beb      	subs	r3, r5, r7
 800962a:	3b15      	subs	r3, #21
 800962c:	f023 0303 	bic.w	r3, r3, #3
 8009630:	3304      	adds	r3, #4
 8009632:	3715      	adds	r7, #21
 8009634:	42bd      	cmp	r5, r7
 8009636:	bf38      	it	cc
 8009638:	2304      	movcc	r3, #4
 800963a:	9301      	str	r3, [sp, #4]
 800963c:	9b02      	ldr	r3, [sp, #8]
 800963e:	9103      	str	r1, [sp, #12]
 8009640:	428b      	cmp	r3, r1
 8009642:	d80c      	bhi.n	800965e <__multiply+0x9a>
 8009644:	2e00      	cmp	r6, #0
 8009646:	dd03      	ble.n	8009650 <__multiply+0x8c>
 8009648:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800964c:	2b00      	cmp	r3, #0
 800964e:	d055      	beq.n	80096fc <__multiply+0x138>
 8009650:	6106      	str	r6, [r0, #16]
 8009652:	b005      	add	sp, #20
 8009654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009658:	f843 2b04 	str.w	r2, [r3], #4
 800965c:	e7d9      	b.n	8009612 <__multiply+0x4e>
 800965e:	f8b1 a000 	ldrh.w	sl, [r1]
 8009662:	f1ba 0f00 	cmp.w	sl, #0
 8009666:	d01f      	beq.n	80096a8 <__multiply+0xe4>
 8009668:	46c4      	mov	ip, r8
 800966a:	46a1      	mov	r9, r4
 800966c:	2700      	movs	r7, #0
 800966e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009672:	f8d9 3000 	ldr.w	r3, [r9]
 8009676:	fa1f fb82 	uxth.w	fp, r2
 800967a:	b29b      	uxth	r3, r3
 800967c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009680:	443b      	add	r3, r7
 8009682:	f8d9 7000 	ldr.w	r7, [r9]
 8009686:	0c12      	lsrs	r2, r2, #16
 8009688:	0c3f      	lsrs	r7, r7, #16
 800968a:	fb0a 7202 	mla	r2, sl, r2, r7
 800968e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009692:	b29b      	uxth	r3, r3
 8009694:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009698:	4565      	cmp	r5, ip
 800969a:	f849 3b04 	str.w	r3, [r9], #4
 800969e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80096a2:	d8e4      	bhi.n	800966e <__multiply+0xaa>
 80096a4:	9b01      	ldr	r3, [sp, #4]
 80096a6:	50e7      	str	r7, [r4, r3]
 80096a8:	9b03      	ldr	r3, [sp, #12]
 80096aa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80096ae:	3104      	adds	r1, #4
 80096b0:	f1b9 0f00 	cmp.w	r9, #0
 80096b4:	d020      	beq.n	80096f8 <__multiply+0x134>
 80096b6:	6823      	ldr	r3, [r4, #0]
 80096b8:	4647      	mov	r7, r8
 80096ba:	46a4      	mov	ip, r4
 80096bc:	f04f 0a00 	mov.w	sl, #0
 80096c0:	f8b7 b000 	ldrh.w	fp, [r7]
 80096c4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80096c8:	fb09 220b 	mla	r2, r9, fp, r2
 80096cc:	4452      	add	r2, sl
 80096ce:	b29b      	uxth	r3, r3
 80096d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096d4:	f84c 3b04 	str.w	r3, [ip], #4
 80096d8:	f857 3b04 	ldr.w	r3, [r7], #4
 80096dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80096e0:	f8bc 3000 	ldrh.w	r3, [ip]
 80096e4:	fb09 330a 	mla	r3, r9, sl, r3
 80096e8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80096ec:	42bd      	cmp	r5, r7
 80096ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80096f2:	d8e5      	bhi.n	80096c0 <__multiply+0xfc>
 80096f4:	9a01      	ldr	r2, [sp, #4]
 80096f6:	50a3      	str	r3, [r4, r2]
 80096f8:	3404      	adds	r4, #4
 80096fa:	e79f      	b.n	800963c <__multiply+0x78>
 80096fc:	3e01      	subs	r6, #1
 80096fe:	e7a1      	b.n	8009644 <__multiply+0x80>
 8009700:	0800a390 	.word	0x0800a390
 8009704:	0800a3a1 	.word	0x0800a3a1

08009708 <__pow5mult>:
 8009708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800970c:	4615      	mov	r5, r2
 800970e:	f012 0203 	ands.w	r2, r2, #3
 8009712:	4607      	mov	r7, r0
 8009714:	460e      	mov	r6, r1
 8009716:	d007      	beq.n	8009728 <__pow5mult+0x20>
 8009718:	4c25      	ldr	r4, [pc, #148]	@ (80097b0 <__pow5mult+0xa8>)
 800971a:	3a01      	subs	r2, #1
 800971c:	2300      	movs	r3, #0
 800971e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009722:	f7ff fea7 	bl	8009474 <__multadd>
 8009726:	4606      	mov	r6, r0
 8009728:	10ad      	asrs	r5, r5, #2
 800972a:	d03d      	beq.n	80097a8 <__pow5mult+0xa0>
 800972c:	69fc      	ldr	r4, [r7, #28]
 800972e:	b97c      	cbnz	r4, 8009750 <__pow5mult+0x48>
 8009730:	2010      	movs	r0, #16
 8009732:	f7ff fd87 	bl	8009244 <malloc>
 8009736:	4602      	mov	r2, r0
 8009738:	61f8      	str	r0, [r7, #28]
 800973a:	b928      	cbnz	r0, 8009748 <__pow5mult+0x40>
 800973c:	4b1d      	ldr	r3, [pc, #116]	@ (80097b4 <__pow5mult+0xac>)
 800973e:	481e      	ldr	r0, [pc, #120]	@ (80097b8 <__pow5mult+0xb0>)
 8009740:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009744:	f000 fa6a 	bl	8009c1c <__assert_func>
 8009748:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800974c:	6004      	str	r4, [r0, #0]
 800974e:	60c4      	str	r4, [r0, #12]
 8009750:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009754:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009758:	b94c      	cbnz	r4, 800976e <__pow5mult+0x66>
 800975a:	f240 2171 	movw	r1, #625	@ 0x271
 800975e:	4638      	mov	r0, r7
 8009760:	f7ff ff1a 	bl	8009598 <__i2b>
 8009764:	2300      	movs	r3, #0
 8009766:	f8c8 0008 	str.w	r0, [r8, #8]
 800976a:	4604      	mov	r4, r0
 800976c:	6003      	str	r3, [r0, #0]
 800976e:	f04f 0900 	mov.w	r9, #0
 8009772:	07eb      	lsls	r3, r5, #31
 8009774:	d50a      	bpl.n	800978c <__pow5mult+0x84>
 8009776:	4631      	mov	r1, r6
 8009778:	4622      	mov	r2, r4
 800977a:	4638      	mov	r0, r7
 800977c:	f7ff ff22 	bl	80095c4 <__multiply>
 8009780:	4631      	mov	r1, r6
 8009782:	4680      	mov	r8, r0
 8009784:	4638      	mov	r0, r7
 8009786:	f7ff fe53 	bl	8009430 <_Bfree>
 800978a:	4646      	mov	r6, r8
 800978c:	106d      	asrs	r5, r5, #1
 800978e:	d00b      	beq.n	80097a8 <__pow5mult+0xa0>
 8009790:	6820      	ldr	r0, [r4, #0]
 8009792:	b938      	cbnz	r0, 80097a4 <__pow5mult+0x9c>
 8009794:	4622      	mov	r2, r4
 8009796:	4621      	mov	r1, r4
 8009798:	4638      	mov	r0, r7
 800979a:	f7ff ff13 	bl	80095c4 <__multiply>
 800979e:	6020      	str	r0, [r4, #0]
 80097a0:	f8c0 9000 	str.w	r9, [r0]
 80097a4:	4604      	mov	r4, r0
 80097a6:	e7e4      	b.n	8009772 <__pow5mult+0x6a>
 80097a8:	4630      	mov	r0, r6
 80097aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097ae:	bf00      	nop
 80097b0:	0800a454 	.word	0x0800a454
 80097b4:	0800a321 	.word	0x0800a321
 80097b8:	0800a3a1 	.word	0x0800a3a1

080097bc <__lshift>:
 80097bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097c0:	460c      	mov	r4, r1
 80097c2:	6849      	ldr	r1, [r1, #4]
 80097c4:	6923      	ldr	r3, [r4, #16]
 80097c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80097ca:	68a3      	ldr	r3, [r4, #8]
 80097cc:	4607      	mov	r7, r0
 80097ce:	4691      	mov	r9, r2
 80097d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80097d4:	f108 0601 	add.w	r6, r8, #1
 80097d8:	42b3      	cmp	r3, r6
 80097da:	db0b      	blt.n	80097f4 <__lshift+0x38>
 80097dc:	4638      	mov	r0, r7
 80097de:	f7ff fde7 	bl	80093b0 <_Balloc>
 80097e2:	4605      	mov	r5, r0
 80097e4:	b948      	cbnz	r0, 80097fa <__lshift+0x3e>
 80097e6:	4602      	mov	r2, r0
 80097e8:	4b28      	ldr	r3, [pc, #160]	@ (800988c <__lshift+0xd0>)
 80097ea:	4829      	ldr	r0, [pc, #164]	@ (8009890 <__lshift+0xd4>)
 80097ec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80097f0:	f000 fa14 	bl	8009c1c <__assert_func>
 80097f4:	3101      	adds	r1, #1
 80097f6:	005b      	lsls	r3, r3, #1
 80097f8:	e7ee      	b.n	80097d8 <__lshift+0x1c>
 80097fa:	2300      	movs	r3, #0
 80097fc:	f100 0114 	add.w	r1, r0, #20
 8009800:	f100 0210 	add.w	r2, r0, #16
 8009804:	4618      	mov	r0, r3
 8009806:	4553      	cmp	r3, sl
 8009808:	db33      	blt.n	8009872 <__lshift+0xb6>
 800980a:	6920      	ldr	r0, [r4, #16]
 800980c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009810:	f104 0314 	add.w	r3, r4, #20
 8009814:	f019 091f 	ands.w	r9, r9, #31
 8009818:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800981c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009820:	d02b      	beq.n	800987a <__lshift+0xbe>
 8009822:	f1c9 0e20 	rsb	lr, r9, #32
 8009826:	468a      	mov	sl, r1
 8009828:	2200      	movs	r2, #0
 800982a:	6818      	ldr	r0, [r3, #0]
 800982c:	fa00 f009 	lsl.w	r0, r0, r9
 8009830:	4310      	orrs	r0, r2
 8009832:	f84a 0b04 	str.w	r0, [sl], #4
 8009836:	f853 2b04 	ldr.w	r2, [r3], #4
 800983a:	459c      	cmp	ip, r3
 800983c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009840:	d8f3      	bhi.n	800982a <__lshift+0x6e>
 8009842:	ebac 0304 	sub.w	r3, ip, r4
 8009846:	3b15      	subs	r3, #21
 8009848:	f023 0303 	bic.w	r3, r3, #3
 800984c:	3304      	adds	r3, #4
 800984e:	f104 0015 	add.w	r0, r4, #21
 8009852:	4560      	cmp	r0, ip
 8009854:	bf88      	it	hi
 8009856:	2304      	movhi	r3, #4
 8009858:	50ca      	str	r2, [r1, r3]
 800985a:	b10a      	cbz	r2, 8009860 <__lshift+0xa4>
 800985c:	f108 0602 	add.w	r6, r8, #2
 8009860:	3e01      	subs	r6, #1
 8009862:	4638      	mov	r0, r7
 8009864:	612e      	str	r6, [r5, #16]
 8009866:	4621      	mov	r1, r4
 8009868:	f7ff fde2 	bl	8009430 <_Bfree>
 800986c:	4628      	mov	r0, r5
 800986e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009872:	f842 0f04 	str.w	r0, [r2, #4]!
 8009876:	3301      	adds	r3, #1
 8009878:	e7c5      	b.n	8009806 <__lshift+0x4a>
 800987a:	3904      	subs	r1, #4
 800987c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009880:	f841 2f04 	str.w	r2, [r1, #4]!
 8009884:	459c      	cmp	ip, r3
 8009886:	d8f9      	bhi.n	800987c <__lshift+0xc0>
 8009888:	e7ea      	b.n	8009860 <__lshift+0xa4>
 800988a:	bf00      	nop
 800988c:	0800a390 	.word	0x0800a390
 8009890:	0800a3a1 	.word	0x0800a3a1

08009894 <__mcmp>:
 8009894:	690a      	ldr	r2, [r1, #16]
 8009896:	4603      	mov	r3, r0
 8009898:	6900      	ldr	r0, [r0, #16]
 800989a:	1a80      	subs	r0, r0, r2
 800989c:	b530      	push	{r4, r5, lr}
 800989e:	d10e      	bne.n	80098be <__mcmp+0x2a>
 80098a0:	3314      	adds	r3, #20
 80098a2:	3114      	adds	r1, #20
 80098a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80098a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80098ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80098b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80098b4:	4295      	cmp	r5, r2
 80098b6:	d003      	beq.n	80098c0 <__mcmp+0x2c>
 80098b8:	d205      	bcs.n	80098c6 <__mcmp+0x32>
 80098ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80098be:	bd30      	pop	{r4, r5, pc}
 80098c0:	42a3      	cmp	r3, r4
 80098c2:	d3f3      	bcc.n	80098ac <__mcmp+0x18>
 80098c4:	e7fb      	b.n	80098be <__mcmp+0x2a>
 80098c6:	2001      	movs	r0, #1
 80098c8:	e7f9      	b.n	80098be <__mcmp+0x2a>
	...

080098cc <__mdiff>:
 80098cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098d0:	4689      	mov	r9, r1
 80098d2:	4606      	mov	r6, r0
 80098d4:	4611      	mov	r1, r2
 80098d6:	4648      	mov	r0, r9
 80098d8:	4614      	mov	r4, r2
 80098da:	f7ff ffdb 	bl	8009894 <__mcmp>
 80098de:	1e05      	subs	r5, r0, #0
 80098e0:	d112      	bne.n	8009908 <__mdiff+0x3c>
 80098e2:	4629      	mov	r1, r5
 80098e4:	4630      	mov	r0, r6
 80098e6:	f7ff fd63 	bl	80093b0 <_Balloc>
 80098ea:	4602      	mov	r2, r0
 80098ec:	b928      	cbnz	r0, 80098fa <__mdiff+0x2e>
 80098ee:	4b3f      	ldr	r3, [pc, #252]	@ (80099ec <__mdiff+0x120>)
 80098f0:	f240 2137 	movw	r1, #567	@ 0x237
 80098f4:	483e      	ldr	r0, [pc, #248]	@ (80099f0 <__mdiff+0x124>)
 80098f6:	f000 f991 	bl	8009c1c <__assert_func>
 80098fa:	2301      	movs	r3, #1
 80098fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009900:	4610      	mov	r0, r2
 8009902:	b003      	add	sp, #12
 8009904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009908:	bfbc      	itt	lt
 800990a:	464b      	movlt	r3, r9
 800990c:	46a1      	movlt	r9, r4
 800990e:	4630      	mov	r0, r6
 8009910:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009914:	bfba      	itte	lt
 8009916:	461c      	movlt	r4, r3
 8009918:	2501      	movlt	r5, #1
 800991a:	2500      	movge	r5, #0
 800991c:	f7ff fd48 	bl	80093b0 <_Balloc>
 8009920:	4602      	mov	r2, r0
 8009922:	b918      	cbnz	r0, 800992c <__mdiff+0x60>
 8009924:	4b31      	ldr	r3, [pc, #196]	@ (80099ec <__mdiff+0x120>)
 8009926:	f240 2145 	movw	r1, #581	@ 0x245
 800992a:	e7e3      	b.n	80098f4 <__mdiff+0x28>
 800992c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009930:	6926      	ldr	r6, [r4, #16]
 8009932:	60c5      	str	r5, [r0, #12]
 8009934:	f109 0310 	add.w	r3, r9, #16
 8009938:	f109 0514 	add.w	r5, r9, #20
 800993c:	f104 0e14 	add.w	lr, r4, #20
 8009940:	f100 0b14 	add.w	fp, r0, #20
 8009944:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009948:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800994c:	9301      	str	r3, [sp, #4]
 800994e:	46d9      	mov	r9, fp
 8009950:	f04f 0c00 	mov.w	ip, #0
 8009954:	9b01      	ldr	r3, [sp, #4]
 8009956:	f85e 0b04 	ldr.w	r0, [lr], #4
 800995a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800995e:	9301      	str	r3, [sp, #4]
 8009960:	fa1f f38a 	uxth.w	r3, sl
 8009964:	4619      	mov	r1, r3
 8009966:	b283      	uxth	r3, r0
 8009968:	1acb      	subs	r3, r1, r3
 800996a:	0c00      	lsrs	r0, r0, #16
 800996c:	4463      	add	r3, ip
 800996e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009972:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009976:	b29b      	uxth	r3, r3
 8009978:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800997c:	4576      	cmp	r6, lr
 800997e:	f849 3b04 	str.w	r3, [r9], #4
 8009982:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009986:	d8e5      	bhi.n	8009954 <__mdiff+0x88>
 8009988:	1b33      	subs	r3, r6, r4
 800998a:	3b15      	subs	r3, #21
 800998c:	f023 0303 	bic.w	r3, r3, #3
 8009990:	3415      	adds	r4, #21
 8009992:	3304      	adds	r3, #4
 8009994:	42a6      	cmp	r6, r4
 8009996:	bf38      	it	cc
 8009998:	2304      	movcc	r3, #4
 800999a:	441d      	add	r5, r3
 800999c:	445b      	add	r3, fp
 800999e:	461e      	mov	r6, r3
 80099a0:	462c      	mov	r4, r5
 80099a2:	4544      	cmp	r4, r8
 80099a4:	d30e      	bcc.n	80099c4 <__mdiff+0xf8>
 80099a6:	f108 0103 	add.w	r1, r8, #3
 80099aa:	1b49      	subs	r1, r1, r5
 80099ac:	f021 0103 	bic.w	r1, r1, #3
 80099b0:	3d03      	subs	r5, #3
 80099b2:	45a8      	cmp	r8, r5
 80099b4:	bf38      	it	cc
 80099b6:	2100      	movcc	r1, #0
 80099b8:	440b      	add	r3, r1
 80099ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80099be:	b191      	cbz	r1, 80099e6 <__mdiff+0x11a>
 80099c0:	6117      	str	r7, [r2, #16]
 80099c2:	e79d      	b.n	8009900 <__mdiff+0x34>
 80099c4:	f854 1b04 	ldr.w	r1, [r4], #4
 80099c8:	46e6      	mov	lr, ip
 80099ca:	0c08      	lsrs	r0, r1, #16
 80099cc:	fa1c fc81 	uxtah	ip, ip, r1
 80099d0:	4471      	add	r1, lr
 80099d2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80099d6:	b289      	uxth	r1, r1
 80099d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80099dc:	f846 1b04 	str.w	r1, [r6], #4
 80099e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80099e4:	e7dd      	b.n	80099a2 <__mdiff+0xd6>
 80099e6:	3f01      	subs	r7, #1
 80099e8:	e7e7      	b.n	80099ba <__mdiff+0xee>
 80099ea:	bf00      	nop
 80099ec:	0800a390 	.word	0x0800a390
 80099f0:	0800a3a1 	.word	0x0800a3a1

080099f4 <__d2b>:
 80099f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80099f8:	460f      	mov	r7, r1
 80099fa:	2101      	movs	r1, #1
 80099fc:	ec59 8b10 	vmov	r8, r9, d0
 8009a00:	4616      	mov	r6, r2
 8009a02:	f7ff fcd5 	bl	80093b0 <_Balloc>
 8009a06:	4604      	mov	r4, r0
 8009a08:	b930      	cbnz	r0, 8009a18 <__d2b+0x24>
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	4b23      	ldr	r3, [pc, #140]	@ (8009a9c <__d2b+0xa8>)
 8009a0e:	4824      	ldr	r0, [pc, #144]	@ (8009aa0 <__d2b+0xac>)
 8009a10:	f240 310f 	movw	r1, #783	@ 0x30f
 8009a14:	f000 f902 	bl	8009c1c <__assert_func>
 8009a18:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009a1c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009a20:	b10d      	cbz	r5, 8009a26 <__d2b+0x32>
 8009a22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009a26:	9301      	str	r3, [sp, #4]
 8009a28:	f1b8 0300 	subs.w	r3, r8, #0
 8009a2c:	d023      	beq.n	8009a76 <__d2b+0x82>
 8009a2e:	4668      	mov	r0, sp
 8009a30:	9300      	str	r3, [sp, #0]
 8009a32:	f7ff fd84 	bl	800953e <__lo0bits>
 8009a36:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009a3a:	b1d0      	cbz	r0, 8009a72 <__d2b+0x7e>
 8009a3c:	f1c0 0320 	rsb	r3, r0, #32
 8009a40:	fa02 f303 	lsl.w	r3, r2, r3
 8009a44:	430b      	orrs	r3, r1
 8009a46:	40c2      	lsrs	r2, r0
 8009a48:	6163      	str	r3, [r4, #20]
 8009a4a:	9201      	str	r2, [sp, #4]
 8009a4c:	9b01      	ldr	r3, [sp, #4]
 8009a4e:	61a3      	str	r3, [r4, #24]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	bf0c      	ite	eq
 8009a54:	2201      	moveq	r2, #1
 8009a56:	2202      	movne	r2, #2
 8009a58:	6122      	str	r2, [r4, #16]
 8009a5a:	b1a5      	cbz	r5, 8009a86 <__d2b+0x92>
 8009a5c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009a60:	4405      	add	r5, r0
 8009a62:	603d      	str	r5, [r7, #0]
 8009a64:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009a68:	6030      	str	r0, [r6, #0]
 8009a6a:	4620      	mov	r0, r4
 8009a6c:	b003      	add	sp, #12
 8009a6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a72:	6161      	str	r1, [r4, #20]
 8009a74:	e7ea      	b.n	8009a4c <__d2b+0x58>
 8009a76:	a801      	add	r0, sp, #4
 8009a78:	f7ff fd61 	bl	800953e <__lo0bits>
 8009a7c:	9b01      	ldr	r3, [sp, #4]
 8009a7e:	6163      	str	r3, [r4, #20]
 8009a80:	3020      	adds	r0, #32
 8009a82:	2201      	movs	r2, #1
 8009a84:	e7e8      	b.n	8009a58 <__d2b+0x64>
 8009a86:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009a8a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009a8e:	6038      	str	r0, [r7, #0]
 8009a90:	6918      	ldr	r0, [r3, #16]
 8009a92:	f7ff fd35 	bl	8009500 <__hi0bits>
 8009a96:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009a9a:	e7e5      	b.n	8009a68 <__d2b+0x74>
 8009a9c:	0800a390 	.word	0x0800a390
 8009aa0:	0800a3a1 	.word	0x0800a3a1

08009aa4 <__sflush_r>:
 8009aa4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aac:	0716      	lsls	r6, r2, #28
 8009aae:	4605      	mov	r5, r0
 8009ab0:	460c      	mov	r4, r1
 8009ab2:	d454      	bmi.n	8009b5e <__sflush_r+0xba>
 8009ab4:	684b      	ldr	r3, [r1, #4]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	dc02      	bgt.n	8009ac0 <__sflush_r+0x1c>
 8009aba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	dd48      	ble.n	8009b52 <__sflush_r+0xae>
 8009ac0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009ac2:	2e00      	cmp	r6, #0
 8009ac4:	d045      	beq.n	8009b52 <__sflush_r+0xae>
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009acc:	682f      	ldr	r7, [r5, #0]
 8009ace:	6a21      	ldr	r1, [r4, #32]
 8009ad0:	602b      	str	r3, [r5, #0]
 8009ad2:	d030      	beq.n	8009b36 <__sflush_r+0x92>
 8009ad4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009ad6:	89a3      	ldrh	r3, [r4, #12]
 8009ad8:	0759      	lsls	r1, r3, #29
 8009ada:	d505      	bpl.n	8009ae8 <__sflush_r+0x44>
 8009adc:	6863      	ldr	r3, [r4, #4]
 8009ade:	1ad2      	subs	r2, r2, r3
 8009ae0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009ae2:	b10b      	cbz	r3, 8009ae8 <__sflush_r+0x44>
 8009ae4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009ae6:	1ad2      	subs	r2, r2, r3
 8009ae8:	2300      	movs	r3, #0
 8009aea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009aec:	6a21      	ldr	r1, [r4, #32]
 8009aee:	4628      	mov	r0, r5
 8009af0:	47b0      	blx	r6
 8009af2:	1c43      	adds	r3, r0, #1
 8009af4:	89a3      	ldrh	r3, [r4, #12]
 8009af6:	d106      	bne.n	8009b06 <__sflush_r+0x62>
 8009af8:	6829      	ldr	r1, [r5, #0]
 8009afa:	291d      	cmp	r1, #29
 8009afc:	d82b      	bhi.n	8009b56 <__sflush_r+0xb2>
 8009afe:	4a2a      	ldr	r2, [pc, #168]	@ (8009ba8 <__sflush_r+0x104>)
 8009b00:	40ca      	lsrs	r2, r1
 8009b02:	07d6      	lsls	r6, r2, #31
 8009b04:	d527      	bpl.n	8009b56 <__sflush_r+0xb2>
 8009b06:	2200      	movs	r2, #0
 8009b08:	6062      	str	r2, [r4, #4]
 8009b0a:	04d9      	lsls	r1, r3, #19
 8009b0c:	6922      	ldr	r2, [r4, #16]
 8009b0e:	6022      	str	r2, [r4, #0]
 8009b10:	d504      	bpl.n	8009b1c <__sflush_r+0x78>
 8009b12:	1c42      	adds	r2, r0, #1
 8009b14:	d101      	bne.n	8009b1a <__sflush_r+0x76>
 8009b16:	682b      	ldr	r3, [r5, #0]
 8009b18:	b903      	cbnz	r3, 8009b1c <__sflush_r+0x78>
 8009b1a:	6560      	str	r0, [r4, #84]	@ 0x54
 8009b1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009b1e:	602f      	str	r7, [r5, #0]
 8009b20:	b1b9      	cbz	r1, 8009b52 <__sflush_r+0xae>
 8009b22:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009b26:	4299      	cmp	r1, r3
 8009b28:	d002      	beq.n	8009b30 <__sflush_r+0x8c>
 8009b2a:	4628      	mov	r0, r5
 8009b2c:	f7ff fb40 	bl	80091b0 <_free_r>
 8009b30:	2300      	movs	r3, #0
 8009b32:	6363      	str	r3, [r4, #52]	@ 0x34
 8009b34:	e00d      	b.n	8009b52 <__sflush_r+0xae>
 8009b36:	2301      	movs	r3, #1
 8009b38:	4628      	mov	r0, r5
 8009b3a:	47b0      	blx	r6
 8009b3c:	4602      	mov	r2, r0
 8009b3e:	1c50      	adds	r0, r2, #1
 8009b40:	d1c9      	bne.n	8009ad6 <__sflush_r+0x32>
 8009b42:	682b      	ldr	r3, [r5, #0]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d0c6      	beq.n	8009ad6 <__sflush_r+0x32>
 8009b48:	2b1d      	cmp	r3, #29
 8009b4a:	d001      	beq.n	8009b50 <__sflush_r+0xac>
 8009b4c:	2b16      	cmp	r3, #22
 8009b4e:	d11e      	bne.n	8009b8e <__sflush_r+0xea>
 8009b50:	602f      	str	r7, [r5, #0]
 8009b52:	2000      	movs	r0, #0
 8009b54:	e022      	b.n	8009b9c <__sflush_r+0xf8>
 8009b56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b5a:	b21b      	sxth	r3, r3
 8009b5c:	e01b      	b.n	8009b96 <__sflush_r+0xf2>
 8009b5e:	690f      	ldr	r7, [r1, #16]
 8009b60:	2f00      	cmp	r7, #0
 8009b62:	d0f6      	beq.n	8009b52 <__sflush_r+0xae>
 8009b64:	0793      	lsls	r3, r2, #30
 8009b66:	680e      	ldr	r6, [r1, #0]
 8009b68:	bf08      	it	eq
 8009b6a:	694b      	ldreq	r3, [r1, #20]
 8009b6c:	600f      	str	r7, [r1, #0]
 8009b6e:	bf18      	it	ne
 8009b70:	2300      	movne	r3, #0
 8009b72:	eba6 0807 	sub.w	r8, r6, r7
 8009b76:	608b      	str	r3, [r1, #8]
 8009b78:	f1b8 0f00 	cmp.w	r8, #0
 8009b7c:	dde9      	ble.n	8009b52 <__sflush_r+0xae>
 8009b7e:	6a21      	ldr	r1, [r4, #32]
 8009b80:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009b82:	4643      	mov	r3, r8
 8009b84:	463a      	mov	r2, r7
 8009b86:	4628      	mov	r0, r5
 8009b88:	47b0      	blx	r6
 8009b8a:	2800      	cmp	r0, #0
 8009b8c:	dc08      	bgt.n	8009ba0 <__sflush_r+0xfc>
 8009b8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b96:	81a3      	strh	r3, [r4, #12]
 8009b98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ba0:	4407      	add	r7, r0
 8009ba2:	eba8 0800 	sub.w	r8, r8, r0
 8009ba6:	e7e7      	b.n	8009b78 <__sflush_r+0xd4>
 8009ba8:	20400001 	.word	0x20400001

08009bac <_fflush_r>:
 8009bac:	b538      	push	{r3, r4, r5, lr}
 8009bae:	690b      	ldr	r3, [r1, #16]
 8009bb0:	4605      	mov	r5, r0
 8009bb2:	460c      	mov	r4, r1
 8009bb4:	b913      	cbnz	r3, 8009bbc <_fflush_r+0x10>
 8009bb6:	2500      	movs	r5, #0
 8009bb8:	4628      	mov	r0, r5
 8009bba:	bd38      	pop	{r3, r4, r5, pc}
 8009bbc:	b118      	cbz	r0, 8009bc6 <_fflush_r+0x1a>
 8009bbe:	6a03      	ldr	r3, [r0, #32]
 8009bc0:	b90b      	cbnz	r3, 8009bc6 <_fflush_r+0x1a>
 8009bc2:	f7fe fb95 	bl	80082f0 <__sinit>
 8009bc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d0f3      	beq.n	8009bb6 <_fflush_r+0xa>
 8009bce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009bd0:	07d0      	lsls	r0, r2, #31
 8009bd2:	d404      	bmi.n	8009bde <_fflush_r+0x32>
 8009bd4:	0599      	lsls	r1, r3, #22
 8009bd6:	d402      	bmi.n	8009bde <_fflush_r+0x32>
 8009bd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009bda:	f7fe fc80 	bl	80084de <__retarget_lock_acquire_recursive>
 8009bde:	4628      	mov	r0, r5
 8009be0:	4621      	mov	r1, r4
 8009be2:	f7ff ff5f 	bl	8009aa4 <__sflush_r>
 8009be6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009be8:	07da      	lsls	r2, r3, #31
 8009bea:	4605      	mov	r5, r0
 8009bec:	d4e4      	bmi.n	8009bb8 <_fflush_r+0xc>
 8009bee:	89a3      	ldrh	r3, [r4, #12]
 8009bf0:	059b      	lsls	r3, r3, #22
 8009bf2:	d4e1      	bmi.n	8009bb8 <_fflush_r+0xc>
 8009bf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009bf6:	f7fe fc73 	bl	80084e0 <__retarget_lock_release_recursive>
 8009bfa:	e7dd      	b.n	8009bb8 <_fflush_r+0xc>

08009bfc <_sbrk_r>:
 8009bfc:	b538      	push	{r3, r4, r5, lr}
 8009bfe:	4d06      	ldr	r5, [pc, #24]	@ (8009c18 <_sbrk_r+0x1c>)
 8009c00:	2300      	movs	r3, #0
 8009c02:	4604      	mov	r4, r0
 8009c04:	4608      	mov	r0, r1
 8009c06:	602b      	str	r3, [r5, #0]
 8009c08:	f7f8 fdd2 	bl	80027b0 <_sbrk>
 8009c0c:	1c43      	adds	r3, r0, #1
 8009c0e:	d102      	bne.n	8009c16 <_sbrk_r+0x1a>
 8009c10:	682b      	ldr	r3, [r5, #0]
 8009c12:	b103      	cbz	r3, 8009c16 <_sbrk_r+0x1a>
 8009c14:	6023      	str	r3, [r4, #0]
 8009c16:	bd38      	pop	{r3, r4, r5, pc}
 8009c18:	20000710 	.word	0x20000710

08009c1c <__assert_func>:
 8009c1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c1e:	4614      	mov	r4, r2
 8009c20:	461a      	mov	r2, r3
 8009c22:	4b09      	ldr	r3, [pc, #36]	@ (8009c48 <__assert_func+0x2c>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	4605      	mov	r5, r0
 8009c28:	68d8      	ldr	r0, [r3, #12]
 8009c2a:	b14c      	cbz	r4, 8009c40 <__assert_func+0x24>
 8009c2c:	4b07      	ldr	r3, [pc, #28]	@ (8009c4c <__assert_func+0x30>)
 8009c2e:	9100      	str	r1, [sp, #0]
 8009c30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009c34:	4906      	ldr	r1, [pc, #24]	@ (8009c50 <__assert_func+0x34>)
 8009c36:	462b      	mov	r3, r5
 8009c38:	f000 f842 	bl	8009cc0 <fiprintf>
 8009c3c:	f000 f852 	bl	8009ce4 <abort>
 8009c40:	4b04      	ldr	r3, [pc, #16]	@ (8009c54 <__assert_func+0x38>)
 8009c42:	461c      	mov	r4, r3
 8009c44:	e7f3      	b.n	8009c2e <__assert_func+0x12>
 8009c46:	bf00      	nop
 8009c48:	20000064 	.word	0x20000064
 8009c4c:	0800a404 	.word	0x0800a404
 8009c50:	0800a411 	.word	0x0800a411
 8009c54:	0800a43f 	.word	0x0800a43f

08009c58 <_calloc_r>:
 8009c58:	b570      	push	{r4, r5, r6, lr}
 8009c5a:	fba1 5402 	umull	r5, r4, r1, r2
 8009c5e:	b934      	cbnz	r4, 8009c6e <_calloc_r+0x16>
 8009c60:	4629      	mov	r1, r5
 8009c62:	f7ff fb19 	bl	8009298 <_malloc_r>
 8009c66:	4606      	mov	r6, r0
 8009c68:	b928      	cbnz	r0, 8009c76 <_calloc_r+0x1e>
 8009c6a:	4630      	mov	r0, r6
 8009c6c:	bd70      	pop	{r4, r5, r6, pc}
 8009c6e:	220c      	movs	r2, #12
 8009c70:	6002      	str	r2, [r0, #0]
 8009c72:	2600      	movs	r6, #0
 8009c74:	e7f9      	b.n	8009c6a <_calloc_r+0x12>
 8009c76:	462a      	mov	r2, r5
 8009c78:	4621      	mov	r1, r4
 8009c7a:	f7fe fbb2 	bl	80083e2 <memset>
 8009c7e:	e7f4      	b.n	8009c6a <_calloc_r+0x12>

08009c80 <__ascii_mbtowc>:
 8009c80:	b082      	sub	sp, #8
 8009c82:	b901      	cbnz	r1, 8009c86 <__ascii_mbtowc+0x6>
 8009c84:	a901      	add	r1, sp, #4
 8009c86:	b142      	cbz	r2, 8009c9a <__ascii_mbtowc+0x1a>
 8009c88:	b14b      	cbz	r3, 8009c9e <__ascii_mbtowc+0x1e>
 8009c8a:	7813      	ldrb	r3, [r2, #0]
 8009c8c:	600b      	str	r3, [r1, #0]
 8009c8e:	7812      	ldrb	r2, [r2, #0]
 8009c90:	1e10      	subs	r0, r2, #0
 8009c92:	bf18      	it	ne
 8009c94:	2001      	movne	r0, #1
 8009c96:	b002      	add	sp, #8
 8009c98:	4770      	bx	lr
 8009c9a:	4610      	mov	r0, r2
 8009c9c:	e7fb      	b.n	8009c96 <__ascii_mbtowc+0x16>
 8009c9e:	f06f 0001 	mvn.w	r0, #1
 8009ca2:	e7f8      	b.n	8009c96 <__ascii_mbtowc+0x16>

08009ca4 <__ascii_wctomb>:
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	4608      	mov	r0, r1
 8009ca8:	b141      	cbz	r1, 8009cbc <__ascii_wctomb+0x18>
 8009caa:	2aff      	cmp	r2, #255	@ 0xff
 8009cac:	d904      	bls.n	8009cb8 <__ascii_wctomb+0x14>
 8009cae:	228a      	movs	r2, #138	@ 0x8a
 8009cb0:	601a      	str	r2, [r3, #0]
 8009cb2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009cb6:	4770      	bx	lr
 8009cb8:	700a      	strb	r2, [r1, #0]
 8009cba:	2001      	movs	r0, #1
 8009cbc:	4770      	bx	lr
	...

08009cc0 <fiprintf>:
 8009cc0:	b40e      	push	{r1, r2, r3}
 8009cc2:	b503      	push	{r0, r1, lr}
 8009cc4:	4601      	mov	r1, r0
 8009cc6:	ab03      	add	r3, sp, #12
 8009cc8:	4805      	ldr	r0, [pc, #20]	@ (8009ce0 <fiprintf+0x20>)
 8009cca:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cce:	6800      	ldr	r0, [r0, #0]
 8009cd0:	9301      	str	r3, [sp, #4]
 8009cd2:	f000 f837 	bl	8009d44 <_vfiprintf_r>
 8009cd6:	b002      	add	sp, #8
 8009cd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009cdc:	b003      	add	sp, #12
 8009cde:	4770      	bx	lr
 8009ce0:	20000064 	.word	0x20000064

08009ce4 <abort>:
 8009ce4:	b508      	push	{r3, lr}
 8009ce6:	2006      	movs	r0, #6
 8009ce8:	f000 fa00 	bl	800a0ec <raise>
 8009cec:	2001      	movs	r0, #1
 8009cee:	f7f8 fce7 	bl	80026c0 <_exit>

08009cf2 <__sfputc_r>:
 8009cf2:	6893      	ldr	r3, [r2, #8]
 8009cf4:	3b01      	subs	r3, #1
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	b410      	push	{r4}
 8009cfa:	6093      	str	r3, [r2, #8]
 8009cfc:	da08      	bge.n	8009d10 <__sfputc_r+0x1e>
 8009cfe:	6994      	ldr	r4, [r2, #24]
 8009d00:	42a3      	cmp	r3, r4
 8009d02:	db01      	blt.n	8009d08 <__sfputc_r+0x16>
 8009d04:	290a      	cmp	r1, #10
 8009d06:	d103      	bne.n	8009d10 <__sfputc_r+0x1e>
 8009d08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d0c:	f000 b932 	b.w	8009f74 <__swbuf_r>
 8009d10:	6813      	ldr	r3, [r2, #0]
 8009d12:	1c58      	adds	r0, r3, #1
 8009d14:	6010      	str	r0, [r2, #0]
 8009d16:	7019      	strb	r1, [r3, #0]
 8009d18:	4608      	mov	r0, r1
 8009d1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d1e:	4770      	bx	lr

08009d20 <__sfputs_r>:
 8009d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d22:	4606      	mov	r6, r0
 8009d24:	460f      	mov	r7, r1
 8009d26:	4614      	mov	r4, r2
 8009d28:	18d5      	adds	r5, r2, r3
 8009d2a:	42ac      	cmp	r4, r5
 8009d2c:	d101      	bne.n	8009d32 <__sfputs_r+0x12>
 8009d2e:	2000      	movs	r0, #0
 8009d30:	e007      	b.n	8009d42 <__sfputs_r+0x22>
 8009d32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d36:	463a      	mov	r2, r7
 8009d38:	4630      	mov	r0, r6
 8009d3a:	f7ff ffda 	bl	8009cf2 <__sfputc_r>
 8009d3e:	1c43      	adds	r3, r0, #1
 8009d40:	d1f3      	bne.n	8009d2a <__sfputs_r+0xa>
 8009d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009d44 <_vfiprintf_r>:
 8009d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d48:	460d      	mov	r5, r1
 8009d4a:	b09d      	sub	sp, #116	@ 0x74
 8009d4c:	4614      	mov	r4, r2
 8009d4e:	4698      	mov	r8, r3
 8009d50:	4606      	mov	r6, r0
 8009d52:	b118      	cbz	r0, 8009d5c <_vfiprintf_r+0x18>
 8009d54:	6a03      	ldr	r3, [r0, #32]
 8009d56:	b90b      	cbnz	r3, 8009d5c <_vfiprintf_r+0x18>
 8009d58:	f7fe faca 	bl	80082f0 <__sinit>
 8009d5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d5e:	07d9      	lsls	r1, r3, #31
 8009d60:	d405      	bmi.n	8009d6e <_vfiprintf_r+0x2a>
 8009d62:	89ab      	ldrh	r3, [r5, #12]
 8009d64:	059a      	lsls	r2, r3, #22
 8009d66:	d402      	bmi.n	8009d6e <_vfiprintf_r+0x2a>
 8009d68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d6a:	f7fe fbb8 	bl	80084de <__retarget_lock_acquire_recursive>
 8009d6e:	89ab      	ldrh	r3, [r5, #12]
 8009d70:	071b      	lsls	r3, r3, #28
 8009d72:	d501      	bpl.n	8009d78 <_vfiprintf_r+0x34>
 8009d74:	692b      	ldr	r3, [r5, #16]
 8009d76:	b99b      	cbnz	r3, 8009da0 <_vfiprintf_r+0x5c>
 8009d78:	4629      	mov	r1, r5
 8009d7a:	4630      	mov	r0, r6
 8009d7c:	f000 f938 	bl	8009ff0 <__swsetup_r>
 8009d80:	b170      	cbz	r0, 8009da0 <_vfiprintf_r+0x5c>
 8009d82:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d84:	07dc      	lsls	r4, r3, #31
 8009d86:	d504      	bpl.n	8009d92 <_vfiprintf_r+0x4e>
 8009d88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009d8c:	b01d      	add	sp, #116	@ 0x74
 8009d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d92:	89ab      	ldrh	r3, [r5, #12]
 8009d94:	0598      	lsls	r0, r3, #22
 8009d96:	d4f7      	bmi.n	8009d88 <_vfiprintf_r+0x44>
 8009d98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d9a:	f7fe fba1 	bl	80084e0 <__retarget_lock_release_recursive>
 8009d9e:	e7f3      	b.n	8009d88 <_vfiprintf_r+0x44>
 8009da0:	2300      	movs	r3, #0
 8009da2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009da4:	2320      	movs	r3, #32
 8009da6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009daa:	f8cd 800c 	str.w	r8, [sp, #12]
 8009dae:	2330      	movs	r3, #48	@ 0x30
 8009db0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009f60 <_vfiprintf_r+0x21c>
 8009db4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009db8:	f04f 0901 	mov.w	r9, #1
 8009dbc:	4623      	mov	r3, r4
 8009dbe:	469a      	mov	sl, r3
 8009dc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009dc4:	b10a      	cbz	r2, 8009dca <_vfiprintf_r+0x86>
 8009dc6:	2a25      	cmp	r2, #37	@ 0x25
 8009dc8:	d1f9      	bne.n	8009dbe <_vfiprintf_r+0x7a>
 8009dca:	ebba 0b04 	subs.w	fp, sl, r4
 8009dce:	d00b      	beq.n	8009de8 <_vfiprintf_r+0xa4>
 8009dd0:	465b      	mov	r3, fp
 8009dd2:	4622      	mov	r2, r4
 8009dd4:	4629      	mov	r1, r5
 8009dd6:	4630      	mov	r0, r6
 8009dd8:	f7ff ffa2 	bl	8009d20 <__sfputs_r>
 8009ddc:	3001      	adds	r0, #1
 8009dde:	f000 80a7 	beq.w	8009f30 <_vfiprintf_r+0x1ec>
 8009de2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009de4:	445a      	add	r2, fp
 8009de6:	9209      	str	r2, [sp, #36]	@ 0x24
 8009de8:	f89a 3000 	ldrb.w	r3, [sl]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	f000 809f 	beq.w	8009f30 <_vfiprintf_r+0x1ec>
 8009df2:	2300      	movs	r3, #0
 8009df4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009df8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009dfc:	f10a 0a01 	add.w	sl, sl, #1
 8009e00:	9304      	str	r3, [sp, #16]
 8009e02:	9307      	str	r3, [sp, #28]
 8009e04:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009e08:	931a      	str	r3, [sp, #104]	@ 0x68
 8009e0a:	4654      	mov	r4, sl
 8009e0c:	2205      	movs	r2, #5
 8009e0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e12:	4853      	ldr	r0, [pc, #332]	@ (8009f60 <_vfiprintf_r+0x21c>)
 8009e14:	f7f6 fa04 	bl	8000220 <memchr>
 8009e18:	9a04      	ldr	r2, [sp, #16]
 8009e1a:	b9d8      	cbnz	r0, 8009e54 <_vfiprintf_r+0x110>
 8009e1c:	06d1      	lsls	r1, r2, #27
 8009e1e:	bf44      	itt	mi
 8009e20:	2320      	movmi	r3, #32
 8009e22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e26:	0713      	lsls	r3, r2, #28
 8009e28:	bf44      	itt	mi
 8009e2a:	232b      	movmi	r3, #43	@ 0x2b
 8009e2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e30:	f89a 3000 	ldrb.w	r3, [sl]
 8009e34:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e36:	d015      	beq.n	8009e64 <_vfiprintf_r+0x120>
 8009e38:	9a07      	ldr	r2, [sp, #28]
 8009e3a:	4654      	mov	r4, sl
 8009e3c:	2000      	movs	r0, #0
 8009e3e:	f04f 0c0a 	mov.w	ip, #10
 8009e42:	4621      	mov	r1, r4
 8009e44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e48:	3b30      	subs	r3, #48	@ 0x30
 8009e4a:	2b09      	cmp	r3, #9
 8009e4c:	d94b      	bls.n	8009ee6 <_vfiprintf_r+0x1a2>
 8009e4e:	b1b0      	cbz	r0, 8009e7e <_vfiprintf_r+0x13a>
 8009e50:	9207      	str	r2, [sp, #28]
 8009e52:	e014      	b.n	8009e7e <_vfiprintf_r+0x13a>
 8009e54:	eba0 0308 	sub.w	r3, r0, r8
 8009e58:	fa09 f303 	lsl.w	r3, r9, r3
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	9304      	str	r3, [sp, #16]
 8009e60:	46a2      	mov	sl, r4
 8009e62:	e7d2      	b.n	8009e0a <_vfiprintf_r+0xc6>
 8009e64:	9b03      	ldr	r3, [sp, #12]
 8009e66:	1d19      	adds	r1, r3, #4
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	9103      	str	r1, [sp, #12]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	bfbb      	ittet	lt
 8009e70:	425b      	neglt	r3, r3
 8009e72:	f042 0202 	orrlt.w	r2, r2, #2
 8009e76:	9307      	strge	r3, [sp, #28]
 8009e78:	9307      	strlt	r3, [sp, #28]
 8009e7a:	bfb8      	it	lt
 8009e7c:	9204      	strlt	r2, [sp, #16]
 8009e7e:	7823      	ldrb	r3, [r4, #0]
 8009e80:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e82:	d10a      	bne.n	8009e9a <_vfiprintf_r+0x156>
 8009e84:	7863      	ldrb	r3, [r4, #1]
 8009e86:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e88:	d132      	bne.n	8009ef0 <_vfiprintf_r+0x1ac>
 8009e8a:	9b03      	ldr	r3, [sp, #12]
 8009e8c:	1d1a      	adds	r2, r3, #4
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	9203      	str	r2, [sp, #12]
 8009e92:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009e96:	3402      	adds	r4, #2
 8009e98:	9305      	str	r3, [sp, #20]
 8009e9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009f70 <_vfiprintf_r+0x22c>
 8009e9e:	7821      	ldrb	r1, [r4, #0]
 8009ea0:	2203      	movs	r2, #3
 8009ea2:	4650      	mov	r0, sl
 8009ea4:	f7f6 f9bc 	bl	8000220 <memchr>
 8009ea8:	b138      	cbz	r0, 8009eba <_vfiprintf_r+0x176>
 8009eaa:	9b04      	ldr	r3, [sp, #16]
 8009eac:	eba0 000a 	sub.w	r0, r0, sl
 8009eb0:	2240      	movs	r2, #64	@ 0x40
 8009eb2:	4082      	lsls	r2, r0
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	3401      	adds	r4, #1
 8009eb8:	9304      	str	r3, [sp, #16]
 8009eba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ebe:	4829      	ldr	r0, [pc, #164]	@ (8009f64 <_vfiprintf_r+0x220>)
 8009ec0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009ec4:	2206      	movs	r2, #6
 8009ec6:	f7f6 f9ab 	bl	8000220 <memchr>
 8009eca:	2800      	cmp	r0, #0
 8009ecc:	d03f      	beq.n	8009f4e <_vfiprintf_r+0x20a>
 8009ece:	4b26      	ldr	r3, [pc, #152]	@ (8009f68 <_vfiprintf_r+0x224>)
 8009ed0:	bb1b      	cbnz	r3, 8009f1a <_vfiprintf_r+0x1d6>
 8009ed2:	9b03      	ldr	r3, [sp, #12]
 8009ed4:	3307      	adds	r3, #7
 8009ed6:	f023 0307 	bic.w	r3, r3, #7
 8009eda:	3308      	adds	r3, #8
 8009edc:	9303      	str	r3, [sp, #12]
 8009ede:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ee0:	443b      	add	r3, r7
 8009ee2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ee4:	e76a      	b.n	8009dbc <_vfiprintf_r+0x78>
 8009ee6:	fb0c 3202 	mla	r2, ip, r2, r3
 8009eea:	460c      	mov	r4, r1
 8009eec:	2001      	movs	r0, #1
 8009eee:	e7a8      	b.n	8009e42 <_vfiprintf_r+0xfe>
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	3401      	adds	r4, #1
 8009ef4:	9305      	str	r3, [sp, #20]
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	f04f 0c0a 	mov.w	ip, #10
 8009efc:	4620      	mov	r0, r4
 8009efe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f02:	3a30      	subs	r2, #48	@ 0x30
 8009f04:	2a09      	cmp	r2, #9
 8009f06:	d903      	bls.n	8009f10 <_vfiprintf_r+0x1cc>
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d0c6      	beq.n	8009e9a <_vfiprintf_r+0x156>
 8009f0c:	9105      	str	r1, [sp, #20]
 8009f0e:	e7c4      	b.n	8009e9a <_vfiprintf_r+0x156>
 8009f10:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f14:	4604      	mov	r4, r0
 8009f16:	2301      	movs	r3, #1
 8009f18:	e7f0      	b.n	8009efc <_vfiprintf_r+0x1b8>
 8009f1a:	ab03      	add	r3, sp, #12
 8009f1c:	9300      	str	r3, [sp, #0]
 8009f1e:	462a      	mov	r2, r5
 8009f20:	4b12      	ldr	r3, [pc, #72]	@ (8009f6c <_vfiprintf_r+0x228>)
 8009f22:	a904      	add	r1, sp, #16
 8009f24:	4630      	mov	r0, r6
 8009f26:	f7fd fda1 	bl	8007a6c <_printf_float>
 8009f2a:	4607      	mov	r7, r0
 8009f2c:	1c78      	adds	r0, r7, #1
 8009f2e:	d1d6      	bne.n	8009ede <_vfiprintf_r+0x19a>
 8009f30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f32:	07d9      	lsls	r1, r3, #31
 8009f34:	d405      	bmi.n	8009f42 <_vfiprintf_r+0x1fe>
 8009f36:	89ab      	ldrh	r3, [r5, #12]
 8009f38:	059a      	lsls	r2, r3, #22
 8009f3a:	d402      	bmi.n	8009f42 <_vfiprintf_r+0x1fe>
 8009f3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f3e:	f7fe facf 	bl	80084e0 <__retarget_lock_release_recursive>
 8009f42:	89ab      	ldrh	r3, [r5, #12]
 8009f44:	065b      	lsls	r3, r3, #25
 8009f46:	f53f af1f 	bmi.w	8009d88 <_vfiprintf_r+0x44>
 8009f4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f4c:	e71e      	b.n	8009d8c <_vfiprintf_r+0x48>
 8009f4e:	ab03      	add	r3, sp, #12
 8009f50:	9300      	str	r3, [sp, #0]
 8009f52:	462a      	mov	r2, r5
 8009f54:	4b05      	ldr	r3, [pc, #20]	@ (8009f6c <_vfiprintf_r+0x228>)
 8009f56:	a904      	add	r1, sp, #16
 8009f58:	4630      	mov	r0, r6
 8009f5a:	f7fe f81f 	bl	8007f9c <_printf_i>
 8009f5e:	e7e4      	b.n	8009f2a <_vfiprintf_r+0x1e6>
 8009f60:	0800a440 	.word	0x0800a440
 8009f64:	0800a44a 	.word	0x0800a44a
 8009f68:	08007a6d 	.word	0x08007a6d
 8009f6c:	08009d21 	.word	0x08009d21
 8009f70:	0800a446 	.word	0x0800a446

08009f74 <__swbuf_r>:
 8009f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f76:	460e      	mov	r6, r1
 8009f78:	4614      	mov	r4, r2
 8009f7a:	4605      	mov	r5, r0
 8009f7c:	b118      	cbz	r0, 8009f86 <__swbuf_r+0x12>
 8009f7e:	6a03      	ldr	r3, [r0, #32]
 8009f80:	b90b      	cbnz	r3, 8009f86 <__swbuf_r+0x12>
 8009f82:	f7fe f9b5 	bl	80082f0 <__sinit>
 8009f86:	69a3      	ldr	r3, [r4, #24]
 8009f88:	60a3      	str	r3, [r4, #8]
 8009f8a:	89a3      	ldrh	r3, [r4, #12]
 8009f8c:	071a      	lsls	r2, r3, #28
 8009f8e:	d501      	bpl.n	8009f94 <__swbuf_r+0x20>
 8009f90:	6923      	ldr	r3, [r4, #16]
 8009f92:	b943      	cbnz	r3, 8009fa6 <__swbuf_r+0x32>
 8009f94:	4621      	mov	r1, r4
 8009f96:	4628      	mov	r0, r5
 8009f98:	f000 f82a 	bl	8009ff0 <__swsetup_r>
 8009f9c:	b118      	cbz	r0, 8009fa6 <__swbuf_r+0x32>
 8009f9e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009fa2:	4638      	mov	r0, r7
 8009fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fa6:	6823      	ldr	r3, [r4, #0]
 8009fa8:	6922      	ldr	r2, [r4, #16]
 8009faa:	1a98      	subs	r0, r3, r2
 8009fac:	6963      	ldr	r3, [r4, #20]
 8009fae:	b2f6      	uxtb	r6, r6
 8009fb0:	4283      	cmp	r3, r0
 8009fb2:	4637      	mov	r7, r6
 8009fb4:	dc05      	bgt.n	8009fc2 <__swbuf_r+0x4e>
 8009fb6:	4621      	mov	r1, r4
 8009fb8:	4628      	mov	r0, r5
 8009fba:	f7ff fdf7 	bl	8009bac <_fflush_r>
 8009fbe:	2800      	cmp	r0, #0
 8009fc0:	d1ed      	bne.n	8009f9e <__swbuf_r+0x2a>
 8009fc2:	68a3      	ldr	r3, [r4, #8]
 8009fc4:	3b01      	subs	r3, #1
 8009fc6:	60a3      	str	r3, [r4, #8]
 8009fc8:	6823      	ldr	r3, [r4, #0]
 8009fca:	1c5a      	adds	r2, r3, #1
 8009fcc:	6022      	str	r2, [r4, #0]
 8009fce:	701e      	strb	r6, [r3, #0]
 8009fd0:	6962      	ldr	r2, [r4, #20]
 8009fd2:	1c43      	adds	r3, r0, #1
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d004      	beq.n	8009fe2 <__swbuf_r+0x6e>
 8009fd8:	89a3      	ldrh	r3, [r4, #12]
 8009fda:	07db      	lsls	r3, r3, #31
 8009fdc:	d5e1      	bpl.n	8009fa2 <__swbuf_r+0x2e>
 8009fde:	2e0a      	cmp	r6, #10
 8009fe0:	d1df      	bne.n	8009fa2 <__swbuf_r+0x2e>
 8009fe2:	4621      	mov	r1, r4
 8009fe4:	4628      	mov	r0, r5
 8009fe6:	f7ff fde1 	bl	8009bac <_fflush_r>
 8009fea:	2800      	cmp	r0, #0
 8009fec:	d0d9      	beq.n	8009fa2 <__swbuf_r+0x2e>
 8009fee:	e7d6      	b.n	8009f9e <__swbuf_r+0x2a>

08009ff0 <__swsetup_r>:
 8009ff0:	b538      	push	{r3, r4, r5, lr}
 8009ff2:	4b29      	ldr	r3, [pc, #164]	@ (800a098 <__swsetup_r+0xa8>)
 8009ff4:	4605      	mov	r5, r0
 8009ff6:	6818      	ldr	r0, [r3, #0]
 8009ff8:	460c      	mov	r4, r1
 8009ffa:	b118      	cbz	r0, 800a004 <__swsetup_r+0x14>
 8009ffc:	6a03      	ldr	r3, [r0, #32]
 8009ffe:	b90b      	cbnz	r3, 800a004 <__swsetup_r+0x14>
 800a000:	f7fe f976 	bl	80082f0 <__sinit>
 800a004:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a008:	0719      	lsls	r1, r3, #28
 800a00a:	d422      	bmi.n	800a052 <__swsetup_r+0x62>
 800a00c:	06da      	lsls	r2, r3, #27
 800a00e:	d407      	bmi.n	800a020 <__swsetup_r+0x30>
 800a010:	2209      	movs	r2, #9
 800a012:	602a      	str	r2, [r5, #0]
 800a014:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a018:	81a3      	strh	r3, [r4, #12]
 800a01a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a01e:	e033      	b.n	800a088 <__swsetup_r+0x98>
 800a020:	0758      	lsls	r0, r3, #29
 800a022:	d512      	bpl.n	800a04a <__swsetup_r+0x5a>
 800a024:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a026:	b141      	cbz	r1, 800a03a <__swsetup_r+0x4a>
 800a028:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a02c:	4299      	cmp	r1, r3
 800a02e:	d002      	beq.n	800a036 <__swsetup_r+0x46>
 800a030:	4628      	mov	r0, r5
 800a032:	f7ff f8bd 	bl	80091b0 <_free_r>
 800a036:	2300      	movs	r3, #0
 800a038:	6363      	str	r3, [r4, #52]	@ 0x34
 800a03a:	89a3      	ldrh	r3, [r4, #12]
 800a03c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a040:	81a3      	strh	r3, [r4, #12]
 800a042:	2300      	movs	r3, #0
 800a044:	6063      	str	r3, [r4, #4]
 800a046:	6923      	ldr	r3, [r4, #16]
 800a048:	6023      	str	r3, [r4, #0]
 800a04a:	89a3      	ldrh	r3, [r4, #12]
 800a04c:	f043 0308 	orr.w	r3, r3, #8
 800a050:	81a3      	strh	r3, [r4, #12]
 800a052:	6923      	ldr	r3, [r4, #16]
 800a054:	b94b      	cbnz	r3, 800a06a <__swsetup_r+0x7a>
 800a056:	89a3      	ldrh	r3, [r4, #12]
 800a058:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a05c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a060:	d003      	beq.n	800a06a <__swsetup_r+0x7a>
 800a062:	4621      	mov	r1, r4
 800a064:	4628      	mov	r0, r5
 800a066:	f000 f883 	bl	800a170 <__smakebuf_r>
 800a06a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a06e:	f013 0201 	ands.w	r2, r3, #1
 800a072:	d00a      	beq.n	800a08a <__swsetup_r+0x9a>
 800a074:	2200      	movs	r2, #0
 800a076:	60a2      	str	r2, [r4, #8]
 800a078:	6962      	ldr	r2, [r4, #20]
 800a07a:	4252      	negs	r2, r2
 800a07c:	61a2      	str	r2, [r4, #24]
 800a07e:	6922      	ldr	r2, [r4, #16]
 800a080:	b942      	cbnz	r2, 800a094 <__swsetup_r+0xa4>
 800a082:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a086:	d1c5      	bne.n	800a014 <__swsetup_r+0x24>
 800a088:	bd38      	pop	{r3, r4, r5, pc}
 800a08a:	0799      	lsls	r1, r3, #30
 800a08c:	bf58      	it	pl
 800a08e:	6962      	ldrpl	r2, [r4, #20]
 800a090:	60a2      	str	r2, [r4, #8]
 800a092:	e7f4      	b.n	800a07e <__swsetup_r+0x8e>
 800a094:	2000      	movs	r0, #0
 800a096:	e7f7      	b.n	800a088 <__swsetup_r+0x98>
 800a098:	20000064 	.word	0x20000064

0800a09c <_raise_r>:
 800a09c:	291f      	cmp	r1, #31
 800a09e:	b538      	push	{r3, r4, r5, lr}
 800a0a0:	4605      	mov	r5, r0
 800a0a2:	460c      	mov	r4, r1
 800a0a4:	d904      	bls.n	800a0b0 <_raise_r+0x14>
 800a0a6:	2316      	movs	r3, #22
 800a0a8:	6003      	str	r3, [r0, #0]
 800a0aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a0ae:	bd38      	pop	{r3, r4, r5, pc}
 800a0b0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a0b2:	b112      	cbz	r2, 800a0ba <_raise_r+0x1e>
 800a0b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a0b8:	b94b      	cbnz	r3, 800a0ce <_raise_r+0x32>
 800a0ba:	4628      	mov	r0, r5
 800a0bc:	f000 f830 	bl	800a120 <_getpid_r>
 800a0c0:	4622      	mov	r2, r4
 800a0c2:	4601      	mov	r1, r0
 800a0c4:	4628      	mov	r0, r5
 800a0c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0ca:	f000 b817 	b.w	800a0fc <_kill_r>
 800a0ce:	2b01      	cmp	r3, #1
 800a0d0:	d00a      	beq.n	800a0e8 <_raise_r+0x4c>
 800a0d2:	1c59      	adds	r1, r3, #1
 800a0d4:	d103      	bne.n	800a0de <_raise_r+0x42>
 800a0d6:	2316      	movs	r3, #22
 800a0d8:	6003      	str	r3, [r0, #0]
 800a0da:	2001      	movs	r0, #1
 800a0dc:	e7e7      	b.n	800a0ae <_raise_r+0x12>
 800a0de:	2100      	movs	r1, #0
 800a0e0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a0e4:	4620      	mov	r0, r4
 800a0e6:	4798      	blx	r3
 800a0e8:	2000      	movs	r0, #0
 800a0ea:	e7e0      	b.n	800a0ae <_raise_r+0x12>

0800a0ec <raise>:
 800a0ec:	4b02      	ldr	r3, [pc, #8]	@ (800a0f8 <raise+0xc>)
 800a0ee:	4601      	mov	r1, r0
 800a0f0:	6818      	ldr	r0, [r3, #0]
 800a0f2:	f7ff bfd3 	b.w	800a09c <_raise_r>
 800a0f6:	bf00      	nop
 800a0f8:	20000064 	.word	0x20000064

0800a0fc <_kill_r>:
 800a0fc:	b538      	push	{r3, r4, r5, lr}
 800a0fe:	4d07      	ldr	r5, [pc, #28]	@ (800a11c <_kill_r+0x20>)
 800a100:	2300      	movs	r3, #0
 800a102:	4604      	mov	r4, r0
 800a104:	4608      	mov	r0, r1
 800a106:	4611      	mov	r1, r2
 800a108:	602b      	str	r3, [r5, #0]
 800a10a:	f7f8 fac9 	bl	80026a0 <_kill>
 800a10e:	1c43      	adds	r3, r0, #1
 800a110:	d102      	bne.n	800a118 <_kill_r+0x1c>
 800a112:	682b      	ldr	r3, [r5, #0]
 800a114:	b103      	cbz	r3, 800a118 <_kill_r+0x1c>
 800a116:	6023      	str	r3, [r4, #0]
 800a118:	bd38      	pop	{r3, r4, r5, pc}
 800a11a:	bf00      	nop
 800a11c:	20000710 	.word	0x20000710

0800a120 <_getpid_r>:
 800a120:	f7f8 bab6 	b.w	8002690 <_getpid>

0800a124 <__swhatbuf_r>:
 800a124:	b570      	push	{r4, r5, r6, lr}
 800a126:	460c      	mov	r4, r1
 800a128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a12c:	2900      	cmp	r1, #0
 800a12e:	b096      	sub	sp, #88	@ 0x58
 800a130:	4615      	mov	r5, r2
 800a132:	461e      	mov	r6, r3
 800a134:	da0d      	bge.n	800a152 <__swhatbuf_r+0x2e>
 800a136:	89a3      	ldrh	r3, [r4, #12]
 800a138:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a13c:	f04f 0100 	mov.w	r1, #0
 800a140:	bf14      	ite	ne
 800a142:	2340      	movne	r3, #64	@ 0x40
 800a144:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a148:	2000      	movs	r0, #0
 800a14a:	6031      	str	r1, [r6, #0]
 800a14c:	602b      	str	r3, [r5, #0]
 800a14e:	b016      	add	sp, #88	@ 0x58
 800a150:	bd70      	pop	{r4, r5, r6, pc}
 800a152:	466a      	mov	r2, sp
 800a154:	f000 f848 	bl	800a1e8 <_fstat_r>
 800a158:	2800      	cmp	r0, #0
 800a15a:	dbec      	blt.n	800a136 <__swhatbuf_r+0x12>
 800a15c:	9901      	ldr	r1, [sp, #4]
 800a15e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a162:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a166:	4259      	negs	r1, r3
 800a168:	4159      	adcs	r1, r3
 800a16a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a16e:	e7eb      	b.n	800a148 <__swhatbuf_r+0x24>

0800a170 <__smakebuf_r>:
 800a170:	898b      	ldrh	r3, [r1, #12]
 800a172:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a174:	079d      	lsls	r5, r3, #30
 800a176:	4606      	mov	r6, r0
 800a178:	460c      	mov	r4, r1
 800a17a:	d507      	bpl.n	800a18c <__smakebuf_r+0x1c>
 800a17c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a180:	6023      	str	r3, [r4, #0]
 800a182:	6123      	str	r3, [r4, #16]
 800a184:	2301      	movs	r3, #1
 800a186:	6163      	str	r3, [r4, #20]
 800a188:	b003      	add	sp, #12
 800a18a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a18c:	ab01      	add	r3, sp, #4
 800a18e:	466a      	mov	r2, sp
 800a190:	f7ff ffc8 	bl	800a124 <__swhatbuf_r>
 800a194:	9f00      	ldr	r7, [sp, #0]
 800a196:	4605      	mov	r5, r0
 800a198:	4639      	mov	r1, r7
 800a19a:	4630      	mov	r0, r6
 800a19c:	f7ff f87c 	bl	8009298 <_malloc_r>
 800a1a0:	b948      	cbnz	r0, 800a1b6 <__smakebuf_r+0x46>
 800a1a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1a6:	059a      	lsls	r2, r3, #22
 800a1a8:	d4ee      	bmi.n	800a188 <__smakebuf_r+0x18>
 800a1aa:	f023 0303 	bic.w	r3, r3, #3
 800a1ae:	f043 0302 	orr.w	r3, r3, #2
 800a1b2:	81a3      	strh	r3, [r4, #12]
 800a1b4:	e7e2      	b.n	800a17c <__smakebuf_r+0xc>
 800a1b6:	89a3      	ldrh	r3, [r4, #12]
 800a1b8:	6020      	str	r0, [r4, #0]
 800a1ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1be:	81a3      	strh	r3, [r4, #12]
 800a1c0:	9b01      	ldr	r3, [sp, #4]
 800a1c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a1c6:	b15b      	cbz	r3, 800a1e0 <__smakebuf_r+0x70>
 800a1c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1cc:	4630      	mov	r0, r6
 800a1ce:	f000 f81d 	bl	800a20c <_isatty_r>
 800a1d2:	b128      	cbz	r0, 800a1e0 <__smakebuf_r+0x70>
 800a1d4:	89a3      	ldrh	r3, [r4, #12]
 800a1d6:	f023 0303 	bic.w	r3, r3, #3
 800a1da:	f043 0301 	orr.w	r3, r3, #1
 800a1de:	81a3      	strh	r3, [r4, #12]
 800a1e0:	89a3      	ldrh	r3, [r4, #12]
 800a1e2:	431d      	orrs	r5, r3
 800a1e4:	81a5      	strh	r5, [r4, #12]
 800a1e6:	e7cf      	b.n	800a188 <__smakebuf_r+0x18>

0800a1e8 <_fstat_r>:
 800a1e8:	b538      	push	{r3, r4, r5, lr}
 800a1ea:	4d07      	ldr	r5, [pc, #28]	@ (800a208 <_fstat_r+0x20>)
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	4604      	mov	r4, r0
 800a1f0:	4608      	mov	r0, r1
 800a1f2:	4611      	mov	r1, r2
 800a1f4:	602b      	str	r3, [r5, #0]
 800a1f6:	f7f8 fab3 	bl	8002760 <_fstat>
 800a1fa:	1c43      	adds	r3, r0, #1
 800a1fc:	d102      	bne.n	800a204 <_fstat_r+0x1c>
 800a1fe:	682b      	ldr	r3, [r5, #0]
 800a200:	b103      	cbz	r3, 800a204 <_fstat_r+0x1c>
 800a202:	6023      	str	r3, [r4, #0]
 800a204:	bd38      	pop	{r3, r4, r5, pc}
 800a206:	bf00      	nop
 800a208:	20000710 	.word	0x20000710

0800a20c <_isatty_r>:
 800a20c:	b538      	push	{r3, r4, r5, lr}
 800a20e:	4d06      	ldr	r5, [pc, #24]	@ (800a228 <_isatty_r+0x1c>)
 800a210:	2300      	movs	r3, #0
 800a212:	4604      	mov	r4, r0
 800a214:	4608      	mov	r0, r1
 800a216:	602b      	str	r3, [r5, #0]
 800a218:	f7f8 fab2 	bl	8002780 <_isatty>
 800a21c:	1c43      	adds	r3, r0, #1
 800a21e:	d102      	bne.n	800a226 <_isatty_r+0x1a>
 800a220:	682b      	ldr	r3, [r5, #0]
 800a222:	b103      	cbz	r3, 800a226 <_isatty_r+0x1a>
 800a224:	6023      	str	r3, [r4, #0]
 800a226:	bd38      	pop	{r3, r4, r5, pc}
 800a228:	20000710 	.word	0x20000710

0800a22c <_init>:
 800a22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a22e:	bf00      	nop
 800a230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a232:	bc08      	pop	{r3}
 800a234:	469e      	mov	lr, r3
 800a236:	4770      	bx	lr

0800a238 <_fini>:
 800a238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a23a:	bf00      	nop
 800a23c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a23e:	bc08      	pop	{r3}
 800a240:	469e      	mov	lr, r3
 800a242:	4770      	bx	lr
